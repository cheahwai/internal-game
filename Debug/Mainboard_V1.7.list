
Mainboard_V1.7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021bec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000144c  08021d80  08021d80  00031d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080231cc  080231cc  00040794  2**0
                  CONTENTS
  4 .ARM          00000008  080231cc  080231cc  000331cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080231d4  080231d4  00040794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080231d4  080231d4  000331d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080231d8  080231d8  000331d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000794  20000000  080231dc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a04c  20000798  08023970  00040798  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000a7e4  08023970  0004a7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007fbc5  00000000  00000000  000407c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a775  00000000  00000000  000c0389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002870  00000000  00000000  000cab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002500  00000000  00000000  000cd370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031400  00000000  00000000  000cf870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004278d  00000000  00000000  00100c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea45d  00000000  00000000  001433fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022d85a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bda0  00000000  00000000  0022d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000798 	.word	0x20000798
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021d64 	.word	0x08021d64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000079c 	.word	0x2000079c
 80001cc:	08021d64 	.word	0x08021d64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ADC_DMAxInit>:
 * 						  ChannelNo					Specifies the Number of channels that will be converted
 * Function Return		: None
 * Function Example		: ADC_DMA_Init(&adc1,&hadc2,&hdma_adc1,2);
 */
void ADC_DMAxInit(ADC_t* ADC_t,ADC_HandleTypeDef* hadcx,DMA_HandleTypeDef* hdma_adcx, uint32_t ChannelNo)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]


	IRQn_Type nvic;

	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	4b73      	ldr	r3, [pc, #460]	; (80011cc <ADC_DMAxInit+0x1e0>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a72      	ldr	r2, [pc, #456]	; (80011cc <ADC_DMAxInit+0x1e0>)
 8001004:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b70      	ldr	r3, [pc, #448]	; (80011cc <ADC_DMAxInit+0x1e0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
	ADC_t->ADC_number = ChannelNo;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	711a      	strb	r2, [r3, #4]
	ADC_t->ADC_rank = 1;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2201      	movs	r2, #1
 8001022:	715a      	strb	r2, [r3, #5]
	ADC_t->ADC_valuep = ADC_t->ADC_value;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f103 020c 	add.w	r2, r3, #12
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	609a      	str	r2, [r3, #8]
	ADC_t->hadcx = hadcx;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]



	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	if(hadcx == &hadc1){
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4a66      	ldr	r2, [pc, #408]	; (80011d0 <ADC_DMAxInit+0x1e4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d10a      	bne.n	8001052 <ADC_DMAxInit+0x66>
		hadcx->Instance = ADC1;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4a65      	ldr	r2, [pc, #404]	; (80011d4 <ADC_DMAxInit+0x1e8>)
 8001040:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a64      	ldr	r2, [pc, #400]	; (80011d8 <ADC_DMAxInit+0x1ec>)
 8001046:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream0_IRQn;
 8001048:	2338      	movs	r3, #56	; 0x38
 800104a:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	e01e      	b.n	8001090 <ADC_DMAxInit+0xa4>
	}else if(hadcx == &hadc2){
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4a61      	ldr	r2, [pc, #388]	; (80011dc <ADC_DMAxInit+0x1f0>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10b      	bne.n	8001072 <ADC_DMAxInit+0x86>
		hadcx->Instance = ADC2;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	4a60      	ldr	r2, [pc, #384]	; (80011e0 <ADC_DMAxInit+0x1f4>)
 800105e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream2;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a60      	ldr	r2, [pc, #384]	; (80011e4 <ADC_DMAxInit+0x1f8>)
 8001064:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream2_IRQn;
 8001066:	233a      	movs	r3, #58	; 0x3a
 8001068:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_1;
 800106a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	e00e      	b.n	8001090 <ADC_DMAxInit+0xa4>
	}else if (hadcx == &hadc3){
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	4a5c      	ldr	r2, [pc, #368]	; (80011e8 <ADC_DMAxInit+0x1fc>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10a      	bne.n	8001090 <ADC_DMAxInit+0xa4>
		hadcx->Instance = ADC3;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4a5b      	ldr	r2, [pc, #364]	; (80011ec <ADC_DMAxInit+0x200>)
 800107e:	601a      	str	r2, [r3, #0]
		hdma_adcx->Instance = DMA2_Stream1;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <ADC_DMAxInit+0x204>)
 8001084:	601a      	str	r2, [r3, #0]
		nvic = DMA2_Stream1_IRQn;
 8001086:	2339      	movs	r3, #57	; 0x39
 8001088:	77fb      	strb	r3, [r7, #31]
		DMA_CHANNEL = DMA_CHANNEL_2;
 800108a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800108e:	61bb      	str	r3, [r7, #24]
	}


	hadcx->Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001096:	605a      	str	r2, [r3, #4]
	hadcx->Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
	hadcx->Init.ScanConvMode = ENABLE;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
	hadcx->Init.ContinuousConvMode = ENABLE;
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2201      	movs	r2, #1
 80010a8:	761a      	strb	r2, [r3, #24]
	hadcx->Init.DiscontinuousConvMode = DISABLE;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
	hadcx->Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadcx->Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <ADC_DMAxInit+0x208>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
	hadcx->Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
	hadcx->Init.NbrOfConversion = ChannelNo;
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	61da      	str	r2, [r3, #28]
	hadcx->Init.DMAContinuousRequests = ENABLE;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadcx->Init.EOCSelection = DISABLE;
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
	hadcx->Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2201      	movs	r2, #1
 80010dc:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(hadcx) != HAL_OK)
 80010de:	68b8      	ldr	r0, [r7, #8]
 80010e0:	f010 fc18 	bl	8011914 <HAL_ADC_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <ADC_DMAxInit+0x102>
	{
		Error_Handler();
 80010ea:	f003 fee9 	bl	8004ec0 <Error_Handler>
	}

	hdma_adcx->Init.Channel = DMA_CHANNEL;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
	hdma_adcx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
	hdma_adcx->Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
	hdma_adcx->Init.MemInc = DMA_MINC_ENABLE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001106:	611a      	str	r2, [r3, #16]
	hdma_adcx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800110e:	615a      	str	r2, [r3, #20]
	hdma_adcx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001116:	619a      	str	r2, [r3, #24]
	hdma_adcx->Init.Mode = DMA_CIRCULAR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800111e:	61da      	str	r2, [r3, #28]
	hdma_adcx->Init.Priority = DMA_PRIORITY_HIGH;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001126:	621a      	str	r2, [r3, #32]
	hdma_adcx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_adcx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_adcx->Init.MemBurst = DMA_MBURST_INC4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_adcx->Init.PeriphBurst = DMA_PBURST_INC4;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_adcx) != HAL_OK)
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f011 ffa7 	bl	8013098 <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <ADC_DMAxInit+0x168>
	{
		Error_Handler();
 8001150:	f003 feb6 	bl	8004ec0 <Error_Handler>
	}

	__HAL_LINKDMA(hadcx,DMA_Handle,*hdma_adcx);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	639a      	str	r2, [r3, #56]	; 0x38

	if(hadcx == &hadc1){
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <ADC_DMAxInit+0x1e4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d10c      	bne.n	8001182 <ADC_DMAxInit+0x196>
		HAL_NVIC_SetPriority(nvic, ADC1_DMA_IRQ_PRIO ,0);
 8001168:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800116c:	2200      	movs	r2, #0
 800116e:	210e      	movs	r1, #14
 8001170:	4618      	mov	r0, r3
 8001172:	f011 ff4b 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8001176:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800117a:	4618      	mov	r0, r3
 800117c:	f011 ff62 	bl	8013044 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(nvic);
	}else if (hadcx == &hadc3){
		HAL_NVIC_SetPriority(nvic, ADC3_DMA_IRQ_PRIO ,0);
		HAL_NVIC_EnableIRQ(nvic);
	}
}
 8001180:	e020      	b.n	80011c4 <ADC_DMAxInit+0x1d8>
	}else if(hadcx == &hadc2){
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	4a15      	ldr	r2, [pc, #84]	; (80011dc <ADC_DMAxInit+0x1f0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10c      	bne.n	80011a4 <ADC_DMAxInit+0x1b8>
		HAL_NVIC_SetPriority(nvic, ADC2_DMA_IRQ_PRIO ,0);
 800118a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800118e:	2200      	movs	r2, #0
 8001190:	210b      	movs	r1, #11
 8001192:	4618      	mov	r0, r3
 8001194:	f011 ff3a 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8001198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800119c:	4618      	mov	r0, r3
 800119e:	f011 ff51 	bl	8013044 <HAL_NVIC_EnableIRQ>
}
 80011a2:	e00f      	b.n	80011c4 <ADC_DMAxInit+0x1d8>
	}else if (hadcx == &hadc3){
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <ADC_DMAxInit+0x1fc>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d10b      	bne.n	80011c4 <ADC_DMAxInit+0x1d8>
		HAL_NVIC_SetPriority(nvic, ADC3_DMA_IRQ_PRIO ,0);
 80011ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011b0:	2200      	movs	r2, #0
 80011b2:	210e      	movs	r1, #14
 80011b4:	4618      	mov	r0, r3
 80011b6:	f011 ff29 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80011ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011be:	4618      	mov	r0, r3
 80011c0:	f011 ff40 	bl	8013044 <HAL_NVIC_EnableIRQ>
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	20006df8 	.word	0x20006df8
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40026410 	.word	0x40026410
 80011dc:	20006d50 	.word	0x20006d50
 80011e0:	40012100 	.word	0x40012100
 80011e4:	40026440 	.word	0x40026440
 80011e8:	20006e40 	.word	0x20006e40
 80011ec:	40012200 	.word	0x40012200
 80011f0:	40026428 	.word	0x40026428
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <ADC_Channel_Config>:
 * 						  DMA_GPIO_Pin				DMA pin
 * Function Return		: None
 * Function Example		: ADC_Channel_Config(&adc1,ADC_CHANNEL_10,IP16_Analog1_PIN);
 */
void ADC_Channel_Config(ADC_t* ADC_t,uint32_t ADC_Channel, GPIO_TypeDef* DMA_GPIOx, uint16_t DMA_GPIO_Pin)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	807b      	strh	r3, [r7, #2]

	GPIOPinsInit (DMA_GPIOx, DMA_GPIO_Pin, GPIO_MODE_ANALOG, GPIO_SPEED_FREQ_VERY_HIGH,  GPIO_NOPULL);
 8001206:	8879      	ldrh	r1, [r7, #2]
 8001208:	2300      	movs	r3, #0
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2303      	movs	r3, #3
 800120e:	2203      	movs	r2, #3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f971 	bl	80014f8 <GPIOPinsInit>

	ADC_ChannelConfTypeDef sConfig = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_Channel;
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	613b      	str	r3, [r7, #16]
	sConfig.Rank = (ADC_t->ADC_rank)++;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	b2d1      	uxtb	r1, r2
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	7151      	strb	r1, [r2, #5]
 8001234:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES ;
 8001236:	2306      	movs	r3, #6
 8001238:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(ADC_t->hadcx, &sConfig) != HAL_OK)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0210 	add.w	r2, r7, #16
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f010 fcb9 	bl	8011bbc <HAL_ADC_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <ADC_Channel_Config+0x5c>
	{
		Error_Handler();
 8001250:	f003 fe36 	bl	8004ec0 <Error_Handler>
	}

	HAL_ADC_Start_DMA(ADC_t->hadcx, (uint32_t *)ADC_t->ADC_valuep, ADC_t->ADC_number);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6899      	ldr	r1, [r3, #8]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	791b      	ldrb	r3, [r3, #4]
 8001260:	461a      	mov	r2, r3
 8001262:	f010 fb9b 	bl	801199c <HAL_ADC_Start_DMA>

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <BDCInit>:
 * Function Return		: None
 * Function Example		: BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 * 						  BDCInit(&BDC2, &htim3, TIM_CHANNEL_1, GPIO, GPIOA, GPIO_Pin_9, GPIOA, GPIO_Pin_10);
 */

void BDCInit(BDC_t* bdc,TIM_HandleTypeDef* htimx,uint32_t Channel, BCDDIRPINType Dirpintype, ...){
 800126e:	b408      	push	{r3}
 8001270:	b580      	push	{r7, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af02      	add	r7, sp, #8
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]

	bdc->htim = htimx;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	61da      	str	r2, [r3, #28]
	bdc->Channel = Channel;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	621a      	str	r2, [r3, #32]
	bdc->Dirpintype =  Dirpintype;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800128e:	701a      	strb	r2, [r3, #0]

	va_list pinconfig;
	va_start(pinconfig, Dirpintype);
 8001290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001294:	617b      	str	r3, [r7, #20]

	if( bdc->Dirpintype == GPIO){
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d12e      	bne.n	80012fc <BDCInit+0x8e>

		bdc->GPIOx_DIR1 = va_arg(pinconfig, GPIO_TypeDef*);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	1d1a      	adds	r2, r3, #4
 80012a2:	617a      	str	r2, [r7, #20]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	605a      	str	r2, [r3, #4]
		bdc->GPIO_Pin_DIR1	= va_arg(pinconfig, int);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	1d1a      	adds	r2, r3, #4
 80012ae:	617a      	str	r2, [r7, #20]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	811a      	strh	r2, [r3, #8]
		bdc->GPIOx_DIR2 = va_arg(pinconfig, GPIO_TypeDef*);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	1d1a      	adds	r2, r3, #4
 80012bc:	617a      	str	r2, [r7, #20]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	60da      	str	r2, [r3, #12]
		bdc->GPIO_Pin_DIR2	= va_arg(pinconfig, int);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1d1a      	adds	r2, r3, #4
 80012c8:	617a      	str	r2, [r7, #20]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	821a      	strh	r2, [r3, #16]



		GPIOPinsInit(bdc->GPIOx_DIR1, bdc->GPIO_Pin_DIR1,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6858      	ldr	r0, [r3, #4]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8919      	ldrh	r1, [r3, #8]
 80012da:	2301      	movs	r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2302      	movs	r3, #2
 80012e0:	2201      	movs	r2, #1
 80012e2:	f000 f909 	bl	80014f8 <GPIOPinsInit>
		GPIOPinsInit(bdc->GPIOx_DIR2, bdc->GPIO_Pin_DIR2,GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	68d8      	ldr	r0, [r3, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	8a19      	ldrh	r1, [r3, #16]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2302      	movs	r3, #2
 80012f4:	2201      	movs	r2, #1
 80012f6:	f000 f8ff 	bl	80014f8 <GPIOPinsInit>
 80012fa:	e017      	b.n	800132c <BDCInit+0xbe>

	}else if(bdc->Dirpintype == SHIFTREG){
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d113      	bne.n	800132c <BDCInit+0xbe>

		bdc->shiftreg = va_arg(pinconfig, byte_t *);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	1d1a      	adds	r2, r3, #4
 8001308:	617a      	str	r2, [r7, #20]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	615a      	str	r2, [r3, #20]
		bdc->dir1 = va_arg(pinconfig, int);
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	1d1a      	adds	r2, r3, #4
 8001314:	617a      	str	r2, [r7, #20]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	761a      	strb	r2, [r3, #24]
		bdc->dir2 = va_arg(pinconfig, int);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	1d1a      	adds	r2, r3, #4
 8001322:	617a      	str	r2, [r7, #20]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	765a      	strb	r2, [r3, #25]
	}

	va_end(pinconfig);
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <BDCInit+0xd2>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800133e:	e018      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	2b04      	cmp	r3, #4
 8001346:	d105      	bne.n	8001354 <BDCInit+0xe6>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001352:	e00e      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	2b08      	cmp	r3, #8
 800135a:	d105      	bne.n	8001368 <BDCInit+0xfa>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001366:	e004      	b.n	8001372 <BDCInit+0x104>
	__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), 0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800137c:	b001      	add	sp, #4
 800137e:	4770      	bx	lr

08001380 <WriteBDC>:
 * Function Return		: None
 * Function Example		: WriteBDC(&BDC1,20000);
 */

void WriteBDC(BDC_t* bdc, int32_t pwm)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]

	if(pwm >= 0){
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db52      	blt.n	8001436 <WriteBDC+0xb6>

		//*(bdc-> speed) = pwm;
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d105      	bne.n	80013a4 <WriteBDC+0x24>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
 80013a2:	e018      	b.n	80013d6 <WriteBDC+0x56>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d105      	bne.n	80013b8 <WriteBDC+0x38>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
 80013b6:	e00e      	b.n	80013d6 <WriteBDC+0x56>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d105      	bne.n	80013cc <WriteBDC+0x4c>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ca:	e004      	b.n	80013d6 <WriteBDC+0x56>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40

		if( bdc->Dirpintype == GPIO){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d110      	bne.n	8001400 <WriteBDC+0x80>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_SET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6858      	ldr	r0, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	891b      	ldrh	r3, [r3, #8]
 80013e6:	2201      	movs	r2, #1
 80013e8:	4619      	mov	r1, r3
 80013ea:	f012 fff3 	bl	80143d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_RESET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68d8      	ldr	r0, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8a1b      	ldrh	r3, [r3, #16]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	f012 ffeb 	bl	80143d4 <HAL_GPIO_WritePin>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
			bdc->shiftreg->Byte |= bdc->dir2;

		}
	}
}
 80013fe:	e076      	b.n	80014ee <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d172      	bne.n	80014ee <WriteBDC+0x16e>
			bdc->shiftreg->Byte |= bdc->dir1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	7819      	ldrb	r1, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e1a      	ldrb	r2, [r3, #24]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	430a      	orrs	r2, r1
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir2);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	7819      	ldrb	r1, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7e5b      	ldrb	r3, [r3, #25]
 8001426:	43db      	mvns	r3, r3
 8001428:	b2da      	uxtb	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	400a      	ands	r2, r1
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	e05b      	b.n	80014ee <WriteBDC+0x16e>
	}else if (pwm < 0){
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	da58      	bge.n	80014ee <WriteBDC+0x16e>
		__HAL_TIM_SET_COMPARE(bdc->htim, (bdc->Channel), pwm*(-1));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d106      	bne.n	8001452 <WriteBDC+0xd2>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	425a      	negs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
 8001450:	e01e      	b.n	8001490 <WriteBDC+0x110>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	2b04      	cmp	r3, #4
 8001458:	d107      	bne.n	800146a <WriteBDC+0xea>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	4259      	negs	r1, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	460b      	mov	r3, r1
 8001466:	6393      	str	r3, [r2, #56]	; 0x38
 8001468:	e012      	b.n	8001490 <WriteBDC+0x110>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b08      	cmp	r3, #8
 8001470:	d107      	bne.n	8001482 <WriteBDC+0x102>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	4259      	negs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001480:	e006      	b.n	8001490 <WriteBDC+0x110>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	4259      	negs	r1, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	460b      	mov	r3, r1
 800148e:	6413      	str	r3, [r2, #64]	; 0x40
		if( bdc->Dirpintype == GPIO){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d110      	bne.n	80014ba <WriteBDC+0x13a>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR1,bdc->GPIO_Pin_DIR1,GPIO_PIN_RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6858      	ldr	r0, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	891b      	ldrh	r3, [r3, #8]
 80014a0:	2200      	movs	r2, #0
 80014a2:	4619      	mov	r1, r3
 80014a4:	f012 ff96 	bl	80143d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(bdc->GPIOx_DIR2,bdc->GPIO_Pin_DIR2,GPIO_PIN_SET);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68d8      	ldr	r0, [r3, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	8a1b      	ldrh	r3, [r3, #16]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4619      	mov	r1, r3
 80014b4:	f012 ff8e 	bl	80143d4 <HAL_GPIO_WritePin>
}
 80014b8:	e019      	b.n	80014ee <WriteBDC+0x16e>
		}else if(bdc->Dirpintype == SHIFTREG){
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d115      	bne.n	80014ee <WriteBDC+0x16e>
			bdc->shiftreg->Byte &= (uint8_t)~((uint8_t)bdc->dir1);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	7819      	ldrb	r1, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	400a      	ands	r2, r1
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	701a      	strb	r2, [r3, #0]
			bdc->shiftreg->Byte |= bdc->dir2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	7819      	ldrb	r1, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e5a      	ldrb	r2, [r3, #25]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	701a      	strb	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <GPIOPinsInit>:
 * Function Return		: None
 * Function Example		: GPIOPinsInit(GPIOA, GPIO_Pin_2, GPIO_Mode_OUT, GPIO_OType_PP, GPIO_Speed_50MHz, GPIO_PuPd_UP);
 */

void GPIOPinsInit (GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin,uint32_t Mode, uint32_t GPIO_Speed,  uint32_t GPIO_PuPd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b092      	sub	sp, #72	; 0x48
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

	switch((uint32_t)GPIOx){
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a6a      	ldr	r2, [pc, #424]	; (80016c4 <GPIOPinsInit+0x1cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	f000 80af 	beq.w	8001680 <GPIOPinsInit+0x188>
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <GPIOPinsInit+0x1cc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	f200 80ba 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800152a:	4a67      	ldr	r2, [pc, #412]	; (80016c8 <GPIOPinsInit+0x1d0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	f000 8098 	beq.w	8001662 <GPIOPinsInit+0x16a>
 8001532:	4a65      	ldr	r2, [pc, #404]	; (80016c8 <GPIOPinsInit+0x1d0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	f200 80b2 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800153a:	4a64      	ldr	r2, [pc, #400]	; (80016cc <GPIOPinsInit+0x1d4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	f000 8081 	beq.w	8001644 <GPIOPinsInit+0x14c>
 8001542:	4a62      	ldr	r2, [pc, #392]	; (80016cc <GPIOPinsInit+0x1d4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	f200 80aa 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 800154a:	4a61      	ldr	r2, [pc, #388]	; (80016d0 <GPIOPinsInit+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d06a      	beq.n	8001626 <GPIOPinsInit+0x12e>
 8001550:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <GPIOPinsInit+0x1d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	f200 80a3 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001558:	4a5e      	ldr	r2, [pc, #376]	; (80016d4 <GPIOPinsInit+0x1dc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d054      	beq.n	8001608 <GPIOPinsInit+0x110>
 800155e:	4a5d      	ldr	r2, [pc, #372]	; (80016d4 <GPIOPinsInit+0x1dc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f200 809c 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001566:	4a5c      	ldr	r2, [pc, #368]	; (80016d8 <GPIOPinsInit+0x1e0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d03e      	beq.n	80015ea <GPIOPinsInit+0xf2>
 800156c:	4a5a      	ldr	r2, [pc, #360]	; (80016d8 <GPIOPinsInit+0x1e0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	f200 8095 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001574:	4a59      	ldr	r2, [pc, #356]	; (80016dc <GPIOPinsInit+0x1e4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d028      	beq.n	80015cc <GPIOPinsInit+0xd4>
 800157a:	4a58      	ldr	r2, [pc, #352]	; (80016dc <GPIOPinsInit+0x1e4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f200 808e 	bhi.w	800169e <GPIOPinsInit+0x1a6>
 8001582:	4a57      	ldr	r2, [pc, #348]	; (80016e0 <GPIOPinsInit+0x1e8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d003      	beq.n	8001590 <GPIOPinsInit+0x98>
 8001588:	4a56      	ldr	r2, [pc, #344]	; (80016e4 <GPIOPinsInit+0x1ec>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00f      	beq.n	80015ae <GPIOPinsInit+0xb6>
	break;

	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
	break;

	default: break;
 800158e:	e086      	b.n	800169e <GPIOPinsInit+0x1a6>
	case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
 8001594:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	4a53      	ldr	r2, [pc, #332]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6313      	str	r3, [r2, #48]	; 0x30
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
 80015aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	break;
 80015ac:	e078      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a4c      	ldr	r2, [pc, #304]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	break;
 80015ca:	e069      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	break;
 80015e8:	e05a      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a3d      	ldr	r2, [pc, #244]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b3b      	ldr	r3, [pc, #236]	; (80016e8 <GPIOPinsInit+0x1f0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	break;
 8001606:	e04b      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	6a3b      	ldr	r3, [r7, #32]
	break;
 8001624:	e03c      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001630:	f043 0320 	orr.w	r3, r3, #32
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0320 	and.w	r3, r3, #32
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	69fb      	ldr	r3, [r7, #28]
	break;
 8001642:	e02d      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800164e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]
	break;
 8001660:	e01e      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800166c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
	break;
 800167e:	e00f      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <GPIOPinsInit+0x1f0>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <GPIOPinsInit+0x1f0>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
	break;
 800169c:	e000      	b.n	80016a0 <GPIOPinsInit+0x1a8>
	default: break;
 800169e:	bf00      	nop
	}


	GPIO_InitStruct.Pin = GPIO_Pin;
 80016a0:	897b      	ldrh	r3, [r7, #10]
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Mode = Mode;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PuPd;
 80016a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_Speed;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80016b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016b4:	4619      	mov	r1, r3
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f012 fbdc 	bl	8013e74 <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3748      	adds	r7, #72	; 0x48
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40022000 	.word	0x40022000
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400
 80016e8:	40023800 	.word	0x40023800

080016ec <PWMTimeBaseInit>:
 * 						  Prescaler 	Prescaler value to divide TIM clock (1 to 65535)
 * Function Return		: None
 * Function Example		: PWMTimeBaseInit(&htim3, 20000, 84);
 */
void PWMTimeBaseInit(TIM_HandleTypeDef* htimx, uint32_t Period, uint32_t Prescaler)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	f107 0310 	add.w	r3, r7, #16
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]


	if(htimx == &htim1){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4a52      	ldr	r2, [pc, #328]	; (800185c <PWMTimeBaseInit+0x170>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d103      	bne.n	8001720 <PWMTimeBaseInit+0x34>
		htimx->Instance = TIM1;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <PWMTimeBaseInit+0x174>)
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e057      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim2)	{
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a50      	ldr	r2, [pc, #320]	; (8001864 <PWMTimeBaseInit+0x178>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d104      	bne.n	8001732 <PWMTimeBaseInit+0x46>
		htimx->Instance = TIM2;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e04e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim3)	{
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <PWMTimeBaseInit+0x17c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d103      	bne.n	8001742 <PWMTimeBaseInit+0x56>
		htimx->Instance = TIM3;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a4b      	ldr	r2, [pc, #300]	; (800186c <PWMTimeBaseInit+0x180>)
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e046      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim4)	{
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a4a      	ldr	r2, [pc, #296]	; (8001870 <PWMTimeBaseInit+0x184>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d103      	bne.n	8001752 <PWMTimeBaseInit+0x66>
		htimx->Instance = TIM4;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <PWMTimeBaseInit+0x188>)
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e03e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim5)	{
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a48      	ldr	r2, [pc, #288]	; (8001878 <PWMTimeBaseInit+0x18c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d103      	bne.n	8001762 <PWMTimeBaseInit+0x76>
		htimx->Instance = TIM5;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a47      	ldr	r2, [pc, #284]	; (800187c <PWMTimeBaseInit+0x190>)
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	e036      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim8)	{
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a46      	ldr	r2, [pc, #280]	; (8001880 <PWMTimeBaseInit+0x194>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d103      	bne.n	8001772 <PWMTimeBaseInit+0x86>
		htimx->Instance = TIM8;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	4a45      	ldr	r2, [pc, #276]	; (8001884 <PWMTimeBaseInit+0x198>)
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e02e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim9)	{
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4a44      	ldr	r2, [pc, #272]	; (8001888 <PWMTimeBaseInit+0x19c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d103      	bne.n	8001782 <PWMTimeBaseInit+0x96>
		htimx->Instance = TIM9;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a43      	ldr	r2, [pc, #268]	; (800188c <PWMTimeBaseInit+0x1a0>)
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e026      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim10)	{
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <PWMTimeBaseInit+0x1a4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d103      	bne.n	8001792 <PWMTimeBaseInit+0xa6>
		htimx->Instance = TIM10;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <PWMTimeBaseInit+0x1a8>)
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e01e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim11)	{
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4a40      	ldr	r2, [pc, #256]	; (8001898 <PWMTimeBaseInit+0x1ac>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d103      	bne.n	80017a2 <PWMTimeBaseInit+0xb6>
		htimx->Instance = TIM11;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a3f      	ldr	r2, [pc, #252]	; (800189c <PWMTimeBaseInit+0x1b0>)
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	e016      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim12)	{
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <PWMTimeBaseInit+0x1b4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d103      	bne.n	80017b2 <PWMTimeBaseInit+0xc6>
		htimx->Instance = TIM12;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <PWMTimeBaseInit+0x1b8>)
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00e      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
	}
	else if(htimx == &htim13)	{
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <PWMTimeBaseInit+0x1bc>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d103      	bne.n	80017c2 <PWMTimeBaseInit+0xd6>
		htimx->Instance = TIM13;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a3b      	ldr	r2, [pc, #236]	; (80018ac <PWMTimeBaseInit+0x1c0>)
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e006      	b.n	80017d0 <PWMTimeBaseInit+0xe4>
		}
	else if(htimx == &htim14)	{
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a3a      	ldr	r2, [pc, #232]	; (80018b0 <PWMTimeBaseInit+0x1c4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d102      	bne.n	80017d0 <PWMTimeBaseInit+0xe4>
		htimx->Instance = TIM14;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <PWMTimeBaseInit+0x1c8>)
 80017ce:	601a      	str	r2, [r3, #0]
		}

	htimx->Init.Prescaler = Prescaler - 1;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1e5a      	subs	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = Period - 1;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2280      	movs	r2, #128	; 0x80
 80017f0:	619a      	str	r2, [r3, #24]
	 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f015 fc18 	bl	8017028 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <PWMTimeBaseInit+0x116>
	  {
	    Error_Handler();
 80017fe:	f003 fb5f 	bl	8004ec0 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f015 ff7e 	bl	8017710 <HAL_TIM_ConfigClockSource>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <PWMTimeBaseInit+0x132>
	  {
	    Error_Handler();
 800181a:	f003 fb51 	bl	8004ec0 <Error_Handler>
	  }
	if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f015 fc75 	bl	801710e <HAL_TIM_PWM_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <PWMTimeBaseInit+0x142>
		{
			Error_Handler();
 800182a:	f003 fb49 	bl	8004ec0 <Error_Handler>
		}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f016 fb63 	bl	8017f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <PWMTimeBaseInit+0x160>
	{
		Error_Handler();
 8001848:	f003 fb3a 	bl	8004ec0 <Error_Handler>
	}


    HAL_TIM_Base_Start(htimx);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f015 fc16 	bl	801707e <HAL_TIM_Base_Start>

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200069ec 	.word	0x200069ec
 8001860:	40010000 	.word	0x40010000
 8001864:	20006af0 	.word	0x20006af0
 8001868:	200067a0 	.word	0x200067a0
 800186c:	40000400 	.word	0x40000400
 8001870:	200065dc 	.word	0x200065dc
 8001874:	40000800 	.word	0x40000800
 8001878:	20006760 	.word	0x20006760
 800187c:	40000c00 	.word	0x40000c00
 8001880:	2000659c 	.word	0x2000659c
 8001884:	40010400 	.word	0x40010400
 8001888:	20006a2c 	.word	0x20006a2c
 800188c:	40014000 	.word	0x40014000
 8001890:	200066bc 	.word	0x200066bc
 8001894:	40014400 	.word	0x40014400
 8001898:	20006904 	.word	0x20006904
 800189c:	40014800 	.word	0x40014800
 80018a0:	20006c10 	.word	0x20006c10
 80018a4:	40001800 	.word	0x40001800
 80018a8:	20006884 	.word	0x20006884
 80018ac:	40001c00 	.word	0x40001c00
 80018b0:	20006bd0 	.word	0x20006bd0
 80018b4:	40002000 	.word	0x40002000

080018b8 <PWMChannelConfig>:
 * 						  GPIO_Pin_x	GPIO_Pin_x of PWM pin(x = 0,1,2,...or 15)
 * Function Return		: None
 * Function Example		: PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 */

void PWMChannelConfig(TIM_HandleTypeDef* htimx, uint32_t Channel , GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin_x){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b09a      	sub	sp, #104	; 0x68
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	807b      	strh	r3, [r7, #2]

	TIM_OC_InitTypeDef sConfigOC = {0};
 80018c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80018ea:	2370      	movs	r3, #112	; 0x70
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.Pulse = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	653b      	str	r3, [r7, #80]	; 0x50
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018f2:	2302      	movs	r3, #2
 80018f4:	657b      	str	r3, [r7, #84]	; 0x54
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80018f6:	2308      	movs	r3, #8
 80018f8:	65bb      	str	r3, [r7, #88]	; 0x58
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	667b      	str	r3, [r7, #100]	; 0x64

	if (HAL_TIM_PWM_ConfigChannel(htimx, &sConfigOC, Channel) != HAL_OK)
 8001906:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	4619      	mov	r1, r3
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f015 fe38 	bl	8017584 <HAL_TIM_PWM_ConfigChannel>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <PWMChannelConfig+0x66>
	{
		Error_Handler();
 800191a:	f003 fad1 	bl	8004ec0 <Error_Handler>
	}

	switch((uint32_t)GPIOx){
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a95      	ldr	r2, [pc, #596]	; (8001b78 <PWMChannelConfig+0x2c0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	f000 80af 	beq.w	8001a86 <PWMChannelConfig+0x1ce>
 8001928:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <PWMChannelConfig+0x2c0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f200 80ba 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <PWMChannelConfig+0x2c4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	f000 8098 	beq.w	8001a68 <PWMChannelConfig+0x1b0>
 8001938:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <PWMChannelConfig+0x2c4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	f200 80b2 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001940:	4a8f      	ldr	r2, [pc, #572]	; (8001b80 <PWMChannelConfig+0x2c8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	f000 8081 	beq.w	8001a4a <PWMChannelConfig+0x192>
 8001948:	4a8d      	ldr	r2, [pc, #564]	; (8001b80 <PWMChannelConfig+0x2c8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f200 80aa 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001950:	4a8c      	ldr	r2, [pc, #560]	; (8001b84 <PWMChannelConfig+0x2cc>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d06a      	beq.n	8001a2c <PWMChannelConfig+0x174>
 8001956:	4a8b      	ldr	r2, [pc, #556]	; (8001b84 <PWMChannelConfig+0x2cc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	f200 80a3 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800195e:	4a8a      	ldr	r2, [pc, #552]	; (8001b88 <PWMChannelConfig+0x2d0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d054      	beq.n	8001a0e <PWMChannelConfig+0x156>
 8001964:	4a88      	ldr	r2, [pc, #544]	; (8001b88 <PWMChannelConfig+0x2d0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	f200 809c 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800196c:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <PWMChannelConfig+0x2d4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d03e      	beq.n	80019f0 <PWMChannelConfig+0x138>
 8001972:	4a86      	ldr	r2, [pc, #536]	; (8001b8c <PWMChannelConfig+0x2d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f200 8095 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 800197a:	4a85      	ldr	r2, [pc, #532]	; (8001b90 <PWMChannelConfig+0x2d8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d028      	beq.n	80019d2 <PWMChannelConfig+0x11a>
 8001980:	4a83      	ldr	r2, [pc, #524]	; (8001b90 <PWMChannelConfig+0x2d8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f200 808e 	bhi.w	8001aa4 <PWMChannelConfig+0x1ec>
 8001988:	4a82      	ldr	r2, [pc, #520]	; (8001b94 <PWMChannelConfig+0x2dc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <PWMChannelConfig+0xde>
 800198e:	4a82      	ldr	r2, [pc, #520]	; (8001b98 <PWMChannelConfig+0x2e0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00f      	beq.n	80019b4 <PWMChannelConfig+0xfc>
		break;

		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
		break;

		default: break;
 8001994:	e086      	b.n	8001aa4 <PWMChannelConfig+0x1ec>
		case GPIOA_BASE:	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
 800199a:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <PWMChannelConfig+0x2e4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 80019b2:	e078      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOB_BASE:	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	633b      	str	r3, [r7, #48]	; 0x30
 80019ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80019d0:	e069      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOC_BASE:	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d6:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b6e      	ldr	r3, [pc, #440]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0304 	and.w	r3, r3, #4
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80019ee:	e05a      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOD_BASE:	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f4:	4b69      	ldr	r3, [pc, #420]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a68      	ldr	r2, [pc, #416]	; (8001b9c <PWMChannelConfig+0x2e4>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 8001a0c:	e04b      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOE_BASE:	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 8001a2a:	e03c      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOF_BASE:	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a36:	f043 0320 	orr.w	r3, r3, #32
 8001a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3c:	4b57      	ldr	r3, [pc, #348]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0320 	and.w	r3, r3, #32
 8001a44:	623b      	str	r3, [r7, #32]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
		break;
 8001a48:	e02d      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOG_BASE:	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a52      	ldr	r2, [pc, #328]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
		break;
 8001a66:	e01e      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOH_BASE:	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a4a      	ldr	r2, [pc, #296]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	69bb      	ldr	r3, [r7, #24]
		break;
 8001a84:	e00f      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		case GPIOI_BASE:	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b41      	ldr	r3, [pc, #260]	; (8001b9c <PWMChannelConfig+0x2e4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
		break;
 8001aa2:	e000      	b.n	8001aa6 <PWMChannelConfig+0x1ee>
		default: break;
 8001aa4:	bf00      	nop
		}

	    GPIO_InitStruct.Pin = GPIO_Pin_x;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
		if(htimx == &htim1){
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a39      	ldr	r2, [pc, #228]	; (8001ba0 <PWMChannelConfig+0x2e8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d102      	bne.n	8001ac4 <PWMChannelConfig+0x20c>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac2:	e04b      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim2)	{
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a37      	ldr	r2, [pc, #220]	; (8001ba4 <PWMChannelConfig+0x2ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <PWMChannelConfig+0x21a>
			GPIO_InitStruct.Alternate = GPIO_AF1_TIM2 ;
 8001acc:	2301      	movs	r3, #1
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad0:	e044      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim3)	{
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <PWMChannelConfig+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d102      	bne.n	8001ae0 <PWMChannelConfig+0x228>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	e03d      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim4)	{
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4a32      	ldr	r2, [pc, #200]	; (8001bac <PWMChannelConfig+0x2f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d102      	bne.n	8001aee <PWMChannelConfig+0x236>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aec:	e036      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim5)	{
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <PWMChannelConfig+0x2f8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d102      	bne.n	8001afc <PWMChannelConfig+0x244>
			GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001af6:	2302      	movs	r3, #2
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001afa:	e02f      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim8)	{
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a2d      	ldr	r2, [pc, #180]	; (8001bb4 <PWMChannelConfig+0x2fc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d102      	bne.n	8001b0a <PWMChannelConfig+0x252>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b04:	2303      	movs	r3, #3
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b08:	e028      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim9)	{
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <PWMChannelConfig+0x300>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d102      	bne.n	8001b18 <PWMChannelConfig+0x260>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001b12:	2303      	movs	r3, #3
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b16:	e021      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim10)	{
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <PWMChannelConfig+0x304>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d102      	bne.n	8001b26 <PWMChannelConfig+0x26e>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001b20:	2303      	movs	r3, #3
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b24:	e01a      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim11)	{
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <PWMChannelConfig+0x308>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d102      	bne.n	8001b34 <PWMChannelConfig+0x27c>
			GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b32:	e013      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim12)	{
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <PWMChannelConfig+0x30c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d102      	bne.n	8001b42 <PWMChannelConfig+0x28a>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b3c:	2309      	movs	r3, #9
 8001b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b40:	e00c      	b.n	8001b5c <PWMChannelConfig+0x2a4>
		}
		else if(htimx == &htim13)	{
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <PWMChannelConfig+0x310>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <PWMChannelConfig+0x298>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b4e:	e005      	b.n	8001b5c <PWMChannelConfig+0x2a4>
			}
		else if(htimx == &htim14)	{
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <PWMChannelConfig+0x314>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <PWMChannelConfig+0x2a4>
			GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001b58:	2309      	movs	r3, #9
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001b5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f012 f986 	bl	8013e74 <HAL_GPIO_Init>


	    HAL_TIM_PWM_Start(htimx,Channel);
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f015 fafa 	bl	8017164 <HAL_TIM_PWM_Start>

}
 8001b70:	bf00      	nop
 8001b72:	3768      	adds	r7, #104	; 0x68
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40022000 	.word	0x40022000
 8001b7c:	40021c00 	.word	0x40021c00
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021400 	.word	0x40021400
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	200069ec 	.word	0x200069ec
 8001ba4:	20006af0 	.word	0x20006af0
 8001ba8:	200067a0 	.word	0x200067a0
 8001bac:	200065dc 	.word	0x200065dc
 8001bb0:	20006760 	.word	0x20006760
 8001bb4:	2000659c 	.word	0x2000659c
 8001bb8:	20006a2c 	.word	0x20006a2c
 8001bbc:	200066bc 	.word	0x200066bc
 8001bc0:	20006904 	.word	0x20006904
 8001bc4:	20006c10 	.word	0x20006c10
 8001bc8:	20006884 	.word	0x20006884
 8001bcc:	20006bd0 	.word	0x20006bd0

08001bd0 <QEIInit>:
 * Function Arguments	: htimx					Pointer to timer handle
 * Function Return		: None
 * Function Example		: QEIInit(&htim1,5,5);  	//Initialize QEI1
 */
void QEIInit(TIM_HandleTypeDef* htimx)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08e      	sub	sp, #56	; 0x38
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	2224      	movs	r2, #36	; 0x24
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f01a fec3 	bl	801c96c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]

	IRQn_Type nvic;

	if(htimx == &htim1){
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a6b      	ldr	r2, [pc, #428]	; (8001da0 <QEIInit+0x1d0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d106      	bne.n	8001c06 <QEIInit+0x36>
		htimx->Instance = TIM1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <QEIInit+0x1d4>)
 8001bfc:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 8001bfe:	2319      	movs	r3, #25
 8001c00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c04:	e036      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim2)	{
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <QEIInit+0x1d8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d107      	bne.n	8001c1e <QEIInit+0x4e>
		htimx->Instance = TIM2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c14:	601a      	str	r2, [r3, #0]
		nvic=TIM2_IRQn;
 8001c16:	231c      	movs	r3, #28
 8001c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c1c:	e02a      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim3)	{
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a62      	ldr	r2, [pc, #392]	; (8001dac <QEIInit+0x1dc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d106      	bne.n	8001c34 <QEIInit+0x64>
		htimx->Instance = TIM3;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a61      	ldr	r2, [pc, #388]	; (8001db0 <QEIInit+0x1e0>)
 8001c2a:	601a      	str	r2, [r3, #0]
		nvic=TIM3_IRQn;
 8001c2c:	231d      	movs	r3, #29
 8001c2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c32:	e01f      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim4)	{
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a5f      	ldr	r2, [pc, #380]	; (8001db4 <QEIInit+0x1e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d106      	bne.n	8001c4a <QEIInit+0x7a>
		htimx->Instance = TIM4;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a5e      	ldr	r2, [pc, #376]	; (8001db8 <QEIInit+0x1e8>)
 8001c40:	601a      	str	r2, [r3, #0]
		nvic=TIM4_IRQn;
 8001c42:	231e      	movs	r3, #30
 8001c44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c48:	e014      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim5)	{
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <QEIInit+0x1ec>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d106      	bne.n	8001c60 <QEIInit+0x90>
		htimx->Instance = TIM5;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a5a      	ldr	r2, [pc, #360]	; (8001dc0 <QEIInit+0x1f0>)
 8001c56:	601a      	str	r2, [r3, #0]
		nvic=TIM5_IRQn;
 8001c58:	2332      	movs	r3, #50	; 0x32
 8001c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001c5e:	e009      	b.n	8001c74 <QEIInit+0xa4>
	}
	else if(htimx == &htim8)	{
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <QEIInit+0x1f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d105      	bne.n	8001c74 <QEIInit+0xa4>
		htimx->Instance = TIM8;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <QEIInit+0x1f8>)
 8001c6c:	601a      	str	r2, [r3, #0]
		nvic=TIM8_UP_TIM13_IRQn;
 8001c6e:	232c      	movs	r3, #44	; 0x2c
 8001c70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	htimx->Init.Prescaler = 0;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = 0xFFFF;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c86:	60da      	str	r2, [r3, #12]
	htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
	htimx->Init.RepetitionCounter = 0;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2280      	movs	r2, #128	; 0x80
 8001c98:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
	sConfig.IC1Filter = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.IC2Filter = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_Encoder_Init(htimx, &sConfig) != HAL_OK)
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f015 fa8b 	bl	80171e0 <HAL_TIM_Encoder_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <QEIInit+0x104>
	{
		Error_Handler();
 8001cd0:	f003 f8f6 	bl	8004ec0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f016 f910 	bl	8017f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <QEIInit+0x122>
	{
		Error_Handler();
 8001cee:	f003 f8e7 	bl	8004ec0 <Error_Handler>
	}

	__HAL_TIM_CLEAR_IT(htimx, TIM_IT_UPDATE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0201 	mvn.w	r2, #1
 8001cfa:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(htimx, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

	if(htimx == &htim1){
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <QEIInit+0x1d0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <QEIInit+0x168>
		HAL_NVIC_SetPriority(nvic, QEI1_IRQ_PRIO, 0);
 8001d14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d18:	2200      	movs	r2, #0
 8001d1a:	210e      	movs	r1, #14
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f011 f975 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d26:	4618      	mov	r0, r3
 8001d28:	f011 f9a8 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d2c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d30:	4618      	mov	r0, r3
 8001d32:	f011 f987 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8001d36:	e02a      	b.n	8001d8e <QEIInit+0x1be>
	}else if(htimx == &htim4){
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <QEIInit+0x1e4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <QEIInit+0x194>
		HAL_NVIC_SetPriority(nvic, QEI4_IRQ_PRIO, 0);
 8001d40:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d44:	2200      	movs	r2, #0
 8001d46:	210e      	movs	r1, #14
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f011 f95f 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d52:	4618      	mov	r0, r3
 8001d54:	f011 f992 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d58:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f011 f971 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8001d62:	e014      	b.n	8001d8e <QEIInit+0x1be>
	}else if(htimx == &htim8){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <QEIInit+0x1f4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d110      	bne.n	8001d8e <QEIInit+0x1be>
		HAL_NVIC_SetPriority(nvic, QEI6_IRQ_PRIO, 0);
 8001d6c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d70:	2200      	movs	r2, #0
 8001d72:	210e      	movs	r1, #14
 8001d74:	4618      	mov	r0, r3
 8001d76:	f011 f949 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8001d7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f011 f97c 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8001d84:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f011 f95b 	bl	8013044 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001d8e:	213c      	movs	r1, #60	; 0x3c
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f015 fab7 	bl	8017304 <HAL_TIM_Encoder_Start>
}
 8001d96:	bf00      	nop
 8001d98:	3738      	adds	r7, #56	; 0x38
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200069ec 	.word	0x200069ec
 8001da4:	40010000 	.word	0x40010000
 8001da8:	20006af0 	.word	0x20006af0
 8001dac:	200067a0 	.word	0x200067a0
 8001db0:	40000400 	.word	0x40000400
 8001db4:	200065dc 	.word	0x200065dc
 8001db8:	40000800 	.word	0x40000800
 8001dbc:	20006760 	.word	0x20006760
 8001dc0:	40000c00 	.word	0x40000c00
 8001dc4:	2000659c 	.word	0x2000659c
 8001dc8:	40010400 	.word	0x40010400

08001dcc <QEIReset>:
 * Function Return		: None
 * Function Example		: QEIReset(QEI1);
 */

void QEIReset(QEI_TypeDef QEIx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]

	switch (QEIx){
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d839      	bhi.n	8001e52 <QEIReset+0x86>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <QEIReset+0x18>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001dfd 	.word	0x08001dfd
 8001de8:	08001e0b 	.word	0x08001e0b
 8001dec:	08001e1b 	.word	0x08001e1b
 8001df0:	08001e29 	.word	0x08001e29
 8001df4:	08001e37 	.word	0x08001e37
 8001df8:	08001e45 	.word	0x08001e45

	case QEI1:	TIM1->CNT = 0;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <QEIReset+0x94>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI1.count = 0;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <QEIReset+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
	break;
 8001e08:	e023      	b.n	8001e52 <QEIReset+0x86>

	case QEI2:	TIM2->CNT = 0;
 8001e0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI2.count = 0;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <QEIReset+0x9c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
	break;
 8001e18:	e01b      	b.n	8001e52 <QEIReset+0x86>

	case QEI3:	TIM3->CNT = 0;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <QEIReset+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI3.count = 0;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <QEIReset+0xa4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
	break;
 8001e26:	e014      	b.n	8001e52 <QEIReset+0x86>

	case QEI4:	TIM4->CNT = 0;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <QEIReset+0xa8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI4.count = 0;
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <QEIReset+0xac>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
	break;
 8001e34:	e00d      	b.n	8001e52 <QEIReset+0x86>

	case QEI5:	TIM5->CNT = 0;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <QEIReset+0xb0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI5.count = 0;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <QEIReset+0xb4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
	break;
 8001e42:	e006      	b.n	8001e52 <QEIReset+0x86>

	case QEI6:	TIM8->CNT = 0;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <QEIReset+0xb8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
	BIOS_QEI6.count = 0;
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <QEIReset+0xbc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
	break;
 8001e50:	bf00      	nop

	}
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40010000 	.word	0x40010000
 8001e64:	20006f4c 	.word	0x20006f4c
 8001e68:	20006f50 	.word	0x20006f50
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	20006f48 	.word	0x20006f48
 8001e74:	40000800 	.word	0x40000800
 8001e78:	20006f70 	.word	0x20006f70
 8001e7c:	40000c00 	.word	0x40000c00
 8001e80:	20006f6c 	.word	0x20006f6c
 8001e84:	40010400 	.word	0x40010400
 8001e88:	20006f74 	.word	0x20006f74

08001e8c <QEISwap>:
 * Function Return		: None
 * Function Example		: QEISwap(QEI1, QEI_Swap);
 */

void QEISwap(QEI_TypeDef QEIx, QEI_Direction_TypeDef swap)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	460a      	mov	r2, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]

	switch(QEIx){
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	f200 80f6 	bhi.w	8002092 <QEISwap+0x206>
 8001ea6:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <QEISwap+0x20>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001f13 	.word	0x08001f13
 8001eb4:	08001f61 	.word	0x08001f61
 8001eb8:	08001faf 	.word	0x08001faf
 8001ebc:	08001ffb 	.word	0x08001ffb
 8001ec0:	08002047 	.word	0x08002047

	case QEI1:	if(swap == QEI_No_Swap){
 8001ec4:	79bb      	ldrb	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <QEISwap+0x5c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001eca:	4b7a      	ldr	r3, [pc, #488]	; (80020b4 <QEISwap+0x228>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <QEISwap+0x228>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 020a 	bic.w	r2, r2, #10
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <QEISwap+0x228>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <QEISwap+0x228>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a12      	ldr	r2, [r2, #32]
 8001ee4:	621a      	str	r2, [r3, #32]
	default: break;

	}

	}
}
 8001ee6:	e0df      	b.n	80020a8 <QEISwap+0x21c>
	else if(swap == QEI_Swap){
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 80dc 	bne.w	80020a8 <QEISwap+0x21c>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim1, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001ef0:	4b70      	ldr	r3, [pc, #448]	; (80020b4 <QEISwap+0x228>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	4b6f      	ldr	r3, [pc, #444]	; (80020b4 <QEISwap+0x228>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 020a 	bic.w	r2, r2, #10
 8001efe:	621a      	str	r2, [r3, #32]
 8001f00:	4b6c      	ldr	r3, [pc, #432]	; (80020b4 <QEISwap+0x228>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a1a      	ldr	r2, [r3, #32]
 8001f06:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <QEISwap+0x228>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0202 	orr.w	r2, r2, #2
 8001f0e:	621a      	str	r2, [r3, #32]
		break;
 8001f10:	e0ca      	b.n	80020a8 <QEISwap+0x21c>
	case QEI2:	if(swap == QEI_No_Swap){
 8001f12:	79bb      	ldrb	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10e      	bne.n	8001f36 <QEISwap+0xaa>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001f18:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <QEISwap+0x22c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <QEISwap+0x22c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020a 	bic.w	r2, r2, #10
 8001f26:	621a      	str	r2, [r3, #32]
 8001f28:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <QEISwap+0x22c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b62      	ldr	r3, [pc, #392]	; (80020b8 <QEISwap+0x22c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a12      	ldr	r2, [r2, #32]
 8001f32:	621a      	str	r2, [r3, #32]
	break;
 8001f34:	e0af      	b.n	8002096 <QEISwap+0x20a>
	else if(swap == QEI_Swap){
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 80ac 	bne.w	8002096 <QEISwap+0x20a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <QEISwap+0x22c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6a1a      	ldr	r2, [r3, #32]
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <QEISwap+0x22c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 020a 	bic.w	r2, r2, #10
 8001f4c:	621a      	str	r2, [r3, #32]
 8001f4e:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <QEISwap+0x22c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <QEISwap+0x22c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0202 	orr.w	r2, r2, #2
 8001f5c:	621a      	str	r2, [r3, #32]
	break;
 8001f5e:	e09a      	b.n	8002096 <QEISwap+0x20a>
	case QEI3:	if(swap == QEI_No_Swap){
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10e      	bne.n	8001f84 <QEISwap+0xf8>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <QEISwap+0x230>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a1a      	ldr	r2, [r3, #32]
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <QEISwap+0x230>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 020a 	bic.w	r2, r2, #10
 8001f74:	621a      	str	r2, [r3, #32]
 8001f76:	4b51      	ldr	r3, [pc, #324]	; (80020bc <QEISwap+0x230>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b50      	ldr	r3, [pc, #320]	; (80020bc <QEISwap+0x230>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a12      	ldr	r2, [r2, #32]
 8001f80:	621a      	str	r2, [r3, #32]
	break;
 8001f82:	e08a      	b.n	800209a <QEISwap+0x20e>
	else if(swap == QEI_Swap){
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	f040 8087 	bne.w	800209a <QEISwap+0x20e>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim3, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <QEISwap+0x230>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6a1a      	ldr	r2, [r3, #32]
 8001f92:	4b4a      	ldr	r3, [pc, #296]	; (80020bc <QEISwap+0x230>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020a 	bic.w	r2, r2, #10
 8001f9a:	621a      	str	r2, [r3, #32]
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <QEISwap+0x230>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a1a      	ldr	r2, [r3, #32]
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <QEISwap+0x230>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0202 	orr.w	r2, r2, #2
 8001faa:	621a      	str	r2, [r3, #32]
	break;
 8001fac:	e075      	b.n	800209a <QEISwap+0x20e>
	case QEI4:	if(swap == QEI_No_Swap){
 8001fae:	79bb      	ldrb	r3, [r7, #6]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10e      	bne.n	8001fd2 <QEISwap+0x146>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8001fb4:	4b42      	ldr	r3, [pc, #264]	; (80020c0 <QEISwap+0x234>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a1a      	ldr	r2, [r3, #32]
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <QEISwap+0x234>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 020a 	bic.w	r2, r2, #10
 8001fc2:	621a      	str	r2, [r3, #32]
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <QEISwap+0x234>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <QEISwap+0x234>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6a12      	ldr	r2, [r2, #32]
 8001fce:	621a      	str	r2, [r3, #32]
	break;
 8001fd0:	e065      	b.n	800209e <QEISwap+0x212>
	else if(swap == QEI_Swap){
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d162      	bne.n	800209e <QEISwap+0x212>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8001fd8:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <QEISwap+0x234>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <QEISwap+0x234>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020a 	bic.w	r2, r2, #10
 8001fe6:	621a      	str	r2, [r3, #32]
 8001fe8:	4b35      	ldr	r3, [pc, #212]	; (80020c0 <QEISwap+0x234>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6a1a      	ldr	r2, [r3, #32]
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <QEISwap+0x234>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0202 	orr.w	r2, r2, #2
 8001ff6:	621a      	str	r2, [r3, #32]
	break;
 8001ff8:	e051      	b.n	800209e <QEISwap+0x212>
	case QEI5:	if(swap == QEI_No_Swap){
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10e      	bne.n	800201e <QEISwap+0x192>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 8002000:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <QEISwap+0x238>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <QEISwap+0x238>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 020a 	bic.w	r2, r2, #10
 800200e:	621a      	str	r2, [r3, #32]
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <QEISwap+0x238>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <QEISwap+0x238>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a12      	ldr	r2, [r2, #32]
 800201a:	621a      	str	r2, [r3, #32]
	break;
 800201c:	e041      	b.n	80020a2 <QEISwap+0x216>
	else if(swap == QEI_Swap){
 800201e:	79bb      	ldrb	r3, [r7, #6]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d13e      	bne.n	80020a2 <QEISwap+0x216>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <QEISwap+0x238>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <QEISwap+0x238>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 020a 	bic.w	r2, r2, #10
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <QEISwap+0x238>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a1a      	ldr	r2, [r3, #32]
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <QEISwap+0x238>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0202 	orr.w	r2, r2, #2
 8002042:	621a      	str	r2, [r3, #32]
	break;
 8002044:	e02d      	b.n	80020a2 <QEISwap+0x216>
	case QEI6:	if(swap == QEI_No_Swap){
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10e      	bne.n	800206a <QEISwap+0x1de>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 800204c:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <QEISwap+0x23c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <QEISwap+0x23c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 020a 	bic.w	r2, r2, #10
 800205a:	621a      	str	r2, [r3, #32]
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <QEISwap+0x23c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <QEISwap+0x23c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6a12      	ldr	r2, [r2, #32]
 8002066:	621a      	str	r2, [r3, #32]
	break;
 8002068:	e01d      	b.n	80020a6 <QEISwap+0x21a>
	else if(swap == QEI_Swap){
 800206a:	79bb      	ldrb	r3, [r7, #6]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d11a      	bne.n	80020a6 <QEISwap+0x21a>
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim8, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <QEISwap+0x23c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <QEISwap+0x23c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 020a 	bic.w	r2, r2, #10
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <QEISwap+0x23c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <QEISwap+0x23c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0202 	orr.w	r2, r2, #2
 800208e:	621a      	str	r2, [r3, #32]
	break;
 8002090:	e009      	b.n	80020a6 <QEISwap+0x21a>
	default: break;
 8002092:	bf00      	nop
 8002094:	e008      	b.n	80020a8 <QEISwap+0x21c>
	break;
 8002096:	bf00      	nop
 8002098:	e006      	b.n	80020a8 <QEISwap+0x21c>
	break;
 800209a:	bf00      	nop
 800209c:	e004      	b.n	80020a8 <QEISwap+0x21c>
	break;
 800209e:	bf00      	nop
 80020a0:	e002      	b.n	80020a8 <QEISwap+0x21c>
	break;
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <QEISwap+0x21c>
	break;
 80020a6:	bf00      	nop
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	200069ec 	.word	0x200069ec
 80020b8:	20006af0 	.word	0x20006af0
 80020bc:	200067a0 	.word	0x200067a0
 80020c0:	200065dc 	.word	0x200065dc
 80020c4:	20006760 	.word	0x20006760
 80020c8:	2000659c 	.word	0x2000659c

080020cc <QEIDelay>:
 * Function Return		: None
 * Function Example		: QEIDelay(100);
 */

void QEIDelay(uint8_t value)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
	uint8_t currentvalues;
	value = value * 8400;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	461a      	mov	r2, r3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	71fb      	strb	r3, [r7, #7]
	while(currentvalues < value)
 80020e2:	e002      	b.n	80020ea <QEIDelay+0x1e>
	{
		currentvalues++;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
	while(currentvalues < value)
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3f8      	bcc.n	80020e4 <QEIDelay+0x18>
	}
	currentvalues = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <QEIRead>:
 * Function Arguments	: QEIx		where x can be 1 to 5.
 * Function Return		: QEI's count with 32 bits with sign.
 * Function Example		: QEIRead(QEI1);
 */

int32_t QEIRead(QEI_TypeDef QEIx){
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]

	int32_t value;
	switch(QEIx){
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	3b01      	subs	r3, #1
 8002112:	2b05      	cmp	r3, #5
 8002114:	d845      	bhi.n	80021a2 <QEIRead+0x9e>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <QEIRead+0x18>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002135 	.word	0x08002135
 8002120:	08002147 	.word	0x08002147
 8002124:	0800215b 	.word	0x0800215b
 8002128:	0800216d 	.word	0x0800216d
 800212c:	0800217f 	.word	0x0800217f
 8002130:	08002191 	.word	0x08002191

	case QEI1:	BIOS_QEI1.poscnt = TIM1-> CNT;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <QEIRead+0xb0>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <QEIRead+0xb4>)
 800213c:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI1.count;
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <QEIRead+0xb4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
	break;
 8002144:	e02e      	b.n	80021a4 <QEIRead+0xa0>

	case QEI2:	BIOS_QEI2.poscnt = TIM2-> CNT;
 8002146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <QEIRead+0xb8>)
 8002150:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI2.count;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <QEIRead+0xb8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]
	break;
 8002158:	e024      	b.n	80021a4 <QEIRead+0xa0>

	case QEI3:	BIOS_QEI3.poscnt = TIM3-> CNT;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <QEIRead+0xbc>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	b29a      	uxth	r2, r3
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <QEIRead+0xc0>)
 8002162:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI3.count;
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <QEIRead+0xc0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
	break;
 800216a:	e01b      	b.n	80021a4 <QEIRead+0xa0>

	case QEI4:	BIOS_QEI4.poscnt = TIM4-> CNT;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <QEIRead+0xc4>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <QEIRead+0xc8>)
 8002174:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI4.count;
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <QEIRead+0xc8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]
	break;
 800217c:	e012      	b.n	80021a4 <QEIRead+0xa0>

	case QEI5:	BIOS_QEI5.poscnt = TIM5-> CNT;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <QEIRead+0xcc>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <QEIRead+0xd0>)
 8002186:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI5.count;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <QEIRead+0xd0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
	break;
 800218e:	e009      	b.n	80021a4 <QEIRead+0xa0>

	case QEI6:	BIOS_QEI6.poscnt = TIM8-> CNT;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <QEIRead+0xd4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	b29a      	uxth	r2, r3
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <QEIRead+0xd8>)
 8002198:	801a      	strh	r2, [r3, #0]
	value = BIOS_QEI6.count;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <QEIRead+0xd8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
	break;
 80021a0:	e000      	b.n	80021a4 <QEIRead+0xa0>

	default: break;
 80021a2:	bf00      	nop
	}

	return value;
 80021a4:	68fb      	ldr	r3, [r7, #12]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	20006f4c 	.word	0x20006f4c
 80021bc:	20006f50 	.word	0x20006f50
 80021c0:	40000400 	.word	0x40000400
 80021c4:	20006f48 	.word	0x20006f48
 80021c8:	40000800 	.word	0x40000800
 80021cc:	20006f70 	.word	0x20006f70
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	20006f6c 	.word	0x20006f6c
 80021d8:	40010400 	.word	0x40010400
 80021dc:	20006f74 	.word	0x20006f74

080021e0 <SHIFTREGInit>:
 * Function Return		: None
 * Function Example		: SHIFTREGInit(&shiftreg, CASCADE_1, GPIOD, GPIO_Pin_0, GPIOD, GPIO_Pin_1, GPIOD, GPIO_Pin_2);
 */

void SHIFTREGInit (shiftreg_t* shiftreg, fSR cascade, GPIO_TypeDef *GPIOx_sck, uint16_t GPIO_Pin_sck,
		           GPIO_TypeDef *GPIOx_rck , uint16_t GPIO_Pin_rck,GPIO_TypeDef *GPIOx_si, uint16_t GPIO_Pin_si){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	72fb      	strb	r3, [r7, #11]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]

	shiftreg->flag = cascade;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	7afa      	ldrb	r2, [r7, #11]
 80021f8:	759a      	strb	r2, [r3, #22]

	shiftreg->GPIOx_sck = GPIOx_sck;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	601a      	str	r2, [r3, #0]
	shiftreg->GPIO_Pin_sck = GPIO_Pin_sck;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	893a      	ldrh	r2, [r7, #8]
 8002204:	809a      	strh	r2, [r3, #4]

	shiftreg->GPIOx_rck = GPIOx_rck;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	609a      	str	r2, [r3, #8]
	shiftreg->GPIO_Pin_rck = GPIO_Pin_rck;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8bba      	ldrh	r2, [r7, #28]
 8002210:	819a      	strh	r2, [r3, #12]

	shiftreg->GPIOx_si = GPIOx_si;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	611a      	str	r2, [r3, #16]
	shiftreg->GPIO_Pin_si = GPIO_Pin_si;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800221c:	829a      	strh	r2, [r3, #20]

	GPIOPinsInit(shiftreg->GPIOx_sck, shiftreg->GPIO_Pin_sck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8899      	ldrh	r1, [r3, #4]
 8002226:	2301      	movs	r3, #1
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2302      	movs	r3, #2
 800222c:	2201      	movs	r2, #1
 800222e:	f7ff f963 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_rck, shiftreg->GPIO_Pin_rck, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6898      	ldr	r0, [r3, #8]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8999      	ldrh	r1, [r3, #12]
 800223a:	2301      	movs	r3, #1
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2302      	movs	r3, #2
 8002240:	2201      	movs	r2, #1
 8002242:	f7ff f959 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit(shiftreg->GPIOx_si, shiftreg->GPIO_Pin_si , GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6918      	ldr	r0, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8a99      	ldrh	r1, [r3, #20]
 800224e:	2301      	movs	r3, #1
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2302      	movs	r3, #2
 8002254:	2201      	movs	r2, #1
 8002256:	f7ff f94f 	bl	80014f8 <GPIOPinsInit>

}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <SHIFTREGShift>:
 * Function Arguments	: shiftreg			pointer to structure
 * Function Return		: None
 * Function Example		: SHIFTREGShift (&shiftreg);
 */

void SHIFTREGShift(shiftreg_t* shiftreg){
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]

	uint8_t out, i, j;

	i = shiftreg->flag;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7d9b      	ldrb	r3, [r3, #22]
 800226e:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	889b      	ldrh	r3, [r3, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	f012 f8aa 	bl	80143d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6898      	ldr	r0, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	899b      	ldrh	r3, [r3, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	4619      	mov	r1, r3
 800228c:	f012 f8a2 	bl	80143d4 <HAL_GPIO_WritePin>

	do{
		out = shiftreg->cast[i].Byte;
 8002290:	7bba      	ldrb	r2, [r7, #14]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3206      	adds	r2, #6
 8002296:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800229a:	73fb      	strb	r3, [r7, #15]
		for (j = 8; j; j--){
 800229c:	2308      	movs	r3, #8
 800229e:	737b      	strb	r3, [r7, #13]
 80022a0:	e02a      	b.n	80022f8 <SHIFTREGShift+0x96>
			(out & 0x80) ? HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_SET) : HAL_GPIO_WritePin(shiftreg->GPIOx_si , shiftreg->GPIO_Pin_si, GPIO_PIN_RESET);
 80022a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da08      	bge.n	80022bc <SHIFTREGShift+0x5a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6918      	ldr	r0, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8a9b      	ldrh	r3, [r3, #20]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4619      	mov	r1, r3
 80022b6:	f012 f88d 	bl	80143d4 <HAL_GPIO_WritePin>
 80022ba:	e007      	b.n	80022cc <SHIFTREGShift+0x6a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6918      	ldr	r0, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8a9b      	ldrh	r3, [r3, #20]
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	f012 f884 	bl	80143d4 <HAL_GPIO_WritePin>
			out <<= 1;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_SET);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	889b      	ldrh	r3, [r3, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	f012 f879 	bl	80143d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(shiftreg->GPIOx_sck , shiftreg->GPIO_Pin_sck, GPIO_PIN_RESET);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	889b      	ldrh	r3, [r3, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	f012 f871 	bl	80143d4 <HAL_GPIO_WritePin>
		for (j = 8; j; j--){
 80022f2:	7b7b      	ldrb	r3, [r7, #13]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	737b      	strb	r3, [r7, #13]
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1d1      	bne.n	80022a2 <SHIFTREGShift+0x40>
		}
	}while(i--);
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	73ba      	strb	r2, [r7, #14]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1c3      	bne.n	8002290 <SHIFTREGShift+0x2e>

	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_SET);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6898      	ldr	r0, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	899b      	ldrh	r3, [r3, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	4619      	mov	r1, r3
 8002314:	f012 f85e 	bl	80143d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(shiftreg->GPIOx_rck , shiftreg->GPIO_Pin_rck, GPIO_PIN_RESET);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6898      	ldr	r0, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	899b      	ldrh	r3, [r3, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f012 f856 	bl	80143d4 <HAL_GPIO_WritePin>

}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_MspInit+0x54>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_MspInit+0x54>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002344:	6453      	str	r3, [r2, #68]	; 0x44
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x54>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_MspInit+0x54>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_MspInit+0x54>)
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_MspInit+0x54>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	210f      	movs	r1, #15
 8002372:	f06f 0001 	mvn.w	r0, #1
 8002376:	f010 fe49 	bl	801300c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_ADC_MspInit+0x8c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_ADC_MspInit+0x30>
  {
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
	  /* Peripheral clock enable */
	  __HAL_RCC_ADC3_CLK_ENABLE();

  }

}
 80023b6:	e026      	b.n	8002406 <HAL_ADC_MspInit+0x7e>
  }else if(hadc->Instance==ADC2 ){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a17      	ldr	r2, [pc, #92]	; (800241c <HAL_ADC_MspInit+0x94>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d10e      	bne.n	80023e0 <HAL_ADC_MspInit+0x58>
	  __HAL_RCC_ADC2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
}
 80023de:	e012      	b.n	8002406 <HAL_ADC_MspInit+0x7e>
  }else if (hadc->Instance==ADC3){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_ADC_MspInit+0x98>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10d      	bne.n	8002406 <HAL_ADC_MspInit+0x7e>
	  __HAL_RCC_ADC3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a09      	ldr	r2, [pc, #36]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_ADC_MspInit+0x90>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
}
 8002406:	bf00      	nop
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40012000 	.word	0x40012000
 8002418:	40023800 	.word	0x40023800
 800241c:	40012100 	.word	0x40012100
 8002420:	40012200 	.word	0x40012200

08002424 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_CAN_MspInit+0x128>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d135      	bne.n	80024b2 <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 800244e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d10d      	bne.n	8002474 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	4a3c      	ldr	r2, [pc, #240]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002466:	6413      	str	r3, [r2, #64]	; 0x40
 8002468:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a35      	ldr	r2, [pc, #212]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002490:	2303      	movs	r3, #3
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024a0:	2309      	movs	r3, #9
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482b      	ldr	r0, [pc, #172]	; (8002558 <HAL_CAN_MspInit+0x134>)
 80024ac:	f011 fce2 	bl	8013e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80024b0:	e048      	b.n	8002544 <HAL_CAN_MspInit+0x120>
  else if(hcan->Instance==CAN2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_CAN_MspInit+0x138>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d143      	bne.n	8002544 <HAL_CAN_MspInit+0x120>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a23      	ldr	r2, [pc, #140]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3301      	adds	r3, #1
 80024de:	4a1c      	ldr	r2, [pc, #112]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_CAN_MspInit+0x12c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10d      	bne.n	8002506 <HAL_CAN_MspInit+0xe2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_CAN_MspInit+0x130>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_CAN_MspInit+0x130>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_CAN_MspInit+0x130>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002522:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002534:	2309      	movs	r3, #9
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4619      	mov	r1, r3
 800253e:	4808      	ldr	r0, [pc, #32]	; (8002560 <HAL_CAN_MspInit+0x13c>)
 8002540:	f011 fc98 	bl	8013e74 <HAL_GPIO_Init>
}
 8002544:	bf00      	nop
 8002546:	3730      	adds	r7, #48	; 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40006400 	.word	0x40006400
 8002550:	200007b4 	.word	0x200007b4
 8002554:	40023800 	.word	0x40023800
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40006800 	.word	0x40006800
 8002560:	40020400 	.word	0x40020400

08002564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_I2C_MspInit+0x190>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12d      	bne.n	80025e2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	4b5b      	ldr	r3, [pc, #364]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a5a      	ldr	r2, [pc, #360]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b58      	ldr	r3, [pc, #352]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b4:	2304      	movs	r3, #4
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	484f      	ldr	r0, [pc, #316]	; (80026fc <HAL_I2C_MspInit+0x198>)
 80025c0:	f011 fc58 	bl	8013e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	4b4b      	ldr	r3, [pc, #300]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	4a4a      	ldr	r2, [pc, #296]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025d2:	6413      	str	r3, [r2, #64]	; 0x40
 80025d4:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025e0:	e083      	b.n	80026ea <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_I2C_MspInit+0x19c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d12d      	bne.n	8002648 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002608:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002612:	2301      	movs	r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800261a:	2304      	movs	r3, #4
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4835      	ldr	r0, [pc, #212]	; (80026fc <HAL_I2C_MspInit+0x198>)
 8002626:	f011 fc25 	bl	8013e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	4b32      	ldr	r3, [pc, #200]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a31      	ldr	r2, [pc, #196]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b2f      	ldr	r3, [pc, #188]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	e050      	b.n	80026ea <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2d      	ldr	r2, [pc, #180]	; (8002704 <HAL_I2C_MspInit+0x1a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d14b      	bne.n	80026ea <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a20      	ldr	r2, [pc, #128]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800268a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002690:	2312      	movs	r3, #18
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002694:	2301      	movs	r3, #1
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800269c:	2304      	movs	r3, #4
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	4818      	ldr	r0, [pc, #96]	; (8002708 <HAL_I2C_MspInit+0x1a4>)
 80026a8:	f011 fbe4 	bl	8013e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b2:	2312      	movs	r3, #18
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026be:	2304      	movs	r3, #4
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c6:	4619      	mov	r1, r3
 80026c8:	4810      	ldr	r0, [pc, #64]	; (800270c <HAL_I2C_MspInit+0x1a8>)
 80026ca:	f011 fbd3 	bl	8013e74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_I2C_MspInit+0x194>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
}
 80026ea:	bf00      	nop
 80026ec:	3738      	adds	r7, #56	; 0x38
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40005400 	.word	0x40005400
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400
 8002700:	40005800 	.word	0x40005800
 8002704:	40005c00 	.word	0x40005c00
 8002708:	40020800 	.word	0x40020800
 800270c:	40020000 	.word	0x40020000

08002710 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	; (80027c8 <HAL_I2C_MspDeInit+0xb8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d116      	bne.n	8002750 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002728:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800272e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002732:	4827      	ldr	r0, [pc, #156]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 8002734:	f011 fd3a 	bl	80141ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800273c:	4824      	ldr	r0, [pc, #144]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 800273e:	f011 fd35 	bl	80141ac <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002742:	201f      	movs	r0, #31
 8002744:	f010 fc8c 	bl	8013060 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002748:	2020      	movs	r0, #32
 800274a:	f010 fc89 	bl	8013060 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800274e:	e036      	b.n	80027be <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_I2C_MspDeInit+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d116      	bne.n	8002788 <HAL_I2C_MspDeInit+0x78>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002760:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276a:	4819      	ldr	r0, [pc, #100]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 800276c:	f011 fd1e 	bl	80141ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002774:	4816      	ldr	r0, [pc, #88]	; (80027d0 <HAL_I2C_MspDeInit+0xc0>)
 8002776:	f011 fd19 	bl	80141ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800277a:	2021      	movs	r0, #33	; 0x21
 800277c:	f010 fc70 	bl	8013060 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002780:	2022      	movs	r0, #34	; 0x22
 8002782:	f010 fc6d 	bl	8013060 <HAL_NVIC_DisableIRQ>
}
 8002786:	e01a      	b.n	80027be <HAL_I2C_MspDeInit+0xae>
  else if(hi2c->Instance==I2C3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_I2C_MspDeInit+0xc8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d115      	bne.n	80027be <HAL_I2C_MspDeInit+0xae>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <HAL_I2C_MspDeInit+0xbc>)
 8002798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800279e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a2:	480e      	ldr	r0, [pc, #56]	; (80027dc <HAL_I2C_MspDeInit+0xcc>)
 80027a4:	f011 fd02 	bl	80141ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80027a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <HAL_I2C_MspDeInit+0xd0>)
 80027ae:	f011 fcfd 	bl	80141ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 80027b2:	2048      	movs	r0, #72	; 0x48
 80027b4:	f010 fc54 	bl	8013060 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 80027b8:	2049      	movs	r0, #73	; 0x49
 80027ba:	f010 fc51 	bl	8013060 <HAL_NVIC_DisableIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40005400 	.word	0x40005400
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40005800 	.word	0x40005800
 80027d8:	40005c00 	.word	0x40005c00
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b091      	sub	sp, #68	; 0x44
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if(htim_pwm->Instance==TIM1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a8d      	ldr	r2, [pc, #564]	; (8002a28 <HAL_TIM_PWM_MspInit+0x244>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10e      	bne.n	8002814 <HAL_TIM_PWM_MspInit+0x30>
		{
			/* Peripheral clock enable */
			__HAL_RCC_TIM1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a8b      	ldr	r2, [pc, #556]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	  {
	    /* Peripheral clock enable */
	    __HAL_RCC_TIM14_CLK_ENABLE();
	  }

}
 8002812:	e102      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d10e      	bne.n	800283c <HAL_TIM_PWM_MspInit+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a81      	ldr	r2, [pc, #516]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
 800282e:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	63bb      	str	r3, [r7, #56]	; 0x38
 8002838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800283a:	e0ee      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7b      	ldr	r2, [pc, #492]	; (8002a30 <HAL_TIM_PWM_MspInit+0x24c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_PWM_MspInit+0x80>
			__HAL_RCC_TIM3_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
 800284a:	4b78      	ldr	r3, [pc, #480]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a77      	ldr	r2, [pc, #476]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b75      	ldr	r3, [pc, #468]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002862:	e0da      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
		else if(htim_pwm->Instance==TIM4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a72      	ldr	r2, [pc, #456]	; (8002a34 <HAL_TIM_PWM_MspInit+0x250>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10e      	bne.n	800288c <HAL_TIM_PWM_MspInit+0xa8>
			__HAL_RCC_TIM4_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	633b      	str	r3, [r7, #48]	; 0x30
 8002872:	4b6e      	ldr	r3, [pc, #440]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a6d      	ldr	r2, [pc, #436]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800288a:	e0c6      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <HAL_TIM_PWM_MspInit+0x254>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10e      	bne.n	80028b4 <HAL_TIM_PWM_MspInit+0xd0>
	    __HAL_RCC_TIM5_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a63      	ldr	r2, [pc, #396]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028a0:	f043 0308 	orr.w	r3, r3, #8
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80028b2:	e0b2      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM6)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <HAL_TIM_PWM_MspInit+0x258>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_PWM_MspInit+0xf8>
	    __HAL_RCC_TIM6_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028c8:	f043 0310 	orr.w	r3, r3, #16
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b57      	ldr	r3, [pc, #348]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80028da:	e09e      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM7)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_TIM_PWM_MspInit+0x25c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_PWM_MspInit+0x120>
	     __HAL_RCC_TIM7_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	4b50      	ldr	r3, [pc, #320]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a4f      	ldr	r2, [pc, #316]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002902:	e08a      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM8)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_TIM_PWM_MspInit+0x260>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d10e      	bne.n	800292c <HAL_TIM_PWM_MspInit+0x148>
	     __HAL_RCC_TIM8_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
 8002912:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a45      	ldr	r2, [pc, #276]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002918:	f043 0302 	orr.w	r3, r3, #2
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
}
 800292a:	e076      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM9)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a45      	ldr	r2, [pc, #276]	; (8002a48 <HAL_TIM_PWM_MspInit+0x264>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10e      	bne.n	8002954 <HAL_TIM_PWM_MspInit+0x170>
	    __HAL_RCC_TIM9_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	4b3c      	ldr	r3, [pc, #240]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4a3b      	ldr	r2, [pc, #236]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6453      	str	r3, [r2, #68]	; 0x44
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	69fb      	ldr	r3, [r7, #28]
}
 8002952:	e062      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM10)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a3c      	ldr	r2, [pc, #240]	; (8002a4c <HAL_TIM_PWM_MspInit+0x268>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10e      	bne.n	800297c <HAL_TIM_PWM_MspInit+0x198>
	    __HAL_RCC_TIM10_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	6453      	str	r3, [r2, #68]	; 0x44
 800296e:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	69bb      	ldr	r3, [r7, #24]
}
 800297a:	e04e      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM11)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_TIM_PWM_MspInit+0x26c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10e      	bne.n	80029a4 <HAL_TIM_PWM_MspInit+0x1c0>
	    __HAL_RCC_TIM11_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	4a27      	ldr	r2, [pc, #156]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6453      	str	r3, [r2, #68]	; 0x44
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
}
 80029a2:	e03a      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM12)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a2a      	ldr	r2, [pc, #168]	; (8002a54 <HAL_TIM_PWM_MspInit+0x270>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_PWM_MspInit+0x1e8>
	    __HAL_RCC_TIM12_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
}
 80029ca:	e026      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM13)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_TIM_PWM_MspInit+0x274>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10e      	bne.n	80029f4 <HAL_TIM_PWM_MspInit+0x210>
	    __HAL_RCC_TIM13_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
}
 80029f2:	e012      	b.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	  else if(htim_pwm->Instance==TIM14)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a18      	ldr	r2, [pc, #96]	; (8002a5c <HAL_TIM_PWM_MspInit+0x278>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10d      	bne.n	8002a1a <HAL_TIM_PWM_MspInit+0x236>
	    __HAL_RCC_TIM14_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_TIM_PWM_MspInit+0x248>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
}
 8002a1a:	bf00      	nop
 8002a1c:	3744      	adds	r7, #68	; 0x44
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40001000 	.word	0x40001000
 8002a40:	40001400 	.word	0x40001400
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40001c00 	.word	0x40001c00
 8002a5c:	40002000 	.word	0x40002000

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b091      	sub	sp, #68	; 0x44
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

	if(htim_base->Instance==TIM1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a8d      	ldr	r2, [pc, #564]	; (8002ca4 <HAL_TIM_Base_MspInit+0x244>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_Base_MspInit+0x30>
	{
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a76:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a8b      	ldr	r2, [pc, #556]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b89      	ldr	r3, [pc, #548]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  else if(htim_base->Instance==TIM14)
  {
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
  }
}
 8002a8e:	e102      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a9e:	4b82      	ldr	r3, [pc, #520]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a81      	ldr	r2, [pc, #516]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b7f      	ldr	r3, [pc, #508]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ab6:	e0ee      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM3)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7b      	ldr	r2, [pc, #492]	; (8002cac <HAL_TIM_Base_MspInit+0x24c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a77      	ldr	r2, [pc, #476]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad2:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ade:	e0da      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
	else if(htim_base->Instance==TIM4)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a72      	ldr	r2, [pc, #456]	; (8002cb0 <HAL_TIM_Base_MspInit+0x250>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0xa8>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	4b6e      	ldr	r3, [pc, #440]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	4a6d      	ldr	r2, [pc, #436]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002af4:	f043 0304 	orr.w	r3, r3, #4
 8002af8:	6413      	str	r3, [r2, #64]	; 0x40
 8002afa:	4b6b      	ldr	r3, [pc, #428]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002b06:	e0c6      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM5)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a69      	ldr	r2, [pc, #420]	; (8002cb4 <HAL_TIM_Base_MspInit+0x254>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	4b64      	ldr	r3, [pc, #400]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a63      	ldr	r2, [pc, #396]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002b2e:	e0b2      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM6)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <HAL_TIM_Base_MspInit+0x258>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0xf8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a59      	ldr	r2, [pc, #356]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002b56:	e09e      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM7)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <HAL_TIM_Base_MspInit+0x25c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10e      	bne.n	8002b80 <HAL_TIM_Base_MspInit+0x120>
     __HAL_RCC_TIM7_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b4d      	ldr	r3, [pc, #308]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b7e:	e08a      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM8)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4e      	ldr	r2, [pc, #312]	; (8002cc0 <HAL_TIM_Base_MspInit+0x260>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_Base_MspInit+0x148>
     __HAL_RCC_TIM8_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9a:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ba6:	e076      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM9)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_TIM_Base_MspInit+0x264>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10e      	bne.n	8002bd0 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a3b      	ldr	r2, [pc, #236]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
}
 8002bce:	e062      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM10)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3c      	ldr	r2, [pc, #240]	; (8002cc8 <HAL_TIM_Base_MspInit+0x268>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	e04e      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM11)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <HAL_TIM_Base_MspInit+0x26c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]
}
 8002c1e:	e03a      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM12)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_TIM_Base_MspInit+0x270>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x1e8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
}
 8002c46:	e026      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM13)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a21      	ldr	r2, [pc, #132]	; (8002cd4 <HAL_TIM_Base_MspInit+0x274>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10e      	bne.n	8002c70 <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c60:	6413      	str	r3, [r2, #64]	; 0x40
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
}
 8002c6e:	e012      	b.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
  else if(htim_base->Instance==TIM14)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_Base_MspInit+0x278>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10d      	bne.n	8002c96 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_TIM_Base_MspInit+0x248>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
}
 8002c96:	bf00      	nop
 8002c98:	3744      	adds	r7, #68	; 0x44
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40000c00 	.word	0x40000c00
 8002cb8:	40001000 	.word	0x40001000
 8002cbc:	40001400 	.word	0x40001400
 8002cc0:	40010400 	.word	0x40010400
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	40001800 	.word	0x40001800
 8002cd4:	40001c00 	.word	0x40001c00
 8002cd8:	40002000 	.word	0x40002000

08002cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]

  if(huart->Instance==USART1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a8c      	ldr	r2, [pc, #560]	; (8002f2c <HAL_UART_MspInit+0x250>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d12d      	bne.n	8002d5a <HAL_UART_MspInit+0x7e>
    {
	  __HAL_RCC_USART1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d02:	4b8b      	ldr	r3, [pc, #556]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a8a      	ldr	r2, [pc, #552]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d08:	f043 0310 	orr.w	r3, r3, #16
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38

	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	4b84      	ldr	r3, [pc, #528]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a83      	ldr	r2, [pc, #524]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b81      	ldr	r3, [pc, #516]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	  /**USART1 GPIO Configuration
	      PA9     ------> USART1_TX
	      PA10     ------> USART1_RX
	   */
	  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d50:	4619      	mov	r1, r3
 8002d52:	4878      	ldr	r0, [pc, #480]	; (8002f34 <HAL_UART_MspInit+0x258>)
 8002d54:	f011 f88e 	bl	8013e74 <HAL_GPIO_Init>
   /* USER CODE BEGIN USART6_MspInit 1 */

   /* USER CODE END USART6_MspInit 1 */
   }

}
 8002d58:	e12b      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a76      	ldr	r2, [pc, #472]	; (8002f38 <HAL_UART_MspInit+0x25c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d12c      	bne.n	8002dbe <HAL_UART_MspInit+0xe2>
      __HAL_RCC_USART2_CLK_ENABLE();
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
 8002d68:	4b71      	ldr	r3, [pc, #452]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	4a70      	ldr	r2, [pc, #448]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	6413      	str	r3, [r2, #64]	; 0x40
 8002d74:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	4a69      	ldr	r2, [pc, #420]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d90:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d9c:	2360      	movs	r3, #96	; 0x60
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dac:	2307      	movs	r3, #7
 8002dae:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002db4:	4619      	mov	r1, r3
 8002db6:	4861      	ldr	r0, [pc, #388]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002db8:	f011 f85c 	bl	8013e74 <HAL_GPIO_Init>
}
 8002dbc:	e0f9      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_UART_MspInit+0x264>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d12d      	bne.n	8002e24 <HAL_UART_MspInit+0x148>
      __HAL_RCC_USART3_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	4b58      	ldr	r3, [pc, #352]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a50      	ldr	r2, [pc, #320]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002dee:	f043 0308 	orr.w	r3, r3, #8
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e04:	63fb      	str	r3, [r7, #60]	; 0x3c
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	643b      	str	r3, [r7, #64]	; 0x40
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	647b      	str	r3, [r7, #68]	; 0x44
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
      GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e12:	2307      	movs	r3, #7
 8002e14:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4847      	ldr	r0, [pc, #284]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002e1e:	f011 f829 	bl	8013e74 <HAL_GPIO_Init>
}
 8002e22:	e0c6      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_UART_MspInit+0x268>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d12d      	bne.n	8002e8a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a37      	ldr	r2, [pc, #220]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b35      	ldr	r3, [pc, #212]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e80:	4619      	mov	r1, r3
 8002e82:	4831      	ldr	r0, [pc, #196]	; (8002f48 <HAL_UART_MspInit+0x26c>)
 8002e84:	f010 fff6 	bl	8013e74 <HAL_GPIO_Init>
}
 8002e88:	e093      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==UART5)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <HAL_UART_MspInit+0x270>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d15d      	bne.n	8002f50 <HAL_UART_MspInit+0x274>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_UART_MspInit+0x254>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002efa:	2308      	movs	r3, #8
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f02:	4619      	mov	r1, r3
 8002f04:	4810      	ldr	r0, [pc, #64]	; (8002f48 <HAL_UART_MspInit+0x26c>)
 8002f06:	f010 ffb5 	bl	8013e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f0a:	2304      	movs	r3, #4
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f12:	2301      	movs	r3, #1
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f16:	2303      	movs	r3, #3
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f22:	4619      	mov	r1, r3
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_UART_MspInit+0x260>)
 8002f26:	f010 ffa5 	bl	8013e74 <HAL_GPIO_Init>
}
 8002f2a:	e042      	b.n	8002fb2 <HAL_UART_MspInit+0x2d6>
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	40004800 	.word	0x40004800
 8002f44:	40004c00 	.word	0x40004c00
 8002f48:	40020800 	.word	0x40020800
 8002f4c:	40005000 	.word	0x40005000
  else if(huart->Instance==USART6)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_UART_MspInit+0x2e0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d12b      	bne.n	8002fb2 <HAL_UART_MspInit+0x2d6>
     __HAL_RCC_USART6_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f64:	f043 0320 	orr.w	r3, r3, #32
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
     __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a10      	ldr	r2, [pc, #64]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <HAL_UART_MspInit+0x2e4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
     GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f92:	23c0      	movs	r3, #192	; 0xc0
 8002f94:	63fb      	str	r3, [r7, #60]	; 0x3c
     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	64bb      	str	r3, [r7, #72]	; 0x48
     GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002faa:	4619      	mov	r1, r3
 8002fac:	4805      	ldr	r0, [pc, #20]	; (8002fc4 <HAL_UART_MspInit+0x2e8>)
 8002fae:	f010 ff61 	bl	8013e74 <HAL_GPIO_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	3750      	adds	r7, #80	; 0x50
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020800 	.word	0x40020800

08002fc8 <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b094      	sub	sp, #80	; 0x50
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a8c      	ldr	r2, [pc, #560]	; (8003218 <HAL_TIM_Encoder_MspInit+0x250>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12d      	bne.n	8003046 <HAL_TIM_Encoder_MspInit+0x7e>
  {

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fee:	4b8b      	ldr	r3, [pc, #556]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4a8a      	ldr	r2, [pc, #552]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	63bb      	str	r3, [r7, #56]	; 0x38
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	4b84      	ldr	r3, [pc, #528]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a83      	ldr	r2, [pc, #524]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003010:	f043 0310 	orr.w	r3, r3, #16
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b81      	ldr	r3, [pc, #516]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
 8003020:	6b7b      	ldr	r3, [r7, #52]	; 0x34


    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003022:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003034:	2301      	movs	r3, #1
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003038:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800303c:	4619      	mov	r1, r3
 800303e:	4878      	ldr	r0, [pc, #480]	; (8003220 <HAL_TIM_Encoder_MspInit+0x258>)
 8003040:	f010 ff18 	bl	8013e74 <HAL_GPIO_Init>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  }

}
 8003044:	e12b      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM2){
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d14b      	bne.n	80030e8 <HAL_TIM_Encoder_MspInit+0x120>
	  __HAL_RCC_TIM2_CLK_ENABLE();
 8003050:	2300      	movs	r3, #0
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
 8003054:	4b71      	ldr	r3, [pc, #452]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	4a70      	ldr	r2, [pc, #448]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6413      	str	r3, [r2, #64]	; 0x40
 8003060:	4b6e      	ldr	r3, [pc, #440]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	4b6a      	ldr	r3, [pc, #424]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6313      	str	r3, [r2, #48]	; 0x30
 800307c:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
 800308c:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	6313      	str	r3, [r2, #48]	; 0x30
 8003098:	4b60      	ldr	r3, [pc, #384]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030aa:	2302      	movs	r3, #2
 80030ac:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b2:	2300      	movs	r3, #0
 80030b4:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030b6:	2301      	movs	r3, #1
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030be:	4619      	mov	r1, r3
 80030c0:	4858      	ldr	r0, [pc, #352]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 80030c2:	f010 fed7 	bl	8013e74 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030c6:	2308      	movs	r3, #8
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	2300      	movs	r3, #0
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030d6:	2301      	movs	r3, #1
 80030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030de:	4619      	mov	r1, r3
 80030e0:	4851      	ldr	r0, [pc, #324]	; (8003228 <HAL_TIM_Encoder_MspInit+0x260>)
 80030e2:	f010 fec7 	bl	8013e74 <HAL_GPIO_Init>
}
 80030e6:	e0da      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM3){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4f      	ldr	r2, [pc, #316]	; (800322c <HAL_TIM_Encoder_MspInit+0x264>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12c      	bne.n	800314c <HAL_TIM_Encoder_MspInit+0x184>
	  __HAL_RCC_TIM3_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a48      	ldr	r2, [pc, #288]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	623b      	str	r3, [r7, #32]
 8003128:	6a3b      	ldr	r3, [r7, #32]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800312a:	23c0      	movs	r3, #192	; 0xc0
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003136:	2300      	movs	r3, #0
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800313a:	2302      	movs	r3, #2
 800313c:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003142:	4619      	mov	r1, r3
 8003144:	4837      	ldr	r0, [pc, #220]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003146:	f010 fe95 	bl	8013e74 <HAL_GPIO_Init>
}
 800314a:	e0a8      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM4){
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_TIM_Encoder_MspInit+0x268>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12d      	bne.n	80031b2 <HAL_TIM_Encoder_MspInit+0x1ea>
	  __HAL_RCC_TIM4_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6413      	str	r3, [r2, #64]	; 0x40
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	4a28      	ldr	r2, [pc, #160]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6313      	str	r3, [r2, #48]	; 0x30
 8003182:	4b26      	ldr	r3, [pc, #152]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	69bb      	ldr	r3, [r7, #24]
	  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800318e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003192:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031a0:	2302      	movs	r3, #2
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80031a8:	4619      	mov	r1, r3
 80031aa:	4822      	ldr	r0, [pc, #136]	; (8003234 <HAL_TIM_Encoder_MspInit+0x26c>)
 80031ac:	f010 fe62 	bl	8013e74 <HAL_GPIO_Init>
}
 80031b0:	e075      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
  }else if(htim_encoder->Instance==TIM5){
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <HAL_TIM_Encoder_MspInit+0x270>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d13f      	bne.n	800323c <HAL_TIM_Encoder_MspInit+0x274>
	  __HAL_RCC_TIM5_CLK_ENABLE();
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	4b16      	ldr	r3, [pc, #88]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6413      	str	r3, [r2, #64]	; 0x40
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	6313      	str	r3, [r2, #48]	; 0x30
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <HAL_TIM_Encoder_MspInit+0x254>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	693b      	ldr	r3, [r7, #16]
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031f4:	2303      	movs	r3, #3
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	2300      	movs	r3, #0
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003204:	2302      	movs	r3, #2
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800320c:	4619      	mov	r1, r3
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003210:	f010 fe30 	bl	8013e74 <HAL_GPIO_Init>
}
 8003214:	e043      	b.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40023800 	.word	0x40023800
 8003220:	40021000 	.word	0x40021000
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40000400 	.word	0x40000400
 8003230:	40000800 	.word	0x40000800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40000c00 	.word	0x40000c00
  }else if(htim_encoder->Instance==TIM8){
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d12b      	bne.n	800329e <HAL_TIM_Encoder_MspInit+0x2d6>
	  __HAL_RCC_TIM8_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6453      	str	r3, [r2, #68]	; 0x44
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_TIM_Encoder_MspInit+0x2e4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
	  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327e:	23c0      	movs	r3, #192	; 0xc0
 8003280:	63fb      	str	r3, [r7, #60]	; 0x3c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	2302      	movs	r3, #2
 8003284:	643b      	str	r3, [r7, #64]	; 0x40
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003286:	2300      	movs	r3, #0
 8003288:	647b      	str	r3, [r7, #68]	; 0x44
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2300      	movs	r3, #0
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
	  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800328e:	2303      	movs	r3, #3
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003292:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003296:	4619      	mov	r1, r3
 8003298:	4805      	ldr	r0, [pc, #20]	; (80032b0 <HAL_TIM_Encoder_MspInit+0x2e8>)
 800329a:	f010 fdeb 	bl	8013e74 <HAL_GPIO_Init>
}
 800329e:	bf00      	nop
 80032a0:	3750      	adds	r7, #80	; 0x50
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40010400 	.word	0x40010400
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40020800 	.word	0x40020800

080032b4 <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b094      	sub	sp, #80	; 0x50
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 0320 	add.w	r3, r7, #32
 80032be:	2230      	movs	r2, #48	; 0x30
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f019 fb52 	bl	801c96c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <SystemClock_Config+0xd0>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <SystemClock_Config+0xd0>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	; 0x40
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <SystemClock_Config+0xd0>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f4:	2300      	movs	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	4b23      	ldr	r3, [pc, #140]	; (8003388 <SystemClock_Config+0xd4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <SystemClock_Config+0xd4>)
 80032fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <SystemClock_Config+0xd4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331a:	2302      	movs	r3, #2
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003324:	2308      	movs	r3, #8
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003328:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800332c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800332e:	2302      	movs	r3, #2
 8003330:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003332:	2304      	movs	r3, #4
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003336:	f107 0320 	add.w	r3, r7, #32
 800333a:	4618      	mov	r0, r3
 800333c:	f013 f8ac 	bl	8016498 <HAL_RCC_OscConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003346:	f001 fdbb 	bl	8004ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334a:	230f      	movs	r3, #15
 800334c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334e:	2302      	movs	r3, #2
 8003350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800335a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800335c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	2105      	movs	r1, #5
 8003368:	4618      	mov	r0, r3
 800336a:	f013 fb05 	bl	8016978 <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003374:	f001 fda4 	bl	8004ec0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003378:	f013 fbe4 	bl	8016b44 <HAL_RCC_EnableCSS>
}
 800337c:	bf00      	nop
 800337e:	3750      	adds	r7, #80	; 0x50
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000

0800338c <TIMxInit>:
 * 						  BIOSTIMx_Init (&htim2, 1000, 84);  //1ms  interrupt
 * 						  BIOSTIMx_Init (&htim3, 20000, 84); //20ms interrupt
 */

void TIMxInit(TIM_HandleTypeDef* htimx, uint16_t period, uint16_t prescaler)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	807b      	strh	r3, [r7, #2]
 8003398:	4613      	mov	r3, r2
 800339a:	803b      	strh	r3, [r7, #0]

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
	int nvic = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]

	if(htimx == &htim1){
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a9b      	ldr	r2, [pc, #620]	; (800361c <TIMxInit+0x290>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d105      	bne.n	80033be <TIMxInit+0x32>
		htimx->Instance = TIM1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a9a      	ldr	r2, [pc, #616]	; (8003620 <TIMxInit+0x294>)
 80033b6:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 80033b8:	2319      	movs	r3, #25
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e081      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim2)	{
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a98      	ldr	r2, [pc, #608]	; (8003624 <TIMxInit+0x298>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d106      	bne.n	80033d4 <TIMxInit+0x48>
		htimx->Instance = TIM2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033cc:	601a      	str	r2, [r3, #0]
		nvic = TIM2_IRQn;
 80033ce:	231c      	movs	r3, #28
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e076      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim3)	{
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a94      	ldr	r2, [pc, #592]	; (8003628 <TIMxInit+0x29c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d105      	bne.n	80033e8 <TIMxInit+0x5c>
		htimx->Instance = TIM3;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a93      	ldr	r2, [pc, #588]	; (800362c <TIMxInit+0x2a0>)
 80033e0:	601a      	str	r2, [r3, #0]
		nvic = TIM3_IRQn;
 80033e2:	231d      	movs	r3, #29
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e06c      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim4)	{
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a91      	ldr	r2, [pc, #580]	; (8003630 <TIMxInit+0x2a4>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d105      	bne.n	80033fc <TIMxInit+0x70>
		htimx->Instance = TIM4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a90      	ldr	r2, [pc, #576]	; (8003634 <TIMxInit+0x2a8>)
 80033f4:	601a      	str	r2, [r3, #0]
		nvic = TIM4_IRQn;
 80033f6:	231e      	movs	r3, #30
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e062      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim5)	{
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a8e      	ldr	r2, [pc, #568]	; (8003638 <TIMxInit+0x2ac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d105      	bne.n	8003410 <TIMxInit+0x84>
		htimx->Instance = TIM5;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a8d      	ldr	r2, [pc, #564]	; (800363c <TIMxInit+0x2b0>)
 8003408:	601a      	str	r2, [r3, #0]
		nvic = TIM5_IRQn;
 800340a:	2332      	movs	r3, #50	; 0x32
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e058      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim6)	{
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <TIMxInit+0x2b4>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d105      	bne.n	8003424 <TIMxInit+0x98>
		htimx->Instance = TIM6;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a8a      	ldr	r2, [pc, #552]	; (8003644 <TIMxInit+0x2b8>)
 800341c:	601a      	str	r2, [r3, #0]
		nvic = TIM6_DAC_IRQn;
 800341e:	2336      	movs	r3, #54	; 0x36
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	e04e      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim7)	{
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a88      	ldr	r2, [pc, #544]	; (8003648 <TIMxInit+0x2bc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d105      	bne.n	8003438 <TIMxInit+0xac>
		htimx->Instance = TIM7;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a87      	ldr	r2, [pc, #540]	; (800364c <TIMxInit+0x2c0>)
 8003430:	601a      	str	r2, [r3, #0]
		nvic = TIM7_IRQn;
 8003432:	2337      	movs	r3, #55	; 0x37
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e044      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim8)	{
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a85      	ldr	r2, [pc, #532]	; (8003650 <TIMxInit+0x2c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d105      	bne.n	800344c <TIMxInit+0xc0>
		htimx->Instance = TIM8;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a84      	ldr	r2, [pc, #528]	; (8003654 <TIMxInit+0x2c8>)
 8003444:	601a      	str	r2, [r3, #0]
		nvic = TIM8_CC_IRQn;
 8003446:	232e      	movs	r3, #46	; 0x2e
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	e03a      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim9)	{
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a82      	ldr	r2, [pc, #520]	; (8003658 <TIMxInit+0x2cc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d105      	bne.n	8003460 <TIMxInit+0xd4>
		htimx->Instance = TIM9;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a81      	ldr	r2, [pc, #516]	; (800365c <TIMxInit+0x2d0>)
 8003458:	601a      	str	r2, [r3, #0]
		nvic = TIM1_BRK_TIM9_IRQn;
 800345a:	2318      	movs	r3, #24
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e030      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim10)	{
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a7f      	ldr	r2, [pc, #508]	; (8003660 <TIMxInit+0x2d4>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d105      	bne.n	8003474 <TIMxInit+0xe8>
		htimx->Instance = TIM10;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a7e      	ldr	r2, [pc, #504]	; (8003664 <TIMxInit+0x2d8>)
 800346c:	601a      	str	r2, [r3, #0]
		nvic = TIM1_UP_TIM10_IRQn;
 800346e:	2319      	movs	r3, #25
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e026      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim11)	{
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a7c      	ldr	r2, [pc, #496]	; (8003668 <TIMxInit+0x2dc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d105      	bne.n	8003488 <TIMxInit+0xfc>
		htimx->Instance = TIM11;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a7b      	ldr	r2, [pc, #492]	; (800366c <TIMxInit+0x2e0>)
 8003480:	601a      	str	r2, [r3, #0]
		nvic = TIM1_TRG_COM_TIM11_IRQn;
 8003482:	231a      	movs	r3, #26
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e01c      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim12)	{
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a79      	ldr	r2, [pc, #484]	; (8003670 <TIMxInit+0x2e4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d105      	bne.n	800349c <TIMxInit+0x110>
		htimx->Instance = TIM12;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a78      	ldr	r2, [pc, #480]	; (8003674 <TIMxInit+0x2e8>)
 8003494:	601a      	str	r2, [r3, #0]
		nvic = TIM8_BRK_TIM12_IRQn;
 8003496:	232b      	movs	r3, #43	; 0x2b
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e012      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim13)	{
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a76      	ldr	r2, [pc, #472]	; (8003678 <TIMxInit+0x2ec>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d105      	bne.n	80034b0 <TIMxInit+0x124>
		htimx->Instance = TIM13;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a75      	ldr	r2, [pc, #468]	; (800367c <TIMxInit+0x2f0>)
 80034a8:	601a      	str	r2, [r3, #0]
		nvic = TIM8_UP_TIM13_IRQn;
 80034aa:	232c      	movs	r3, #44	; 0x2c
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e008      	b.n	80034c2 <TIMxInit+0x136>
	}
	else if(htimx == &htim14)	{
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a73      	ldr	r2, [pc, #460]	; (8003680 <TIMxInit+0x2f4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d104      	bne.n	80034c2 <TIMxInit+0x136>
		htimx->Instance = TIM14;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a72      	ldr	r2, [pc, #456]	; (8003684 <TIMxInit+0x2f8>)
 80034bc:	601a      	str	r2, [r3, #0]
		nvic = TIM8_TRG_COM_TIM14_IRQn;
 80034be:	232d      	movs	r3, #45	; 0x2d
 80034c0:	617b      	str	r3, [r7, #20]
	}


	htimx->Init.Prescaler = prescaler;
 80034c2:	883a      	ldrh	r2, [r7, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]
	htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
	htimx->Init.Period = period;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
	htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f013 fda4 	bl	8017028 <HAL_TIM_Base_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <TIMxInit+0x15e>
	{
		Error_Handler();
 80034e6:	f001 fceb 	bl	8004ec0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
	if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 80034f2:	f107 030c 	add.w	r3, r7, #12
 80034f6:	4619      	mov	r1, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f014 fd05 	bl	8017f08 <HAL_TIMEx_MasterConfigSynchronization>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <TIMxInit+0x17c>
	{
		Error_Handler();
 8003504:	f001 fcdc 	bl	8004ec0 <Error_Handler>
	}

	if(htimx == &htim1){
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a44      	ldr	r2, [pc, #272]	; (800361c <TIMxInit+0x290>)
 800350c:	4293      	cmp	r3, r2
 800350e:	f000 80cb 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI1_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM1_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim2)	{
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a43      	ldr	r2, [pc, #268]	; (8003624 <TIMxInit+0x298>)
 8003516:	4293      	cmp	r3, r2
 8003518:	f000 80c6 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef FREERTOS_USED
		HAL_NVIC_SetPriority(nvic, TIM2_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim3)	{
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a42      	ldr	r2, [pc, #264]	; (8003628 <TIMxInit+0x29c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	f000 80c1 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM3_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim4)	{
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a41      	ldr	r2, [pc, #260]	; (8003630 <TIMxInit+0x2a4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	f000 80bc 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI4_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM4_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim5)	{
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a41      	ldr	r2, [pc, #260]	; (8003638 <TIMxInit+0x2ac>)
 8003534:	4293      	cmp	r3, r2
 8003536:	f000 80b7 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM5_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim6)	{
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a40      	ldr	r2, [pc, #256]	; (8003640 <TIMxInit+0x2b4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10c      	bne.n	800355c <TIMxInit+0x1d0>
		HAL_NVIC_SetPriority(nvic, TIM6_IRQ_PRIO, 0);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	2200      	movs	r2, #0
 8003548:	2107      	movs	r1, #7
 800354a:	4618      	mov	r0, r3
 800354c:	f00f fd5e 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	b25b      	sxtb	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	f00f fd75 	bl	8013044 <HAL_NVIC_EnableIRQ>
 800355a:	e0a5      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim7)	{
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIMxInit+0x2bc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <TIMxInit+0x1f2>
		HAL_NVIC_SetPriority(nvic, TIM7_IRQ_PRIO, 0);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	b25b      	sxtb	r3, r3
 8003568:	2200      	movs	r2, #0
 800356a:	210d      	movs	r1, #13
 800356c:	4618      	mov	r0, r3
 800356e:	f00f fd4d 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	b25b      	sxtb	r3, r3
 8003576:	4618      	mov	r0, r3
 8003578:	f00f fd64 	bl	8013044 <HAL_NVIC_EnableIRQ>
 800357c:	e094      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim8)	{
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a33      	ldr	r2, [pc, #204]	; (8003650 <TIMxInit+0x2c4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 8090 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef QEI6_IRQ_PRIO
		HAL_NVIC_SetPriority(nvic, TIM8_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim9)	{
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a33      	ldr	r2, [pc, #204]	; (8003658 <TIMxInit+0x2cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	f000 808b 	beq.w	80036a8 <TIMxInit+0x31c>
#ifndef USED_BDC
		HAL_NVIC_SetPriority(nvic, TIM9_IRQ_PRIO, 0);
		HAL_NVIC_EnableIRQ(nvic);
#endif
	}
	else if(htimx == &htim10)	{
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a32      	ldr	r2, [pc, #200]	; (8003660 <TIMxInit+0x2d4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <TIMxInit+0x228>
		HAL_NVIC_SetPriority(nvic, TIM10_IRQ_PRIO, 0);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	b25b      	sxtb	r3, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	210e      	movs	r1, #14
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00f fd32 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00f fd49 	bl	8013044 <HAL_NVIC_EnableIRQ>
 80035b2:	e079      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim11)	{
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <TIMxInit+0x2dc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10c      	bne.n	80035d6 <TIMxInit+0x24a>
		HAL_NVIC_SetPriority(nvic, TIM11_IRQ_PRIO, 0);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	b25b      	sxtb	r3, r3
 80035c0:	2200      	movs	r2, #0
 80035c2:	210e      	movs	r1, #14
 80035c4:	4618      	mov	r0, r3
 80035c6:	f00f fd21 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	b25b      	sxtb	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	f00f fd38 	bl	8013044 <HAL_NVIC_EnableIRQ>
 80035d4:	e068      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim12)	{
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a25      	ldr	r2, [pc, #148]	; (8003670 <TIMxInit+0x2e4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d10c      	bne.n	80035f8 <TIMxInit+0x26c>
		HAL_NVIC_SetPriority(nvic, TIM12_IRQ_PRIO, 0);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	2200      	movs	r2, #0
 80035e4:	210e      	movs	r1, #14
 80035e6:	4618      	mov	r0, r3
 80035e8:	f00f fd10 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f00f fd27 	bl	8013044 <HAL_NVIC_EnableIRQ>
 80035f6:	e057      	b.n	80036a8 <TIMxInit+0x31c>
	}
	else if(htimx == &htim13)	{
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <TIMxInit+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d143      	bne.n	8003688 <TIMxInit+0x2fc>
		HAL_NVIC_SetPriority(nvic, TIM13_IRQ_PRIO, 0);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	2200      	movs	r2, #0
 8003606:	210e      	movs	r1, #14
 8003608:	4618      	mov	r0, r3
 800360a:	f00f fcff 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	b25b      	sxtb	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	f00f fd16 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8003618:	e046      	b.n	80036a8 <TIMxInit+0x31c>
 800361a:	bf00      	nop
 800361c:	200069ec 	.word	0x200069ec
 8003620:	40010000 	.word	0x40010000
 8003624:	20006af0 	.word	0x20006af0
 8003628:	200067a0 	.word	0x200067a0
 800362c:	40000400 	.word	0x40000400
 8003630:	200065dc 	.word	0x200065dc
 8003634:	40000800 	.word	0x40000800
 8003638:	20006760 	.word	0x20006760
 800363c:	40000c00 	.word	0x40000c00
 8003640:	200069ac 	.word	0x200069ac
 8003644:	40001000 	.word	0x40001000
 8003648:	20006c50 	.word	0x20006c50
 800364c:	40001400 	.word	0x40001400
 8003650:	2000659c 	.word	0x2000659c
 8003654:	40010400 	.word	0x40010400
 8003658:	20006a2c 	.word	0x20006a2c
 800365c:	40014000 	.word	0x40014000
 8003660:	200066bc 	.word	0x200066bc
 8003664:	40014400 	.word	0x40014400
 8003668:	20006904 	.word	0x20006904
 800366c:	40014800 	.word	0x40014800
 8003670:	20006c10 	.word	0x20006c10
 8003674:	40001800 	.word	0x40001800
 8003678:	20006884 	.word	0x20006884
 800367c:	40001c00 	.word	0x40001c00
 8003680:	20006bd0 	.word	0x20006bd0
 8003684:	40002000 	.word	0x40002000
	}
	else if(htimx == &htim14)	{
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <TIMxInit+0x330>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10b      	bne.n	80036a8 <TIMxInit+0x31c>
		HAL_NVIC_SetPriority(nvic, TIM14_IRQ_PRIO, 0);
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	b25b      	sxtb	r3, r3
 8003694:	2200      	movs	r2, #0
 8003696:	210e      	movs	r1, #14
 8003698:	4618      	mov	r0, r3
 800369a:	f00f fcb7 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvic);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00f fcce 	bl	8013044 <HAL_NVIC_EnableIRQ>
	}

	HAL_TIM_Base_Start(htimx);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f013 fce8 	bl	801707e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(htimx);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f013 fd09 	bl	80170c6 <HAL_TIM_Base_Start_IT>

}
 80036b4:	bf00      	nop
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20006bd0 	.word	0x20006bd0

080036c0 <UARTInit>:
 * 						  rxstate				,can be ENABLE (enable USART1 receive interrupt) or DISBALE
 * Function Return		: None
 * Function Example		: UARTxInit(&huart1, 115200, ENABLE, 0, 0);
 */
void UARTInit(UART_HandleTypeDef* huartx, uint32_t baudrate, FunctionalState rxstate)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
	IRQn_Type nvic;
	uint8_t *rcv_data;

	if (huartx == &huart1){
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <UARTInit+0x1cc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d107      	bne.n	80036e6 <UARTInit+0x26>
		huartx->Instance = USART1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a6d      	ldr	r2, [pc, #436]	; (8003890 <UARTInit+0x1d0>)
 80036da:	601a      	str	r2, [r3, #0]
		nvic = USART1_IRQn;
 80036dc:	2325      	movs	r3, #37	; 0x25
 80036de:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart1_data;
 80036e0:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <UARTInit+0x1d4>)
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e036      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart2){
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a6b      	ldr	r2, [pc, #428]	; (8003898 <UARTInit+0x1d8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d107      	bne.n	80036fe <UARTInit+0x3e>
		huartx->Instance = USART2;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a6a      	ldr	r2, [pc, #424]	; (800389c <UARTInit+0x1dc>)
 80036f2:	601a      	str	r2, [r3, #0]
		nvic = USART2_IRQn;
 80036f4:	2326      	movs	r3, #38	; 0x26
 80036f6:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart2_data;
 80036f8:	4b69      	ldr	r3, [pc, #420]	; (80038a0 <UARTInit+0x1e0>)
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e02a      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart3){
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <UARTInit+0x1e4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d107      	bne.n	8003716 <UARTInit+0x56>
		huartx->Instance = USART3;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4a67      	ldr	r2, [pc, #412]	; (80038a8 <UARTInit+0x1e8>)
 800370a:	601a      	str	r2, [r3, #0]
		nvic = USART3_IRQn;
 800370c:	2327      	movs	r3, #39	; 0x27
 800370e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart3_data;
 8003710:	4b66      	ldr	r3, [pc, #408]	; (80038ac <UARTInit+0x1ec>)
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e01e      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart4){
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a65      	ldr	r2, [pc, #404]	; (80038b0 <UARTInit+0x1f0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d107      	bne.n	800372e <UARTInit+0x6e>
		huartx->Instance = UART4;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a64      	ldr	r2, [pc, #400]	; (80038b4 <UARTInit+0x1f4>)
 8003722:	601a      	str	r2, [r3, #0]
		nvic = UART4_IRQn;
 8003724:	2334      	movs	r3, #52	; 0x34
 8003726:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart4_data;
 8003728:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <UARTInit+0x1f8>)
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e012      	b.n	8003754 <UARTInit+0x94>
	}else if(huartx == &huart5){
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a62      	ldr	r2, [pc, #392]	; (80038bc <UARTInit+0x1fc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d107      	bne.n	8003746 <UARTInit+0x86>
		huartx->Instance = UART5;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a61      	ldr	r2, [pc, #388]	; (80038c0 <UARTInit+0x200>)
 800373a:	601a      	str	r2, [r3, #0]
		nvic = UART5_IRQn;
 800373c:	2335      	movs	r3, #53	; 0x35
 800373e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart5_data;
 8003740:	4b60      	ldr	r3, [pc, #384]	; (80038c4 <UARTInit+0x204>)
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e006      	b.n	8003754 <UARTInit+0x94>
	}else{
		huartx->Instance = USART6;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a5f      	ldr	r2, [pc, #380]	; (80038c8 <UARTInit+0x208>)
 800374a:	601a      	str	r2, [r3, #0]
		nvic = USART6_IRQn;
 800374c:	2347      	movs	r3, #71	; 0x47
 800374e:	75fb      	strb	r3, [r7, #23]
		rcv_data = &uart6_data;
 8003750:	4b5e      	ldr	r3, [pc, #376]	; (80038cc <UARTInit+0x20c>)
 8003752:	613b      	str	r3, [r7, #16]
	}


	huartx->Init.BaudRate = baudrate;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	605a      	str	r2, [r3, #4]
	huartx->Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
	huartx->Init.StopBits = UART_STOPBITS_1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
	huartx->Init.Parity = UART_PARITY_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
	huartx->Init.Mode = UART_MODE_TX_RX;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
	huartx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
	huartx->Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(huartx) != HAL_OK)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f014 fc52 	bl	8018028 <HAL_UART_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <UARTInit+0xce>
	{
		Error_Handler();
 800378a:	f001 fb99 	bl	8004ec0 <Error_Handler>
	}

	if(rxstate == ENABLE){
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d176      	bne.n	8003882 <UARTInit+0x1c2>
		if(huartx == &huart2){
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a40      	ldr	r2, [pc, #256]	; (8003898 <UARTInit+0x1d8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d119      	bne.n	80037d0 <UARTInit+0x110>

			HAL_NVIC_SetPriority(nvic, UART2_RX_IRQ_PRIO, 0);
 800379c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2105      	movs	r1, #5
 80037a4:	4618      	mov	r0, r3
 80037a6:	f00f fc31 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00f fc64 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00f fc43 	bl	8013044 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(nvic);
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);

		}
	}
}
 80037ce:	e058      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart3){
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <UARTInit+0x1e4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d119      	bne.n	800380c <UARTInit+0x14c>
			HAL_NVIC_SetPriority(nvic, UART3_RX_IRQ_PRIO, 0);
 80037d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037dc:	2200      	movs	r2, #0
 80037de:	2104      	movs	r1, #4
 80037e0:	4618      	mov	r0, r3
 80037e2:	f00f fc13 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 80037e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00f fc46 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 80037f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00f fc25 	bl	8013044 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	60da      	str	r2, [r3, #12]
}
 800380a:	e03a      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart4){
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <UARTInit+0x1f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d119      	bne.n	8003848 <UARTInit+0x188>
			HAL_NVIC_SetPriority(nvic, UART4_RX_IRQ_PRIO, 0);
 8003814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003818:	2200      	movs	r2, #0
 800381a:	2106      	movs	r1, #6
 800381c:	4618      	mov	r0, r3
 800381e:	f00f fbf5 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 8003822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003826:	4618      	mov	r0, r3
 8003828:	f00f fc28 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 800382c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003830:	4618      	mov	r0, r3
 8003832:	f00f fc07 	bl	8013044 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	60da      	str	r2, [r3, #12]
}
 8003846:	e01c      	b.n	8003882 <UARTInit+0x1c2>
		}else if(huartx == &huart5){
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <UARTInit+0x1fc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d118      	bne.n	8003882 <UARTInit+0x1c2>
			HAL_NVIC_SetPriority(nvic, UART5_RX_IRQ_PRIO, 0);
 8003850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003854:	2200      	movs	r2, #0
 8003856:	210e      	movs	r1, #14
 8003858:	4618      	mov	r0, r3
 800385a:	f00f fbd7 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_ClearPendingIRQ(nvic);
 800385e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003862:	4618      	mov	r0, r3
 8003864:	f00f fc0a 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(nvic);
 8003868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800386c:	4618      	mov	r0, r3
 800386e:	f00f fbe9 	bl	8013044 <HAL_NVIC_EnableIRQ>
			__HAL_UART_ENABLE_IT(huartx, UART_IT_RXNE);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0220 	orr.w	r2, r2, #32
 8003880:	60da      	str	r2, [r3, #12]
}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200068c4 	.word	0x200068c4
 8003890:	40011000 	.word	0x40011000
 8003894:	20006598 	.word	0x20006598
 8003898:	20006b30 	.word	0x20006b30
 800389c:	40004400 	.word	0x40004400
 80038a0:	20006944 	.word	0x20006944
 80038a4:	2000667c 	.word	0x2000667c
 80038a8:	40004800 	.word	0x40004800
 80038ac:	200067e1 	.word	0x200067e1
 80038b0:	20006ab0 	.word	0x20006ab0
 80038b4:	40004c00 	.word	0x40004c00
 80038b8:	20006aac 	.word	0x20006aac
 80038bc:	200067e4 	.word	0x200067e4
 80038c0:	40005000 	.word	0x40005000
 80038c4:	2000675c 	.word	0x2000675c
 80038c8:	40011400 	.word	0x40011400
 80038cc:	200067e0 	.word	0x200067e0

080038d0 <UARTPrintString>:
 * 						  s			,buffer or string
 * Function Return		: None
 * Function Example		: UARTPrintString(huart4, buffer);
 */
void UARTPrintString(UART_HandleTypeDef* huartx, char s[])
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huartx, (uint8_t *)s, strlen(s), 25);
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f7fc fc78 	bl	80001d0 <strlen>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	2319      	movs	r3, #25
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f014 fbea 	bl	80180c2 <HAL_UART_Transmit>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <USART1_IRQHandler>:
void UARTPrintString_IT(UART_HandleTypeDef* huartx, char s[]){
	if(HAL_UART_GetState(huartx) == HAL_UART_STATE_READY)
		HAL_UART_Transmit_IT(huartx, (uint8_t *)s, strlen(s));
}

void  USART1_IRQHandler(void){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0


	HAL_UART_IRQHandler(&huart1);
 80038fc:	4802      	ldr	r0, [pc, #8]	; (8003908 <USART1_IRQHandler+0x10>)
 80038fe:	f014 fd4f 	bl	80183a0 <HAL_UART_IRQHandler>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200068c4 	.word	0x200068c4

0800390c <USART2_IRQHandler>:

void  USART2_IRQHandler(void){
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart2);
 8003910:	4802      	ldr	r0, [pc, #8]	; (800391c <USART2_IRQHandler+0x10>)
 8003912:	f014 fd45 	bl	80183a0 <HAL_UART_IRQHandler>
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20006b30 	.word	0x20006b30

08003920 <USART3_IRQHandler>:

void  USART3_IRQHandler(void){
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart3);
 8003924:	4802      	ldr	r0, [pc, #8]	; (8003930 <USART3_IRQHandler+0x10>)
 8003926:	f014 fd3b 	bl	80183a0 <HAL_UART_IRQHandler>
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	2000667c 	.word	0x2000667c

08003934 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart4);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <UART4_IRQHandler+0x10>)
 800393a:	f014 fd31 	bl	80183a0 <HAL_UART_IRQHandler>
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20006ab0 	.word	0x20006ab0

08003948 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart5);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <UART5_IRQHandler+0x10>)
 800394e:	f014 fd27 	bl	80183a0 <HAL_UART_IRQHandler>
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200067e4 	.word	0x200067e4

0800395c <USART6_IRQHandler>:

void  USART6_IRQHandler(void){
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

	HAL_UART_IRQHandler(&huart6);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <USART6_IRQHandler+0x10>)
 8003962:	f014 fd1d 	bl	80183a0 <HAL_UART_IRQHandler>
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20006a6c 	.word	0x20006a6c

08003970 <CANxInit>:
 * Function Return		: CAN_InitStatus				Constant indicates initialization succeed which will be
  *        											    CAN_InitStatus_Failed or CAN_InitStatus_Success.
 * Function Example		: CAN1_Init(&hcan1,4,CAN_Filter_FIFO0,0,0,13,1,1);
 */
void CANxInit(CAN_HandleTypeDef* hcanx,uint16_t prescaler,uint32_t FilterFIFOAssignment,uint16_t CAN_FilterId_11bits,
		uint16_t CAN_FilterMaskId_11bits,uint8_t CAN_FilterNumber, uint8_t rate){
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]

	CAN_FilterTypeDef sFilterConfig = {0};
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	2228      	movs	r2, #40	; 0x28
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f018 ffed 	bl	801c96c <memset>

	if(hcanx == &hcan1){
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <CANxInit+0x174>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d103      	bne.n	80039a2 <CANxInit+0x32>
		hcanx->Instance = CAN1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <CANxInit+0x178>)
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <CANxInit+0x38>
	}else{
		hcanx->Instance = CAN2;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	4a51      	ldr	r2, [pc, #324]	; (8003aec <CANxInit+0x17c>)
 80039a6:	601a      	str	r2, [r3, #0]
	}


	hcanx->Init.Prescaler = prescaler;
 80039a8:	897a      	ldrh	r2, [r7, #10]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]
	hcanx->Init.Mode = CAN_MODE_NORMAL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]

	hcanx->Init.SyncJumpWidth = CAN_SJW_1TQ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
	if(rate == CAN_1MHz){
 80039ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d108      	bne.n	80039d4 <CANxInit+0x64>
		//sampling point 85.71%
		hcanx->Init.TimeSeg1 = CAN_BS1_11TQ;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80039c8:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_2TQ;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	e00b      	b.n	80039ec <CANxInit+0x7c>
	}else if(rate == CAN_500KHz){
 80039d4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <CANxInit+0x7c>
		//sampling point 71.42%
		hcanx->Init.TimeSeg1 = CAN_BS1_14TQ;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80039e2:	611a      	str	r2, [r3, #16]
		hcanx->Init.TimeSeg2 = CAN_BS2_6TQ;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80039ea:	615a      	str	r2, [r3, #20]
	}
	hcanx->Init.TimeTriggeredMode = DISABLE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	761a      	strb	r2, [r3, #24]
	hcanx->Init.AutoBusOff = ENABLE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	765a      	strb	r2, [r3, #25]
	hcanx->Init.AutoWakeUp = DISABLE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	769a      	strb	r2, [r3, #26]
	hcanx->Init.AutoRetransmission = DISABLE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	76da      	strb	r2, [r3, #27]
	hcanx->Init.ReceiveFifoLocked = DISABLE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	771a      	strb	r2, [r3, #28]
	hcanx->Init.TransmitFifoPriority = DISABLE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(hcanx) != HAL_OK)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f00e fb73 	bl	80120fc <HAL_CAN_Init>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <CANxInit+0xb0>
	{
		Error_Handler();
 8003a1c:	f001 fa50 	bl	8004ec0 <Error_Handler>
	}

	sFilterConfig.SlaveStartFilterBank = 14;
 8003a20:	230e      	movs	r3, #14
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment=FilterFIFOAssignment; //set fifo assignment
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterIdHigh= CAN_FilterId_11bits <<5; //the ID that the filter looks for (switch this for the other microcontroller)
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow=0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh=CAN_FilterMaskId_11bits <<5;
 8003a3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003a3e:	015b      	lsls	r3, r3, #5
 8003a40:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow=0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT; //set filter scale
 8003a46:	2301      	movs	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterBank = CAN_FilterNumber;
 8003a4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(hcanx, &sFilterConfig);
 8003a50:	f107 0310 	add.w	r3, r7, #16
 8003a54:	4619      	mov	r1, r3
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f00e fc4c 	bl	80122f4 <HAL_CAN_ConfigFilter>



	if(hcanx == &hcan1){
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <CANxInit+0x174>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d11c      	bne.n	8003a9e <CANxInit+0x12e>

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <CANxInit+0x114>
			/* CAN1_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX0_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	210e      	movs	r1, #14
 8003a6e:	2014      	movs	r0, #20
 8003a70:	f00f facc 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a74:	2014      	movs	r0, #20
 8003a76:	f00f fae5 	bl	8013044 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f00e ff7f 	bl	8012980 <HAL_CAN_ActivateNotification>
 8003a82:	e028      	b.n	8003ad6 <CANxInit+0x166>

		}else{
			/* CAN1_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN1_RX1_IRQn, CAN1_FIFO1_IRQ_PRIO, 0);
 8003a84:	2200      	movs	r2, #0
 8003a86:	210e      	movs	r1, #14
 8003a88:	2015      	movs	r0, #21
 8003a8a:	f00f fabf 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003a8e:	2015      	movs	r0, #21
 8003a90:	f00f fad8 	bl	8013044 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003a94:	2110      	movs	r1, #16
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f00e ff72 	bl	8012980 <HAL_CAN_ActivateNotification>
 8003a9c:	e01b      	b.n	8003ad6 <CANxInit+0x166>
		}
	}else{

		if(FilterFIFOAssignment ==  CAN_FILTER_FIFO0){
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10c      	bne.n	8003abe <CANxInit+0x14e>
			/* CAN2_RX0_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX0_IRQn, CAN2_FIFO0_IRQ_PRIO, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	210e      	movs	r1, #14
 8003aa8:	2040      	movs	r0, #64	; 0x40
 8003aaa:	f00f faaf 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003aae:	2040      	movs	r0, #64	; 0x40
 8003ab0:	f00f fac8 	bl	8013044 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003ab4:	2102      	movs	r1, #2
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f00e ff62 	bl	8012980 <HAL_CAN_ActivateNotification>
 8003abc:	e00b      	b.n	8003ad6 <CANxInit+0x166>
		}else{
			/* CAN2_RX1_IRQn interrupt configuration */
			HAL_NVIC_SetPriority(CAN2_RX1_IRQn, CAN2_FIFO1_IRQ_PRIO, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	210e      	movs	r1, #14
 8003ac2:	2041      	movs	r0, #65	; 0x41
 8003ac4:	f00f faa2 	bl	801300c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003ac8:	2041      	movs	r0, #65	; 0x41
 8003aca:	f00f fabb 	bl	8013044 <HAL_NVIC_EnableIRQ>
			HAL_CAN_ActivateNotification(hcanx, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003ace:	2110      	movs	r1, #16
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f00e ff55 	bl	8012980 <HAL_CAN_ActivateNotification>
		}
	}

	HAL_CAN_Start(hcanx);
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f00e fcec 	bl	80124b4 <HAL_CAN_Start>

}
 8003adc:	bf00      	nop
 8003ade:	3738      	adds	r7, #56	; 0x38
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20006fe4 	.word	0x20006fe4
 8003ae8:	40006400 	.word	0x40006400
 8003aec:	40006800 	.word	0x40006800

08003af0 <CAN_TxMsg>:
 * Function Return		: canmailbox		The number of the mailbox that is used for transmission or
  *         								CAN_TxStatus_NoMailBox if there is no empty mailbox.
 * Function Example		: CAN_TxMsg(&hcan1,1,&data,1);
 */
uint32_t CAN_TxMsg(CAN_HandleTypeDef* hcanx,uint32_t StdId_11bits,uint8_t *Msg,uint8_t len)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b090      	sub	sp, #64	; 0x40
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	70fb      	strb	r3, [r7, #3]


	while(HAL_CAN_GetTxMailboxesFreeLevel(hcanx) == 0);
 8003afe:	bf00      	nop
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f00e fdf6 	bl	80126f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f9      	beq.n	8003b00 <CAN_TxMsg+0x10>
	CAN_TxHeaderTypeDef TxMessage;
	uint32_t canMailbox;
	uint8_t* buf = Msg;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t i=0,datalen=len;
 8003b10:	2300      	movs	r3, #0
 8003b12:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	873b      	strh	r3, [r7, #56]	; 0x38
	uint8_t Txmsg[8];

	TxMessage.StdId=StdId_11bits;					 // standard identifier=0
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	623b      	str	r3, [r7, #32]
	TxMessage.ExtId=0;					 // extended identifier=StdId
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
	TxMessage.IDE=CAN_Id_Standard;			 // type of identifier for the message is Standard
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
	TxMessage.RTR=CAN_RTR_Data;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	TxMessage.TransmitGlobalTime = DISABLE;  // the type of frame for the message that will be transmitted
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	while(datalen--)
 8003b2e:	e00c      	b.n	8003b4a <CAN_TxMsg+0x5a>
	{
		Txmsg[i++]= *(uint8_t*)buf++;
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003b38:	1c51      	adds	r1, r2, #1
 8003b3a:	8779      	strh	r1, [r7, #58]	; 0x3a
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b44:	440b      	add	r3, r1
 8003b46:	f803 2c2c 	strb.w	r2, [r3, #-44]
	while(datalen--)
 8003b4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b4c:	1e5a      	subs	r2, r3, #1
 8003b4e:	873a      	strh	r2, [r7, #56]	; 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ed      	bne.n	8003b30 <CAN_TxMsg+0x40>
//			if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
//				Error_Handler();
//			}
//		}
	}
	if(i>0){
 8003b54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00f      	beq.n	8003b7a <CAN_TxMsg+0x8a>
		TxMessage.DLC = i;
 8003b5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
		if (HAL_CAN_AddTxMessage(hcanx, &TxMessage, Txmsg, &canMailbox) != HAL_OK) {
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	f107 0214 	add.w	r2, r7, #20
 8003b66:	f107 0120 	add.w	r1, r7, #32
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f00e fce6 	bl	801253c <HAL_CAN_AddTxMessage>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <CAN_TxMsg+0x8a>
			Error_Handler();
 8003b76:	f001 f9a3 	bl	8004ec0 <Error_Handler>
		}

	}

	return(canMailbox);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3740      	adds	r7, #64	; 0x40
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <esp32StopSend>:
	char espBuff[1] = "c";
//	UARTPrintString(esp32.huart, espBuff);

}

void esp32StopSend(void){
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
	char espBuff[1] = "s";
 8003b8a:	2373      	movs	r3, #115	; 0x73
 8003b8c:	713b      	strb	r3, [r7, #4]
//	UARTPrintString(esp32.huart, espBuff);
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <esp32Handler>:

void esp32Handler(void){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	static uint8_t state=0;
	switch(state){
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <esp32Handler+0x94>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <esp32Handler+0x12>
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d017      	beq.n	8003bdc <esp32Handler+0x40>
		}
		state = 0;
		HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
		break;
	}
}
 8003bac:	e03e      	b.n	8003c2c <esp32Handler+0x90>
		if(esp32.buffer[0] == 0x03){
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <esp32Handler+0x98>)
 8003bb0:	791b      	ldrb	r3, [r3, #4]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d10a      	bne.n	8003bcc <esp32Handler+0x30>
			state = 1;
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <esp32Handler+0x94>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 3);
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <esp32Handler+0x98>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	491d      	ldr	r1, [pc, #116]	; (8003c38 <esp32Handler+0x9c>)
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f014 fb15 	bl	80181f4 <HAL_UART_Receive_IT>
		break;
 8003bca:	e02f      	b.n	8003c2c <esp32Handler+0x90>
			HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	; (8003c34 <esp32Handler+0x98>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4919      	ldr	r1, [pc, #100]	; (8003c38 <esp32Handler+0x9c>)
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f014 fb0d 	bl	80181f4 <HAL_UART_Receive_IT>
		break;
 8003bda:	e027      	b.n	8003c2c <esp32Handler+0x90>
		if(esp32.buffer[2] == 0x24){
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <esp32Handler+0x98>)
 8003bde:	799b      	ldrb	r3, [r3, #6]
 8003be0:	2b24      	cmp	r3, #36	; 0x24
 8003be2:	d118      	bne.n	8003c16 <esp32Handler+0x7a>
			esp32.sample[esp32.sample_count++] = esp32.buffer[0];
 8003be4:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <esp32Handler+0x98>)
 8003be6:	7e1b      	ldrb	r3, [r3, #24]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	b2d1      	uxtb	r1, r2
 8003bec:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <esp32Handler+0x98>)
 8003bee:	7611      	strb	r1, [r2, #24]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <esp32Handler+0x98>)
 8003bf4:	791a      	ldrb	r2, [r3, #4]
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <esp32Handler+0x98>)
 8003bf8:	440b      	add	r3, r1
 8003bfa:	765a      	strb	r2, [r3, #25]
			if(esp32.sample_count>20){
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <esp32Handler+0x98>)
 8003bfe:	7e1b      	ldrb	r3, [r3, #24]
 8003c00:	2b14      	cmp	r3, #20
 8003c02:	d908      	bls.n	8003c16 <esp32Handler+0x7a>
				esp32StopSend();
 8003c04:	f7ff ffbe 	bl	8003b84 <esp32StopSend>
				esp32.data_ready=1;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <esp32Handler+0x98>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				esp32.sample_count=0;
 8003c10:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <esp32Handler+0x98>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	761a      	strb	r2, [r3, #24]
		state = 0;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <esp32Handler+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(esp32.huart, esp32.buffer, 1);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <esp32Handler+0x98>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2201      	movs	r2, #1
 8003c22:	4905      	ldr	r1, [pc, #20]	; (8003c38 <esp32Handler+0x9c>)
 8003c24:	4618      	mov	r0, r3
 8003c26:	f014 fae5 	bl	80181f4 <HAL_UART_Receive_IT>
		break;
 8003c2a:	bf00      	nop
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200007b8 	.word	0x200007b8
 8003c34:	2000a61c 	.word	0x2000a61c
 8003c38:	2000a620 	.word	0x2000a620

08003c3c <I2CX_DMA_RX_Init>:
 * 						  ClockSpeed					Speed of transmission can be CLOCK_SPEED_100KHz or CLOCK_SPEED_400KHz
 * Function Return		: NONE
 * Function Example		: I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 *
 */
void I2CX_DMA_RX_Init(I2C_HandleTypeDef *hi2cx,DMA_HandleTypeDef* hdma_i2cx,uint8_t OwnAddress,uint32_t ClockSpeed){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]

	IRQn_Type nvic,nvicER,nvicEV;
	uint32_t DMA_CHANNEL;
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	4b9e      	ldr	r3, [pc, #632]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	4a9d      	ldr	r2, [pc, #628]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003c56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5c:	4b9b      	ldr	r3, [pc, #620]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]
	if(hi2cx == &hi2c1){
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a99      	ldr	r2, [pc, #612]	; (8003ed0 <I2CX_DMA_RX_Init+0x294>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d11d      	bne.n	8003cac <I2CX_DMA_RX_Init+0x70>

		hi2cx->Instance = I2C1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a98      	ldr	r2, [pc, #608]	; (8003ed4 <I2CX_DMA_RX_Init+0x298>)
 8003c74:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream0;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4a97      	ldr	r2, [pc, #604]	; (8003ed8 <I2CX_DMA_RX_Init+0x29c>)
 8003c7a:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_1;
 8003c7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c80:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream0_IRQn;
 8003c82:	230b      	movs	r3, #11
 8003c84:	77fb      	strb	r3, [r7, #31]

		nvicER = I2C1_ER_IRQn;
 8003c86:	2320      	movs	r3, #32
 8003c88:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C1_EV_IRQn;
 8003c8a:	231f      	movs	r3, #31
 8003c8c:	777b      	strb	r3, [r7, #29]
		__HAL_RCC_DMA1_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	4b8e      	ldr	r3, [pc, #568]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a8d      	ldr	r2, [pc, #564]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <I2CX_DMA_RX_Init+0x290>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	e022      	b.n	8003cf2 <I2CX_DMA_RX_Init+0xb6>
	}else if(hi2cx == &hi2c2){
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a8b      	ldr	r2, [pc, #556]	; (8003edc <I2CX_DMA_RX_Init+0x2a0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10f      	bne.n	8003cd4 <I2CX_DMA_RX_Init+0x98>

		hi2cx->Instance = I2C2;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4a8a      	ldr	r2, [pc, #552]	; (8003ee0 <I2CX_DMA_RX_Init+0x2a4>)
 8003cb8:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream3;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4a89      	ldr	r2, [pc, #548]	; (8003ee4 <I2CX_DMA_RX_Init+0x2a8>)
 8003cbe:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_7;
 8003cc0:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8003cc4:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream3_IRQn;
 8003cc6:	230e      	movs	r3, #14
 8003cc8:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C2_ER_IRQn;
 8003cca:	2322      	movs	r3, #34	; 0x22
 8003ccc:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C2_EV_IRQn;
 8003cce:	2321      	movs	r3, #33	; 0x21
 8003cd0:	777b      	strb	r3, [r7, #29]
 8003cd2:	e00e      	b.n	8003cf2 <I2CX_DMA_RX_Init+0xb6>

	}else{
		hi2cx->Instance = I2C3;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4a84      	ldr	r2, [pc, #528]	; (8003ee8 <I2CX_DMA_RX_Init+0x2ac>)
 8003cd8:	601a      	str	r2, [r3, #0]

		hdma_i2cx->Instance = DMA1_Stream2;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4a83      	ldr	r2, [pc, #524]	; (8003eec <I2CX_DMA_RX_Init+0x2b0>)
 8003cde:	601a      	str	r2, [r3, #0]
		DMA_CHANNEL= DMA_CHANNEL_3;
 8003ce0:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003ce4:	61bb      	str	r3, [r7, #24]
		nvic = DMA1_Stream2_IRQn;
 8003ce6:	230d      	movs	r3, #13
 8003ce8:	77fb      	strb	r3, [r7, #31]
		nvicER = I2C3_ER_IRQn;
 8003cea:	2349      	movs	r3, #73	; 0x49
 8003cec:	77bb      	strb	r3, [r7, #30]
		nvicEV = I2C3_EV_IRQn;
 8003cee:	2348      	movs	r3, #72	; 0x48
 8003cf0:	777b      	strb	r3, [r7, #29]
	}

	hdma_i2cx->Init.Channel = DMA_CHANNEL;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	605a      	str	r2, [r3, #4]
	hdma_i2cx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
	hdma_i2cx->Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	60da      	str	r2, [r3, #12]
	hdma_i2cx->Init.MemInc = DMA_MINC_ENABLE;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d0a:	611a      	str	r2, [r3, #16]
	hdma_i2cx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	615a      	str	r2, [r3, #20]
	hdma_i2cx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2200      	movs	r2, #0
 8003d16:	619a      	str	r2, [r3, #24]
	hdma_i2cx->Init.Mode = DMA_NORMAL;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	61da      	str	r2, [r3, #28]
	hdma_i2cx->Init.Priority = DMA_PRIORITY_HIGH;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d24:	621a      	str	r2, [r3, #32]
	hdma_i2cx->Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_i2cx->Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_i2cx->Init.MemBurst = DMA_MBURST_INC4;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_i2cx->Init.PeriphBurst = DMA_PBURST_INC4;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(hdma_i2cx) != HAL_OK)
 8003d42:	68b8      	ldr	r0, [r7, #8]
 8003d44:	f00f f9a8 	bl	8013098 <HAL_DMA_Init>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2CX_DMA_RX_Init+0x116>
	{

		Error_Handler();
 8003d4e:	f001 f8b7 	bl	8004ec0 <Error_Handler>

	}
	__HAL_LINKDMA(hi2cx,hdmarx,*hdma_i2cx);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */

	//	__HAL_DMA_ENABLE_IT(hdma_i2cx,DMA_IT_TC);
	if(hi2cx == &hi2c1){
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a5b      	ldr	r2, [pc, #364]	; (8003ed0 <I2CX_DMA_RX_Init+0x294>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d111      	bne.n	8003d8a <I2CX_DMA_RX_Init+0x14e>
		HAL_NVIC_SetPriority(nvic, DMA1_Str0__IRQ_PRIO, 0);
 8003d66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	210a      	movs	r1, #10
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f00f f94c 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f00f f97f 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f00f f95e 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8003d88:	e026      	b.n	8003dd8 <I2CX_DMA_RX_Init+0x19c>
	}else if(hi2cx == &hi2c2){
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4a53      	ldr	r2, [pc, #332]	; (8003edc <I2CX_DMA_RX_Init+0x2a0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d111      	bne.n	8003db6 <I2CX_DMA_RX_Init+0x17a>
		HAL_NVIC_SetPriority(nvic, DMA1_Str3__IRQ_PRIO, 0);
 8003d92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d96:	2200      	movs	r2, #0
 8003d98:	210e      	movs	r1, #14
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f00f f936 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003da0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f00f f969 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f00f f948 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8003db4:	e010      	b.n	8003dd8 <I2CX_DMA_RX_Init+0x19c>
	}else{
		HAL_NVIC_SetPriority(nvic, DMA1_Str2__IRQ_PRIO, 0);
 8003db6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	210e      	movs	r1, #14
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f00f f924 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_ClearPendingIRQ(nvic);
 8003dc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f00f f957 	bl	801307c <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_EnableIRQ(nvic);
 8003dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f00f f936 	bl	8013044 <HAL_NVIC_EnableIRQ>
	}

	hi2cx->Init.ClockSpeed = ClockSpeed;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
	hi2cx->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
	hi2cx->Init.OwnAddress1 = OwnAddress<<1;
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60da      	str	r2, [r3, #12]
	hi2cx->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003df4:	611a      	str	r2, [r3, #16]
	hi2cx->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
	hi2cx->Init.OwnAddress2 = 0;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
	hi2cx->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	61da      	str	r2, [r3, #28]
	hi2cx->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	621a      	str	r2, [r3, #32]

	if(hi2cx == &hi2c1){
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <I2CX_DMA_RX_Init+0x294>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d118      	bne.n	8003e48 <I2CX_DMA_RX_Init+0x20c>
		HAL_NVIC_SetPriority(nvicER, I2C1_ER_IRQ_PRIO, 0);
 8003e16:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f00f f8f4 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e24:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00f f90b 	bl	8013044 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C1_EV_IRQ_PRIO, 0);
 8003e2e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2108      	movs	r1, #8
 8003e36:	4618      	mov	r0, r3
 8003e38:	f00f f8e8 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f00f f8ff 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8003e46:	e034      	b.n	8003eb2 <I2CX_DMA_RX_Init+0x276>
	}else if(hi2cx == &hi2c2){
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4a24      	ldr	r2, [pc, #144]	; (8003edc <I2CX_DMA_RX_Init+0x2a0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d118      	bne.n	8003e82 <I2CX_DMA_RX_Init+0x246>
		HAL_NVIC_SetPriority(nvicER, I2C2_ER_IRQ_PRIO, 0);
 8003e50:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e54:	2200      	movs	r2, #0
 8003e56:	210e      	movs	r1, #14
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00f f8d7 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e5e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00f f8ee 	bl	8013044 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C2_EV_IRQ_PRIO, 0);
 8003e68:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	210e      	movs	r1, #14
 8003e70:	4618      	mov	r0, r3
 8003e72:	f00f f8cb 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003e76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f00f f8e2 	bl	8013044 <HAL_NVIC_EnableIRQ>
 8003e80:	e017      	b.n	8003eb2 <I2CX_DMA_RX_Init+0x276>
	}else{
		HAL_NVIC_SetPriority(nvicER, I2C3_ER_IRQ_PRIO, 0);
 8003e82:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e86:	2200      	movs	r2, #0
 8003e88:	210e      	movs	r1, #14
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f00f f8be 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicER);
 8003e90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f00f f8d5 	bl	8013044 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(nvicEV, I2C3_EV_IRQ_PRIO, 0);
 8003e9a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	210e      	movs	r1, #14
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f00f f8b2 	bl	801300c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(nvicEV);
 8003ea8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f00f f8c9 	bl	8013044 <HAL_NVIC_EnableIRQ>
	}

	if (HAL_I2C_Init(hi2cx) != HAL_OK)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f010 faa8 	bl	8014408 <HAL_I2C_Init>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2CX_DMA_RX_Init+0x286>
	{

		Error_Handler();
 8003ebe:	f000 ffff 	bl	8004ec0 <Error_Handler>
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	20007630 	.word	0x20007630
 8003ed4:	40005400 	.word	0x40005400
 8003ed8:	40026010 	.word	0x40026010
 8003edc:	20007688 	.word	0x20007688
 8003ee0:	40005800 	.word	0x40005800
 8003ee4:	40026058 	.word	0x40026058
 8003ee8:	40005c00 	.word	0x40005c00
 8003eec:	40026040 	.word	0x40026040

08003ef0 <I2C2_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_EV_IRQHandler(void){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0


	HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <I2C2_EV_IRQHandler+0x10>)
 8003ef6:	f010 fd11 	bl	801491c <HAL_I2C_EV_IRQHandler>


}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20007688 	.word	0x20007688

08003f04 <I2C2_ER_IRQHandler>:
 * Function Remarks		: This interrupt handle the error event of I2C2.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C2_ER_IRQHandler(void){
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0

	HAL_I2C_ER_IRQHandler(&hi2c2);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <I2C2_ER_IRQHandler+0x10>)
 8003f0a:	f010 fe74 	bl	8014bf6 <HAL_I2C_ER_IRQHandler>


}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20007688 	.word	0x20007688

08003f18 <I2C3_EV_IRQHandler>:
 * Function Remarks		: This interrupt handle slave receive mode, master receive mode and slave transmit mode.
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void I2C3_EV_IRQHandler(void){
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0

	//	taskENTER_CRITICAL();
	HAL_I2C_EV_IRQHandler(&hi2c3);
 8003f1c:	4802      	ldr	r0, [pc, #8]	; (8003f28 <I2C3_EV_IRQHandler+0x10>)
 8003f1e:	f010 fcfd 	bl	801491c <HAL_I2C_EV_IRQHandler>
	//	taskEXIT_CRITICAL();

}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20007334 	.word	0x20007334

08003f2c <KalmanFilterInit>:
 *
 *
 * */

void KalmanFilterInit(uint8_t  kalman_loop,  uint16_t* kalman_input,float* kalman_output,
						float mea_e, float est_e, float q, KALMANFILTER_t *kalmanfilter){
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	61b9      	str	r1, [r7, #24]
 8003f34:	617a      	str	r2, [r7, #20]
 8003f36:	ed87 0a04 	vstr	s0, [r7, #16]
 8003f3a:	edc7 0a03 	vstr	s1, [r7, #12]
 8003f3e:	ed87 1a02 	vstr	s2, [r7, #8]
 8003f42:	607b      	str	r3, [r7, #4]
 8003f44:	4603      	mov	r3, r0
 8003f46:	77fb      	strb	r3, [r7, #31]

	kalmanfilter->kalman_input = kalman_input;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	61da      	str	r2, [r3, #28]
	kalmanfilter->kalman_output= kalman_output;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	621a      	str	r2, [r3, #32]
	kalmanfilter->kalman_loop  = kalman_loop;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7ffa      	ldrb	r2, [r7, #31]
 8003f58:	761a      	strb	r2, [r3, #24]

	kalmanfilter->_err_measure = mea_e;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	601a      	str	r2, [r3, #0]
	kalmanfilter->_err_estimate = est_e;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]
	kalmanfilter->_q = q;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
	kalmanfilter->_current_estimate = 0;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
	kalmanfilter->_last_estimate = 0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]
	kalmanfilter->_kalman_gain = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
}
 8003f84:	bf00      	nop
 8003f86:	3724      	adds	r7, #36	; 0x24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <updateEstimate>:

float updateEstimate(float mea, KALMANFILTER_t *kalmanfilter)
{
 8003f90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f9c:	6038      	str	r0, [r7, #0]
	kalmanfilter->_kalman_gain = kalmanfilter->_err_estimate / (kalmanfilter->_err_estimate + kalmanfilter->_err_measure);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	edd3 6a01 	vldr	s13, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	edc3 7a05 	vstr	s15, [r3, #20]
	kalmanfilter->_current_estimate = kalmanfilter->_last_estimate + kalmanfilter->_kalman_gain * (mea - kalmanfilter->_last_estimate);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	edd3 6a05 	vldr	s13, [r3, #20]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fd0:	ed97 6a01 	vldr	s12, [r7, #4]
 8003fd4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	edc3 7a03 	vstr	s15, [r3, #12]
	kalmanfilter->_err_estimate = (1.0 - kalmanfilter->_kalman_gain) * kalmanfilter->_err_estimate + fabs(kalmanfilter->_last_estimate - kalmanfilter->_current_estimate) * kalmanfilter->_q;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc faac 	bl	8000548 <__aeabi_f2d>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	4926      	ldr	r1, [pc, #152]	; (8004094 <updateEstimate+0x104>)
 8003ffa:	f7fc f945 	bl	8000288 <__aeabi_dsub>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4614      	mov	r4, r2
 8004004:	461d      	mov	r5, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fc fa9c 	bl	8000548 <__aeabi_f2d>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4690      	mov	r8, r2
 8004022:	4699      	mov	r9, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	ed93 7a04 	vldr	s14, [r3, #16]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004034:	eef0 7ae7 	vabs.f32	s15, s15
 8004038:	ee17 0a90 	vmov	r0, s15
 800403c:	f7fc fa84 	bl	8000548 <__aeabi_f2d>
 8004040:	4604      	mov	r4, r0
 8004042:	460d      	mov	r5, r1
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa7d 	bl	8000548 <__aeabi_f2d>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4620      	mov	r0, r4
 8004054:	4629      	mov	r1, r5
 8004056:	f7fc facf 	bl	80005f8 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4640      	mov	r0, r8
 8004060:	4649      	mov	r1, r9
 8004062:	f7fc f913 	bl	800028c <__adddf3>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f7fc fdbb 	bl	8000be8 <__aeabi_d2f>
 8004072:	4602      	mov	r2, r0
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	605a      	str	r2, [r3, #4]
	kalmanfilter->_last_estimate = kalmanfilter->_current_estimate;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	611a      	str	r2, [r3, #16]

	return kalmanfilter->_current_estimate;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	ee07 3a90 	vmov	s15, r3
}
 8004088:	eeb0 0a67 	vmov.f32	s0, s15
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004094:	3ff00000 	.word	0x3ff00000

08004098 <KalmanFilter>:

float getKalmanGain(KALMANFILTER_t *kalmanfilter) {
	return kalmanfilter->_kalman_gain;
}

void KalmanFilter (KALMANFILTER_t *kalmanfilter){
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
		kalmanfilter->kalman_output_tmp  = ((float)*(kalmanfilter->kalman_input))/10000.0;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ae:	eddf 6a13 	vldr	s13, [pc, #76]	; 80040fc <KalmanFilter+0x64>
 80040b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		kalmanfilter->kalman_output_tmp  = updateEstimate(kalmanfilter->kalman_output_tmp, kalmanfilter);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	eeb0 0a67 	vmov.f32	s0, s15
 80040c8:	f7ff ff62 	bl	8003f90 <updateEstimate>
 80040cc:	eef0 7a40 	vmov.f32	s15, s0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		kalmanfilter->kalman_output_tmp  = (kalmanfilter->kalman_output_tmp)*10000.0;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80040dc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80040fc <KalmanFilter+0x64>
 80040e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		*(kalmanfilter->kalman_output )  = kalmanfilter->kalman_output_tmp ;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	461c4000 	.word	0x461c4000

08004100 <LaserInit>:
 */

void LaserInit (float min_value, float max_value,
				float min_distance, float max_distance,
				float *input, float *output,
				LASER_t *laser){
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	; 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	ed87 0a07 	vstr	s0, [r7, #28]
 800410a:	edc7 0a06 	vstr	s1, [r7, #24]
 800410e:	ed87 1a05 	vstr	s2, [r7, #20]
 8004112:	edc7 1a04 	vstr	s3, [r7, #16]
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]

	laser->min_value = min_value;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	601a      	str	r2, [r3, #0]
	laser->max_value = max_value;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	605a      	str	r2, [r3, #4]
	laser->min_distance = min_distance;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	609a      	str	r2, [r3, #8]
	laser->max_distance = max_distance;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	60da      	str	r2, [r3, #12]
	laser->input = input;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	611a      	str	r2, [r3, #16]
	laser->output = output;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	615a      	str	r2, [r3, #20]

	laser->kcd=(max_distance-min_distance)/(max_value-min_value);
 8004140:	ed97 7a04 	vldr	s14, [r7, #16]
 8004144:	edd7 7a05 	vldr	s15, [r7, #20]
 8004148:	ee77 6a67 	vsub.f32	s13, s14, s15
 800414c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004150:	edd7 7a07 	vldr	s15, [r7, #28]
 8004154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	edc3 7a06 	vstr	s15, [r3, #24]

	laser->count=0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	839a      	strh	r2, [r3, #28]

}
 8004168:	bf00      	nop
 800416a:	3724      	adds	r7, #36	; 0x24
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <Laser>:
* Function Example		: Laser(&left_laser);
*/
/*
 * changes: add the min distance since the min distance not always 0
 */
void Laser(LASER_t *laser){
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
//
//	for(laser->count2=0;laser->count2<10;laser->count2++){
//		laser->sum+=laser->stored[laser->count2];
//	}
//	laser->average=(float)laser->sum/10.0;
	if(*(laser->input)<=(laser->min_value)){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	ed93 7a00 	vldr	s14, [r3]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	edd3 7a00 	vldr	s15, [r3]
 800418a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	d804      	bhi.n	800419e <Laser+0x2a>
		*(laser->input)=(laser->min_value);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	601a      	str	r2, [r3, #0]
	}
	if(*(laser->input)>=(laser->max_value)){
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	ed93 7a00 	vldr	s14, [r3]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80041ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	db04      	blt.n	80041c0 <Laser+0x4c>
		*(laser->input)=(laser->max_value);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6852      	ldr	r2, [r2, #4]
 80041be:	601a      	str	r2, [r3, #0]
	}
	*(laser->output)=((*(laser->input) - laser->min_value) * laser->kcd) + laser->min_distance;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	edd3 7a00 	vldr	s15, [r3]
 80041ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80041d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	edd3 7a02 	vldr	s15, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041ea:	edc3 7a00 	vstr	s15, [r3]

	if(laser->count==10) laser->count=0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8b9b      	ldrh	r3, [r3, #28]
 80041f2:	2b0a      	cmp	r3, #10
 80041f4:	d102      	bne.n	80041fc <Laser+0x88>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	839a      	strh	r2, [r3, #28]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <main>:
int pp_start = 0;

//pw lifting 3000 slow

int main(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b0b2      	sub	sp, #200	; 0xc8
 800420c:	af00      	add	r7, sp, #0

	set();
 800420e:	f005 f8b9 	bl	8009384 <set>

	const osThreadAttr_t MainTask_attributes = {
 8004212:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004216:	2224      	movs	r2, #36	; 0x24
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f018 fba6 	bl	801c96c <memset>
 8004220:	4b4a      	ldr	r3, [pc, #296]	; (800434c <main+0x144>)
 8004222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800422a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800422e:	2318      	movs	r3, #24
 8004230:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};


	const osThreadAttr_t EmergencyTask_attributes = {
 8004234:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004238:	2224      	movs	r2, #36	; 0x24
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f018 fb95 	bl	801c96c <memset>
 8004242:	4b43      	ldr	r3, [pc, #268]	; (8004350 <main+0x148>)
 8004244:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800424c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004250:	2318      	movs	r3, #24
 8004252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			.name = "EmergencyTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t TuneTask_attributes = {
 8004256:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f018 fb84 	bl	801c96c <memset>
 8004264:	4b3b      	ldr	r3, [pc, #236]	; (8004354 <main+0x14c>)
 8004266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426c:	673b      	str	r3, [r7, #112]	; 0x70
 800426e:	2320      	movs	r3, #32
 8004270:	677b      	str	r3, [r7, #116]	; 0x74
			.name = "TuneTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityAboveNormal,
	};

	const osThreadAttr_t LagoriTask_attributes = {
 8004272:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f018 fb76 	bl	801c96c <memset>
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <main+0x150>)
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
 8004284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800428a:	2318      	movs	r3, #24
 800428c:	653b      	str	r3, [r7, #80]	; 0x50
			.name = "LagoriTask",
			.stack_size = 1024 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osThreadAttr_t BLDCTask_attributes = {
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f018 fb68 	bl	801c96c <memset>
 800429c:	4b2f      	ldr	r3, [pc, #188]	; (800435c <main+0x154>)
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a6:	2318      	movs	r3, #24
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			.name = "BLDCTask",
			.stack_size = 256 * 4,
			.priority = (osPriority_t) osPriorityNormal,
	};

	const osSemaphoreAttr_t TuneSemaphore_attributes = {
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <main+0x158>)
 80042b8:	607b      	str	r3, [r7, #4]
//	ILI9341_Init();
////	ILI9341_Set_Rotation(1);
//	ILI9341_Fill_Screen(BLACK);
//	ILI9341_Init_List();

	sys.control = 1;
 80042ba:	4a2a      	ldr	r2, [pc, #168]	; (8004364 <main+0x15c>)
 80042bc:	7813      	ldrb	r3, [r2, #0]
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	7013      	strb	r3, [r2, #0]
//	sys.tunePid = 1;
//	sys.tunePP = 1;
//	sys.stickf = 1;

	osKernelInitialize();
 80042c4:	f014 ff78 	bl	80191b8 <osKernelInitialize>
	MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 80042c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042cc:	461a      	mov	r2, r3
 80042ce:	2100      	movs	r1, #0
 80042d0:	4825      	ldr	r0, [pc, #148]	; (8004368 <main+0x160>)
 80042d2:	f014 ffbb 	bl	801924c <osThreadNew>
 80042d6:	4603      	mov	r3, r0
 80042d8:	4a24      	ldr	r2, [pc, #144]	; (800436c <main+0x164>)
 80042da:	6013      	str	r3, [r2, #0]
	EmergencyTaskHandle = osThreadNew(EmergencyTask, NULL, &EmergencyTask_attributes);
 80042dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80042e0:	461a      	mov	r2, r3
 80042e2:	2100      	movs	r1, #0
 80042e4:	4822      	ldr	r0, [pc, #136]	; (8004370 <main+0x168>)
 80042e6:	f014 ffb1 	bl	801924c <osThreadNew>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a21      	ldr	r2, [pc, #132]	; (8004374 <main+0x16c>)
 80042ee:	6013      	str	r3, [r2, #0]
	TuneTaskHandle = osThreadNew(TuneTask, NULL, &TuneTask_attributes);
 80042f0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042f4:	461a      	mov	r2, r3
 80042f6:	2100      	movs	r1, #0
 80042f8:	481f      	ldr	r0, [pc, #124]	; (8004378 <main+0x170>)
 80042fa:	f014 ffa7 	bl	801924c <osThreadNew>
 80042fe:	4603      	mov	r3, r0
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <main+0x174>)
 8004302:	6013      	str	r3, [r2, #0]
	LagoriTaskHandle = osThreadNew(LagoriTask, NULL, &LagoriTask_attributes);
 8004304:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004308:	461a      	mov	r2, r3
 800430a:	2100      	movs	r1, #0
 800430c:	481c      	ldr	r0, [pc, #112]	; (8004380 <main+0x178>)
 800430e:	f014 ff9d 	bl	801924c <osThreadNew>
 8004312:	4603      	mov	r3, r0
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <main+0x17c>)
 8004316:	6013      	str	r3, [r2, #0]
	BLDCTaskHandle = osThreadNew(BLDCTask, NULL, &BLDCTask_attributes);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	461a      	mov	r2, r3
 800431e:	2100      	movs	r1, #0
 8004320:	4819      	ldr	r0, [pc, #100]	; (8004388 <main+0x180>)
 8004322:	f014 ff93 	bl	801924c <osThreadNew>
 8004326:	4603      	mov	r3, r0
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <main+0x184>)
 800432a:	6013      	str	r3, [r2, #0]
	TuneSemaphore = osSemaphoreNew(1, 0, &TuneSemaphore_attributes);
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	461a      	mov	r2, r3
 8004330:	2100      	movs	r1, #0
 8004332:	2001      	movs	r0, #1
 8004334:	f015 f864 	bl	8019400 <osSemaphoreNew>
 8004338:	4603      	mov	r3, r0
 800433a:	4a15      	ldr	r2, [pc, #84]	; (8004390 <main+0x188>)
 800433c:	6013      	str	r3, [r2, #0]
//	led2 = 1;
	osKernelStart();
 800433e:	f014 ff5f 	bl	8019200 <osKernelStart>
 8004342:	2300      	movs	r3, #0
//			sprintf(data, "%d, %d\n", enqpwLG, enqpwLlf);
//			UARTSend
//			counter = 0;
//		}
//	}
}
 8004344:	4618      	mov	r0, r3
 8004346:	37c8      	adds	r7, #200	; 0xc8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	08021d80 	.word	0x08021d80
 8004350:	08021d8c 	.word	0x08021d8c
 8004354:	08021d9c 	.word	0x08021d9c
 8004358:	08021da8 	.word	0x08021da8
 800435c:	08021db4 	.word	0x08021db4
 8004360:	08021dc0 	.word	0x08021dc0
 8004364:	2000779c 	.word	0x2000779c
 8004368:	080043c9 	.word	0x080043c9
 800436c:	20007be0 	.word	0x20007be0
 8004370:	08004b29 	.word	0x08004b29
 8004374:	20009efc 	.word	0x20009efc
 8004378:	08004ccd 	.word	0x08004ccd
 800437c:	20009d2c 	.word	0x20009d2c
 8004380:	08004ae9 	.word	0x08004ae9
 8004384:	200096a8 	.word	0x200096a8
 8004388:	08004b09 	.word	0x08004b09
 800438c:	20009494 	.word	0x20009494
 8004390:	2000a140 	.word	0x2000a140

08004394 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	led1 = !led1;
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <TIM6_DAC_IRQHandler+0x2c>)
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4a07      	ldr	r2, [pc, #28]	; (80043c0 <TIM6_DAC_IRQHandler+0x2c>)
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2d9      	uxtb	r1, r3
 80043ae:	7853      	ldrb	r3, [r2, #1]
 80043b0:	f361 1345 	bfi	r3, r1, #5, #1
 80043b4:	7053      	strb	r3, [r2, #1]
//		if(pp.path == 1)			exled1 = 1;
//		else if(pp.path == 2)		exled2 = 1;
//		else if(pp.path == 3)		exled3 = 1;
//		else if(pp.path == 4)		exled4 = 1;
//	}
	HAL_TIM_IRQHandler(&htim6);
 80043b6:	4803      	ldr	r0, [pc, #12]	; (80043c4 <TIM6_DAC_IRQHandler+0x30>)
 80043b8:	f012 ffdc 	bl	8017374 <HAL_TIM_IRQHandler>
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40020814 	.word	0x40020814
 80043c4:	200069ac 	.word	0x200069ac

080043c8 <MainTask>:

void MainTask(void *argument)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af06      	add	r7, sp, #24
 80043ce:	6078      	str	r0, [r7, #4]
	led3 = 1;
 80043d0:	4aa6      	ldr	r2, [pc, #664]	; (800466c <MainTask+0x2a4>)
 80043d2:	7853      	ldrb	r3, [r2, #1]
 80043d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d8:	7053      	strb	r3, [r2, #1]
	fx.flags = 0;
 80043da:	4ba5      	ldr	r3, [pc, #660]	; (8004670 <MainTask+0x2a8>)
 80043dc:	2200      	movs	r2, #0
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
	while(1)
	{
		while(sys.control){
 80043e0:	e124      	b.n	800462c <MainTask+0x264>
			if(ps4.button == SHARE){
 80043e2:	4ba4      	ldr	r3, [pc, #656]	; (8004674 <MainTask+0x2ac>)
 80043e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d106      	bne.n	80043f8 <MainTask+0x30>
				sys.manual = 1;
 80043ea:	4aa3      	ldr	r2, [pc, #652]	; (8004678 <MainTask+0x2b0>)
 80043ec:	7813      	ldrb	r3, [r2, #0]
 80043ee:	f043 0308 	orr.w	r3, r3, #8
 80043f2:	7013      	strb	r3, [r2, #0]
				manual_mode();
 80043f4:	f005 fa22 	bl	800983c <manual_mode>
			}
			if(ps4.button == OPTION){
 80043f8:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <MainTask+0x2ac>)
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004400:	d10b      	bne.n	800441a <MainTask+0x52>
				led3 = 0;
 8004402:	4a9a      	ldr	r2, [pc, #616]	; (800466c <MainTask+0x2a4>)
 8004404:	7853      	ldrb	r3, [r2, #1]
 8004406:	f36f 13c7 	bfc	r3, #7, #1
 800440a:	7053      	strb	r3, [r2, #1]
				sys.manual = 0;
 800440c:	4a9a      	ldr	r2, [pc, #616]	; (8004678 <MainTask+0x2b0>)
 800440e:	7813      	ldrb	r3, [r2, #0]
 8004410:	f36f 03c3 	bfc	r3, #3, #1
 8004414:	7013      	strb	r3, [r2, #0]
				autonomous_mode();
 8004416:	f005 ff93 	bl	800a340 <autonomous_mode>
			}

//			if(LGclose)	LGPW(-600)
//			else		LGPW(0)

			button();
 800441a:	f006 ff0d 	bl	800b238 <button>
			limit_sw();
 800441e:	f007 fd87 	bl	800bf30 <limit_sw>
//			analog_sr();

			if(ps4.button == L3){
 8004422:	4b94      	ldr	r3, [pc, #592]	; (8004674 <MainTask+0x2ac>)
 8004424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004426:	2b02      	cmp	r3, #2
 8004428:	d139      	bne.n	800449e <MainTask+0xd6>
				press = 0;
 800442a:	4b94      	ldr	r3, [pc, #592]	; (800467c <MainTask+0x2b4>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
				sprintf(data, "Press SQUARE to start rns enq\n");
 8004430:	4993      	ldr	r1, [pc, #588]	; (8004680 <MainTask+0x2b8>)
 8004432:	4894      	ldr	r0, [pc, #592]	; (8004684 <MainTask+0x2bc>)
 8004434:	f019 fa7c 	bl	801d930 <siprintf>
				UARTSend
 8004438:	4992      	ldr	r1, [pc, #584]	; (8004684 <MainTask+0x2bc>)
 800443a:	4893      	ldr	r0, [pc, #588]	; (8004688 <MainTask+0x2c0>)
 800443c:	f7ff fa48 	bl	80038d0 <UARTPrintString>
				while(ps4.button == L3);
 8004440:	bf00      	nop
 8004442:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <MainTask+0x2ac>)
 8004444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004446:	2b02      	cmp	r3, #2
 8004448:	d0fb      	beq.n	8004442 <MainTask+0x7a>
				while(ps4.button != L3){
 800444a:	e01f      	b.n	800448c <MainTask+0xc4>
					functest();
 800444c:	f007 fdec 	bl	800c028 <functest>
					enq();
 8004450:	f008 fb3a 	bl	800cac8 <enq>
					if(ps4.button == SQUARE){
 8004454:	4b87      	ldr	r3, [pc, #540]	; (8004674 <MainTask+0x2ac>)
 8004456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	d116      	bne.n	800448c <MainTask+0xc4>
						counter = 0;
 800445e:	4b8b      	ldr	r3, [pc, #556]	; (800468c <MainTask+0x2c4>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
						while(ps4.button == SQUARE);
 8004464:	bf00      	nop
 8004466:	4b83      	ldr	r3, [pc, #524]	; (8004674 <MainTask+0x2ac>)
 8004468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	d0fa      	beq.n	8004466 <MainTask+0x9e>
						if(counter > 2000)
 8004470:	4b86      	ldr	r3, [pc, #536]	; (800468c <MainTask+0x2c4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004478:	dd03      	ble.n	8004482 <MainTask+0xba>
							n = 6;
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <MainTask+0x2c8>)
 800447c:	2206      	movs	r2, #6
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e004      	b.n	800448c <MainTask+0xc4>
						else
							n++;
 8004482:	4b83      	ldr	r3, [pc, #524]	; (8004690 <MainTask+0x2c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a81      	ldr	r2, [pc, #516]	; (8004690 <MainTask+0x2c8>)
 800448a:	6013      	str	r3, [r2, #0]
				while(ps4.button != L3){
 800448c:	4b79      	ldr	r3, [pc, #484]	; (8004674 <MainTask+0x2ac>)
 800448e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004490:	2b02      	cmp	r3, #2
 8004492:	d1db      	bne.n	800444c <MainTask+0x84>
					}
				}
				while(ps4.button == L3);
 8004494:	bf00      	nop
 8004496:	4b77      	ldr	r3, [pc, #476]	; (8004674 <MainTask+0x2ac>)
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	2b02      	cmp	r3, #2
 800449c:	d0fb      	beq.n	8004496 <MainTask+0xce>
			}

			if(ps4.button == R3){
 800449e:	4b75      	ldr	r3, [pc, #468]	; (8004674 <MainTask+0x2ac>)
 80044a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d110      	bne.n	80044c8 <MainTask+0x100>
				while(ps4.button == R3);
 80044a6:	bf00      	nop
 80044a8:	4b72      	ldr	r3, [pc, #456]	; (8004674 <MainTask+0x2ac>)
 80044aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d0fb      	beq.n	80044a8 <MainTask+0xe0>
				while(ps4.button != R3){
 80044b0:	e001      	b.n	80044b6 <MainTask+0xee>
					KFilterAdjust();
 80044b2:	f008 f87d 	bl	800c5b0 <KFilterAdjust>
				while(ps4.button != R3){
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <MainTask+0x2ac>)
 80044b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d1f9      	bne.n	80044b2 <MainTask+0xea>
				}
				while(ps4.button == R3);
 80044be:	bf00      	nop
 80044c0:	4b6c      	ldr	r3, [pc, #432]	; (8004674 <MainTask+0x2ac>)
 80044c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d0fb      	beq.n	80044c0 <MainTask+0xf8>
//				Await(20);
//				laserctrl();
//			}
//			RNSStop(&rns);

			if(ps4.button == L1 && fabs(ps4.joyR_x) >= 0.5)
 80044c8:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <MainTask+0x2ac>)
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d0:	d11b      	bne.n	800450a <MainTask+0x142>
 80044d2:	4b68      	ldr	r3, [pc, #416]	; (8004674 <MainTask+0x2ac>)
 80044d4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80044d8:	eef0 7ae7 	vabs.f32	s15, s15
 80044dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e8:	db0f      	blt.n	800450a <MainTask+0x142>
				LGPW(ps4.joyR_x * 9000)
 80044ea:	4b62      	ldr	r3, [pc, #392]	; (8004674 <MainTask+0x2ac>)
 80044ec:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80044f0:	eef1 7a67 	vneg.f32	s15, s15
 80044f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004694 <MainTask+0x2cc>
 80044f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004500:	ee17 1a90 	vmov	r1, s15
 8004504:	4864      	ldr	r0, [pc, #400]	; (8004698 <MainTask+0x2d0>)
 8004506:	f7fc ff3b 	bl	8001380 <WriteBDC>
			if(fabs(ps4.joyR_y) >= 0.5)
 800450a:	4b5a      	ldr	r3, [pc, #360]	; (8004674 <MainTask+0x2ac>)
 800450c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004510:	eef0 7ae7 	vabs.f32	s15, s15
 8004514:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	db10      	blt.n	8004544 <MainTask+0x17c>
				LFPW(ps4.joyR_y * 9000)
 8004522:	4b54      	ldr	r3, [pc, #336]	; (8004674 <MainTask+0x2ac>)
 8004524:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004528:	eef1 7a67 	vneg.f32	s15, s15
 800452c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004694 <MainTask+0x2cc>
 8004530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004538:	ee17 1a90 	vmov	r1, s15
 800453c:	4857      	ldr	r0, [pc, #348]	; (800469c <MainTask+0x2d4>)
 800453e:	f7fc ff1f 	bl	8001380 <WriteBDC>
 8004542:	e007      	b.n	8004554 <MainTask+0x18c>
			else{
				LFPW(0)
 8004544:	2100      	movs	r1, #0
 8004546:	4855      	ldr	r0, [pc, #340]	; (800469c <MainTask+0x2d4>)
 8004548:	f7fc ff1a 	bl	8001380 <WriteBDC>
				LGPW(0)
 800454c:	2100      	movs	r1, #0
 800454e:	4852      	ldr	r0, [pc, #328]	; (8004698 <MainTask+0x2d0>)
 8004550:	f7fc ff16 	bl	8001380 <WriteBDC>
			}

			realMODN(&ps4, &rns);
 8004554:	4952      	ldr	r1, [pc, #328]	; (80046a0 <MainTask+0x2d8>)
 8004556:	4847      	ldr	r0, [pc, #284]	; (8004674 <MainTask+0x2ac>)
 8004558:	f000 fffe 	bl	8005558 <realMODN>

			if(ps4.button == L1){
 800455c:	4b45      	ldr	r3, [pc, #276]	; (8004674 <MainTask+0x2ac>)
 800455e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d126      	bne.n	80045b4 <MainTask+0x1ec>
				if(pp.cyon == 0)
 8004566:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <MainTask+0x2dc>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <MainTask+0x1b8>
					BgripON
 8004574:	4a3d      	ldr	r2, [pc, #244]	; (800466c <MainTask+0x2a4>)
 8004576:	7853      	ldrb	r3, [r2, #1]
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	7053      	strb	r3, [r2, #1]
 800457e:	e004      	b.n	800458a <MainTask+0x1c2>
				else
					BgripOFF
 8004580:	4a3a      	ldr	r2, [pc, #232]	; (800466c <MainTask+0x2a4>)
 8004582:	7853      	ldrb	r3, [r2, #1]
 8004584:	f36f 0300 	bfc	r3, #0, #1
 8004588:	7053      	strb	r3, [r2, #1]
				pp.cyon = !pp.cyon;
 800458a:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <MainTask+0x2dc>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2d9      	uxtb	r1, r3
 800459e:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <MainTask+0x2dc>)
 80045a0:	7813      	ldrb	r3, [r2, #0]
 80045a2:	f361 1386 	bfi	r3, r1, #6, #1
 80045a6:	7013      	strb	r3, [r2, #0]
				while(ps4.button == L1);
 80045a8:	bf00      	nop
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <MainTask+0x2ac>)
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b2:	d0fa      	beq.n	80045aa <MainTask+0x1e2>
			}

			if(ps4.button == L1_DOWN){
 80045b4:	4b2f      	ldr	r3, [pc, #188]	; (8004674 <MainTask+0x2ac>)
 80045b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b8:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 80045bc:	d136      	bne.n	800462c <MainTask+0x264>
				RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 80045be:	4938      	ldr	r1, [pc, #224]	; (80046a0 <MainTask+0x2d8>)
 80045c0:	205f      	movs	r0, #95	; 0x5f
 80045c2:	f002 fc3b 	bl	8006e3c <RNSEnquire>
				z = rns.enq.enq_buffer[2].data;
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <MainTask+0x2d8>)
 80045c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ca:	4a37      	ldr	r2, [pc, #220]	; (80046a8 <MainTask+0x2e0>)
 80045cc:	6013      	str	r3, [r2, #0]
				exled4 = 1;
 80045ce:	4a37      	ldr	r2, [pc, #220]	; (80046ac <MainTask+0x2e4>)
 80045d0:	7813      	ldrb	r3, [r2, #0]
 80045d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045d6:	7013      	strb	r3, [r2, #0]
				if(z > 60)		exled3 = 1;
 80045d8:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <MainTask+0x2e0>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80046b0 <MainTask+0x2e8>
 80045e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ea:	dd05      	ble.n	80045f8 <MainTask+0x230>
 80045ec:	4a2f      	ldr	r2, [pc, #188]	; (80046ac <MainTask+0x2e4>)
 80045ee:	7813      	ldrb	r3, [r2, #0]
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	7013      	strb	r3, [r2, #0]
 80045f6:	e019      	b.n	800462c <MainTask+0x264>
				else if(z < 60)	exled5 = 1;
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <MainTask+0x2e0>)
 80045fa:	edd3 7a00 	vldr	s15, [r3]
 80045fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80046b0 <MainTask+0x2e8>
 8004602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d505      	bpl.n	8004618 <MainTask+0x250>
 800460c:	4a27      	ldr	r2, [pc, #156]	; (80046ac <MainTask+0x2e4>)
 800460e:	7813      	ldrb	r3, [r2, #0]
 8004610:	f043 0320 	orr.w	r3, r3, #32
 8004614:	7013      	strb	r3, [r2, #0]
 8004616:	e009      	b.n	800462c <MainTask+0x264>
				else{
					exled3 = 0;
 8004618:	4a24      	ldr	r2, [pc, #144]	; (80046ac <MainTask+0x2e4>)
 800461a:	7813      	ldrb	r3, [r2, #0]
 800461c:	f36f 13c7 	bfc	r3, #7, #1
 8004620:	7013      	strb	r3, [r2, #0]
					exled5 = 0;
 8004622:	4a22      	ldr	r2, [pc, #136]	; (80046ac <MainTask+0x2e4>)
 8004624:	7813      	ldrb	r3, [r2, #0]
 8004626:	f36f 1345 	bfc	r3, #5, #1
 800462a:	7013      	strb	r3, [r2, #0]
		while(sys.control){
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <MainTask+0x2b0>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	f47f aed3 	bne.w	80043e2 <MainTask+0x1a>

			//		//diagnostic
			//		ILI9341_Update_List();
		}

		while(sys.tunePid){
 800463c:	e00d      	b.n	800465a <MainTask+0x292>
			tune.PID = 1;
 800463e:	4a1d      	ldr	r2, [pc, #116]	; (80046b4 <MainTask+0x2ec>)
 8004640:	7913      	ldrb	r3, [r2, #4]
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	7113      	strb	r3, [r2, #4]
			tunePID(tuneUart, &ps4, &rns, (float) fwd_omni);
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <MainTask+0x2f0>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004650:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <MainTask+0x2d8>)
 8004652:	4908      	ldr	r1, [pc, #32]	; (8004674 <MainTask+0x2ac>)
 8004654:	4618      	mov	r0, r3
 8004656:	f009 fe6f 	bl	800e338 <tunePID>
		while(sys.tunePid){
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <MainTask+0x2b0>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1ea      	bne.n	800463e <MainTask+0x276>
		}

		while(sys.tunePP){
 8004668:	e04b      	b.n	8004702 <MainTask+0x33a>
 800466a:	bf00      	nop
 800466c:	40020814 	.word	0x40020814
 8004670:	2000a144 	.word	0x2000a144
 8004674:	2000a0c8 	.word	0x2000a0c8
 8004678:	2000779c 	.word	0x2000779c
 800467c:	20009d34 	.word	0x20009d34
 8004680:	08021dd0 	.word	0x08021dd0
 8004684:	20006948 	.word	0x20006948
 8004688:	200067e4 	.word	0x200067e4
 800468c:	200097a0 	.word	0x200097a0
 8004690:	20007508 	.word	0x20007508
 8004694:	460ca000 	.word	0x460ca000
 8004698:	2000a5d4 	.word	0x2000a5d4
 800469c:	20007b24 	.word	0x20007b24
 80046a0:	200091e8 	.word	0x200091e8
 80046a4:	20007704 	.word	0x20007704
 80046a8:	200091e4 	.word	0x200091e4
 80046ac:	40020014 	.word	0x40020014
 80046b0:	42700000 	.word	0x42700000
 80046b4:	20007778 	.word	0x20007778
 80046b8:	2000a480 	.word	0x2000a480
			tune.PP = 1;
 80046bc:	4ab8      	ldr	r2, [pc, #736]	; (80049a0 <MainTask+0x5d8>)
 80046be:	7913      	ldrb	r3, [r2, #4]
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	7113      	strb	r3, [r2, #4]
			RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	4bb6      	ldr	r3, [pc, #728]	; (80049a4 <MainTask+0x5dc>)
 80046cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046d0:	a3af      	add	r3, pc, #700	; (adr r3, 8004990 <MainTask+0x5c8>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046e2:	e9cd 2300 	strd	r2, r3, [sp]
 80046e6:	a3ac      	add	r3, pc, #688	; (adr r3, 8004998 <MainTask+0x5d0>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	2145      	movs	r1, #69	; 0x45
 80046ee:	48ae      	ldr	r0, [pc, #696]	; (80049a8 <MainTask+0x5e0>)
 80046f0:	f002 fa38 	bl	8006b64 <RNSSet>
			tunePPlan(tuneUart, &ps4, &rns);
 80046f4:	4bad      	ldr	r3, [pc, #692]	; (80049ac <MainTask+0x5e4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4aab      	ldr	r2, [pc, #684]	; (80049a8 <MainTask+0x5e0>)
 80046fa:	49ad      	ldr	r1, [pc, #692]	; (80049b0 <MainTask+0x5e8>)
 80046fc:	4618      	mov	r0, r3
 80046fe:	f00a fe2f 	bl	800f360 <tunePPlan>
		while(sys.tunePP){
 8004702:	4bac      	ldr	r3, [pc, #688]	; (80049b4 <MainTask+0x5ec>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1d5      	bne.n	80046bc <MainTask+0x2f4>
		}

		while(sys.stickf){
 8004710:	e1d2      	b.n	8004ab8 <MainTask+0x6f0>
			realMODN(&ps4, &rns);
 8004712:	49a5      	ldr	r1, [pc, #660]	; (80049a8 <MainTask+0x5e0>)
 8004714:	48a6      	ldr	r0, [pc, #664]	; (80049b0 <MainTask+0x5e8>)
 8004716:	f000 ff1f 	bl	8005558 <realMODN>

			if(pp.path == 1)	exled3 = 1;
 800471a:	4ba7      	ldr	r3, [pc, #668]	; (80049b8 <MainTask+0x5f0>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d105      	bne.n	8004734 <MainTask+0x36c>
 8004728:	4aa4      	ldr	r2, [pc, #656]	; (80049bc <MainTask+0x5f4>)
 800472a:	7813      	ldrb	r3, [r2, #0]
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	7013      	strb	r3, [r2, #0]
 8004732:	e016      	b.n	8004762 <MainTask+0x39a>
			else if(pp.path == 2)	exled4 = 1;
 8004734:	4ba0      	ldr	r3, [pc, #640]	; (80049b8 <MainTask+0x5f0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d105      	bne.n	800474e <MainTask+0x386>
 8004742:	4a9e      	ldr	r2, [pc, #632]	; (80049bc <MainTask+0x5f4>)
 8004744:	7813      	ldrb	r3, [r2, #0]
 8004746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474a:	7013      	strb	r3, [r2, #0]
 800474c:	e009      	b.n	8004762 <MainTask+0x39a>
			else{
				exled3 = 0;
 800474e:	4a9b      	ldr	r2, [pc, #620]	; (80049bc <MainTask+0x5f4>)
 8004750:	7813      	ldrb	r3, [r2, #0]
 8004752:	f36f 13c7 	bfc	r3, #7, #1
 8004756:	7013      	strb	r3, [r2, #0]
				exled4 = 0;
 8004758:	4a98      	ldr	r2, [pc, #608]	; (80049bc <MainTask+0x5f4>)
 800475a:	7813      	ldrb	r3, [r2, #0]
 800475c:	f36f 1386 	bfc	r3, #6, #1
 8004760:	7013      	strb	r3, [r2, #0]
			}
			if(ps4.button == L1){
 8004762:	4b93      	ldr	r3, [pc, #588]	; (80049b0 <MainTask+0x5e8>)
 8004764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476a:	d113      	bne.n	8004794 <MainTask+0x3cc>
				while(ps4.button == L1);
 800476c:	bf00      	nop
 800476e:	4b90      	ldr	r3, [pc, #576]	; (80049b0 <MainTask+0x5e8>)
 8004770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d0fa      	beq.n	800476e <MainTask+0x3a6>
				pp.path --;
 8004778:	4b8f      	ldr	r3, [pc, #572]	; (80049b8 <MainTask+0x5f0>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3307      	adds	r3, #7
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b2d9      	uxtb	r1, r3
 800478a:	4a8b      	ldr	r2, [pc, #556]	; (80049b8 <MainTask+0x5f0>)
 800478c:	7813      	ldrb	r3, [r2, #0]
 800478e:	f361 0302 	bfi	r3, r1, #0, #3
 8004792:	7013      	strb	r3, [r2, #0]
				if(pp.path < 0)	pp.path = 0;
			}
			if(ps4.button == R1){
 8004794:	4b86      	ldr	r3, [pc, #536]	; (80049b0 <MainTask+0x5e8>)
 8004796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479c:	d120      	bne.n	80047e0 <MainTask+0x418>
				while(ps4.button == R1);
 800479e:	bf00      	nop
 80047a0:	4b83      	ldr	r3, [pc, #524]	; (80049b0 <MainTask+0x5e8>)
 80047a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a8:	d0fa      	beq.n	80047a0 <MainTask+0x3d8>
				pp.path ++;
 80047aa:	4b83      	ldr	r3, [pc, #524]	; (80049b8 <MainTask+0x5f0>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	b2d9      	uxtb	r1, r3
 80047bc:	4a7e      	ldr	r2, [pc, #504]	; (80049b8 <MainTask+0x5f0>)
 80047be:	7813      	ldrb	r3, [r2, #0]
 80047c0:	f361 0302 	bfi	r3, r1, #0, #3
 80047c4:	7013      	strb	r3, [r2, #0]
				if(pp.path > 2)	pp.path = 2;
 80047c6:	4b7c      	ldr	r3, [pc, #496]	; (80049b8 <MainTask+0x5f0>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d905      	bls.n	80047e0 <MainTask+0x418>
 80047d4:	4a78      	ldr	r2, [pc, #480]	; (80049b8 <MainTask+0x5f0>)
 80047d6:	7813      	ldrb	r3, [r2, #0]
 80047d8:	2102      	movs	r1, #2
 80047da:	f361 0302 	bfi	r3, r1, #0, #3
 80047de:	7013      	strb	r3, [r2, #0]
			}
			if(ps4.button == CROSS){
 80047e0:	4b73      	ldr	r3, [pc, #460]	; (80049b0 <MainTask+0x5e8>)
 80047e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e8:	d109      	bne.n	80047fe <MainTask+0x436>
				sys.auto2manual = 0;
 80047ea:	4a72      	ldr	r2, [pc, #456]	; (80049b4 <MainTask+0x5ec>)
 80047ec:	7813      	ldrb	r3, [r2, #0]
 80047ee:	f36f 1304 	bfc	r3, #4, #1
 80047f2:	7013      	strb	r3, [r2, #0]
				pp.stickf = 0;
 80047f4:	4a70      	ldr	r2, [pc, #448]	; (80049b8 <MainTask+0x5f0>)
 80047f6:	7813      	ldrb	r3, [r2, #0]
 80047f8:	f36f 13c7 	bfc	r3, #7, #1
 80047fc:	7013      	strb	r3, [r2, #0]
			}
			if(ps4.button == TRIANGLE){
 80047fe:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <MainTask+0x5e8>)
 8004800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004806:	d10f      	bne.n	8004828 <MainTask+0x460>
				while(ps4.button == TRIANGLE);
 8004808:	bf00      	nop
 800480a:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <MainTask+0x5e8>)
 800480c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004812:	d0fa      	beq.n	800480a <MainTask+0x442>
				sys.auto2manual = 1;
 8004814:	4a67      	ldr	r2, [pc, #412]	; (80049b4 <MainTask+0x5ec>)
 8004816:	7813      	ldrb	r3, [r2, #0]
 8004818:	f043 0310 	orr.w	r3, r3, #16
 800481c:	7013      	strb	r3, [r2, #0]
				pp.stickf = 1;
 800481e:	4a66      	ldr	r2, [pc, #408]	; (80049b8 <MainTask+0x5f0>)
 8004820:	7813      	ldrb	r3, [r2, #0]
 8004822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004826:	7013      	strb	r3, [r2, #0]
			}
			if(sys.auto2manual){
 8004828:	4b62      	ldr	r3, [pc, #392]	; (80049b4 <MainTask+0x5ec>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 8140 	beq.w	8004ab8 <MainTask+0x6f0>
				if(pp.path == 1){
 8004838:	4b5f      	ldr	r3, [pc, #380]	; (80049b8 <MainTask+0x5f0>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	f040 809a 	bne.w	800497c <MainTask+0x5b4>
					while(pp.stickf){
 8004848:	e089      	b.n	800495e <MainTask+0x596>
//						if(lsl1 || lsl2)
//							laserctrl();
//						else if(lsr1)
//							RNSVelocity(-1.25, 1.75, 1.75, 0.0, &rns);
						if((!(lsl2 || lsr1)) && lsl1)
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	485c      	ldr	r0, [pc, #368]	; (80049c0 <MainTask+0x5f8>)
 800484e:	f00f fda9 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004852:	4603      	mov	r3, r0
 8004854:	2b01      	cmp	r3, #1
 8004856:	d019      	beq.n	800488c <MainTask+0x4c4>
 8004858:	2120      	movs	r1, #32
 800485a:	485a      	ldr	r0, [pc, #360]	; (80049c4 <MainTask+0x5fc>)
 800485c:	f00f fda2 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d012      	beq.n	800488c <MainTask+0x4c4>
 8004866:	2110      	movs	r1, #16
 8004868:	4855      	ldr	r0, [pc, #340]	; (80049c0 <MainTask+0x5f8>)
 800486a:	f00f fd9b 	bl	80143a4 <HAL_GPIO_ReadPin>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10b      	bne.n	800488c <MainTask+0x4c4>
							RNSVelocity(0.00, 0.75, 0.00, 0.25, &rns);
 8004874:	484c      	ldr	r0, [pc, #304]	; (80049a8 <MainTask+0x5e0>)
 8004876:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 800487a:	ed9f 1a53 	vldr	s2, [pc, #332]	; 80049c8 <MainTask+0x600>
 800487e:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 8004882:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80049c8 <MainTask+0x600>
 8004886:	f001 ffb1 	bl	80067ec <RNSVelocity>
 800488a:	e05a      	b.n	8004942 <MainTask+0x57a>
						else if(lsl1 && lsl2)
 800488c:	2110      	movs	r1, #16
 800488e:	484c      	ldr	r0, [pc, #304]	; (80049c0 <MainTask+0x5f8>)
 8004890:	f00f fd88 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d112      	bne.n	80048c0 <MainTask+0x4f8>
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	4848      	ldr	r0, [pc, #288]	; (80049c0 <MainTask+0x5f8>)
 800489e:	f00f fd81 	bl	80143a4 <HAL_GPIO_ReadPin>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10b      	bne.n	80048c0 <MainTask+0x4f8>
							RNSVelocity(0.0, 1.00, 1.50, 1.00, &rns);
 80048a8:	483f      	ldr	r0, [pc, #252]	; (80049a8 <MainTask+0x5e0>)
 80048aa:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80048ae:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 80048b2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80048b6:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80049c8 <MainTask+0x600>
 80048ba:	f001 ff97 	bl	80067ec <RNSVelocity>
 80048be:	e040      	b.n	8004942 <MainTask+0x57a>
						else if(lsl2)
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	483f      	ldr	r0, [pc, #252]	; (80049c0 <MainTask+0x5f8>)
 80048c4:	f00f fd6e 	bl	80143a4 <HAL_GPIO_ReadPin>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d10b      	bne.n	80048e6 <MainTask+0x51e>
							RNSVelocity(1.75, 0.00, 1.00, 1.00, &rns);
 80048ce:	4836      	ldr	r0, [pc, #216]	; (80049a8 <MainTask+0x5e0>)
 80048d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80048d4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80048d8:	eddf 0a3b 	vldr	s1, [pc, #236]	; 80049c8 <MainTask+0x600>
 80048dc:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 80048e0:	f001 ff84 	bl	80067ec <RNSVelocity>
 80048e4:	e02d      	b.n	8004942 <MainTask+0x57a>
						else if(lsl1)
 80048e6:	2110      	movs	r1, #16
 80048e8:	4835      	ldr	r0, [pc, #212]	; (80049c0 <MainTask+0x5f8>)
 80048ea:	f00f fd5b 	bl	80143a4 <HAL_GPIO_ReadPin>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10b      	bne.n	800490c <MainTask+0x544>
							RNSVelocity(0.00, 1.75, 1.00, 1.00, &rns);
 80048f4:	482c      	ldr	r0, [pc, #176]	; (80049a8 <MainTask+0x5e0>)
 80048f6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80048fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80048fe:	eef7 0a0c 	vmov.f32	s1, #124	; 0x3fe00000  1.750
 8004902:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80049c8 <MainTask+0x600>
 8004906:	f001 ff71 	bl	80067ec <RNSVelocity>
 800490a:	e01a      	b.n	8004942 <MainTask+0x57a>
						else if(lsr1)
 800490c:	2120      	movs	r1, #32
 800490e:	482d      	ldr	r0, [pc, #180]	; (80049c4 <MainTask+0x5fc>)
 8004910:	f00f fd48 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10b      	bne.n	8004932 <MainTask+0x56a>
							RNSVelocity(-1.00, 1.50, 1.50, -1.00, &rns);
 800491a:	4823      	ldr	r0, [pc, #140]	; (80049a8 <MainTask+0x5e0>)
 800491c:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004920:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 8004924:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004928:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800492c:	f001 ff5e 	bl	80067ec <RNSVelocity>
 8004930:	e007      	b.n	8004942 <MainTask+0x57a>
						else{
							RNSStop(&rns);
 8004932:	481d      	ldr	r0, [pc, #116]	; (80049a8 <MainTask+0x5e0>)
 8004934:	f001 ff0a 	bl	800674c <RNSStop>
							pp.stickf = 0;
 8004938:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <MainTask+0x5f0>)
 800493a:	7813      	ldrb	r3, [r2, #0]
 800493c:	f36f 13c7 	bfc	r3, #7, #1
 8004940:	7013      	strb	r3, [r2, #0]
						}
						if(ps4.button == CROSS){
 8004942:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <MainTask+0x5e8>)
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800494a:	d108      	bne.n	800495e <MainTask+0x596>
							RNSStop(&rns);
 800494c:	4816      	ldr	r0, [pc, #88]	; (80049a8 <MainTask+0x5e0>)
 800494e:	f001 fefd 	bl	800674c <RNSStop>
							sys.auto2manual = 1;
 8004952:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <MainTask+0x5ec>)
 8004954:	7813      	ldrb	r3, [r2, #0]
 8004956:	f043 0310 	orr.w	r3, r3, #16
 800495a:	7013      	strb	r3, [r2, #0]
							break;
 800495c:	e007      	b.n	800496e <MainTask+0x5a6>
					while(pp.stickf){
 800495e:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <MainTask+0x5f0>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f47f af6e 	bne.w	800484a <MainTask+0x482>
						}
					}
						Await(200);
 800496e:	20c8      	movs	r0, #200	; 0xc8
 8004970:	f008 fda0 	bl	800d4b4 <Await>
						RNSStop(&rns);
 8004974:	480c      	ldr	r0, [pc, #48]	; (80049a8 <MainTask+0x5e0>)
 8004976:	f001 fee9 	bl	800674c <RNSStop>
 800497a:	e098      	b.n	8004aae <MainTask+0x6e6>
				}
				else if(pp.path == 2){
 800497c:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <MainTask+0x5f0>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	f040 8091 	bne.w	8004aae <MainTask+0x6e6>
					//stick france
					while(pp.stickf){
 800498c:	e088      	b.n	8004aa0 <MainTask+0x6d8>
 800498e:	bf00      	nop
 8004990:	9999999a 	.word	0x9999999a
 8004994:	3fa99999 	.word	0x3fa99999
 8004998:	9999999a 	.word	0x9999999a
 800499c:	3fb99999 	.word	0x3fb99999
 80049a0:	20007778 	.word	0x20007778
 80049a4:	3ff00000 	.word	0x3ff00000
 80049a8:	200091e8 	.word	0x200091e8
 80049ac:	2000a480 	.word	0x2000a480
 80049b0:	2000a0c8 	.word	0x2000a0c8
 80049b4:	2000779c 	.word	0x2000779c
 80049b8:	20007704 	.word	0x20007704
 80049bc:	40020014 	.word	0x40020014
 80049c0:	40020c00 	.word	0x40020c00
 80049c4:	40020400 	.word	0x40020400
 80049c8:	00000000 	.word	0x00000000
//						}
//						if(ps4.button == CROSS){
//							RNSStop(&rns);
//							sys.auto2manual = 1;
//							break;
						if((!(lsl2 || lsr1)) && lsr2)
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	483f      	ldr	r0, [pc, #252]	; (8004acc <MainTask+0x704>)
 80049d0:	f00f fce8 	bl	80143a4 <HAL_GPIO_ReadPin>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d019      	beq.n	8004a0e <MainTask+0x646>
 80049da:	2120      	movs	r1, #32
 80049dc:	483c      	ldr	r0, [pc, #240]	; (8004ad0 <MainTask+0x708>)
 80049de:	f00f fce1 	bl	80143a4 <HAL_GPIO_ReadPin>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d012      	beq.n	8004a0e <MainTask+0x646>
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	4839      	ldr	r0, [pc, #228]	; (8004ad0 <MainTask+0x708>)
 80049ec:	f00f fcda 	bl	80143a4 <HAL_GPIO_ReadPin>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10b      	bne.n	8004a0e <MainTask+0x646>
							RNSVelocity(0.00, 0.00, 0.75, -0.25, &rns);
 80049f6:	4837      	ldr	r0, [pc, #220]	; (8004ad4 <MainTask+0x70c>)
 80049f8:	eefd 1a00 	vmov.f32	s3, #208	; 0xbe800000 -0.250
 80049fc:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 8004a00:	eddf 0a35 	vldr	s1, [pc, #212]	; 8004ad8 <MainTask+0x710>
 8004a04:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004ad8 <MainTask+0x710>
 8004a08:	f001 fef0 	bl	80067ec <RNSVelocity>
 8004a0c:	e034      	b.n	8004a78 <MainTask+0x6b0>
						else if(lsr1 || lsr2)
 8004a0e:	2120      	movs	r1, #32
 8004a10:	482f      	ldr	r0, [pc, #188]	; (8004ad0 <MainTask+0x708>)
 8004a12:	f00f fcc7 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d006      	beq.n	8004a2a <MainTask+0x662>
 8004a1c:	2140      	movs	r1, #64	; 0x40
 8004a1e:	482c      	ldr	r0, [pc, #176]	; (8004ad0 <MainTask+0x708>)
 8004a20:	f00f fcc0 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10b      	bne.n	8004a42 <MainTask+0x67a>
							RNSVelocity(-1.00, 1.00, 1.00, -1.00, &rns);
 8004a2a:	482a      	ldr	r0, [pc, #168]	; (8004ad4 <MainTask+0x70c>)
 8004a2c:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 8004a30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004a34:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004a38:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004a3c:	f001 fed6 	bl	80067ec <RNSVelocity>
 8004a40:	e01a      	b.n	8004a78 <MainTask+0x6b0>
						else if(lsl2)
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	4821      	ldr	r0, [pc, #132]	; (8004acc <MainTask+0x704>)
 8004a46:	f00f fcad 	bl	80143a4 <HAL_GPIO_ReadPin>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10b      	bne.n	8004a68 <MainTask+0x6a0>
							RNSVelocity(0.50, 1.00, 1.00, 0.50, &rns);
 8004a50:	4820      	ldr	r0, [pc, #128]	; (8004ad4 <MainTask+0x70c>)
 8004a52:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8004a56:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004a5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004a5e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004a62:	f001 fec3 	bl	80067ec <RNSVelocity>
 8004a66:	e007      	b.n	8004a78 <MainTask+0x6b0>
						else{
							RNSStop(&rns);
 8004a68:	481a      	ldr	r0, [pc, #104]	; (8004ad4 <MainTask+0x70c>)
 8004a6a:	f001 fe6f 	bl	800674c <RNSStop>
							pp.stickf = 0;
 8004a6e:	4a1b      	ldr	r2, [pc, #108]	; (8004adc <MainTask+0x714>)
 8004a70:	7813      	ldrb	r3, [r2, #0]
 8004a72:	f36f 13c7 	bfc	r3, #7, #1
 8004a76:	7013      	strb	r3, [r2, #0]
						}
						if(ps4.button == CROSS){
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <MainTask+0x718>)
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a80:	d108      	bne.n	8004a94 <MainTask+0x6cc>
							RNSStop(&rns);
 8004a82:	4814      	ldr	r0, [pc, #80]	; (8004ad4 <MainTask+0x70c>)
 8004a84:	f001 fe62 	bl	800674c <RNSStop>
							sys.auto2manual = 1;
 8004a88:	4a16      	ldr	r2, [pc, #88]	; (8004ae4 <MainTask+0x71c>)
 8004a8a:	7813      	ldrb	r3, [r2, #0]
 8004a8c:	f043 0310 	orr.w	r3, r3, #16
 8004a90:	7013      	strb	r3, [r2, #0]
							break;
 8004a92:	e00c      	b.n	8004aae <MainTask+0x6e6>
						}
						Await(200);
 8004a94:	20c8      	movs	r0, #200	; 0xc8
 8004a96:	f008 fd0d 	bl	800d4b4 <Await>
						RNSStop(&rns);
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <MainTask+0x70c>)
 8004a9c:	f001 fe56 	bl	800674c <RNSStop>
					while(pp.stickf){
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <MainTask+0x714>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d18e      	bne.n	80049cc <MainTask+0x604>
					}
				}
				sys.auto2manual = 0;
 8004aae:	4a0d      	ldr	r2, [pc, #52]	; (8004ae4 <MainTask+0x71c>)
 8004ab0:	7813      	ldrb	r3, [r2, #0]
 8004ab2:	f36f 1304 	bfc	r3, #4, #1
 8004ab6:	7013      	strb	r3, [r2, #0]
		while(sys.stickf){
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <MainTask+0x71c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f ae25 	bne.w	8004712 <MainTask+0x34a>
		while(sys.control){
 8004ac8:	e5b0      	b.n	800462c <MainTask+0x264>
 8004aca:	bf00      	nop
 8004acc:	40020c00 	.word	0x40020c00
 8004ad0:	40020400 	.word	0x40020400
 8004ad4:	200091e8 	.word	0x200091e8
 8004ad8:	00000000 	.word	0x00000000
 8004adc:	20007704 	.word	0x20007704
 8004ae0:	2000a0c8 	.word	0x2000a0c8
 8004ae4:	2000779c 	.word	0x2000779c

08004ae8 <LagoriTask>:
			}
		}
	}
}

void LagoriTask(void *argument){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
	while(1){
		if(sys.manual)
 8004af0:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <LagoriTask+0x1c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f8      	beq.n	8004af0 <LagoriTask+0x8>
			lagori_func();
 8004afe:	f004 ff97 	bl	8009a30 <lagori_func>
		if(sys.manual)
 8004b02:	e7f5      	b.n	8004af0 <LagoriTask+0x8>
 8004b04:	2000779c 	.word	0x2000779c

08004b08 <BLDCTask>:
	}
}

void BLDCTask(void *argument){
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	while(1){
		if(sys.control)
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <BLDCTask+0x1c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f8      	beq.n	8004b10 <BLDCTask+0x8>
			BLDC_func();
 8004b1e:	f005 fa99 	bl	800a054 <BLDC_func>
		if(sys.control)
 8004b22:	e7f5      	b.n	8004b10 <BLDCTask+0x8>
 8004b24:	2000779c 	.word	0x2000779c

08004b28 <EmergencyTask>:
	}
}

void EmergencyTask(void *argument){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b09e      	sub	sp, #120	; 0x78
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	while(1){
		enqpwLG = QEIRead(QEI1);
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fd fae7 	bl	8002104 <QEIRead>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <EmergencyTask+0x14c>)
 8004b3a:	6013      	str	r3, [r2, #0]
		enqpwLlf = QEIRead(QEI4);
 8004b3c:	2004      	movs	r0, #4
 8004b3e:	f7fd fae1 	bl	8002104 <QEIRead>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4a4c      	ldr	r2, [pc, #304]	; (8004c78 <EmergencyTask+0x150>)
 8004b46:	6013      	str	r3, [r2, #0]
		if(ps4.button == TOUCH){
 8004b48:	4b4c      	ldr	r3, [pc, #304]	; (8004c7c <EmergencyTask+0x154>)
 8004b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b50:	d1ee      	bne.n	8004b30 <EmergencyTask+0x8>
			RNSStop(&rns);
 8004b52:	484b      	ldr	r0, [pc, #300]	; (8004c80 <EmergencyTask+0x158>)
 8004b54:	f001 fdfa 	bl	800674c <RNSStop>
			svCloseFlip
 8004b58:	f240 7121 	movw	r1, #1825	; 0x721
 8004b5c:	4849      	ldr	r0, [pc, #292]	; (8004c84 <EmergencyTask+0x15c>)
 8004b5e:	f003 fd63 	bl	8008628 <ServoSetPulse>
 8004b62:	f240 316b 	movw	r1, #875	; 0x36b
 8004b66:	4848      	ldr	r0, [pc, #288]	; (8004c88 <EmergencyTask+0x160>)
 8004b68:	f003 fd5e 	bl	8008628 <ServoSetPulse>
			svBRrealup
 8004b6c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004b70:	4846      	ldr	r0, [pc, #280]	; (8004c8c <EmergencyTask+0x164>)
 8004b72:	f003 fd59 	bl	8008628 <ServoSetPulse>
			LGPW(0);
 8004b76:	2100      	movs	r1, #0
 8004b78:	4845      	ldr	r0, [pc, #276]	; (8004c90 <EmergencyTask+0x168>)
 8004b7a:	f7fc fc01 	bl	8001380 <WriteBDC>
			LFPW(0);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4844      	ldr	r0, [pc, #272]	; (8004c94 <EmergencyTask+0x16c>)
 8004b82:	f7fc fbfd 	bl	8001380 <WriteBDC>
			sys.flags = 0;
 8004b86:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <EmergencyTask+0x170>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
			tune.flags = 0;
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <EmergencyTask+0x174>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	701a      	strb	r2, [r3, #0]
			pp.flags = 0;
 8004b92:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <EmergencyTask+0x178>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	801a      	strh	r2, [r3, #0]
			lagori.flags = 0;
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <EmergencyTask+0x17c>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	801a      	strh	r2, [r3, #0]
//			VESCStop(&vesc1);
//			osThreadSuspend(FlywheelPitchPIDTaskHandle);
//			osThreadSuspend(FlywheelYawPIDTaskHandle);
			osThreadTerminate(MainTaskHandle);
 8004b9e:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <EmergencyTask+0x180>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f014 fbe4 	bl	8019370 <osThreadTerminate>
			osThreadTerminate(BLDCTaskHandle);
 8004ba8:	4b40      	ldr	r3, [pc, #256]	; (8004cac <EmergencyTask+0x184>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f014 fbdf 	bl	8019370 <osThreadTerminate>
			osThreadTerminate(LagoriTaskHandle);
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <EmergencyTask+0x188>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f014 fbda 	bl	8019370 <osThreadTerminate>

			osDelay(5);
 8004bbc:	2005      	movs	r0, #5
 8004bbe:	f014 fc04 	bl	80193ca <osDelay>

			const osThreadAttr_t MainTask_attributes = {
 8004bc2:	f107 030c 	add.w	r3, r7, #12
 8004bc6:	2224      	movs	r2, #36	; 0x24
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f017 fece 	bl	801c96c <memset>
 8004bd0:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <EmergencyTask+0x18c>)
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	2318      	movs	r3, #24
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
					.name = "MainTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			const osThreadAttr_t BLDCTask_attributes = {
 8004bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004be2:	2224      	movs	r2, #36	; 0x24
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f017 fec0 	bl	801c96c <memset>
 8004bec:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <EmergencyTask+0x190>)
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf6:	2318      	movs	r3, #24
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
					.name = "BLDCTask",
					.stack_size = 256 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			const osThreadAttr_t LagoriTask_attributes = {
 8004bfa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004bfe:	2224      	movs	r2, #36	; 0x24
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f017 feb2 	bl	801c96c <memset>
 8004c08:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <EmergencyTask+0x194>)
 8004c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c12:	2318      	movs	r3, #24
 8004c14:	66fb      	str	r3, [r7, #108]	; 0x6c
					.name = "LagoriTask",
					.stack_size = 1024 * 4,
					.priority = (osPriority_t) osPriorityNormal,
			};

			sys.control = 1;
 8004c16:	4a20      	ldr	r2, [pc, #128]	; (8004c98 <EmergencyTask+0x170>)
 8004c18:	7813      	ldrb	r3, [r2, #0]
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	7013      	strb	r3, [r2, #0]
			sys.auto2manual = 1;
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <EmergencyTask+0x170>)
 8004c22:	7813      	ldrb	r3, [r2, #0]
 8004c24:	f043 0310 	orr.w	r3, r3, #16
 8004c28:	7013      	strb	r3, [r2, #0]
			lagori.bldclapp = 1;
 8004c2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <EmergencyTask+0x17c>)
 8004c2c:	7813      	ldrb	r3, [r2, #0]
 8004c2e:	f043 0301 	orr.w	r3, r3, #1
 8004c32:	7013      	strb	r3, [r2, #0]
			MainTaskHandle = osThreadNew(MainTask, NULL, &MainTask_attributes);
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	4820      	ldr	r0, [pc, #128]	; (8004cc0 <EmergencyTask+0x198>)
 8004c3e:	f014 fb05 	bl	801924c <osThreadNew>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <EmergencyTask+0x180>)
 8004c46:	6013      	str	r3, [r2, #0]
			BLDCTaskHandle = osThreadNew(BLDCTask, NULL, &BLDCTask_attributes);
 8004c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	2100      	movs	r1, #0
 8004c50:	481c      	ldr	r0, [pc, #112]	; (8004cc4 <EmergencyTask+0x19c>)
 8004c52:	f014 fafb 	bl	801924c <osThreadNew>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <EmergencyTask+0x184>)
 8004c5a:	6013      	str	r3, [r2, #0]
			LagoriTaskHandle = osThreadNew(LagoriTask, NULL, &LagoriTask_attributes);
 8004c5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c60:	461a      	mov	r2, r3
 8004c62:	2100      	movs	r1, #0
 8004c64:	4818      	ldr	r0, [pc, #96]	; (8004cc8 <EmergencyTask+0x1a0>)
 8004c66:	f014 faf1 	bl	801924c <osThreadNew>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <EmergencyTask+0x188>)
 8004c6e:	6013      	str	r3, [r2, #0]
		enqpwLG = QEIRead(QEI1);
 8004c70:	e75e      	b.n	8004b30 <EmergencyTask+0x8>
 8004c72:	bf00      	nop
 8004c74:	200099fc 	.word	0x200099fc
 8004c78:	20007b78 	.word	0x20007b78
 8004c7c:	2000a0c8 	.word	0x2000a0c8
 8004c80:	200091e8 	.word	0x200091e8
 8004c84:	20009974 	.word	0x20009974
 8004c88:	2000a5f8 	.word	0x2000a5f8
 8004c8c:	20009738 	.word	0x20009738
 8004c90:	2000a5d4 	.word	0x2000a5d4
 8004c94:	20007b24 	.word	0x20007b24
 8004c98:	2000779c 	.word	0x2000779c
 8004c9c:	20007778 	.word	0x20007778
 8004ca0:	20007704 	.word	0x20007704
 8004ca4:	20009844 	.word	0x20009844
 8004ca8:	20007be0 	.word	0x20007be0
 8004cac:	20009494 	.word	0x20009494
 8004cb0:	200096a8 	.word	0x200096a8
 8004cb4:	08021d80 	.word	0x08021d80
 8004cb8:	08021db4 	.word	0x08021db4
 8004cbc:	08021da8 	.word	0x08021da8
 8004cc0:	080043c9 	.word	0x080043c9
 8004cc4:	08004b09 	.word	0x08004b09
 8004cc8:	08004ae9 	.word	0x08004ae9

08004ccc <TuneTask>:
		}
	}
}

void TuneTask(void *argument){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	tunePending();
 8004cd4:	f008 fec8 	bl	800da68 <tunePending>
	int page = -1;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cdc:	60fb      	str	r3, [r7, #12]
	while(1){
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 8004cde:	4b4d      	ldr	r3, [pc, #308]	; (8004e14 <TuneTask+0x148>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f014 fc14 	bl	8019514 <osSemaphoreAcquire>

		if(tuneCommand == '0'){
 8004cec:	4b4a      	ldr	r3, [pc, #296]	; (8004e18 <TuneTask+0x14c>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b30      	cmp	r3, #48	; 0x30
 8004cf2:	d106      	bne.n	8004d02 <TuneTask+0x36>
//			sys.flags = 0;
//			osDelay(10);
			page = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f008 fec3 	bl	800da88 <tuneInit>
//			sys.tunePid = 1;
		}
		if(tuneCommand == '1'){
 8004d02:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <TuneTask+0x14c>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2b31      	cmp	r3, #49	; 0x31
 8004d08:	d106      	bne.n	8004d18 <TuneTask+0x4c>
//			sys.flags = 0;
//			osDelay(10);
			page = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	4618      	mov	r0, r3
 8004d14:	f008 feb8 	bl	800da88 <tuneInit>
//			sys.tunePP = 1;
		}
		if(tuneCommand == '2'){
 8004d18:	4b3f      	ldr	r3, [pc, #252]	; (8004e18 <TuneTask+0x14c>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b32      	cmp	r3, #50	; 0x32
 8004d1e:	d106      	bne.n	8004d2e <TuneTask+0x62>
//			sys.flags = 0;
//			osDelay(10);
			page = 2;
 8004d20:	2302      	movs	r3, #2
 8004d22:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f008 fead 	bl	800da88 <tuneInit>
//			sys.tuneSFan = 1;
		}
		if(tuneCommand == '3'){
 8004d2e:	4b3a      	ldr	r3, [pc, #232]	; (8004e18 <TuneTask+0x14c>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b33      	cmp	r3, #51	; 0x33
 8004d34:	d106      	bne.n	8004d44 <TuneTask+0x78>
			page = 3;
 8004d36:	2303      	movs	r3, #3
 8004d38:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f008 fea2 	bl	800da88 <tuneInit>
		}
		if(tuneCommand == '4'){
 8004d44:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <TuneTask+0x14c>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b34      	cmp	r3, #52	; 0x34
 8004d4a:	d106      	bne.n	8004d5a <TuneTask+0x8e>
			page = 4;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
			tuneInit(page);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	4618      	mov	r0, r3
 8004d56:	f008 fe97 	bl	800da88 <tuneInit>
		}

		if(tuneCommand == 'r'){
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <TuneTask+0x14c>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b72      	cmp	r3, #114	; 0x72
 8004d60:	d104      	bne.n	8004d6c <TuneTask+0xa0>
			tuneUpdate(page);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f008 ffc2 	bl	800dcf0 <tuneUpdate>
		}

		if(tuneCommand == 'w'){
 8004d6c:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <TuneTask+0x14c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b77      	cmp	r3, #119	; 0x77
 8004d72:	d138      	bne.n	8004de6 <TuneTask+0x11a>
			led3 = 0;
 8004d74:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <TuneTask+0x150>)
 8004d76:	7853      	ldrb	r3, [r2, #1]
 8004d78:	f36f 13c7 	bfc	r3, #7, #1
 8004d7c:	7053      	strb	r3, [r2, #1]
			led2 = 0;
 8004d7e:	4a27      	ldr	r2, [pc, #156]	; (8004e1c <TuneTask+0x150>)
 8004d80:	7853      	ldrb	r3, [r2, #1]
 8004d82:	f36f 1386 	bfc	r3, #6, #1
 8004d86:	7053      	strb	r3, [r2, #1]
			uint32_t writeSuccess=0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteInt();
 8004d8c:	f009 fa02 	bl	800e194 <tuneWriteInt>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
			writeSuccess += tuneWriteFloat();
 8004d98:	f009 fa64 	bl	800e264 <tuneWriteFloat>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	60bb      	str	r3, [r7, #8]

			if( writeSuccess == tuneWriteSuccess){
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <TuneTask+0x154>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d10c      	bne.n	8004dca <TuneTask+0xfe>
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITTEN\n"), 15, 10);
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <TuneTask+0x158>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	230a      	movs	r3, #10
 8004db6:	220f      	movs	r2, #15
 8004db8:	491b      	ldr	r1, [pc, #108]	; (8004e28 <TuneTask+0x15c>)
 8004dba:	f013 f982 	bl	80180c2 <HAL_UART_Transmit>
				led2 = 1;
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <TuneTask+0x150>)
 8004dc0:	7853      	ldrb	r3, [r2, #1]
 8004dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc6:	7053      	strb	r3, [r2, #1]
 8004dc8:	e00b      	b.n	8004de2 <TuneTask+0x116>
			}else{
				HAL_UART_Transmit(tuneUart, (uint8_t *)((char *)"EEPROM WRITE FAIL\n"), 18, 10);
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <TuneTask+0x158>)
 8004dcc:	6818      	ldr	r0, [r3, #0]
 8004dce:	230a      	movs	r3, #10
 8004dd0:	2212      	movs	r2, #18
 8004dd2:	4916      	ldr	r1, [pc, #88]	; (8004e2c <TuneTask+0x160>)
 8004dd4:	f013 f975 	bl	80180c2 <HAL_UART_Transmit>
				led3 = 1;
 8004dd8:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <TuneTask+0x150>)
 8004dda:	7853      	ldrb	r3, [r2, #1]
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de0:	7053      	strb	r3, [r2, #1]
			}
			tunePending();
 8004de2:	f008 fe41 	bl	800da68 <tunePending>
		}

		if(tuneCommand == 'e'){
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <TuneTask+0x14c>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	2b65      	cmp	r3, #101	; 0x65
 8004dec:	d105      	bne.n	8004dfa <TuneTask+0x12e>
			tuneEdit(page, &rns);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	490f      	ldr	r1, [pc, #60]	; (8004e30 <TuneTask+0x164>)
 8004df4:	4618      	mov	r0, r3
 8004df6:	f009 f84d 	bl	800de94 <tuneEdit>
		}

		if(tuneCommand == 'c'){
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <TuneTask+0x14c>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b63      	cmp	r3, #99	; 0x63
 8004e00:	f47f af6d 	bne.w	8004cde <TuneTask+0x12>
			sys.flags = 0;
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <TuneTask+0x168>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
			osDelay(10);
 8004e0a:	200a      	movs	r0, #10
 8004e0c:	f014 fadd 	bl	80193ca <osDelay>
		osSemaphoreAcquire(TuneSemaphore,osWaitForever);
 8004e10:	e765      	b.n	8004cde <TuneTask+0x12>
 8004e12:	bf00      	nop
 8004e14:	2000a140 	.word	0x2000a140
 8004e18:	20009481 	.word	0x20009481
 8004e1c:	40020814 	.word	0x40020814
 8004e20:	20009480 	.word	0x20009480
 8004e24:	2000a480 	.word	0x2000a480
 8004e28:	08021df0 	.word	0x08021df0
 8004e2c:	08021e00 	.word	0x08021e00
 8004e30:	200091e8 	.word	0x200091e8
 8004e34:	2000779c 	.word	0x2000779c

08004e38 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	if(huart == tuneUart){
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_UART_RxCpltCallback+0x70>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d105      	bne.n	8004e56 <HAL_UART_RxCpltCallback+0x1e>
		osSemaphoreRelease(TuneSemaphore);
 8004e4a:	4b18      	ldr	r3, [pc, #96]	; (8004eac <HAL_UART_RxCpltCallback+0x74>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f014 fbb2 	bl	80195b8 <osSemaphoreRelease>
		esp32Handler();
	}else if(huart == ps4.huartps4){
		PSx_HandlerUART(&ps4);
	}

}
 8004e54:	e023      	b.n	8004e9e <HAL_UART_RxCpltCallback+0x66>
	else if(huart == ROS_UART){
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <HAL_UART_RxCpltCallback+0x78>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d10e      	bne.n	8004e7e <HAL_UART_RxCpltCallback+0x46>
		led3 = !led3;
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <HAL_UART_RxCpltCallback+0x7c>)
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	b2d9      	uxtb	r1, r3
 8004e70:	7853      	ldrb	r3, [r2, #1]
 8004e72:	f361 13c7 	bfi	r3, r1, #7, #1
 8004e76:	7053      	strb	r3, [r2, #1]
		ROS_Handler();
 8004e78:	f002 f904 	bl	8007084 <ROS_Handler>
}
 8004e7c:	e00f      	b.n	8004e9e <HAL_UART_RxCpltCallback+0x66>
	}else if(huart == esp32.huart){
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_UART_RxCpltCallback+0x80>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d102      	bne.n	8004e8e <HAL_UART_RxCpltCallback+0x56>
		esp32Handler();
 8004e88:	f7fe fe88 	bl	8003b9c <esp32Handler>
}
 8004e8c:	e007      	b.n	8004e9e <HAL_UART_RxCpltCallback+0x66>
	}else if(huart == ps4.huartps4){
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_UART_RxCpltCallback+0x84>)
 8004e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d102      	bne.n	8004e9e <HAL_UART_RxCpltCallback+0x66>
		PSx_HandlerUART(&ps4);
 8004e98:	4808      	ldr	r0, [pc, #32]	; (8004ebc <HAL_UART_RxCpltCallback+0x84>)
 8004e9a:	f001 f89b 	bl	8005fd4 <PSx_HandlerUART>
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000a480 	.word	0x2000a480
 8004eac:	2000a140 	.word	0x2000a140
 8004eb0:	20009c00 	.word	0x20009c00
 8004eb4:	40020814 	.word	0x40020814
 8004eb8:	2000a61c 	.word	0x2000a61c
 8004ebc:	2000a0c8 	.word	0x2000a0c8

08004ec0 <Error_Handler>:

/**
 * @brief  This function is executed in case of errorYaw occurrence.
 */
void Error_Handler(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0


}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <MODNInit>:
 * 						  								gain added to four wheels based on the speed
 * Function Return		: NONE
 * Function Example		: void MODNInit(MODN_FWD_OMNI, 3.0, 0.5, 2.0, 0.1);
 */
void MODNInit(RobotBaseType_t base, float speed, float turnSpeed, float angleTol, float imuGain, int delay_time)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	ed87 0a04 	vstr	s0, [r7, #16]
 8004edc:	edc7 0a03 	vstr	s1, [r7, #12]
 8004ee0:	ed87 1a02 	vstr	s2, [r7, #8]
 8004ee4:	edc7 1a01 	vstr	s3, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	75fb      	strb	r3, [r7, #23]
	MODN.base = base;
 8004eec:	4a26      	ldr	r2, [pc, #152]	; (8004f88 <MODNInit+0xb8>)
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
 8004ef0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	MODN.speed = speed;
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <MODNInit+0xb8>)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	61d3      	str	r3, [r2, #28]
	MODN.d	= turnSpeed;
 8004efa:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <MODNInit+0xb8>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6213      	str	r3, [r2, #32]
	MODN.radTol = angleTol/180.0*3.14159265359;
 8004f00:	68b8      	ldr	r0, [r7, #8]
 8004f02:	f7fb fb21 	bl	8000548 <__aeabi_f2d>
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <MODNInit+0xbc>)
 8004f0c:	f7fb fc9e 	bl	800084c <__aeabi_ddiv>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	a319      	add	r3, pc, #100	; (adr r3, 8004f80 <MODNInit+0xb0>)
 8004f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1e:	f7fb fb6b 	bl	80005f8 <__aeabi_dmul>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fb fe5d 	bl	8000be8 <__aeabi_d2f>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <MODNInit+0xb8>)
 8004f32:	62d3      	str	r3, [r2, #44]	; 0x2c
	MODN.imuGain = speed*imuGain/MODN.radTol;
 8004f34:	ed97 7a04 	vldr	s14, [r7, #16]
 8004f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <MODNInit+0xb8>)
 8004f42:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8004f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <MODNInit+0xb8>)
 8004f4c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	MODN.radTarget = 0.0;
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <MODNInit+0xb8>)
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
	MODN.orientation = 0;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <MODNInit+0xb8>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
	MODN.t=0;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <MODNInit+0xb8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	645a      	str	r2, [r3, #68]	; 0x44
	MODN.real_x_vel = &(MODN.x_vel);
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <MODNInit+0xb8>)
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <MODNInit+0xb8>)
 8004f68:	64da      	str	r2, [r3, #76]	; 0x4c
	MODN.real_y_vel = &(MODN.y_vel);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <MODNInit+0xb8>)
 8004f6c:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <MODNInit+0xc0>)
 8004f6e:	651a      	str	r2, [r3, #80]	; 0x50
	MODN.delay = delay_time;
 8004f70:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <MODNInit+0xb8>)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6493      	str	r3, [r2, #72]	; 0x48
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	54442eea 	.word	0x54442eea
 8004f84:	400921fb 	.word	0x400921fb
 8004f88:	20007540 	.word	0x20007540
 8004f8c:	40668000 	.word	0x40668000
 8004f90:	20007544 	.word	0x20007544
 8004f94:	00000000 	.word	0x00000000

08004f98 <LegacyMODN>:
 * 						  rns	 						pointer to RNS_interface_t struct
 * Function Return		: NONE
 * Function Example		: LegacyMODN(ps4, &rns);
 */
void LegacyMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8004f98:	b5b0      	push	{r4, r5, r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	MODN.x_vel = (psx->joyL_x) * MODN.speed;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8004fa8:	4bad      	ldr	r3, [pc, #692]	; (8005260 <LegacyMODN+0x2c8>)
 8004faa:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	4bab      	ldr	r3, [pc, #684]	; (8005260 <LegacyMODN+0x2c8>)
 8004fb4:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel = (psx->joyL_y) * MODN.speed;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004fbe:	4ba8      	ldr	r3, [pc, #672]	; (8005260 <LegacyMODN+0x2c8>)
 8004fc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc8:	4ba5      	ldr	r3, [pc, #660]	; (8005260 <LegacyMODN+0x2c8>)
 8004fca:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004fda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004fde:	4ba0      	ldr	r3, [pc, #640]	; (8005260 <LegacyMODN+0x2c8>)
 8004fe0:	edd3 7a07 	vldr	s15, [r3, #28]
 8004fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe8:	4b9d      	ldr	r3, [pc, #628]	; (8005260 <LegacyMODN+0x2c8>)
 8004fea:	edc3 7a02 	vstr	s15, [r3, #8]
	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
 8004fee:	4b9c      	ldr	r3, [pc, #624]	; (8005260 <LegacyMODN+0x2c8>)
 8004ff0:	edd3 7a00 	vldr	s15, [r3]
 8004ff4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ffc:	d113      	bne.n	8005026 <LegacyMODN+0x8e>
 8004ffe:	4b98      	ldr	r3, [pc, #608]	; (8005260 <LegacyMODN+0x2c8>)
 8005000:	edd3 7a01 	vldr	s15, [r3, #4]
 8005004:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500c:	d10b      	bne.n	8005026 <LegacyMODN+0x8e>
 800500e:	4b94      	ldr	r3, [pc, #592]	; (8005260 <LegacyMODN+0x2c8>)
 8005010:	edd3 7a02 	vldr	s15, [r3, #8]
 8005014:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800501c:	d103      	bne.n	8005026 <LegacyMODN+0x8e>
		RNSStop(rns);
 800501e:	6838      	ldr	r0, [r7, #0]
 8005020:	f001 fb94 	bl	800674c <RNSStop>
			MODN.vel1 = MODN.y_vel * (0.866) + MODN.x_vel * (-0.5) + MODN.w_vel * MODN.d;
			MODN.vel2 = MODN.y_vel * (0.866) + MODN.x_vel * (0.5)  - MODN.w_vel * MODN.d;
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8005024:	e288      	b.n	8005538 <LegacyMODN+0x5a0>
		if(MODN.base == MODN_FWD_OMNI) {
 8005026:	4b8e      	ldr	r3, [pc, #568]	; (8005260 <LegacyMODN+0x2c8>)
 8005028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	f040 8119 	bne.w	8005264 <LegacyMODN+0x2cc>
			MODN.vel1 = MODN.x_vel * (0.70711)  +  MODN.y_vel * (0.70711) + MODN.w_vel * MODN.d;
 8005032:	4b8b      	ldr	r3, [pc, #556]	; (8005260 <LegacyMODN+0x2c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fa86 	bl	8000548 <__aeabi_f2d>
 800503c:	a384      	add	r3, pc, #528	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb fad9 	bl	80005f8 <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4614      	mov	r4, r2
 800504c:	461d      	mov	r5, r3
 800504e:	4b84      	ldr	r3, [pc, #528]	; (8005260 <LegacyMODN+0x2c8>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fa78 	bl	8000548 <__aeabi_f2d>
 8005058:	a37d      	add	r3, pc, #500	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb f90f 	bl	800028c <__adddf3>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4614      	mov	r4, r2
 8005074:	461d      	mov	r5, r3
 8005076:	4b7a      	ldr	r3, [pc, #488]	; (8005260 <LegacyMODN+0x2c8>)
 8005078:	ed93 7a02 	vldr	s14, [r3, #8]
 800507c:	4b78      	ldr	r3, [pc, #480]	; (8005260 <LegacyMODN+0x2c8>)
 800507e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005086:	ee17 0a90 	vmov	r0, s15
 800508a:	f7fb fa5d 	bl	8000548 <__aeabi_f2d>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb f8f9 	bl	800028c <__adddf3>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7fb fda1 	bl	8000be8 <__aeabi_d2f>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4a6d      	ldr	r2, [pc, #436]	; (8005260 <LegacyMODN+0x2c8>)
 80050aa:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.x_vel * (-0.70711) +  MODN.y_vel * (0.70711) - MODN.w_vel * MODN.d;
 80050ac:	4b6c      	ldr	r3, [pc, #432]	; (8005260 <LegacyMODN+0x2c8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fb fa49 	bl	8000548 <__aeabi_f2d>
 80050b6:	a368      	add	r3, pc, #416	; (adr r3, 8005258 <LegacyMODN+0x2c0>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fa9c 	bl	80005f8 <__aeabi_dmul>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	461d      	mov	r5, r3
 80050c8:	4b65      	ldr	r3, [pc, #404]	; (8005260 <LegacyMODN+0x2c8>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fa3b 	bl	8000548 <__aeabi_f2d>
 80050d2:	a35f      	add	r3, pc, #380	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb fa8e 	bl	80005f8 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4620      	mov	r0, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	f7fb f8d2 	bl	800028c <__adddf3>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	461d      	mov	r5, r3
 80050f0:	4b5b      	ldr	r3, [pc, #364]	; (8005260 <LegacyMODN+0x2c8>)
 80050f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80050f6:	4b5a      	ldr	r3, [pc, #360]	; (8005260 <LegacyMODN+0x2c8>)
 80050f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	ee17 0a90 	vmov	r0, s15
 8005104:	f7fb fa20 	bl	8000548 <__aeabi_f2d>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb f8ba 	bl	8000288 <__aeabi_dsub>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4610      	mov	r0, r2
 800511a:	4619      	mov	r1, r3
 800511c:	f7fb fd64 	bl	8000be8 <__aeabi_d2f>
 8005120:	4603      	mov	r3, r0
 8005122:	4a4f      	ldr	r2, [pc, #316]	; (8005260 <LegacyMODN+0x2c8>)
 8005124:	6113      	str	r3, [r2, #16]
			MODN.vel3 = MODN.x_vel * (-0.70711) +  MODN.y_vel * (0.70711) + MODN.w_vel * MODN.d;
 8005126:	4b4e      	ldr	r3, [pc, #312]	; (8005260 <LegacyMODN+0x2c8>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb fa0c 	bl	8000548 <__aeabi_f2d>
 8005130:	a349      	add	r3, pc, #292	; (adr r3, 8005258 <LegacyMODN+0x2c0>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb fa5f 	bl	80005f8 <__aeabi_dmul>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	4614      	mov	r4, r2
 8005140:	461d      	mov	r5, r3
 8005142:	4b47      	ldr	r3, [pc, #284]	; (8005260 <LegacyMODN+0x2c8>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f9fe 	bl	8000548 <__aeabi_f2d>
 800514c:	a340      	add	r3, pc, #256	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	f7fb fa51 	bl	80005f8 <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4620      	mov	r0, r4
 800515c:	4629      	mov	r1, r5
 800515e:	f7fb f895 	bl	800028c <__adddf3>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4614      	mov	r4, r2
 8005168:	461d      	mov	r5, r3
 800516a:	4b3d      	ldr	r3, [pc, #244]	; (8005260 <LegacyMODN+0x2c8>)
 800516c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005170:	4b3b      	ldr	r3, [pc, #236]	; (8005260 <LegacyMODN+0x2c8>)
 8005172:	edd3 7a08 	vldr	s15, [r3, #32]
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	ee17 0a90 	vmov	r0, s15
 800517e:	f7fb f9e3 	bl	8000548 <__aeabi_f2d>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb f87f 	bl	800028c <__adddf3>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f7fb fd27 	bl	8000be8 <__aeabi_d2f>
 800519a:	4603      	mov	r3, r0
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <LegacyMODN+0x2c8>)
 800519e:	6153      	str	r3, [r2, #20]
			MODN.vel4 = MODN.x_vel * (0.70711)  +  MODN.y_vel * (0.70711) - MODN.w_vel * MODN.d;
 80051a0:	4b2f      	ldr	r3, [pc, #188]	; (8005260 <LegacyMODN+0x2c8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fb f9cf 	bl	8000548 <__aeabi_f2d>
 80051aa:	a329      	add	r3, pc, #164	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	461d      	mov	r5, r3
 80051bc:	4b28      	ldr	r3, [pc, #160]	; (8005260 <LegacyMODN+0x2c8>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb f9c1 	bl	8000548 <__aeabi_f2d>
 80051c6:	a322      	add	r3, pc, #136	; (adr r3, 8005250 <LegacyMODN+0x2b8>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb fa14 	bl	80005f8 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4620      	mov	r0, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	f7fb f858 	bl	800028c <__adddf3>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4614      	mov	r4, r2
 80051e2:	461d      	mov	r5, r3
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <LegacyMODN+0x2c8>)
 80051e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <LegacyMODN+0x2c8>)
 80051ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80051f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f4:	ee17 0a90 	vmov	r0, s15
 80051f8:	f7fb f9a6 	bl	8000548 <__aeabi_f2d>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fb f840 	bl	8000288 <__aeabi_dsub>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7fb fcea 	bl	8000be8 <__aeabi_d2f>
 8005214:	4603      	mov	r3, r0
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <LegacyMODN+0x2c8>)
 8005218:	6193      	str	r3, [r2, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <LegacyMODN+0x2c8>)
 800521c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <LegacyMODN+0x2c8>)
 8005222:	ed93 7a04 	vldr	s14, [r3, #16]
 8005226:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <LegacyMODN+0x2c8>)
 8005228:	edd3 6a05 	vldr	s13, [r3, #20]
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <LegacyMODN+0x2c8>)
 800522e:	ed93 6a06 	vldr	s12, [r3, #24]
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	eef0 1a46 	vmov.f32	s3, s12
 8005238:	eeb0 1a66 	vmov.f32	s2, s13
 800523c:	eef0 0a47 	vmov.f32	s1, s14
 8005240:	eeb0 0a67 	vmov.f32	s0, s15
 8005244:	f001 fad2 	bl	80067ec <RNSVelocity>
}
 8005248:	e176      	b.n	8005538 <LegacyMODN+0x5a0>
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w
 8005250:	269595ff 	.word	0x269595ff
 8005254:	3fe6a0a5 	.word	0x3fe6a0a5
 8005258:	269595ff 	.word	0x269595ff
 800525c:	bfe6a0a5 	.word	0xbfe6a0a5
 8005260:	20007540 	.word	0x20007540
		}else if(MODN.base == MODN_MECANUM){
 8005264:	4bb8      	ldr	r3, [pc, #736]	; (8005548 <LegacyMODN+0x5b0>)
 8005266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526a:	2b02      	cmp	r3, #2
 800526c:	f040 80c0 	bne.w	80053f0 <LegacyMODN+0x458>
			MODN.vel1 = MODN.y_vel*(1.0) + MODN.x_vel*(1.0)  + MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005270:	4bb5      	ldr	r3, [pc, #724]	; (8005548 <LegacyMODN+0x5b0>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f967 	bl	8000548 <__aeabi_f2d>
 800527a:	4604      	mov	r4, r0
 800527c:	460d      	mov	r5, r1
 800527e:	4bb2      	ldr	r3, [pc, #712]	; (8005548 <LegacyMODN+0x5b0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f7fb f960 	bl	8000548 <__aeabi_f2d>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4620      	mov	r0, r4
 800528e:	4629      	mov	r1, r5
 8005290:	f7fa fffc 	bl	800028c <__adddf3>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4614      	mov	r4, r2
 800529a:	461d      	mov	r5, r3
 800529c:	4baa      	ldr	r3, [pc, #680]	; (8005548 <LegacyMODN+0x5b0>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fb f951 	bl	8000548 <__aeabi_f2d>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4620      	mov	r0, r4
 80052ac:	4629      	mov	r1, r5
 80052ae:	f7fa ffed 	bl	800028c <__adddf3>
 80052b2:	4602      	mov	r2, r0
 80052b4:	460b      	mov	r3, r1
 80052b6:	4610      	mov	r0, r2
 80052b8:	4619      	mov	r1, r3
 80052ba:	f7fb fc95 	bl	8000be8 <__aeabi_d2f>
 80052be:	4603      	mov	r3, r0
 80052c0:	4aa1      	ldr	r2, [pc, #644]	; (8005548 <LegacyMODN+0x5b0>)
 80052c2:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.y_vel*(1.0) + MODN.x_vel*(-1.0) - MODN.w_vel/*(MODN.d + MODN.e)*/;
 80052c4:	4ba0      	ldr	r3, [pc, #640]	; (8005548 <LegacyMODN+0x5b0>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f93d 	bl	8000548 <__aeabi_f2d>
 80052ce:	4604      	mov	r4, r0
 80052d0:	460d      	mov	r5, r1
 80052d2:	4b9d      	ldr	r3, [pc, #628]	; (8005548 <LegacyMODN+0x5b0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7fb f936 	bl	8000548 <__aeabi_f2d>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4620      	mov	r0, r4
 80052e2:	4629      	mov	r1, r5
 80052e4:	f7fa ffd0 	bl	8000288 <__aeabi_dsub>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	4b95      	ldr	r3, [pc, #596]	; (8005548 <LegacyMODN+0x5b0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f927 	bl	8000548 <__aeabi_f2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	f7fa ffc1 	bl	8000288 <__aeabi_dsub>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4610      	mov	r0, r2
 800530c:	4619      	mov	r1, r3
 800530e:	f7fb fc6b 	bl	8000be8 <__aeabi_d2f>
 8005312:	4603      	mov	r3, r0
 8005314:	4a8c      	ldr	r2, [pc, #560]	; (8005548 <LegacyMODN+0x5b0>)
 8005316:	6113      	str	r3, [r2, #16]
			MODN.vel3 = MODN.y_vel*(1.0) + MODN.x_vel*(-1.0) + MODN.w_vel/*(MODN.d + MODN.e)*/;
 8005318:	4b8b      	ldr	r3, [pc, #556]	; (8005548 <LegacyMODN+0x5b0>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f913 	bl	8000548 <__aeabi_f2d>
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	4b88      	ldr	r3, [pc, #544]	; (8005548 <LegacyMODN+0x5b0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb f90c 	bl	8000548 <__aeabi_f2d>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4620      	mov	r0, r4
 8005336:	4629      	mov	r1, r5
 8005338:	f7fa ffa6 	bl	8000288 <__aeabi_dsub>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4614      	mov	r4, r2
 8005342:	461d      	mov	r5, r3
 8005344:	4b80      	ldr	r3, [pc, #512]	; (8005548 <LegacyMODN+0x5b0>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fb f8fd 	bl	8000548 <__aeabi_f2d>
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4620      	mov	r0, r4
 8005354:	4629      	mov	r1, r5
 8005356:	f7fa ff99 	bl	800028c <__adddf3>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	f7fb fc41 	bl	8000be8 <__aeabi_d2f>
 8005366:	4603      	mov	r3, r0
 8005368:	4a77      	ldr	r2, [pc, #476]	; (8005548 <LegacyMODN+0x5b0>)
 800536a:	6153      	str	r3, [r2, #20]
			MODN.vel4 = MODN.y_vel*(1.0) + MODN.x_vel*(1.0)  - MODN.w_vel/*(MODN.d + MODN.e)*/;
 800536c:	4b76      	ldr	r3, [pc, #472]	; (8005548 <LegacyMODN+0x5b0>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f8e9 	bl	8000548 <__aeabi_f2d>
 8005376:	4604      	mov	r4, r0
 8005378:	460d      	mov	r5, r1
 800537a:	4b73      	ldr	r3, [pc, #460]	; (8005548 <LegacyMODN+0x5b0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fb f8e2 	bl	8000548 <__aeabi_f2d>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4620      	mov	r0, r4
 800538a:	4629      	mov	r1, r5
 800538c:	f7fa ff7e 	bl	800028c <__adddf3>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4614      	mov	r4, r2
 8005396:	461d      	mov	r5, r3
 8005398:	4b6b      	ldr	r3, [pc, #428]	; (8005548 <LegacyMODN+0x5b0>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f8d3 	bl	8000548 <__aeabi_f2d>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4620      	mov	r0, r4
 80053a8:	4629      	mov	r1, r5
 80053aa:	f7fa ff6d 	bl	8000288 <__aeabi_dsub>
 80053ae:	4602      	mov	r2, r0
 80053b0:	460b      	mov	r3, r1
 80053b2:	4610      	mov	r0, r2
 80053b4:	4619      	mov	r1, r3
 80053b6:	f7fb fc17 	bl	8000be8 <__aeabi_d2f>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a62      	ldr	r2, [pc, #392]	; (8005548 <LegacyMODN+0x5b0>)
 80053be:	6193      	str	r3, [r2, #24]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 80053c0:	4b61      	ldr	r3, [pc, #388]	; (8005548 <LegacyMODN+0x5b0>)
 80053c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80053c6:	4b60      	ldr	r3, [pc, #384]	; (8005548 <LegacyMODN+0x5b0>)
 80053c8:	ed93 7a04 	vldr	s14, [r3, #16]
 80053cc:	4b5e      	ldr	r3, [pc, #376]	; (8005548 <LegacyMODN+0x5b0>)
 80053ce:	edd3 6a05 	vldr	s13, [r3, #20]
 80053d2:	4b5d      	ldr	r3, [pc, #372]	; (8005548 <LegacyMODN+0x5b0>)
 80053d4:	ed93 6a06 	vldr	s12, [r3, #24]
 80053d8:	6838      	ldr	r0, [r7, #0]
 80053da:	eef0 1a46 	vmov.f32	s3, s12
 80053de:	eeb0 1a66 	vmov.f32	s2, s13
 80053e2:	eef0 0a47 	vmov.f32	s1, s14
 80053e6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ea:	f001 f9ff 	bl	80067ec <RNSVelocity>
}
 80053ee:	e0a3      	b.n	8005538 <LegacyMODN+0x5a0>
		else if (MODN.base == MODN_TRI_OMNI){
 80053f0:	4b55      	ldr	r3, [pc, #340]	; (8005548 <LegacyMODN+0x5b0>)
 80053f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	f040 809e 	bne.w	8005538 <LegacyMODN+0x5a0>
			MODN.vel3 = MODN.x_vel * (1.0)   + MODN.w_vel * MODN.d;
 80053fc:	4b52      	ldr	r3, [pc, #328]	; (8005548 <LegacyMODN+0x5b0>)
 80053fe:	ed93 7a00 	vldr	s14, [r3]
 8005402:	4b51      	ldr	r3, [pc, #324]	; (8005548 <LegacyMODN+0x5b0>)
 8005404:	edd3 6a02 	vldr	s13, [r3, #8]
 8005408:	4b4f      	ldr	r3, [pc, #316]	; (8005548 <LegacyMODN+0x5b0>)
 800540a:	edd3 7a08 	vldr	s15, [r3, #32]
 800540e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005416:	4b4c      	ldr	r3, [pc, #304]	; (8005548 <LegacyMODN+0x5b0>)
 8005418:	edc3 7a05 	vstr	s15, [r3, #20]
			MODN.vel1 = MODN.y_vel * (0.866) + MODN.x_vel * (-0.5) + MODN.w_vel * MODN.d;
 800541c:	4b4a      	ldr	r3, [pc, #296]	; (8005548 <LegacyMODN+0x5b0>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb f891 	bl	8000548 <__aeabi_f2d>
 8005426:	a346      	add	r3, pc, #280	; (adr r3, 8005540 <LegacyMODN+0x5a8>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f7fb f8e4 	bl	80005f8 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4614      	mov	r4, r2
 8005436:	461d      	mov	r5, r3
 8005438:	4b43      	ldr	r3, [pc, #268]	; (8005548 <LegacyMODN+0x5b0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fb f883 	bl	8000548 <__aeabi_f2d>
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <LegacyMODN+0x5b4>)
 8005448:	f7fb f8d6 	bl	80005f8 <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4620      	mov	r0, r4
 8005452:	4629      	mov	r1, r5
 8005454:	f7fa ff1a 	bl	800028c <__adddf3>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4614      	mov	r4, r2
 800545e:	461d      	mov	r5, r3
 8005460:	4b39      	ldr	r3, [pc, #228]	; (8005548 <LegacyMODN+0x5b0>)
 8005462:	ed93 7a02 	vldr	s14, [r3, #8]
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <LegacyMODN+0x5b0>)
 8005468:	edd3 7a08 	vldr	s15, [r3, #32]
 800546c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005470:	ee17 0a90 	vmov	r0, s15
 8005474:	f7fb f868 	bl	8000548 <__aeabi_f2d>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f7fa ff04 	bl	800028c <__adddf3>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4610      	mov	r0, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f7fb fbac 	bl	8000be8 <__aeabi_d2f>
 8005490:	4603      	mov	r3, r0
 8005492:	4a2d      	ldr	r2, [pc, #180]	; (8005548 <LegacyMODN+0x5b0>)
 8005494:	60d3      	str	r3, [r2, #12]
			MODN.vel2 = MODN.y_vel * (0.866) + MODN.x_vel * (0.5)  - MODN.w_vel * MODN.d;
 8005496:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <LegacyMODN+0x5b0>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	f7fb f854 	bl	8000548 <__aeabi_f2d>
 80054a0:	a327      	add	r3, pc, #156	; (adr r3, 8005540 <LegacyMODN+0x5a8>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fb f8a7 	bl	80005f8 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4614      	mov	r4, r2
 80054b0:	461d      	mov	r5, r3
 80054b2:	4b25      	ldr	r3, [pc, #148]	; (8005548 <LegacyMODN+0x5b0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb f846 	bl	8000548 <__aeabi_f2d>
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	4b23      	ldr	r3, [pc, #140]	; (8005550 <LegacyMODN+0x5b8>)
 80054c2:	f7fb f899 	bl	80005f8 <__aeabi_dmul>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4620      	mov	r0, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fa fedd 	bl	800028c <__adddf3>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4614      	mov	r4, r2
 80054d8:	461d      	mov	r5, r3
 80054da:	4b1b      	ldr	r3, [pc, #108]	; (8005548 <LegacyMODN+0x5b0>)
 80054dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80054e0:	4b19      	ldr	r3, [pc, #100]	; (8005548 <LegacyMODN+0x5b0>)
 80054e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80054e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ea:	ee17 0a90 	vmov	r0, s15
 80054ee:	f7fb f82b 	bl	8000548 <__aeabi_f2d>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4620      	mov	r0, r4
 80054f8:	4629      	mov	r1, r5
 80054fa:	f7fa fec5 	bl	8000288 <__aeabi_dsub>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4610      	mov	r0, r2
 8005504:	4619      	mov	r1, r3
 8005506:	f7fb fb6f 	bl	8000be8 <__aeabi_d2f>
 800550a:	4603      	mov	r3, r0
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <LegacyMODN+0x5b0>)
 800550e:	6113      	str	r3, [r2, #16]
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <LegacyMODN+0x5b0>)
 8005512:	edd3 7a03 	vldr	s15, [r3, #12]
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <LegacyMODN+0x5b0>)
 8005518:	ed93 7a04 	vldr	s14, [r3, #16]
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <LegacyMODN+0x5b0>)
 800551e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005522:	6838      	ldr	r0, [r7, #0]
 8005524:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8005554 <LegacyMODN+0x5bc>
 8005528:	eeb0 1a66 	vmov.f32	s2, s13
 800552c:	eef0 0a47 	vmov.f32	s1, s14
 8005530:	eeb0 0a67 	vmov.f32	s0, s15
 8005534:	f001 f95a 	bl	80067ec <RNSVelocity>
}
 8005538:	bf00      	nop
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bdb0      	pop	{r4, r5, r7, pc}
 8005540:	a1cac083 	.word	0xa1cac083
 8005544:	3febb645 	.word	0x3febb645
 8005548:	20007540 	.word	0x20007540
 800554c:	bfe00000 	.word	0xbfe00000
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	00000000 	.word	0x00000000

08005558 <realMODN>:
 * Function Return		: NONE
 * Function Example		: realMODN(ps4, &rns);
 */

void realMODN(PSxBT_t *psx, RNS_interface_t* rns)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	ed2d 8b02 	vpush	{d8}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
	MODN.x_vel = (psx->joyL_x) * MODN.speed;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800556c:	4baa      	ldr	r3, [pc, #680]	; (8005818 <realMODN+0x2c0>)
 800556e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005576:	4ba8      	ldr	r3, [pc, #672]	; (8005818 <realMODN+0x2c0>)
 8005578:	edc3 7a00 	vstr	s15, [r3]
	MODN.y_vel =  (psx->joyL_y) * MODN.speed;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8005582:	4ba5      	ldr	r3, [pc, #660]	; (8005818 <realMODN+0x2c0>)
 8005584:	edd3 7a07 	vldr	s15, [r3, #28]
 8005588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558c:	4ba2      	ldr	r3, [pc, #648]	; (8005818 <realMODN+0x2c0>)
 800558e:	edc3 7a01 	vstr	s15, [r3, #4]
	MODN.w_vel = ((psx->joyR_2) - (psx->joyL_2))* MODN.speed;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800559e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055a2:	4b9d      	ldr	r3, [pc, #628]	; (8005818 <realMODN+0x2c0>)
 80055a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80055a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ac:	4b9a      	ldr	r3, [pc, #616]	; (8005818 <realMODN+0x2c0>)
 80055ae:	edc3 7a02 	vstr	s15, [r3, #8]
	RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, rns);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	205f      	movs	r0, #95	; 0x5f
 80055b6:	f001 fc41 	bl	8006e3c <RNSEnquire>
	float realZrad = rns->enq.enq_buffer[3].data;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	60fb      	str	r3, [r7, #12]
	if(MODN.base == MODN_FWD_OMNI) {
 80055c0:	4b95      	ldr	r3, [pc, #596]	; (8005818 <realMODN+0x2c0>)
 80055c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f040 8128 	bne.w	800581c <realMODN+0x2c4>
		MODN.vel1 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) + MODN.w_vel*MODN.d;
 80055cc:	4b92      	ldr	r3, [pc, #584]	; (8005818 <realMODN+0x2c0>)
 80055ce:	ed93 8a00 	vldr	s16, [r3]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7fa ffb8 	bl	8000548 <__aeabi_f2d>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	a18a      	add	r1, pc, #552	; (adr r1, 8005808 <realMODN+0x2b0>)
 80055de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e2:	f7fa fe51 	bl	8000288 <__aeabi_dsub>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	f7fb fafb 	bl	8000be8 <__aeabi_d2f>
 80055f2:	4603      	mov	r3, r0
 80055f4:	ee00 3a10 	vmov	s0, r3
 80055f8:	f01b fe7a 	bl	80212f0 <cosf>
 80055fc:	eef0 7a40 	vmov.f32	s15, s0
 8005600:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005604:	4b84      	ldr	r3, [pc, #528]	; (8005818 <realMODN+0x2c0>)
 8005606:	edd3 8a01 	vldr	s17, [r3, #4]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7fa ff9c 	bl	8000548 <__aeabi_f2d>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	a17c      	add	r1, pc, #496	; (adr r1, 8005808 <realMODN+0x2b0>)
 8005616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800561a:	f7fa fe35 	bl	8000288 <__aeabi_dsub>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4610      	mov	r0, r2
 8005624:	4619      	mov	r1, r3
 8005626:	f7fb fadf 	bl	8000be8 <__aeabi_d2f>
 800562a:	4603      	mov	r3, r0
 800562c:	ee00 3a10 	vmov	s0, r3
 8005630:	f01b fe9e 	bl	8021370 <sinf>
 8005634:	eef0 7a40 	vmov.f32	s15, s0
 8005638:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800563c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005640:	4b75      	ldr	r3, [pc, #468]	; (8005818 <realMODN+0x2c0>)
 8005642:	edd3 6a02 	vldr	s13, [r3, #8]
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <realMODN+0x2c0>)
 8005648:	edd3 7a08 	vldr	s15, [r3, #32]
 800564c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005654:	4b70      	ldr	r3, [pc, #448]	; (8005818 <realMODN+0x2c0>)
 8005656:	edc3 7a03 	vstr	s15, [r3, #12]
		MODN.vel2 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) - MODN.w_vel*MODN.d;
 800565a:	4b6f      	ldr	r3, [pc, #444]	; (8005818 <realMODN+0x2c0>)
 800565c:	ed93 8a00 	vldr	s16, [r3]
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7fa ff71 	bl	8000548 <__aeabi_f2d>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	a169      	add	r1, pc, #420	; (adr r1, 8005810 <realMODN+0x2b8>)
 800566c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005670:	f7fa fe0a 	bl	8000288 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f7fb fab4 	bl	8000be8 <__aeabi_d2f>
 8005680:	4603      	mov	r3, r0
 8005682:	ee00 3a10 	vmov	s0, r3
 8005686:	f01b fe33 	bl	80212f0 <cosf>
 800568a:	eef0 7a40 	vmov.f32	s15, s0
 800568e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005692:	4b61      	ldr	r3, [pc, #388]	; (8005818 <realMODN+0x2c0>)
 8005694:	edd3 8a01 	vldr	s17, [r3, #4]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fa ff55 	bl	8000548 <__aeabi_f2d>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	a15b      	add	r1, pc, #364	; (adr r1, 8005810 <realMODN+0x2b8>)
 80056a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056a8:	f7fa fdee 	bl	8000288 <__aeabi_dsub>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	f7fb fa98 	bl	8000be8 <__aeabi_d2f>
 80056b8:	4603      	mov	r3, r0
 80056ba:	ee00 3a10 	vmov	s0, r3
 80056be:	f01b fe57 	bl	8021370 <sinf>
 80056c2:	eef0 7a40 	vmov.f32	s15, s0
 80056c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80056ca:	ee38 7a27 	vadd.f32	s14, s16, s15
 80056ce:	4b52      	ldr	r3, [pc, #328]	; (8005818 <realMODN+0x2c0>)
 80056d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80056d4:	4b50      	ldr	r3, [pc, #320]	; (8005818 <realMODN+0x2c0>)
 80056d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80056da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e2:	4b4d      	ldr	r3, [pc, #308]	; (8005818 <realMODN+0x2c0>)
 80056e4:	edc3 7a04 	vstr	s15, [r3, #16]
		MODN.vel3 = MODN.x_vel*cosf(2.3562-realZrad) + MODN.y_vel*sinf(2.3562-realZrad) + MODN.w_vel*MODN.d;
 80056e8:	4b4b      	ldr	r3, [pc, #300]	; (8005818 <realMODN+0x2c0>)
 80056ea:	ed93 8a00 	vldr	s16, [r3]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7fa ff2a 	bl	8000548 <__aeabi_f2d>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	a145      	add	r1, pc, #276	; (adr r1, 8005810 <realMODN+0x2b8>)
 80056fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fe:	f7fa fdc3 	bl	8000288 <__aeabi_dsub>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	f7fb fa6d 	bl	8000be8 <__aeabi_d2f>
 800570e:	4603      	mov	r3, r0
 8005710:	ee00 3a10 	vmov	s0, r3
 8005714:	f01b fdec 	bl	80212f0 <cosf>
 8005718:	eef0 7a40 	vmov.f32	s15, s0
 800571c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005720:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <realMODN+0x2c0>)
 8005722:	edd3 8a01 	vldr	s17, [r3, #4]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7fa ff0e 	bl	8000548 <__aeabi_f2d>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	a137      	add	r1, pc, #220	; (adr r1, 8005810 <realMODN+0x2b8>)
 8005732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005736:	f7fa fda7 	bl	8000288 <__aeabi_dsub>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4610      	mov	r0, r2
 8005740:	4619      	mov	r1, r3
 8005742:	f7fb fa51 	bl	8000be8 <__aeabi_d2f>
 8005746:	4603      	mov	r3, r0
 8005748:	ee00 3a10 	vmov	s0, r3
 800574c:	f01b fe10 	bl	8021370 <sinf>
 8005750:	eef0 7a40 	vmov.f32	s15, s0
 8005754:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005758:	ee38 7a27 	vadd.f32	s14, s16, s15
 800575c:	4b2e      	ldr	r3, [pc, #184]	; (8005818 <realMODN+0x2c0>)
 800575e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005762:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <realMODN+0x2c0>)
 8005764:	edd3 7a08 	vldr	s15, [r3, #32]
 8005768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800576c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005770:	4b29      	ldr	r3, [pc, #164]	; (8005818 <realMODN+0x2c0>)
 8005772:	edc3 7a05 	vstr	s15, [r3, #20]
		MODN.vel4 = MODN.x_vel*cosf(0.7854-realZrad) + MODN.y_vel*sinf(0.7854-realZrad) - MODN.w_vel*MODN.d;
 8005776:	4b28      	ldr	r3, [pc, #160]	; (8005818 <realMODN+0x2c0>)
 8005778:	ed93 8a00 	vldr	s16, [r3]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7fa fee3 	bl	8000548 <__aeabi_f2d>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	a120      	add	r1, pc, #128	; (adr r1, 8005808 <realMODN+0x2b0>)
 8005788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800578c:	f7fa fd7c 	bl	8000288 <__aeabi_dsub>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	f7fb fa26 	bl	8000be8 <__aeabi_d2f>
 800579c:	4603      	mov	r3, r0
 800579e:	ee00 3a10 	vmov	s0, r3
 80057a2:	f01b fda5 	bl	80212f0 <cosf>
 80057a6:	eef0 7a40 	vmov.f32	s15, s0
 80057aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80057ae:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <realMODN+0x2c0>)
 80057b0:	edd3 8a01 	vldr	s17, [r3, #4]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7fa fec7 	bl	8000548 <__aeabi_f2d>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	a112      	add	r1, pc, #72	; (adr r1, 8005808 <realMODN+0x2b0>)
 80057c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057c4:	f7fa fd60 	bl	8000288 <__aeabi_dsub>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4610      	mov	r0, r2
 80057ce:	4619      	mov	r1, r3
 80057d0:	f7fb fa0a 	bl	8000be8 <__aeabi_d2f>
 80057d4:	4603      	mov	r3, r0
 80057d6:	ee00 3a10 	vmov	s0, r3
 80057da:	f01b fdc9 	bl	8021370 <sinf>
 80057de:	eef0 7a40 	vmov.f32	s15, s0
 80057e2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80057e6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <realMODN+0x2c0>)
 80057ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <realMODN+0x2c0>)
 80057f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80057f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fe:	4b06      	ldr	r3, [pc, #24]	; (8005818 <realMODN+0x2c0>)
 8005800:	edc3 7a06 	vstr	s15, [r3, #24]
 8005804:	e0cb      	b.n	800599e <realMODN+0x446>
 8005806:	bf00      	nop
 8005808:	2e48e8a7 	.word	0x2e48e8a7
 800580c:	3fe921ff 	.word	0x3fe921ff
 8005810:	62b6ae7d 	.word	0x62b6ae7d
 8005814:	4002d97f 	.word	0x4002d97f
 8005818:	20007540 	.word	0x20007540
	//		*(MODN.vel1) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel2) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel3) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(-1.0) + *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//		*(MODN.vel4) = *(MODN.y_vel)*(1.0) + *(MODN.x_vel)*(1.0)  - *(MODN.w_vel)/*(MODN.d + MODN.e)*/;
	//	}
	else if (MODN.base == MODN_TRI_OMNI){
 800581c:	4b6a      	ldr	r3, [pc, #424]	; (80059c8 <realMODN+0x470>)
 800581e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005822:	2b01      	cmp	r3, #1
 8005824:	f040 80bb 	bne.w	800599e <realMODN+0x446>
		 *
		 * 		+		  +
		 * 		A\		 /B
		 * 		  -     -
		 */
		MODN.vel3 = MODN.y_vel*sinf(-realZrad) 		 + MODN.x_vel*cosf(-realZrad)  	    + MODN.w_vel*MODN.d;
 8005828:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <realMODN+0x470>)
 800582a:	ed93 8a01 	vldr	s16, [r3, #4]
 800582e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005832:	eef1 7a67 	vneg.f32	s15, s15
 8005836:	eeb0 0a67 	vmov.f32	s0, s15
 800583a:	f01b fd99 	bl	8021370 <sinf>
 800583e:	eef0 7a40 	vmov.f32	s15, s0
 8005842:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005846:	4b60      	ldr	r3, [pc, #384]	; (80059c8 <realMODN+0x470>)
 8005848:	edd3 8a00 	vldr	s17, [r3]
 800584c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005850:	eef1 7a67 	vneg.f32	s15, s15
 8005854:	eeb0 0a67 	vmov.f32	s0, s15
 8005858:	f01b fd4a 	bl	80212f0 <cosf>
 800585c:	eef0 7a40 	vmov.f32	s15, s0
 8005860:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005864:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005868:	4b57      	ldr	r3, [pc, #348]	; (80059c8 <realMODN+0x470>)
 800586a:	edd3 6a02 	vldr	s13, [r3, #8]
 800586e:	4b56      	ldr	r3, [pc, #344]	; (80059c8 <realMODN+0x470>)
 8005870:	edd3 7a08 	vldr	s15, [r3, #32]
 8005874:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587c:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <realMODN+0x470>)
 800587e:	edc3 7a05 	vstr	s15, [r3, #20]
		MODN.vel1 = MODN.y_vel*sinf(2.0944-realZrad) + MODN.x_vel*cosf(2.0944-realZrad) + MODN.w_vel*MODN.d;
 8005882:	4b51      	ldr	r3, [pc, #324]	; (80059c8 <realMODN+0x470>)
 8005884:	ed93 8a01 	vldr	s16, [r3, #4]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7fa fe5d 	bl	8000548 <__aeabi_f2d>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	a149      	add	r1, pc, #292	; (adr r1, 80059b8 <realMODN+0x460>)
 8005894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005898:	f7fa fcf6 	bl	8000288 <__aeabi_dsub>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	4610      	mov	r0, r2
 80058a2:	4619      	mov	r1, r3
 80058a4:	f7fb f9a0 	bl	8000be8 <__aeabi_d2f>
 80058a8:	4603      	mov	r3, r0
 80058aa:	ee00 3a10 	vmov	s0, r3
 80058ae:	f01b fd5f 	bl	8021370 <sinf>
 80058b2:	eef0 7a40 	vmov.f32	s15, s0
 80058b6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80058ba:	4b43      	ldr	r3, [pc, #268]	; (80059c8 <realMODN+0x470>)
 80058bc:	edd3 8a00 	vldr	s17, [r3]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7fa fe41 	bl	8000548 <__aeabi_f2d>
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	a13b      	add	r1, pc, #236	; (adr r1, 80059b8 <realMODN+0x460>)
 80058cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058d0:	f7fa fcda 	bl	8000288 <__aeabi_dsub>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	f7fb f984 	bl	8000be8 <__aeabi_d2f>
 80058e0:	4603      	mov	r3, r0
 80058e2:	ee00 3a10 	vmov	s0, r3
 80058e6:	f01b fd03 	bl	80212f0 <cosf>
 80058ea:	eef0 7a40 	vmov.f32	s15, s0
 80058ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80058f2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80058f6:	4b34      	ldr	r3, [pc, #208]	; (80059c8 <realMODN+0x470>)
 80058f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <realMODN+0x470>)
 80058fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8005902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800590a:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <realMODN+0x470>)
 800590c:	edc3 7a03 	vstr	s15, [r3, #12]
		MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
 8005910:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <realMODN+0x470>)
 8005912:	ed93 8a01 	vldr	s16, [r3, #4]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7fa fe16 	bl	8000548 <__aeabi_f2d>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	a127      	add	r1, pc, #156	; (adr r1, 80059c0 <realMODN+0x468>)
 8005922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005926:	f7fa fcaf 	bl	8000288 <__aeabi_dsub>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	f7fb f959 	bl	8000be8 <__aeabi_d2f>
 8005936:	4603      	mov	r3, r0
 8005938:	ee00 3a10 	vmov	s0, r3
 800593c:	f01b fd18 	bl	8021370 <sinf>
 8005940:	eef0 7a40 	vmov.f32	s15, s0
 8005944:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <realMODN+0x470>)
 800594a:	edd3 8a00 	vldr	s17, [r3]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7fa fdfa 	bl	8000548 <__aeabi_f2d>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	a119      	add	r1, pc, #100	; (adr r1, 80059c0 <realMODN+0x468>)
 800595a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800595e:	f7fa fc93 	bl	8000288 <__aeabi_dsub>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	f7fb f93d 	bl	8000be8 <__aeabi_d2f>
 800596e:	4603      	mov	r3, r0
 8005970:	ee00 3a10 	vmov	s0, r3
 8005974:	f01b fcbc 	bl	80212f0 <cosf>
 8005978:	eef0 7a40 	vmov.f32	s15, s0
 800597c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8005980:	ee38 7a27 	vadd.f32	s14, s16, s15
 8005984:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <realMODN+0x470>)
 8005986:	edd3 6a02 	vldr	s13, [r3, #8]
 800598a:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <realMODN+0x470>)
 800598c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <realMODN+0x470>)
 800599a:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	ApplyMODN(psx, rns);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f813 	bl	80059cc <ApplyMODN>
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	ecbd 8b02 	vpop	{d8}
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	f3af 8000 	nop.w
 80059b8:	c985f06f 	.word	0xc985f06f
 80059bc:	4000c154 	.word	0x4000c154
 80059c0:	c985f06f 	.word	0xc985f06f
 80059c4:	3ff0c154 	.word	0x3ff0c154
 80059c8:	20007540 	.word	0x20007540

080059cc <ApplyMODN>:
		MODN.vel2 = MODN.y_vel*sinf(1.0472-realZrad) + MODN.x_vel*cosf(1.0472-realZrad) - MODN.w_vel*MODN.d;
	}
	ApplyMODN(psx, rns);
}

void ApplyMODN(PSxBT_t *psx, RNS_interface_t* rns){
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	//	if(MODN.x_vel==0.0 && MODN.y_vel==0.0 && MODN.w_vel==0.0){
	//		RNSStop(rns);
	if(MODN.x_vel + MODN.y_vel + MODN.w_vel == 0.00){
 80059d6:	4b36      	ldr	r3, [pc, #216]	; (8005ab0 <ApplyMODN+0xe4>)
 80059d8:	ed93 7a00 	vldr	s14, [r3]
 80059dc:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <ApplyMODN+0xe4>)
 80059de:	edd3 7a01 	vldr	s15, [r3, #4]
 80059e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e6:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <ApplyMODN+0xe4>)
 80059e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80059ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f8:	d103      	bne.n	8005a02 <ApplyMODN+0x36>
		RNSStop(rns);
 80059fa:	6838      	ldr	r0, [r7, #0]
 80059fc:	f000 fea6 	bl	800674c <RNSStop>
		}
		else if (MODN.base == MODN_TRI_OMNI){
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
		}
	}
}
 8005a00:	e052      	b.n	8005aa8 <ApplyMODN+0xdc>
		if(MODN.base == MODN_FWD_OMNI) {
 8005a02:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d117      	bne.n	8005a3c <ApplyMODN+0x70>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8005a0c:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a1a:	edd3 6a05 	vldr	s13, [r3, #20]
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a20:	ed93 6a06 	vldr	s12, [r3, #24]
 8005a24:	6838      	ldr	r0, [r7, #0]
 8005a26:	eef0 1a46 	vmov.f32	s3, s12
 8005a2a:	eeb0 1a66 	vmov.f32	s2, s13
 8005a2e:	eef0 0a47 	vmov.f32	s1, s14
 8005a32:	eeb0 0a67 	vmov.f32	s0, s15
 8005a36:	f000 fed9 	bl	80067ec <RNSVelocity>
}
 8005a3a:	e035      	b.n	8005aa8 <ApplyMODN+0xdc>
		}else if(MODN.base == MODN_MECANUM){
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d117      	bne.n	8005a76 <ApplyMODN+0xaa>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, MODN.vel4, rns);
 8005a46:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a48:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a4e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a52:	4b17      	ldr	r3, [pc, #92]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a54:	edd3 6a05 	vldr	s13, [r3, #20]
 8005a58:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a5a:	ed93 6a06 	vldr	s12, [r3, #24]
 8005a5e:	6838      	ldr	r0, [r7, #0]
 8005a60:	eef0 1a46 	vmov.f32	s3, s12
 8005a64:	eeb0 1a66 	vmov.f32	s2, s13
 8005a68:	eef0 0a47 	vmov.f32	s1, s14
 8005a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a70:	f000 febc 	bl	80067ec <RNSVelocity>
}
 8005a74:	e018      	b.n	8005aa8 <ApplyMODN+0xdc>
		else if (MODN.base == MODN_TRI_OMNI){
 8005a76:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d113      	bne.n	8005aa8 <ApplyMODN+0xdc>
			RNSVelocity(MODN.vel1, MODN.vel2, MODN.vel3, 0.0, rns);
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a82:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a88:	ed93 7a04 	vldr	s14, [r3, #16]
 8005a8c:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <ApplyMODN+0xe4>)
 8005a8e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	eddf 1a07 	vldr	s3, [pc, #28]	; 8005ab4 <ApplyMODN+0xe8>
 8005a98:	eeb0 1a66 	vmov.f32	s2, s13
 8005a9c:	eef0 0a47 	vmov.f32	s1, s14
 8005aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa4:	f000 fea2 	bl	80067ec <RNSVelocity>
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20007540 	.word	0x20007540
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <setSpeedMODN>:
void setOrientationMODN(OrientationMODN_t orientation)
{
	MODN.orientation = orientation;
}

void setSpeedMODN(float speed){  //fucked up, do not use MODN.imuGain eqn!
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	ed87 0a01 	vstr	s0, [r7, #4]

	MODN.speed = speed;
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <setSpeedMODN+0x1c>)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	61d3      	str	r3, [r2, #28]
//	MODN.imuGain = speed*MODN.imuGain/MODN.radTol;
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20007540 	.word	0x20007540

08005ad8 <Moving_Average_Init>:
 * 						  Input						    Pointer to Input of the filter
 * 						  Output					    Pointer to Output of the filter
 * Function Return		: NONE
 * Function Example		: Moving_Average_Init (&move_ave, &Laser_dist, &Laser_ave);
 */
void Moving_Average_Init(Mov_Ave_t *Mov_Ave, float *Input, float *Output){
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]

	Mov_Ave->input = Input;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	Mov_Ave->Sum = 0;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	679a      	str	r2, [r3, #120]	; 0x78
	Mov_Ave->WindowPointer = 0;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	67da      	str	r2, [r3, #124]	; 0x7c
	Mov_Ave->output = Output;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	for(uint32_t i=0; i<WindowLength; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	e009      	b.n	8005b1c <Moving_Average_Init+0x44>
	{
		Mov_Ave->History[i] = 0;
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<WindowLength; i++)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2b1d      	cmp	r3, #29
 8005b20:	d9f2      	bls.n	8005b08 <Moving_Average_Init+0x30>
	}

}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <Moving_Average_Filter>:
 *
 *						  Mov_Ave                       Pointer to Mov_Ave_t handle
 * Function Return		: NONE
 * Function Example		: Moving_Average_Filter (&move_ave);
 */
void Moving_Average_Filter(Mov_Ave_t *Mov_Ave){
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]


	Mov_Ave->Sum += *(Mov_Ave->input);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b44:	edd3 7a00 	vldr	s15, [r3]
 8005b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	Mov_Ave->Sum -= Mov_Ave->History[Mov_Ave->WindowPointer];
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	edd3 7a00 	vldr	s15, [r3]
 8005b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	Mov_Ave->History[Mov_Ave->WindowPointer] = *(Mov_Ave->input);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	601a      	str	r2, [r3, #0]
	if(Mov_Ave->WindowPointer < WindowLength - 1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b88:	2b1c      	cmp	r3, #28
 8005b8a:	d805      	bhi.n	8005b98 <Moving_Average_Filter+0x68>
	{
		Mov_Ave->WindowPointer += 1;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	67da      	str	r2, [r3, #124]	; 0x7c
 8005b96:	e002      	b.n	8005b9e <Moving_Average_Filter+0x6e>
	}
	else
	{
		Mov_Ave->WindowPointer = 0;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	*(Mov_Ave->output) = (Mov_Ave->Sum/WindowLength);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005baa:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8005bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bb2:	edc3 7a00 	vstr	s15, [r3]

}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <PIDSourceInit>:

/*********************************************/
/*           Subroutine Function             */
/*********************************************/
void PIDSourceInit (float *in, float *out, PID_t *pid)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
	pid->error = in;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
	pid->out_put = out;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	609a      	str	r2, [r3, #8]
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <PIDGainInit>:

void PIDGainInit(float ts, float sat, float ke, float ku, float kp, float ki,
									float kd, float kn, PID_t *pid)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b08a      	sub	sp, #40	; 0x28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8005bf0:	edc7 0a08 	vstr	s1, [r7, #32]
 8005bf4:	ed87 1a07 	vstr	s2, [r7, #28]
 8005bf8:	edc7 1a06 	vstr	s3, [r7, #24]
 8005bfc:	ed87 2a05 	vstr	s4, [r7, #20]
 8005c00:	edc7 2a04 	vstr	s5, [r7, #16]
 8005c04:	ed87 3a03 	vstr	s6, [r7, #12]
 8005c08:	edc7 3a02 	vstr	s7, [r7, #8]
 8005c0c:	6078      	str	r0, [r7, #4]
	pid->K[TS] = ts;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c12:	60da      	str	r2, [r3, #12]
	pid->K[SAT] = sat;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	611a      	str	r2, [r3, #16]
	pid->K[KE] = ke;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	615a      	str	r2, [r3, #20]
	pid->K[KU] = ku;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	619a      	str	r2, [r3, #24]
	pid->K[KP] = kp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	61da      	str	r2, [r3, #28]
	pid->K[KI] = ki;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	621a      	str	r2, [r3, #32]
	pid->K[KD] = kd;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24
	pid->K[KN] = kn;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	629a      	str	r2, [r3, #40]	; 0x28
	PIDCoeffCalc(pid);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f804 	bl	8005c4c <PIDCoeffCalc>
//	pid->K[D_1] = (((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) / (pid->K[KN] * pid->K[TS] + 2);
//	} else {
//		pid->pd_flag = 0;
//		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0;
//	}
}
 8005c44:	bf00      	nop
 8005c46:	3728      	adds	r7, #40	; 0x28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <PIDCoeffCalc>:
	pid->K[a] = value;
	PIDCoeffCalc(pid);
}

void PIDCoeffCalc (PID_t *pid)
{
 8005c4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
	if (pid->K[KI] != 0){
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d013      	beq.n	8005c8e <PIDCoeffCalc+0x42>
		pid->K[B_0] = (pid->K[TS] * pid->K[KI]) * 0.5;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	ed93 7a03 	vldr	s14, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		pid->K[B_1] = pid->K[B_0];
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c8c:	e007      	b.n	8005c9e <PIDCoeffCalc+0x52>
	} else {
		pid->K[B_0] = pid->K[B_1] = 0;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if ((pid->K[KP] != 0) || (pid->K[KD] != 0)){
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ca4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cac:	d108      	bne.n	8005cc0 <PIDCoeffCalc+0x74>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005cb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbc:	f000 80ef 	beq.w	8005e9e <PIDCoeffCalc+0x252>
	pid->K[C_1] = -((pid->K[TS] * pid->K[KN] - 2.0) / (pid->K[TS] * pid->K[KN] + 2.0));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	ed93 7a03 	vldr	s14, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd0:	ee17 0a90 	vmov	r0, s15
 8005cd4:	f7fa fc38 	bl	8000548 <__aeabi_f2d>
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ce0:	f7fa fad2 	bl	8000288 <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4614      	mov	r4, r2
 8005cea:	461d      	mov	r5, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	ed93 7a03 	vldr	s14, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfc:	ee17 0a90 	vmov	r0, s15
 8005d00:	f7fa fc22 	bl	8000548 <__aeabi_f2d>
 8005d04:	f04f 0200 	mov.w	r2, #0
 8005d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d0c:	f7fa fabe 	bl	800028c <__adddf3>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4620      	mov	r0, r4
 8005d16:	4629      	mov	r1, r5
 8005d18:	f7fa fd98 	bl	800084c <__aeabi_ddiv>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	f7fa ff60 	bl	8000be8 <__aeabi_d2f>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef1 7a67 	vneg.f32	s15, s15
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	pid->K[D_0] = (pid->K[KP] + ((2.0 * pid->K[KD] * pid->K[KN]) / (pid->K[KN] * pid->K[TS] + 2.0)));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fa fc03 	bl	8000548 <__aeabi_f2d>
 8005d42:	4604      	mov	r4, r0
 8005d44:	460d      	mov	r5, r1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fa fbfc 	bl	8000548 <__aeabi_f2d>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	f7fa fa9a 	bl	800028c <__adddf3>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4690      	mov	r8, r2
 8005d5e:	4699      	mov	r9, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa fbef 	bl	8000548 <__aeabi_f2d>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4640      	mov	r0, r8
 8005d70:	4649      	mov	r1, r9
 8005d72:	f7fa fc41 	bl	80005f8 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4690      	mov	r8, r2
 8005d7c:	4699      	mov	r9, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8e:	ee17 0a90 	vmov	r0, s15
 8005d92:	f7fa fbd9 	bl	8000548 <__aeabi_f2d>
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d9e:	f7fa fa75 	bl	800028c <__adddf3>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4640      	mov	r0, r8
 8005da8:	4649      	mov	r1, r9
 8005daa:	f7fa fd4f 	bl	800084c <__aeabi_ddiv>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fa69 	bl	800028c <__adddf3>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fa ff11 	bl	8000be8 <__aeabi_d2f>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ddc:	ee17 0a90 	vmov	r0, s15
 8005de0:	f7fa fbb2 	bl	8000548 <__aeabi_f2d>
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dec:	f7fa fa4c 	bl	8000288 <__aeabi_dsub>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4614      	mov	r4, r2
 8005df6:	461d      	mov	r5, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fa fba3 	bl	8000548 <__aeabi_f2d>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4620      	mov	r0, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	f7fa fbf5 	bl	80005f8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4614      	mov	r4, r2
 8005e14:	461d      	mov	r5, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa fb94 	bl	8000548 <__aeabi_f2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	f7fa fa32 	bl	800028c <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4690      	mov	r8, r2
 8005e2e:	4699      	mov	r9, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fb87 	bl	8000548 <__aeabi_f2d>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f7fa fbd9 	bl	80005f8 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	f7fa fa1b 	bl	8000288 <__aeabi_dsub>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4614      	mov	r4, r2
 8005e58:	461d      	mov	r5, r3
					(pid->K[KN] * pid->K[TS] + 2.0));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	ee17 0a90 	vmov	r0, s15
 8005e6e:	f7fa fb6b 	bl	8000548 <__aeabi_f2d>
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e7a:	f7fa fa07 	bl	800028c <__adddf3>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
	pid->K[D_1] = ((((pid->K[KN] * pid->K[TS] - 2.0) * pid->K[KP]) - (2.0 * pid->K[KD] * pid->K[KN])) /
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fce1 	bl	800084c <__aeabi_ddiv>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fa fea9 	bl	8000be8 <__aeabi_d2f>
 8005e96:	4602      	mov	r2, r0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e9c:	e00c      	b.n	8005eb8 <PIDCoeffCalc+0x26c>
	} else {
		pid->K[C_1] = pid->K[D_0] = pid->K[D_1] = 0.0;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	; 0x38
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8005eb6:	bf00      	nop
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ec2 <PIDDelayInit>:

void PIDDelayInit (PID_t *pid)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
//	unsigned char i;
//	for(i = 0; i < 2; i++){
//		pid->i_delay[i] = 0;
//		pid->d_delay[i] = 0;
//	}
	pid->i_delay[0] = 0.0;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	641a      	str	r2, [r3, #64]	; 0x40
	pid->i_delay[1] = 0.0;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	; 0x44
	pid->d_delay[0] = 0.0;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	649a      	str	r2, [r3, #72]	; 0x48
	pid->d_delay[1] = 0.0;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	64da      	str	r2, [r3, #76]	; 0x4c
	pid->s_delay = 0.0;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <PSxConnectDMA>:
 * Function Remarks		: Called in respective I2c interrupt
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSxConnectDMA(&ps4);
 */
void PSxConnectDMA(PSxBT_t* psxbt){
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	230b      	movs	r3, #11
 8005f10:	2188      	movs	r1, #136	; 0x88
 8005f12:	f00e fbed 	bl	80146f0 <HAL_I2C_Master_Receive_DMA>
	PSx_HandlerI2C(psxbt);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f81e 	bl	8005f58 <PSx_HandlerI2C>
}
 8005f1c:	bf00      	nop
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <PSxInitDMA>:
 * Function Arguments	: *psxbt	, Pointer to structure PSxBT_t
 * 						   hi2cx    , Pointer to I2C handle
 * Function Return		: None
 * Function Example		: PSxInitDMA(&ps4,&hi2c1);
 */
void PSxInitDMA(PSxBT_t *psxbt,I2C_HandleTypeDef* hi2cx){
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
	psxbt->hi2cps4 = hi2cx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	665a      	str	r2, [r3, #100]	; 0x64
//	HAL_I2C_Slave_Receive_DMA(hi2cx, psxbt->ReceiveBuffer, 11);//GG
	HAL_I2C_Master_Receive_DMA(psxbt->hi2cps4, 0x44 << 1 ,(unsigned char *)psxbt->ReceiveBuffer, 11);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	230b      	movs	r3, #11
 8005f3e:	2188      	movs	r1, #136	; 0x88
 8005f40:	f00e fbd6 	bl	80146f0 <HAL_I2C_Master_Receive_DMA>
	psxbt->initialized = 1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
	psxbt->disconnected = 0;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <PSx_HandlerI2C>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerI2C(&ps4x);
 */

void PSx_HandlerI2C(PSxBT_t *psxbt){
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	psxbt->buf1 = psxbt->ReceiveBuffer[1];
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	789a      	ldrb	r2, [r3, #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	psxbt->buf2 = psxbt->ReceiveBuffer[2];
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	78da      	ldrb	r2, [r3, #3]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	psxbt->leftjoy_x = psxbt->ReceiveBuffer[3];
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	791b      	ldrb	r3, [r3, #4]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	635a      	str	r2, [r3, #52]	; 0x34
	psxbt->leftjoy_y = psxbt->ReceiveBuffer[4];
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	795b      	ldrb	r3, [r3, #5]
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38
	psxbt->rightjoy_x = psxbt->ReceiveBuffer[5];
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	799b      	ldrb	r3, [r3, #6]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	63da      	str	r2, [r3, #60]	; 0x3c
	psxbt->rightjoy_y = psxbt->ReceiveBuffer[6];
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	79db      	ldrb	r3, [r3, #7]
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	; 0x40
	psxbt->an_L2 = psxbt->ReceiveBuffer[7];
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7a1b      	ldrb	r3, [r3, #8]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44
	psxbt->an_R2 = psxbt->ReceiveBuffer[8];
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	7a5b      	ldrb	r3, [r3, #9]
 8005faa:	461a      	mov	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	649a      	str	r2, [r3, #72]	; 0x48
	psxbt->buf3 = psxbt->ReceiveBuffer[9];
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7a9a      	ldrb	r2, [r3, #10]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	psxbt->state = psxbt->ReceiveBuffer[10];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7ada      	ldrb	r2, [r3, #11]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	PSxBTGetXY(psxbt);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f88b 	bl	80060e0 <PSxBTGetXY>
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <PSx_HandlerUART>:
 * Function Arguments	: *psxbt	,pointer to structure PSxBT_t
 * Function Return		: None
 * Function Example		: PSx_HandlerUART(&ps4x);
 */

void PSx_HandlerUART(PSxBT_t *psxbt){
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	static uint8_t state = 0;
	switch(state){
 8005fdc:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <PSx_HandlerUART+0x108>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d032      	beq.n	800604a <PSx_HandlerUART+0x76>
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	dc74      	bgt.n	80060d2 <PSx_HandlerUART+0xfe>
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <PSx_HandlerUART+0x1e>
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d010      	beq.n	8006012 <PSx_HandlerUART+0x3e>
			PSxBTGetXY(psxbt);
		}
		state = 0;
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
	}
}
 8005ff0:	e06f      	b.n	80060d2 <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[0] == 0x01)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d102      	bne.n	8006000 <PSx_HandlerUART+0x2c>
			state = 1;
 8005ffa:	4b38      	ldr	r3, [pc, #224]	; (80060dc <PSx_HandlerUART+0x108>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)&psxbt->ReceiveBuffer[1], 1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3302      	adds	r3, #2
 8006008:	2201      	movs	r2, #1
 800600a:	4619      	mov	r1, r3
 800600c:	f012 f8f2 	bl	80181f4 <HAL_UART_Receive_IT>
	break;
 8006010:	e05f      	b.n	80060d2 <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[1] == 0x02){
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	789b      	ldrb	r3, [r3, #2]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d10b      	bne.n	8006032 <PSx_HandlerUART+0x5e>
			state = 2;
 800601a:	4b30      	ldr	r3, [pc, #192]	; (80060dc <PSx_HandlerUART+0x108>)
 800601c:	2202      	movs	r2, #2
 800601e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)&psxbt->ReceiveBuffer[2], 11);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3303      	adds	r3, #3
 8006028:	220b      	movs	r2, #11
 800602a:	4619      	mov	r1, r3
 800602c:	f012 f8e2 	bl	80181f4 <HAL_UART_Receive_IT>
	break;
 8006030:	e04f      	b.n	80060d2 <PSx_HandlerUART+0xfe>
			state = 0;
 8006032:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <PSx_HandlerUART+0x108>)
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3301      	adds	r3, #1
 8006040:	2201      	movs	r2, #1
 8006042:	4619      	mov	r1, r3
 8006044:	f012 f8d6 	bl	80181f4 <HAL_UART_Receive_IT>
	break;
 8006048:	e043      	b.n	80060d2 <PSx_HandlerUART+0xfe>
		if(psxbt->ReceiveBuffer[11] == 0x03 && psxbt->ReceiveBuffer[12] == 0x04){
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7b1b      	ldrb	r3, [r3, #12]
 800604e:	2b03      	cmp	r3, #3
 8006050:	d133      	bne.n	80060ba <PSx_HandlerUART+0xe6>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	7b5b      	ldrb	r3, [r3, #13]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d12f      	bne.n	80060ba <PSx_HandlerUART+0xe6>
			psxbt->buf1 = psxbt->ReceiveBuffer[2];
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	78da      	ldrb	r2, [r3, #3]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			psxbt->buf2 = psxbt->ReceiveBuffer[3];
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	791a      	ldrb	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			psxbt->leftjoy_x = psxbt->ReceiveBuffer[4];
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	795b      	ldrb	r3, [r3, #5]
 8006072:	461a      	mov	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	635a      	str	r2, [r3, #52]	; 0x34
			psxbt->leftjoy_y = psxbt->ReceiveBuffer[5];
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	799b      	ldrb	r3, [r3, #6]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
			psxbt->rightjoy_x = psxbt->ReceiveBuffer[6];
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	79db      	ldrb	r3, [r3, #7]
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	63da      	str	r2, [r3, #60]	; 0x3c
			psxbt->rightjoy_y = psxbt->ReceiveBuffer[7];
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7a1b      	ldrb	r3, [r3, #8]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	641a      	str	r2, [r3, #64]	; 0x40
			psxbt->an_L2 = psxbt->ReceiveBuffer[8];
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	7a5b      	ldrb	r3, [r3, #9]
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	645a      	str	r2, [r3, #68]	; 0x44
			psxbt->an_R2 = psxbt->ReceiveBuffer[9];
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	7a9b      	ldrb	r3, [r3, #10]
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	649a      	str	r2, [r3, #72]	; 0x48
			psxbt->buf3 = psxbt->ReceiveBuffer[10];
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7ada      	ldrb	r2, [r3, #11]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
			PSxBTGetXY(psxbt);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f813 	bl	80060e0 <PSxBTGetXY>
		state = 0;
 80060ba:	4b08      	ldr	r3, [pc, #32]	; (80060dc <PSx_HandlerUART+0x108>)
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(psxbt->huartps4, (unsigned char *)psxbt->ReceiveBuffer, 1);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	2201      	movs	r2, #1
 80060ca:	4619      	mov	r1, r3
 80060cc:	f012 f892 	bl	80181f4 <HAL_UART_Receive_IT>
}
 80060d0:	e7ff      	b.n	80060d2 <PSx_HandlerUART+0xfe>
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200007b9 	.word	0x200007b9

080060e0 <PSxBTGetXY>:
 * Function Return		: None
 * Function Example		: PSxBTGetXY(&ps3x);
 */

void PSxBTGetXY(PSxBT_t *psxbt)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
	if(joyR_up){
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8006408 <PSxBTGetXY+0x328>
 80060f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	d53e      	bpl.n	8006180 <PSxBTGetXY+0xa0>
		psxbt->joyR_y  = ((psx_low_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	ee17 0a90 	vmov	r0, s15
 8006112:	f7fa fa19 	bl	8000548 <__aeabi_f2d>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	a1b9      	add	r1, pc, #740	; (adr r1, 8006400 <PSxBTGetXY+0x320>)
 800611c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006120:	f7fa f8b2 	bl	8000288 <__aeabi_dsub>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4610      	mov	r0, r2
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	4bb6      	ldr	r3, [pc, #728]	; (800640c <PSxBTGetXY+0x32c>)
 8006132:	f7fa fb8b 	bl	800084c <__aeabi_ddiv>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	f7fa fd53 	bl	8000be8 <__aeabi_d2f>
 8006142:	4602      	mov	r2, r0
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y < 0.0){
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800614e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006156:	d504      	bpl.n	8006162 <PSxBTGetXY+0x82>
			psxbt->joyR_y = 0.0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	64da      	str	r2, [r3, #76]	; 0x4c
 8006160:	e05d      	b.n	800621e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y > 1.0){
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800616c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006174:	dd53      	ble.n	800621e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = 1.0;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800617c:	64da      	str	r2, [r3, #76]	; 0x4c
 800617e:	e04e      	b.n	800621e <PSxBTGetXY+0x13e>
		}
	}else if(joyR_down){
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006418 <PSxBTGetXY+0x338>
 8006190:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006198:	dd3d      	ble.n	8006216 <PSxBTGetXY+0x136>
		psxbt->joyR_y = ((psx_high_Ry - ((float)psxbt->rightjoy_y))/100.0)/1.00;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	ee17 0a90 	vmov	r0, s15
 80061aa:	f7fa f9cd 	bl	8000548 <__aeabi_f2d>
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	4996      	ldr	r1, [pc, #600]	; (8006410 <PSxBTGetXY+0x330>)
 80061b8:	f7fa f866 	bl	8000288 <__aeabi_dsub>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	4b90      	ldr	r3, [pc, #576]	; (800640c <PSxBTGetXY+0x32c>)
 80061ca:	f7fa fb3f 	bl	800084c <__aeabi_ddiv>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4610      	mov	r0, r2
 80061d4:	4619      	mov	r1, r3
 80061d6:	f7fa fd07 	bl	8000be8 <__aeabi_d2f>
 80061da:	4602      	mov	r2, r0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	64da      	str	r2, [r3, #76]	; 0x4c
		if(psxbt->joyR_y > 0.0){
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80061e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ee:	dd04      	ble.n	80061fa <PSxBTGetXY+0x11a>
			psxbt->joyR_y = 0.0;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	64da      	str	r2, [r3, #76]	; 0x4c
 80061f8:	e011      	b.n	800621e <PSxBTGetXY+0x13e>
		}else if(psxbt->joyR_y < -1.0){
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8006200:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620c:	d507      	bpl.n	800621e <PSxBTGetXY+0x13e>
			psxbt->joyR_y = -1.0;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a80      	ldr	r2, [pc, #512]	; (8006414 <PSxBTGetXY+0x334>)
 8006212:	64da      	str	r2, [r3, #76]	; 0x4c
 8006214:	e003      	b.n	800621e <PSxBTGetXY+0x13e>
		}
	}else{
		psxbt->joyR_y = 0.0;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	64da      	str	r2, [r3, #76]	; 0x4c
	}

	if(joyR_left){
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8006408 <PSxBTGetXY+0x328>
 800622e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006236:	d542      	bpl.n	80062be <PSxBTGetXY+0x1de>
		psxbt->joyR_x = ((psx_low_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006244:	ee17 0a90 	vmov	r0, s15
 8006248:	f7fa f97e 	bl	8000548 <__aeabi_f2d>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	a16b      	add	r1, pc, #428	; (adr r1, 8006400 <PSxBTGetXY+0x320>)
 8006252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006256:	f7fa f817 	bl	8000288 <__aeabi_dsub>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b69      	ldr	r3, [pc, #420]	; (800640c <PSxBTGetXY+0x32c>)
 8006268:	f7fa faf0 	bl	800084c <__aeabi_ddiv>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4610      	mov	r0, r2
 8006272:	4619      	mov	r1, r3
 8006274:	f7fa fcb8 	bl	8000be8 <__aeabi_d2f>
 8006278:	4603      	mov	r3, r0
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef1 7a67 	vneg.f32	s15, s15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		if(psxbt->joyR_x > 0.0){
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800628e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006296:	dd04      	ble.n	80062a2 <PSxBTGetXY+0x1c2>
			psxbt->joyR_x = 0.0;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	651a      	str	r2, [r3, #80]	; 0x50
 80062a0:	e062      	b.n	8006368 <PSxBTGetXY+0x288>
		}else if(psxbt->joyR_x < -1.0){
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80062a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80062ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b4:	d558      	bpl.n	8006368 <PSxBTGetXY+0x288>
			psxbt->joyR_x = -1.0;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a56      	ldr	r2, [pc, #344]	; (8006414 <PSxBTGetXY+0x334>)
 80062ba:	651a      	str	r2, [r3, #80]	; 0x50
 80062bc:	e054      	b.n	8006368 <PSxBTGetXY+0x288>
		}
	}else if(joyR_right){
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8006418 <PSxBTGetXY+0x338>
 80062ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	dd43      	ble.n	8006360 <PSxBTGetXY+0x280>
		psxbt->joyR_x = ((psx_high_Rx - ((float)psxbt->rightjoy_x))/100.0)/-1.00;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062dc:	ee07 3a90 	vmov	s15, r3
 80062e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e4:	ee17 0a90 	vmov	r0, s15
 80062e8:	f7fa f92e 	bl	8000548 <__aeabi_f2d>
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	f04f 0000 	mov.w	r0, #0
 80062f4:	4946      	ldr	r1, [pc, #280]	; (8006410 <PSxBTGetXY+0x330>)
 80062f6:	f7f9 ffc7 	bl	8000288 <__aeabi_dsub>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	4b41      	ldr	r3, [pc, #260]	; (800640c <PSxBTGetXY+0x32c>)
 8006308:	f7fa faa0 	bl	800084c <__aeabi_ddiv>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4610      	mov	r0, r2
 8006312:	4619      	mov	r1, r3
 8006314:	f7fa fc68 	bl	8000be8 <__aeabi_d2f>
 8006318:	4603      	mov	r3, r0
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef1 7a67 	vneg.f32	s15, s15
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		if(psxbt->joyR_x < 0.0){
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800632e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006336:	d504      	bpl.n	8006342 <PSxBTGetXY+0x262>
			psxbt->joyR_x = 0.0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	651a      	str	r2, [r3, #80]	; 0x50
 8006340:	e012      	b.n	8006368 <PSxBTGetXY+0x288>
		}else if(psxbt->joyR_x > 1.0){
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8006348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800634c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	dd08      	ble.n	8006368 <PSxBTGetXY+0x288>
			psxbt->joyR_x = 1.0;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800635c:	651a      	str	r2, [r3, #80]	; 0x50
 800635e:	e003      	b.n	8006368 <PSxBTGetXY+0x288>
		}
	}else{
		psxbt->joyR_x = 0.0;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
	}

	if(joyL_up){
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006374:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8006408 <PSxBTGetXY+0x328>
 8006378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800637c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006380:	d54c      	bpl.n	800641c <PSxBTGetXY+0x33c>
		psxbt->joyL_y = ((psx_low_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	ee17 0a90 	vmov	r0, s15
 8006392:	f7fa f8d9 	bl	8000548 <__aeabi_f2d>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	a119      	add	r1, pc, #100	; (adr r1, 8006400 <PSxBTGetXY+0x320>)
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	f7f9 ff72 	bl	8000288 <__aeabi_dsub>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	4b16      	ldr	r3, [pc, #88]	; (800640c <PSxBTGetXY+0x32c>)
 80063b2:	f7fa fa4b 	bl	800084c <__aeabi_ddiv>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4610      	mov	r0, r2
 80063bc:	4619      	mov	r1, r3
 80063be:	f7fa fc13 	bl	8000be8 <__aeabi_d2f>
 80063c2:	4602      	mov	r2, r0
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y < 0.0){
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80063ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80063d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d6:	d504      	bpl.n	80063e2 <PSxBTGetXY+0x302>
			psxbt->joyL_y = 0.0;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	655a      	str	r2, [r3, #84]	; 0x54
 80063e0:	e06b      	b.n	80064ba <PSxBTGetXY+0x3da>
		}else if(psxbt->joyL_y > 1.0){
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80063e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f4:	dd61      	ble.n	80064ba <PSxBTGetXY+0x3da>
			psxbt->joyL_y = 1.0;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54
 80063fe:	e05c      	b.n	80064ba <PSxBTGetXY+0x3da>
 8006400:	00000000 	.word	0x00000000
 8006404:	405cc000 	.word	0x405cc000
 8006408:	42e60000 	.word	0x42e60000
 800640c:	40590000 	.word	0x40590000
 8006410:	40618000 	.word	0x40618000
 8006414:	bf800000 	.word	0xbf800000
 8006418:	430c0000 	.word	0x430c0000
		}
	}else if(joyL_down){
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006428:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8006418 <PSxBTGetXY+0x338>
 800642c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006434:	dd3d      	ble.n	80064b2 <PSxBTGetXY+0x3d2>
		psxbt->joyL_y = ((psx_high_Ly - ((float)psxbt->leftjoy_y))/100.0)/1.00;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006442:	ee17 0a90 	vmov	r0, s15
 8006446:	f7fa f87f 	bl	8000548 <__aeabi_f2d>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	f04f 0000 	mov.w	r0, #0
 8006452:	4985      	ldr	r1, [pc, #532]	; (8006668 <PSxBTGetXY+0x588>)
 8006454:	f7f9 ff18 	bl	8000288 <__aeabi_dsub>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4610      	mov	r0, r2
 800645e:	4619      	mov	r1, r3
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	4b81      	ldr	r3, [pc, #516]	; (800666c <PSxBTGetXY+0x58c>)
 8006466:	f7fa f9f1 	bl	800084c <__aeabi_ddiv>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	f7fa fbb9 	bl	8000be8 <__aeabi_d2f>
 8006476:	4602      	mov	r2, r0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	655a      	str	r2, [r3, #84]	; 0x54
		if(psxbt->joyL_y > 0.0){
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8006482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648a:	dd04      	ble.n	8006496 <PSxBTGetXY+0x3b6>
			psxbt->joyL_y = 0.0;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	655a      	str	r2, [r3, #84]	; 0x54
 8006494:	e011      	b.n	80064ba <PSxBTGetXY+0x3da>
		}else if(psxbt->joyL_y < -1.0){
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800649c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80064a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064a8:	d507      	bpl.n	80064ba <PSxBTGetXY+0x3da>
			psxbt->joyL_y = -1.0;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a70      	ldr	r2, [pc, #448]	; (8006670 <PSxBTGetXY+0x590>)
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
 80064b0:	e003      	b.n	80064ba <PSxBTGetXY+0x3da>
		}
	}else{
		psxbt->joyL_y = 0.0;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if(joyL_left){
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8006674 <PSxBTGetXY+0x594>
 80064ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80064ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d2:	d542      	bpl.n	800655a <PSxBTGetXY+0x47a>
		psxbt->joyL_x = ((psx_low_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d8:	ee07 3a90 	vmov	s15, r3
 80064dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e0:	ee17 0a90 	vmov	r0, s15
 80064e4:	f7fa f830 	bl	8000548 <__aeabi_f2d>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	a15a      	add	r1, pc, #360	; (adr r1, 8006658 <PSxBTGetXY+0x578>)
 80064ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064f2:	f7f9 fec9 	bl	8000288 <__aeabi_dsub>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	4b5a      	ldr	r3, [pc, #360]	; (800666c <PSxBTGetXY+0x58c>)
 8006504:	f7fa f9a2 	bl	800084c <__aeabi_ddiv>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f7fa fb6a 	bl	8000be8 <__aeabi_d2f>
 8006514:	4603      	mov	r3, r0
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef1 7a67 	vneg.f32	s15, s15
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		if(psxbt->joyL_x > 0.0){
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800652a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006532:	dd04      	ble.n	800653e <PSxBTGetXY+0x45e>
			psxbt->joyL_x = 0.0;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	659a      	str	r2, [r3, #88]	; 0x58
 800653c:	e062      	b.n	8006604 <PSxBTGetXY+0x524>
		}else if(psxbt->joyL_x < -1.0){
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8006544:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006550:	d558      	bpl.n	8006604 <PSxBTGetXY+0x524>
			psxbt->joyL_x = -1.0;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a46      	ldr	r2, [pc, #280]	; (8006670 <PSxBTGetXY+0x590>)
 8006556:	659a      	str	r2, [r3, #88]	; 0x58
 8006558:	e054      	b.n	8006604 <PSxBTGetXY+0x524>
		}
	}else if(joyL_right){
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	ee07 3a90 	vmov	s15, r3
 8006562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006566:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006678 <PSxBTGetXY+0x598>
 800656a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800656e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006572:	dd43      	ble.n	80065fc <PSxBTGetXY+0x51c>
		psxbt->joyL_x = ((psx_high_Lx - ((float)psxbt->leftjoy_x))/100.0)/-1.00;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	ee07 3a90 	vmov	s15, r3
 800657c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006580:	ee17 0a90 	vmov	r0, s15
 8006584:	f7f9 ffe0 	bl	8000548 <__aeabi_f2d>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	f04f 0000 	mov.w	r0, #0
 8006590:	4935      	ldr	r1, [pc, #212]	; (8006668 <PSxBTGetXY+0x588>)
 8006592:	f7f9 fe79 	bl	8000288 <__aeabi_dsub>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	4b32      	ldr	r3, [pc, #200]	; (800666c <PSxBTGetXY+0x58c>)
 80065a4:	f7fa f952 	bl	800084c <__aeabi_ddiv>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7fa fb1a 	bl	8000be8 <__aeabi_d2f>
 80065b4:	4603      	mov	r3, r0
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef1 7a67 	vneg.f32	s15, s15
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		if(psxbt->joyL_x < 0.0){
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80065ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d2:	d504      	bpl.n	80065de <PSxBTGetXY+0x4fe>
			psxbt->joyL_x = 0.0;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	659a      	str	r2, [r3, #88]	; 0x58
 80065dc:	e012      	b.n	8006604 <PSxBTGetXY+0x524>
		}else if(psxbt->joyL_x > 1.0){
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80065e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f0:	dd08      	ble.n	8006604 <PSxBTGetXY+0x524>
			psxbt->joyL_x = 1.0;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065f8:	659a      	str	r2, [r3, #88]	; 0x58
 80065fa:	e003      	b.n	8006604 <PSxBTGetXY+0x524>
		}
	}else{
		psxbt->joyL_x = 0.0;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f04f 0200 	mov.w	r2, #0
 8006602:	659a      	str	r2, [r3, #88]	; 0x58
	}

	psxbt->joyR_2 = (psxbt->an_R2/255.0);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006608:	4618      	mov	r0, r3
 800660a:	f7f9 ff7b 	bl	8000504 <__aeabi_ui2d>
 800660e:	a314      	add	r3, pc, #80	; (adr r3, 8006660 <PSxBTGetXY+0x580>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7fa f91a 	bl	800084c <__aeabi_ddiv>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4610      	mov	r0, r2
 800661e:	4619      	mov	r1, r3
 8006620:	f7fa fae2 	bl	8000be8 <__aeabi_d2f>
 8006624:	4602      	mov	r2, r0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	65da      	str	r2, [r3, #92]	; 0x5c
	psxbt->joyL_2 = (psxbt->an_L2/255.0);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	4618      	mov	r0, r3
 8006630:	f7f9 ff68 	bl	8000504 <__aeabi_ui2d>
 8006634:	a30a      	add	r3, pc, #40	; (adr r3, 8006660 <PSxBTGetXY+0x580>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7fa f907 	bl	800084c <__aeabi_ddiv>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4610      	mov	r0, r2
 8006644:	4619      	mov	r1, r3
 8006646:	f7fa facf 	bl	8000be8 <__aeabi_d2f>
 800664a:	4602      	mov	r2, r0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	00000000 	.word	0x00000000
 800665c:	405cc000 	.word	0x405cc000
 8006660:	00000000 	.word	0x00000000
 8006664:	406fe000 	.word	0x406fe000
 8006668:	40618000 	.word	0x40618000
 800666c:	40590000 	.word	0x40590000
 8006670:	bf800000 	.word	0xbf800000
 8006674:	42e60000 	.word	0x42e60000
 8006678:	430c0000 	.word	0x430c0000

0800667c <RNSInit>:
 * Function Example		: RNSInit(CAN1, &RNS);
 * 						  RNSInit(Robot_navi_system, I2C1,  &RNS);
 */

void RNSInit(CAN_HandleTypeDef* hcanx, RNS_interface_t* rns)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
	rns->busy=0;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->rns_hcanx = hcanx;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
	insData_send[0] = 1;
 8006694:	4b2a      	ldr	r3, [pc, #168]	; (8006740 <RNSInit+0xc4>)
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_PENDING;
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <RNSInit+0xc4>)
 800669c:	2200      	movs	r2, #0
 800669e:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	2302      	movs	r3, #2
 80066a6:	4a26      	ldr	r2, [pc, #152]	; (8006740 <RNSInit+0xc4>)
 80066a8:	2117      	movs	r1, #23
 80066aa:	f7fd fa21 	bl	8003af0 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_PENDING;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 1;
 80066b6:	4b22      	ldr	r3, [pc, #136]	; (8006740 <RNSInit+0xc4>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
	insData_send[1] = RNS_RESET_POS;
 80066bc:	4b20      	ldr	r3, [pc, #128]	; (8006740 <RNSInit+0xc4>)
 80066be:	2214      	movs	r2, #20
 80066c0:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	2302      	movs	r3, #2
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <RNSInit+0xc4>)
 80066ca:	2117      	movs	r1, #23
 80066cc:	f7fd fa10 	bl	8003af0 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	int wait=0;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 80066dc:	e022      	b.n	8006724 <RNSInit+0xa8>
		if(wait >= 2000000){
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4a18      	ldr	r2, [pc, #96]	; (8006744 <RNSInit+0xc8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	dd1b      	ble.n	800671e <RNSInit+0xa2>
			insData_send[0] = 1;
 80066e6:	4b16      	ldr	r3, [pc, #88]	; (8006740 <RNSInit+0xc4>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	701a      	strb	r2, [r3, #0]
			insData_send[1] = RNS_RESET_POS;
 80066ec:	4b14      	ldr	r3, [pc, #80]	; (8006740 <RNSInit+0xc4>)
 80066ee:	2214      	movs	r2, #20
 80066f0:	705a      	strb	r2, [r3, #1]
			CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	2302      	movs	r3, #2
 80066f8:	4a11      	ldr	r2, [pc, #68]	; (8006740 <RNSInit+0xc4>)
 80066fa:	2117      	movs	r1, #23
 80066fc:	f7fd f9f8 	bl	8003af0 <CAN_TxMsg>
			GPIOC_OUT->bit15 = !GPIOC_OUT->bit15;
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <RNSInit+0xcc>)
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	b25b      	sxtb	r3, r3
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <RNSInit+0xcc>)
 8006708:	43db      	mvns	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	09db      	lsrs	r3, r3, #7
 800670e:	b2d9      	uxtb	r1, r3
 8006710:	7853      	ldrb	r3, [r2, #1]
 8006712:	f361 13c7 	bfi	r3, r1, #7, #1
 8006716:	7053      	strb	r3, [r2, #1]
			wait = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	e002      	b.n	8006724 <RNSInit+0xa8>
		}else{
			wait ++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800672a:	2b02      	cmp	r3, #2
 800672c:	d0d7      	beq.n	80066de <RNSInit+0x62>
		}
	}
	rns->busy=1;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	2000a76c 	.word	0x2000a76c
 8006744:	001e847f 	.word	0x001e847f
 8006748:	40020814 	.word	0x40020814

0800674c <RNSStop>:
 * Function Return		: None
 * Function Example		: RNSStop(&RNS);
 */

void RNSStop(RNS_interface_t* rns)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	rns->ins.instruction = RNS_STOP;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2203      	movs	r2, #3
 8006758:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 0200 	mov.w	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	615a      	str	r2, [r3, #20]

	//RNSSendIns(rns);
	rns->RNS_data.common_instruction = RNS_WAITING;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2202      	movs	r2, #2
 800677e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	rns->busy=0;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	insData_send[0] = 17;
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <RNSStop+0x9c>)
 800678c:	2211      	movs	r2, #17
 800678e:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	791a      	ldrb	r2, [r3, #4]
 8006794:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <RNSStop+0x9c>)
 8006796:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6818      	ldr	r0, [r3, #0]
 800679c:	2302      	movs	r3, #2
 800679e:	4a12      	ldr	r2, [pc, #72]	; (80067e8 <RNSStop+0x9c>)
 80067a0:	2117      	movs	r1, #23
 80067a2:	f7fd f9a5 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0]),8);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f103 0208 	add.w	r2, r3, #8
 80067b0:	2308      	movs	r3, #8
 80067b2:	2118      	movs	r1, #24
 80067b4:	f7fd f99c 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2]),8);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f103 0210 	add.w	r2, r3, #16
 80067c2:	2308      	movs	r3, #8
 80067c4:	2119      	movs	r1, #25
 80067c6:	f7fd f993 	bl	8003af0 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING);
 80067ca:	bf00      	nop
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d0fa      	beq.n	80067cc <RNSStop+0x80>

	rns->busy=1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000a76c 	.word	0x2000a76c

080067ec <RNSVelocity>:
 * Function Return		: None
 * Function Example		: RNSVelocity(1.0, 1.5 , 1.5 , 1.0, &RNS);
 */

void RNSVelocity(float fFLeftVelR, float fFRightVelR, float fBLeftVelR, float fBRightVelR, RNS_interface_t* rns)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80067f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80067fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80067fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8006802:	6078      	str	r0, [r7, #4]
	rns->ins.instruction = RNS_VELOCITY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2205      	movs	r2, #5
 8006808:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = fFLeftVelR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = fFRightVelR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = fBLeftVelR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = fBRightVelR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f95c 	bl	8006ae0 <RNSSendIns>

}
 8006828:	bf00      	nop
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <RNSPPstart>:
 * Function Return		: None
 * Function Example		: float point[1][7] = {{3.0, 0.001, 1.0, -180.0, 0.0, 0.0, 1.5}};					//for coordinates use this type of naming
 * 								RNSPPstart(point,1,&rns);
 */

void RNSPPstart(float allpoints[][7],int no_point,RNS_interface_t* rns){
 8006830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006834:	b098      	sub	sp, #96	; 0x60
 8006836:	af0c      	add	r7, sp, #48	; 0x30
 8006838:	6278      	str	r0, [r7, #36]	; 0x24
 800683a:	6239      	str	r1, [r7, #32]
 800683c:	61fa      	str	r2, [r7, #28]
	RNSSet(rns, RNS_PPSend_num_Point,(float)no_point);
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006848:	ee17 0a90 	vmov	r0, s15
 800684c:	f7f9 fe7c 	bl	8000548 <__aeabi_f2d>
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	2119      	movs	r1, #25
 8006856:	69f8      	ldr	r0, [r7, #28]
 8006858:	f000 f984 	bl	8006b64 <RNSSet>
	int k;
	for(k=0;k<no_point;k++)
 800685c:	2300      	movs	r3, #0
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006860:	e07a      	b.n	8006958 <RNSPPstart+0x128>
		RNSSet(rns, RNS_PPSendPoint, allpoints[k][0],allpoints[k][1],allpoints[k][2],allpoints[k][3],allpoints[k][4],allpoints[k][5],allpoints[k][6]);
 8006862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	461a      	mov	r2, r3
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	4413      	add	r3, r2
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f7f9 fe67 	bl	8000548 <__aeabi_f2d>
 800687a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006880:	4613      	mov	r3, r2
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	461a      	mov	r2, r3
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4618      	mov	r0, r3
 8006892:	f7f9 fe59 	bl	8000548 <__aeabi_f2d>
 8006896:	4680      	mov	r8, r0
 8006898:	4689      	mov	r9, r1
 800689a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	461a      	mov	r2, r3
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	4413      	add	r3, r2
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7f9 fe4b 	bl	8000548 <__aeabi_f2d>
 80068b2:	4682      	mov	sl, r0
 80068b4:	468b      	mov	fp, r1
 80068b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b8:	4613      	mov	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	1a9b      	subs	r3, r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	461a      	mov	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	4413      	add	r3, r2
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7f9 fe3d 	bl	8000548 <__aeabi_f2d>
 80068ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80068d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	1a9b      	subs	r3, r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	4413      	add	r3, r2
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7f9 fe2f 	bl	8000548 <__aeabi_f2d>
 80068ea:	e9c7 0100 	strd	r0, r1, [r7]
 80068ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	461a      	mov	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	4413      	add	r3, r2
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fe21 	bl	8000548 <__aeabi_f2d>
 8006906:	4604      	mov	r4, r0
 8006908:	460d      	mov	r5, r1
 800690a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	461a      	mov	r2, r3
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	4413      	add	r3, r2
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	4618      	mov	r0, r3
 800691e:	f7f9 fe13 	bl	8000548 <__aeabi_f2d>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800692a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800692e:	ed97 7b00 	vldr	d7, [r7]
 8006932:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006936:	ed97 7b02 	vldr	d7, [r7, #8]
 800693a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800693e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8006942:	e9cd 8900 	strd	r8, r9, [sp]
 8006946:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800694a:	2153      	movs	r1, #83	; 0x53
 800694c:	69f8      	ldr	r0, [r7, #28]
 800694e:	f000 f909 	bl	8006b64 <RNSSet>
	for(k=0;k<no_point;k++)
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	3301      	adds	r3, #1
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	429a      	cmp	r2, r3
 800695e:	db80      	blt.n	8006862 <RNSPPstart+0x32>
	rns->ins.instruction = RNS_PPStart;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	2210      	movs	r2, #16
 8006964:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0;
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	f04f 0200 	mov.w	r2, #0
 8006984:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006986:	69f8      	ldr	r0, [r7, #28]
 8006988:	f000 f8aa 	bl	8006ae0 <RNSSendIns>
}
 800698c:	bf00      	nop
 800698e:	3730      	adds	r7, #48	; 0x30
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006996 <RNSPPstart_PS>:

void RNSPPstart_PS(float** allpoints,int no_point,RNS_interface_t* rns){
 8006996:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800699a:	b098      	sub	sp, #96	; 0x60
 800699c:	af0c      	add	r7, sp, #48	; 0x30
 800699e:	6278      	str	r0, [r7, #36]	; 0x24
 80069a0:	6239      	str	r1, [r7, #32]
 80069a2:	61fa      	str	r2, [r7, #28]
	RNSSet(rns, RNS_PPSend_num_Point,(float)no_point);
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ae:	ee17 0a90 	vmov	r0, s15
 80069b2:	f7f9 fdc9 	bl	8000548 <__aeabi_f2d>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	2119      	movs	r1, #25
 80069bc:	69f8      	ldr	r0, [r7, #28]
 80069be:	f000 f8d1 	bl	8006b64 <RNSSet>
	int k;
	for(k=0;k<no_point;k++)
 80069c2:	2300      	movs	r3, #0
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c6:	e06b      	b.n	8006aa0 <RNSPPstart_PS+0x10a>
		RNSSet(rns, RNS_PPSendPoint, allpoints[k][0],allpoints[k][1],allpoints[k][2],allpoints[k][3],allpoints[k][4],allpoints[k][5],allpoints[k][6]);
 80069c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ce:	4413      	add	r3, r2
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7f9 fdb7 	bl	8000548 <__aeabi_f2d>
 80069da:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80069de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e4:	4413      	add	r3, r2
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3304      	adds	r3, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7f9 fdab 	bl	8000548 <__aeabi_f2d>
 80069f2:	4680      	mov	r8, r0
 80069f4:	4689      	mov	r9, r1
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fc:	4413      	add	r3, r2
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7f9 fd9f 	bl	8000548 <__aeabi_f2d>
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	468b      	mov	fp, r1
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a14:	4413      	add	r3, r2
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fd93 	bl	8000548 <__aeabi_f2d>
 8006a22:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	4413      	add	r3, r2
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3310      	adds	r3, #16
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7f9 fd87 	bl	8000548 <__aeabi_f2d>
 8006a3a:	e9c7 0100 	strd	r0, r1, [r7]
 8006a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a44:	4413      	add	r3, r2
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3314      	adds	r3, #20
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7f9 fd7b 	bl	8000548 <__aeabi_f2d>
 8006a52:	4604      	mov	r4, r0
 8006a54:	460d      	mov	r5, r1
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5c:	4413      	add	r3, r2
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3318      	adds	r3, #24
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7f9 fd6f 	bl	8000548 <__aeabi_f2d>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a72:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006a76:	ed97 7b00 	vldr	d7, [r7]
 8006a7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8006a82:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a86:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8006a8a:	e9cd 8900 	strd	r8, r9, [sp]
 8006a8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006a92:	2153      	movs	r1, #83	; 0x53
 8006a94:	69f8      	ldr	r0, [r7, #28]
 8006a96:	f000 f865 	bl	8006b64 <RNSSet>
	for(k=0;k<no_point;k++)
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	db8f      	blt.n	80069c8 <RNSPPstart_PS+0x32>
	rns->ins.instruction = RNS_PPStart;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2210      	movs	r2, #16
 8006aac:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0;
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0;
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	615a      	str	r2, [r3, #20]

	RNSSendIns(rns);
 8006ace:	69f8      	ldr	r0, [r7, #28]
 8006ad0:	f000 f806 	bl	8006ae0 <RNSSendIns>
}
 8006ad4:	bf00      	nop
 8006ad6:	3730      	adds	r7, #48	; 0x30
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08006ae0 <RNSSendIns>:
 * Function Return		: None
 * Function Example		: None
 */

void RNSSendIns(RNS_interface_t* rns)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	rns->busy=0;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	while(rns->RNS_data.common_instruction == RNS_BUSY);
 8006af0:	bf00      	nop
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d0fa      	beq.n	8006af2 <RNSSendIns+0x12>
	rns->RNS_data.common_instruction = RNS_WAITING;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <RNSSendIns+0x80>)
 8006b06:	2211      	movs	r2, #17
 8006b08:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	791a      	ldrb	r2, [r3, #4]
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <RNSSendIns+0x80>)
 8006b10:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS, insData_send,2);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	2302      	movs	r3, #2
 8006b18:	4a11      	ldr	r2, [pc, #68]	; (8006b60 <RNSSendIns+0x80>)
 8006b1a:	2117      	movs	r1, #23
 8006b1c:	f7fc ffe8 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0].data),8);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	2118      	movs	r1, #24
 8006b2e:	f7fc ffdf 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2].data),8);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f103 0210 	add.w	r2, r3, #16
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	2119      	movs	r1, #25
 8006b40:	f7fc ffd6 	bl	8003af0 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8006b44:	bf00      	nop
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d0fa      	beq.n	8006b46 <RNSSendIns+0x66>
		//		} else{
		//			GPIOC_OUT->bit14=1;
		//		}
	}

	rns->busy=1;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2000a76c 	.word	0x2000a76c

08006b64 <RNSSet>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

void RNSSet(RNS_interface_t* rns, unsigned char parameter, ...)
{
 8006b64:	b40e      	push	{r1, r2, r3}
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
	va_list value;
	rns->param.parameter = parameter;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7f3a      	ldrb	r2, [r7, #28]
 8006b72:	761a      	strb	r2, [r3, #24]
	va_start(value, parameter);
 8006b74:	f107 0320 	add.w	r3, r7, #32
 8006b78:	60fb      	str	r3, [r7, #12]
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8006b7a:	bf00      	nop
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d0fa      	beq.n	8006b7c <RNSSet+0x18>
	if (parameter > RNS_PARAM_1){
 8006b86:	7f3b      	ldrb	r3, [r7, #28]
 8006b88:	2b18      	cmp	r3, #24
 8006b8a:	d92b      	bls.n	8006be4 <RNSSet+0x80>
		rns->param.param_buffer[0].data = va_arg(value, double);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3307      	adds	r3, #7
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	f103 0208 	add.w	r2, r3, #8
 8006b98:	60fa      	str	r2, [r7, #12]
 8006b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	f7fa f821 	bl	8000be8 <__aeabi_d2f>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	61da      	str	r2, [r3, #28]
		rns->param.param_buffer[1].data = 0;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_2){
 8006be4:	7f3b      	ldrb	r3, [r7, #28]
 8006be6:	2b1e      	cmp	r3, #30
 8006be8:	d927      	bls.n	8006c3a <RNSSet+0xd6>
		rns->param.param_buffer[1].data = va_arg(value, double);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3307      	adds	r3, #7
 8006bee:	f023 0307 	bic.w	r3, r3, #7
 8006bf2:	f103 0208 	add.w	r2, r3, #8
 8006bf6:	60fa      	str	r2, [r7, #12]
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f7f9 fff2 	bl	8000be8 <__aeabi_d2f>
 8006c04:	4602      	mov	r2, r0
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	621a      	str	r2, [r3, #32]
		rns->param.param_buffer[2].data = 0;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f04f 0200 	mov.w	r2, #0
 8006c20:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f04f 0200 	mov.w	r2, #0
 8006c30:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_3){
 8006c3a:	7f3b      	ldrb	r3, [r7, #28]
 8006c3c:	2b23      	cmp	r3, #35	; 0x23
 8006c3e:	d923      	bls.n	8006c88 <RNSSet+0x124>
		rns->param.param_buffer[2].data = va_arg(value, double);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3307      	adds	r3, #7
 8006c44:	f023 0307 	bic.w	r3, r3, #7
 8006c48:	f103 0208 	add.w	r2, r3, #8
 8006c4c:	60fa      	str	r2, [r7, #12]
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	4610      	mov	r0, r2
 8006c54:	4619      	mov	r1, r3
 8006c56:	f7f9 ffc7 	bl	8000be8 <__aeabi_d2f>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24
		rns->param.param_buffer[3].data = 0;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f04f 0200 	mov.w	r2, #0
 8006c6e:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_4){
 8006c88:	7f3b      	ldrb	r3, [r7, #28]
 8006c8a:	2b48      	cmp	r3, #72	; 0x48
 8006c8c:	d91f      	bls.n	8006cce <RNSSet+0x16a>
		rns->param.param_buffer[3].data = va_arg(value, double);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3307      	adds	r3, #7
 8006c92:	f023 0307 	bic.w	r3, r3, #7
 8006c96:	f103 0208 	add.w	r2, r3, #8
 8006c9a:	60fa      	str	r2, [r7, #12]
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	f7f9 ffa0 	bl	8000be8 <__aeabi_d2f>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	629a      	str	r2, [r3, #40]	; 0x28
		rns->param.param_buffer[4].data = 0;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f04f 0200 	mov.w	r2, #0
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_5){
 8006cce:	7f3b      	ldrb	r3, [r7, #28]
 8006cd0:	2b50      	cmp	r3, #80	; 0x50
 8006cd2:	d91b      	bls.n	8006d0c <RNSSet+0x1a8>
		rns->param.param_buffer[4].data = va_arg(value,double);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3307      	adds	r3, #7
 8006cd8:	f023 0307 	bic.w	r3, r3, #7
 8006cdc:	f103 0208 	add.w	r2, r3, #8
 8006ce0:	60fa      	str	r2, [r7, #12]
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f7f9 ff7d 	bl	8000be8 <__aeabi_d2f>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	62da      	str	r2, [r3, #44]	; 0x2c
		rns->param.param_buffer[5].data = 0;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f04f 0200 	mov.w	r2, #0
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_6){
 8006d0c:	7f3b      	ldrb	r3, [r7, #28]
 8006d0e:	2b51      	cmp	r3, #81	; 0x51
 8006d10:	d917      	bls.n	8006d42 <RNSSet+0x1de>
		rns->param.param_buffer[5].data = va_arg(value, double);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3307      	adds	r3, #7
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	f103 0208 	add.w	r2, r3, #8
 8006d1e:	60fa      	str	r2, [r7, #12]
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	f7f9 ff5e 	bl	8000be8 <__aeabi_d2f>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	631a      	str	r2, [r3, #48]	; 0x30
		rns->param.param_buffer[6].data = 0;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if (parameter > RNS_PARAM_7){
 8006d42:	7f3b      	ldrb	r3, [r7, #28]
 8006d44:	2b52      	cmp	r3, #82	; 0x52
 8006d46:	d913      	bls.n	8006d70 <RNSSet+0x20c>
		rns->param.param_buffer[6].data = va_arg(value, double);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3307      	adds	r3, #7
 8006d4c:	f023 0307 	bic.w	r3, r3, #7
 8006d50:	f103 0208 	add.w	r2, r3, #8
 8006d54:	60fa      	str	r2, [r7, #12]
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	4610      	mov	r0, r2
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	f7f9 ff43 	bl	8000be8 <__aeabi_d2f>
 8006d62:	4602      	mov	r2, r0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	635a      	str	r2, [r3, #52]	; 0x34
		rns->param.param_buffer[7].data = 0;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(parameter > RNS_PARAM_8){
 8006d70:	7f3b      	ldrb	r3, [r7, #28]
 8006d72:	2b54      	cmp	r3, #84	; 0x54
 8006d74:	d90f      	bls.n	8006d96 <RNSSet+0x232>
		rns->param.param_buffer[7].data = va_arg(value, double);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3307      	adds	r3, #7
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	f103 0208 	add.w	r2, r3, #8
 8006d82:	60fa      	str	r2, [r7, #12]
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	f7f9 ff2c 	bl	8000be8 <__aeabi_d2f>
 8006d90:	4602      	mov	r2, r0
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
	}

	va_end(value);

	rns->busy=0;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	insData_send[0] = 17;
 8006d9e:	4b26      	ldr	r3, [pc, #152]	; (8006e38 <RNSSet+0x2d4>)
 8006da0:	2211      	movs	r2, #17
 8006da2:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->param.parameter;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7e1a      	ldrb	r2, [r3, #24]
 8006da8:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <RNSSet+0x2d4>)
 8006daa:	705a      	strb	r2, [r3, #1]

	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	2302      	movs	r3, #2
 8006db2:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <RNSSet+0x2d4>)
 8006db4:	2117      	movs	r1, #23
 8006db6:	f7fc fe9b 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->param.param_buffer[0]),8);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f103 021c 	add.w	r2, r3, #28
 8006dc4:	2308      	movs	r3, #8
 8006dc6:	2118      	movs	r1, #24
 8006dc8:	f7fc fe92 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->param.param_buffer[2]),8);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	2119      	movs	r1, #25
 8006dda:	f7fc fe89 	bl	8003af0 <CAN_TxMsg>
	if(parameter > RNS_PARAM_5)
 8006dde:	7f3b      	ldrb	r3, [r7, #28]
 8006de0:	2b50      	cmp	r3, #80	; 0x50
 8006de2:	d908      	bls.n	8006df6 <RNSSet+0x292>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf3,(uint8_t*)&(rns->param.param_buffer[4]),8);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006dee:	2308      	movs	r3, #8
 8006df0:	211a      	movs	r1, #26
 8006df2:	f7fc fe7d 	bl	8003af0 <CAN_TxMsg>
	if(parameter > RNS_PARAM_7)
 8006df6:	7f3b      	ldrb	r3, [r7, #28]
 8006df8:	2b52      	cmp	r3, #82	; 0x52
 8006dfa:	d908      	bls.n	8006e0e <RNSSet+0x2aa>
		CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf4,(uint8_t*)&(rns->param.param_buffer[6]),8);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e06:	2308      	movs	r3, #8
 8006e08:	211b      	movs	r1, #27
 8006e0a:	f7fc fe71 	bl	8003af0 <CAN_TxMsg>

	rns->RNS_data.common_instruction = RNS_WAITING;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2202      	movs	r2, #2
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	while(rns->RNS_data.common_instruction == RNS_WAITING);
 8006e16:	bf00      	nop
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d0fa      	beq.n	8006e18 <RNSSet+0x2b4>
	//UARTPrintString(&huart5,"1\r\n");
	rns->busy=1;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e34:	b003      	add	sp, #12
 8006e36:	4770      	bx	lr
 8006e38:	2000a76c 	.word	0x2000a76c

08006e3c <RNSEnquire>:
 * Function Return		: None
 * Function Example		: RNSSet(&RNS, RNS_F_KCD_PTD, 0.9956, 0.01/2000);
 */

uint8_t RNSEnquire(unsigned char parameter, RNS_interface_t* rns)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]

	rns->ins.instruction = parameter;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	79fa      	ldrb	r2, [r7, #7]
 8006e4c:	711a      	strb	r2, [r3, #4]
	rns->ins.ins_buffer[0].data = 0.0;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
	rns->ins.ins_buffer[1].data = 0.0;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	60da      	str	r2, [r3, #12]
	rns->ins.ins_buffer[2].data = 0.0;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	611a      	str	r2, [r3, #16]
	rns->ins.ins_buffer[3].data = 0.0;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	615a      	str	r2, [r3, #20]

	//	RNSSendIns(rns);

	rns->busy=0;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->RNS_data.common_instruction = RNS_WAITING;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	insData_send[0] = 17;
 8006e7e:	4b21      	ldr	r3, [pc, #132]	; (8006f04 <RNSEnquire+0xc8>)
 8006e80:	2211      	movs	r2, #17
 8006e82:	701a      	strb	r2, [r3, #0]
	insData_send[1] = rns->ins.instruction;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	791a      	ldrb	r2, [r3, #4]
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <RNSEnquire+0xc8>)
 8006e8a:	705a      	strb	r2, [r3, #1]
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS,insData_send,2);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	2302      	movs	r3, #2
 8006e92:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <RNSEnquire+0xc8>)
 8006e94:	2117      	movs	r1, #23
 8006e96:	f7fc fe2b 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf1,(uint8_t*)&(rns->ins.ins_buffer[0].data),8);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f103 0208 	add.w	r2, r3, #8
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	2118      	movs	r1, #24
 8006ea8:	f7fc fe22 	bl	8003af0 <CAN_TxMsg>
	CAN_TxMsg(rns->rns_hcanx,mainboard_TO_RNS_buf2,(uint8_t*)&(rns->ins.ins_buffer[2].data),8);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f103 0210 	add.w	r2, r3, #16
 8006eb6:	2308      	movs	r3, #8
 8006eb8:	2119      	movs	r1, #25
 8006eba:	f7fc fe19 	bl	8003af0 <CAN_TxMsg>

	while(rns->RNS_data.common_instruction == RNS_WAITING){
 8006ebe:	bf00      	nop
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d0fa      	beq.n	8006ec0 <RNSEnquire+0x84>
		//				} else{
		//					GPIOC_OUT->bit14=1;
		//				}
	}

	rns->busy=1;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	rns->enq.enquiry = parameter;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	79fa      	ldrb	r2, [r7, #7]
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rns->enq.enq_buffer[0].data = rns->RNS_data.common_buffer[0].data;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	641a      	str	r2, [r3, #64]	; 0x40
	rns->enq.enq_buffer[1].data = rns->RNS_data.common_buffer[1].data;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	645a      	str	r2, [r3, #68]	; 0x44
	rns->enq.enq_buffer[2].data = rns->RNS_data.common_buffer[2].data;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	649a      	str	r2, [r3, #72]	; 0x48
	rns->enq.enq_buffer[3].data = rns->RNS_data.common_buffer[3].data;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	64da      	str	r2, [r3, #76]	; 0x4c

	return 1;
 8006efa:	2301      	movs	r3, #1
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000a76c 	.word	0x2000a76c

08006f08 <ROS_Init>:

/*
 * Call this function in set() as initialization
 */
void ROS_Init(UART_HandleTypeDef* huartx)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	ROS_UART = huartx;
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <ROS_Init+0x2c>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6013      	str	r3, [r2, #0]
	path_num = 0;
 8006f16:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <ROS_Init+0x30>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
	ros_counter = 0;
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <ROS_Init+0x34>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huartx, ROS_buff, 7);
 8006f22:	2207      	movs	r2, #7
 8006f24:	4906      	ldr	r1, [pc, #24]	; (8006f40 <ROS_Init+0x38>)
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f011 f964 	bl	80181f4 <HAL_UART_Receive_IT>
}
 8006f2c:	bf00      	nop
 8006f2e:	3708      	adds	r7, #8
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20009c00 	.word	0x20009c00
 8006f38:	20009a00 	.word	0x20009a00
 8006f3c:	20009604 	.word	0x20009604
 8006f40:	20007c54 	.word	0x20007c54

08006f44 <ROS_Write_Flash>:
/*
 *  Write All the PP_Points into Flash
 *  Including different path
 */
uint32_t ROS_Write_Flash(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
	uint32_t success = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 8006f4e:	f00c fd01 	bl	8013954 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8006f52:	4b47      	ldr	r3, [pc, #284]	; (8007070 <ROS_Write_Flash+0x12c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8006f58:	4b45      	ldr	r3, [pc, #276]	; (8007070 <ROS_Write_Flash+0x12c>)
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_8;
 8006f5e:	4b44      	ldr	r3, [pc, #272]	; (8007070 <ROS_Write_Flash+0x12c>)
 8006f60:	2208      	movs	r2, #8
 8006f62:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 8006f64:	4b42      	ldr	r3, [pc, #264]	; (8007070 <ROS_Write_Flash+0x12c>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4840      	ldr	r0, [pc, #256]	; (8007070 <ROS_Write_Flash+0x12c>)
 8006f70:	f00c fe5e 	bl	8013c30 <HAL_FLASHEx_Erase>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <ROS_Write_Flash+0x3e>
	{
		return HAL_FLASH_GetError ();
 8006f7a:	f00c fd1d 	bl	80139b8 <HAL_FLASH_GetError>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	e072      	b.n	8007068 <ROS_Write_Flash+0x124>
	}

	uint32_t address = SECTOR8;
 8006f82:	4b3c      	ldr	r3, [pc, #240]	; (8007074 <ROS_Write_Flash+0x130>)
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	4b3c      	ldr	r3, [pc, #240]	; (8007078 <ROS_Write_Flash+0x134>)
 8006f88:	681b      	ldr	r3, [r3, #0]
	uint32_t temp;

	memcpy(&temp, &path_num, 4);
 8006f8a:	603b      	str	r3, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	2002      	movs	r0, #2
 8006f98:	f00c fc88 	bl	80138ac <HAL_FLASH_Program>
	address += 4;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < path_num; i++)
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e014      	b.n	8006fd2 <ROS_Write_Flash+0x8e>
	{
		memcpy(&temp, &point_num[i], 4);
 8006fa8:	4b34      	ldr	r3, [pc, #208]	; (800707c <ROS_Write_Flash+0x138>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	69b9      	ldr	r1, [r7, #24]
 8006fc0:	2002      	movs	r0, #2
 8006fc2:	f00c fc73 	bl	80138ac <HAL_FLASH_Program>
		address += 4;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < path_num; i++)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <ROS_Write_Flash+0x134>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	dbe5      	blt.n	8006fa8 <ROS_Write_Flash+0x64>
	}

	for(int i = 0; i < path_num; i++) // Number of path
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	e03a      	b.n	8007058 <ROS_Write_Flash+0x114>
	{
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	e02b      	b.n	8007040 <ROS_Write_Flash+0xfc>
		{
			for(int k = 0; k < 7; k++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60bb      	str	r3, [r7, #8]
 8006fec:	e022      	b.n	8007034 <ROS_Write_Flash+0xf0>
			{
				memcpy(&temp, &PP_Points[i][j][k], 4);
 8006fee:	4b24      	ldr	r3, [pc, #144]	; (8007080 <ROS_Write_Flash+0x13c>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	603b      	str	r3, [r7, #0]
				if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, temp) == HAL_OK)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	69b9      	ldr	r1, [r7, #24]
 8007016:	2002      	movs	r0, #2
 8007018:	f00c fc48 	bl	80138ac <HAL_FLASH_Program>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <ROS_Write_Flash+0xe4>
				{
					success++;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
				}
				address += 4;
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	3304      	adds	r3, #4
 800702c:	61bb      	str	r3, [r7, #24]
			for(int k = 0; k < 7; k++)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	3301      	adds	r3, #1
 8007032:	60bb      	str	r3, [r7, #8]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b06      	cmp	r3, #6
 8007038:	ddd9      	ble.n	8006fee <ROS_Write_Flash+0xaa>
		for(int j = 0; j < point_num[i]; j++) // Number of point at specific path
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	4b0e      	ldr	r3, [pc, #56]	; (800707c <ROS_Write_Flash+0x138>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	429a      	cmp	r2, r3
 8007050:	dbca      	blt.n	8006fe8 <ROS_Write_Flash+0xa4>
	for(int i = 0; i < path_num; i++) // Number of path
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3301      	adds	r3, #1
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <ROS_Write_Flash+0x134>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	429a      	cmp	r2, r3
 8007060:	dbbf      	blt.n	8006fe2 <ROS_Write_Flash+0x9e>
			}
		}
	}
	HAL_FLASH_Lock();
 8007062:	f00c fc99 	bl	8013998 <HAL_FLASH_Lock>
	return success;
 8007066:	69fb      	ldr	r3, [r7, #28]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3720      	adds	r7, #32
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200007bc 	.word	0x200007bc
 8007074:	08080004 	.word	0x08080004
 8007078:	20009a00 	.word	0x20009a00
 800707c:	2000948c 	.word	0x2000948c
 8007080:	20009468 	.word	0x20009468

08007084 <ROS_Handler>:

/*
 * Call this function in the USART Receive CallBack
 */
void ROS_Handler(void)
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b08f      	sub	sp, #60	; 0x3c
 8007088:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	switch(state)
 800708a:	4ba1      	ldr	r3, [pc, #644]	; (8007310 <ROS_Handler+0x28c>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b03      	cmp	r3, #3
 8007090:	f200 8343 	bhi.w	800771a <ROS_Handler+0x696>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <ROS_Handler+0x18>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070ad 	.word	0x080070ad
 80070a0:	08007471 	.word	0x08007471
 80070a4:	0800751f 	.word	0x0800751f
 80070a8:	08007617 	.word	0x08007617
	{
	case 0:
		if(ROS_buff[0] == 0x01 && ROS_buff[1] == 0x02)
 80070ac:	4b99      	ldr	r3, [pc, #612]	; (8007314 <ROS_Handler+0x290>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 81d3 	bne.w	800745c <ROS_Handler+0x3d8>
 80070b6:	4b97      	ldr	r3, [pc, #604]	; (8007314 <ROS_Handler+0x290>)
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	f040 81ce 	bne.w	800745c <ROS_Handler+0x3d8>
 80070c0:	4b94      	ldr	r3, [pc, #592]	; (8007314 <ROS_Handler+0x290>)
 80070c2:	789a      	ldrb	r2, [r3, #2]
		{
//			led2 = !led2;
			memcpy(&instruction, &ROS_buff[2], 1);
 80070c4:	4b94      	ldr	r3, [pc, #592]	; (8007318 <ROS_Handler+0x294>)
 80070c6:	701a      	strb	r2, [r3, #0]
			if(instruction == TEST)
 80070c8:	4b93      	ldr	r3, [pc, #588]	; (8007318 <ROS_Handler+0x294>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d13e      	bne.n	800714e <ROS_Handler+0xca>
			{
				state = 1;
 80070d0:	4b8f      	ldr	r3, [pc, #572]	; (8007310 <ROS_Handler+0x28c>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	4b8f      	ldr	r3, [pc, #572]	; (8007314 <ROS_Handler+0x290>)
 80070d8:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80070dc:	461a      	mov	r2, r3
				memcpy(&test_point_num, &ROS_buff[3], 4);
 80070de:	4b8f      	ldr	r3, [pc, #572]	; (800731c <ROS_Handler+0x298>)
 80070e0:	601a      	str	r2, [r3, #0]

				test_points = (float**)malloc(test_point_num * sizeof(float*));
 80070e2:	4b8e      	ldr	r3, [pc, #568]	; (800731c <ROS_Handler+0x298>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f015 fc21 	bl	801c930 <malloc>
 80070ee:	4603      	mov	r3, r0
 80070f0:	461a      	mov	r2, r3
 80070f2:	4b8b      	ldr	r3, [pc, #556]	; (8007320 <ROS_Handler+0x29c>)
 80070f4:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < test_point_num; i++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34
 80070fa:	e00c      	b.n	8007116 <ROS_Handler+0x92>
					test_points[i] = (float*)malloc(7 * sizeof(float));
 80070fc:	4b88      	ldr	r3, [pc, #544]	; (8007320 <ROS_Handler+0x29c>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	18d4      	adds	r4, r2, r3
 8007106:	201c      	movs	r0, #28
 8007108:	f015 fc12 	bl	801c930 <malloc>
 800710c:	4603      	mov	r3, r0
 800710e:	6023      	str	r3, [r4, #0]
				for(int i = 0; i < test_point_num; i++)
 8007110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007112:	3301      	adds	r3, #1
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
 8007116:	4b81      	ldr	r3, [pc, #516]	; (800731c <ROS_Handler+0x298>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711c:	429a      	cmp	r2, r3
 800711e:	dbed      	blt.n	80070fc <ROS_Handler+0x78>

				HAL_UART_Transmit(ROS_UART, (uint8_t* )&test_point_num, 4, HAL_MAX_DELAY);
 8007120:	4b80      	ldr	r3, [pc, #512]	; (8007324 <ROS_Handler+0x2a0>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007128:	2204      	movs	r2, #4
 800712a:	497c      	ldr	r1, [pc, #496]	; (800731c <ROS_Handler+0x298>)
 800712c:	f010 ffc9 	bl	80180c2 <HAL_UART_Transmit>
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 28 * test_point_num);
 8007130:	4b7c      	ldr	r3, [pc, #496]	; (8007324 <ROS_Handler+0x2a0>)
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	4b79      	ldr	r3, [pc, #484]	; (800731c <ROS_Handler+0x298>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	00d2      	lsls	r2, r2, #3
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	b29b      	uxth	r3, r3
 8007144:	461a      	mov	r2, r3
 8007146:	4973      	ldr	r1, [pc, #460]	; (8007314 <ROS_Handler+0x290>)
 8007148:	f011 f854 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800714c:	e18e      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == REGISTER)
 800714e:	4b72      	ldr	r3, [pc, #456]	; (8007318 <ROS_Handler+0x294>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d105      	bne.n	8007162 <ROS_Handler+0xde>
			{
				state = 0;
 8007156:	4b6e      	ldr	r3, [pc, #440]	; (8007310 <ROS_Handler+0x28c>)
 8007158:	2200      	movs	r2, #0
 800715a:	701a      	strb	r2, [r3, #0]
				ROS_Register();
 800715c:	f000 fc7c 	bl	8007a58 <ROS_Register>
			if(instruction == TEST)
 8007160:	e184      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == WRITE)
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <ROS_Handler+0x294>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d14a      	bne.n	8007200 <ROS_Handler+0x17c>
			{
				total_point_num = 0;
 800716a:	4b6f      	ldr	r3, [pc, #444]	; (8007328 <ROS_Handler+0x2a4>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
				uint32_t write_success = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	607b      	str	r3, [r7, #4]
				write_success += ROS_Write_Flash();
 8007174:	f7ff fee6 	bl	8006f44 <ROS_Write_Flash>
 8007178:	4602      	mov	r2, r0
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	607b      	str	r3, [r7, #4]

				for(int i = 0; i < path_num; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	633b      	str	r3, [r7, #48]	; 0x30
 8007184:	e00d      	b.n	80071a2 <ROS_Handler+0x11e>
				{
					total_point_num += point_num[i];
 8007186:	4b69      	ldr	r3, [pc, #420]	; (800732c <ROS_Handler+0x2a8>)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b65      	ldr	r3, [pc, #404]	; (8007328 <ROS_Handler+0x2a4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4413      	add	r3, r2
 8007198:	4a63      	ldr	r2, [pc, #396]	; (8007328 <ROS_Handler+0x2a4>)
 800719a:	6013      	str	r3, [r2, #0]
				for(int i = 0; i < path_num; i++)
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	3301      	adds	r3, #1
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
 80071a2:	4b63      	ldr	r3, [pc, #396]	; (8007330 <ROS_Handler+0x2ac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a8:	429a      	cmp	r2, r3
 80071aa:	dbec      	blt.n	8007186 <ROS_Handler+0x102>
				}

				if(write_success == total_point_num * 7)
 80071ac:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <ROS_Handler+0x2a4>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	1a9a      	subs	r2, r3, r2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d10b      	bne.n	80071d4 <ROS_Handler+0x150>
				{
					ack = 0x21;
 80071bc:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <ROS_Handler+0x2b0>)
 80071be:	2221      	movs	r2, #33	; 0x21
 80071c0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 80071c2:	4b58      	ldr	r3, [pc, #352]	; (8007324 <ROS_Handler+0x2a0>)
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ca:	2201      	movs	r2, #1
 80071cc:	4959      	ldr	r1, [pc, #356]	; (8007334 <ROS_Handler+0x2b0>)
 80071ce:	f010 ff78 	bl	80180c2 <HAL_UART_Transmit>
 80071d2:	e00a      	b.n	80071ea <ROS_Handler+0x166>
				}
				else
				{
					ack = 0x22;
 80071d4:	4b57      	ldr	r3, [pc, #348]	; (8007334 <ROS_Handler+0x2b0>)
 80071d6:	2222      	movs	r2, #34	; 0x22
 80071d8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(ROS_UART, &ack, 1, HAL_MAX_DELAY);
 80071da:	4b52      	ldr	r3, [pc, #328]	; (8007324 <ROS_Handler+0x2a0>)
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071e2:	2201      	movs	r2, #1
 80071e4:	4953      	ldr	r1, [pc, #332]	; (8007334 <ROS_Handler+0x2b0>)
 80071e6:	f010 ff6c 	bl	80180c2 <HAL_UART_Transmit>
				}

				state = 0;
 80071ea:	4b49      	ldr	r3, [pc, #292]	; (8007310 <ROS_Handler+0x28c>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80071f0:	4b4c      	ldr	r3, [pc, #304]	; (8007324 <ROS_Handler+0x2a0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2207      	movs	r2, #7
 80071f6:	4947      	ldr	r1, [pc, #284]	; (8007314 <ROS_Handler+0x290>)
 80071f8:	4618      	mov	r0, r3
 80071fa:	f010 fffb 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80071fe:	e135      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE)
 8007200:	4b45      	ldr	r3, [pc, #276]	; (8007318 <ROS_Handler+0x294>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b05      	cmp	r3, #5
 8007206:	d10e      	bne.n	8007226 <ROS_Handler+0x1a2>
			{
				state = 0;
 8007208:	4b41      	ldr	r3, [pc, #260]	; (8007310 <ROS_Handler+0x28c>)
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	4b41      	ldr	r3, [pc, #260]	; (8007314 <ROS_Handler+0x290>)
 8007210:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007214:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8007216:	4b48      	ldr	r3, [pc, #288]	; (8007338 <ROS_Handler+0x2b4>)
 8007218:	601a      	str	r2, [r3, #0]

				ROS_Delete(path_index);
 800721a:	4b47      	ldr	r3, [pc, #284]	; (8007338 <ROS_Handler+0x2b4>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fd34 	bl	8007c8c <ROS_Delete>
			if(instruction == TEST)
 8007224:	e122      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == READ)
 8007226:	4b3c      	ldr	r3, [pc, #240]	; (8007318 <ROS_Handler+0x294>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b08      	cmp	r3, #8
 800722c:	d144      	bne.n	80072b8 <ROS_Handler+0x234>
 800722e:	4b39      	ldr	r3, [pc, #228]	; (8007314 <ROS_Handler+0x290>)
 8007230:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007234:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 8007236:	4b40      	ldr	r3, [pc, #256]	; (8007338 <ROS_Handler+0x2b4>)
 8007238:	601a      	str	r2, [r3, #0]

				for(int i = 0; i < point_num[path_index - 1]; i++)
 800723a:	2300      	movs	r3, #0
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723e:	e023      	b.n	8007288 <ROS_Handler+0x204>
				{
					for(int j = 0; j < 7; j++)
 8007240:	2300      	movs	r3, #0
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
 8007244:	e01a      	b.n	800727c <ROS_Handler+0x1f8>
					{
						HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_index - 1][i][j], 4, HAL_MAX_DELAY);
 8007246:	4b37      	ldr	r3, [pc, #220]	; (8007324 <ROS_Handler+0x2a0>)
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	4b3c      	ldr	r3, [pc, #240]	; (800733c <ROS_Handler+0x2b8>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4b3a      	ldr	r3, [pc, #232]	; (8007338 <ROS_Handler+0x2b4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007256:	3b01      	subs	r3, #1
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4413      	add	r3, r2
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	18d1      	adds	r1, r2, r3
 800726c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007270:	2204      	movs	r2, #4
 8007272:	f010 ff26 	bl	80180c2 <HAL_UART_Transmit>
					for(int j = 0; j < 7; j++)
 8007276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007278:	3301      	adds	r3, #1
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b06      	cmp	r3, #6
 8007280:	dde1      	ble.n	8007246 <ROS_Handler+0x1c2>
				for(int i = 0; i < point_num[path_index - 1]; i++)
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	3301      	adds	r3, #1
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007288:	4b28      	ldr	r3, [pc, #160]	; (800732c <ROS_Handler+0x2a8>)
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <ROS_Handler+0x2b4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007294:	3b01      	subs	r3, #1
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	4413      	add	r3, r2
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	429a      	cmp	r2, r3
 80072a0:	dbce      	blt.n	8007240 <ROS_Handler+0x1bc>
					}
				}
				state = 0;
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <ROS_Handler+0x28c>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80072a8:	4b1e      	ldr	r3, [pc, #120]	; (8007324 <ROS_Handler+0x2a0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2207      	movs	r2, #7
 80072ae:	4919      	ldr	r1, [pc, #100]	; (8007314 <ROS_Handler+0x290>)
 80072b0:	4618      	mov	r0, r3
 80072b2:	f010 ff9f 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80072b6:	e0d9      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_ALL)
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <ROS_Handler+0x294>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b07      	cmp	r3, #7
 80072be:	d105      	bne.n	80072cc <ROS_Handler+0x248>
			{
				state = 0;
 80072c0:	4b13      	ldr	r3, [pc, #76]	; (8007310 <ROS_Handler+0x28c>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
				ROS_DeleteAll();
 80072c6:	f000 fdbb 	bl	8007e40 <ROS_DeleteAll>
			if(instruction == TEST)
 80072ca:	e0cf      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == EDIT_PATH)
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <ROS_Handler+0x294>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d105      	bne.n	80072e0 <ROS_Handler+0x25c>
			{
				state = 0;
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <ROS_Handler+0x28c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	701a      	strb	r2, [r3, #0]
				ROS_EditPath();
 80072da:	f000 fe0b 	bl	8007ef4 <ROS_EditPath>
			if(instruction == TEST)
 80072de:	e0c5      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == GET_COUNTER)
 80072e0:	4b0d      	ldr	r3, [pc, #52]	; (8007318 <ROS_Handler+0x294>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b09      	cmp	r3, #9
 80072e6:	d12d      	bne.n	8007344 <ROS_Handler+0x2c0>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&ros_counter, 4, HAL_MAX_DELAY);
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <ROS_Handler+0x2a0>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f0:	2204      	movs	r2, #4
 80072f2:	4913      	ldr	r1, [pc, #76]	; (8007340 <ROS_Handler+0x2bc>)
 80072f4:	f010 fee5 	bl	80180c2 <HAL_UART_Transmit>

				state = 0;
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <ROS_Handler+0x28c>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <ROS_Handler+0x2a0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2207      	movs	r2, #7
 8007304:	4903      	ldr	r1, [pc, #12]	; (8007314 <ROS_Handler+0x290>)
 8007306:	4618      	mov	r0, r3
 8007308:	f010 ff74 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800730c:	e0ae      	b.n	800746c <ROS_Handler+0x3e8>
 800730e:	bf00      	nop
 8007310:	200007d0 	.word	0x200007d0
 8007314:	20007c54 	.word	0x20007c54
 8007318:	20009470 	.word	0x20009470
 800731c:	20009484 	.word	0x20009484
 8007320:	20009e9c 	.word	0x20009e9c
 8007324:	20009c00 	.word	0x20009c00
 8007328:	20009600 	.word	0x20009600
 800732c:	2000948c 	.word	0x2000948c
 8007330:	20009a00 	.word	0x20009a00
 8007334:	2000750c 	.word	0x2000750c
 8007338:	20007538 	.word	0x20007538
 800733c:	20009468 	.word	0x20009468
 8007340:	20009604 	.word	0x20009604
			}

			else if(instruction == EDIT_POINT)
 8007344:	4b92      	ldr	r3, [pc, #584]	; (8007590 <ROS_Handler+0x50c>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b04      	cmp	r3, #4
 800734a:	d118      	bne.n	800737e <ROS_Handler+0x2fa>
			{
				state = 2;
 800734c:	4b91      	ldr	r3, [pc, #580]	; (8007594 <ROS_Handler+0x510>)
 800734e:	2202      	movs	r2, #2
 8007350:	701a      	strb	r2, [r3, #0]
 8007352:	4b91      	ldr	r3, [pc, #580]	; (8007598 <ROS_Handler+0x514>)
 8007354:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007358:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 800735a:	4b90      	ldr	r3, [pc, #576]	; (800759c <ROS_Handler+0x518>)
 800735c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 800735e:	4b90      	ldr	r3, [pc, #576]	; (80075a0 <ROS_Handler+0x51c>)
 8007360:	6818      	ldr	r0, [r3, #0]
 8007362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007366:	2204      	movs	r2, #4
 8007368:	498c      	ldr	r1, [pc, #560]	; (800759c <ROS_Handler+0x518>)
 800736a:	f010 feaa 	bl	80180c2 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 32); // 7 Data + 1 Point Index
 800736e:	4b8c      	ldr	r3, [pc, #560]	; (80075a0 <ROS_Handler+0x51c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2220      	movs	r2, #32
 8007374:	4988      	ldr	r1, [pc, #544]	; (8007598 <ROS_Handler+0x514>)
 8007376:	4618      	mov	r0, r3
 8007378:	f010 ff3c 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800737c:	e076      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == DELETE_POINT)
 800737e:	4b84      	ldr	r3, [pc, #528]	; (8007590 <ROS_Handler+0x50c>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d118      	bne.n	80073b8 <ROS_Handler+0x334>
			{
				state = 3;
 8007386:	4b83      	ldr	r3, [pc, #524]	; (8007594 <ROS_Handler+0x510>)
 8007388:	2203      	movs	r2, #3
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	4b82      	ldr	r3, [pc, #520]	; (8007598 <ROS_Handler+0x514>)
 800738e:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007392:	461a      	mov	r2, r3
				memcpy(&path_index, &ROS_buff[3], 4);
 8007394:	4b81      	ldr	r3, [pc, #516]	; (800759c <ROS_Handler+0x518>)
 8007396:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&path_index, 4, HAL_MAX_DELAY);
 8007398:	4b81      	ldr	r3, [pc, #516]	; (80075a0 <ROS_Handler+0x51c>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073a0:	2204      	movs	r2, #4
 80073a2:	497e      	ldr	r1, [pc, #504]	; (800759c <ROS_Handler+0x518>)
 80073a4:	f010 fe8d 	bl	80180c2 <HAL_UART_Transmit>

				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 4);
 80073a8:	4b7d      	ldr	r3, [pc, #500]	; (80075a0 <ROS_Handler+0x51c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2204      	movs	r2, #4
 80073ae:	497a      	ldr	r1, [pc, #488]	; (8007598 <ROS_Handler+0x514>)
 80073b0:	4618      	mov	r0, r3
 80073b2:	f010 ff1f 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80073b6:	e059      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == TEST_RUN)
 80073b8:	4b75      	ldr	r3, [pc, #468]	; (8007590 <ROS_Handler+0x50c>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b0a      	cmp	r3, #10
 80073be:	d113      	bne.n	80073e8 <ROS_Handler+0x364>
			{
				if(test_point_num)
 80073c0:	4b78      	ldr	r3, [pc, #480]	; (80075a4 <ROS_Handler+0x520>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <ROS_Handler+0x34e>
				{
					ros.ros_test_start = 1;
 80073c8:	4a77      	ldr	r2, [pc, #476]	; (80075a8 <ROS_Handler+0x524>)
 80073ca:	7813      	ldrb	r3, [r2, #0]
 80073cc:	f043 0304 	orr.w	r3, r3, #4
 80073d0:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 80073d2:	4b70      	ldr	r3, [pc, #448]	; (8007594 <ROS_Handler+0x510>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80073d8:	4b71      	ldr	r3, [pc, #452]	; (80075a0 <ROS_Handler+0x51c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2207      	movs	r2, #7
 80073de:	496e      	ldr	r1, [pc, #440]	; (8007598 <ROS_Handler+0x514>)
 80073e0:	4618      	mov	r0, r3
 80073e2:	f010 ff07 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 80073e6:	e041      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == RUN_PATH)
 80073e8:	4b69      	ldr	r3, [pc, #420]	; (8007590 <ROS_Handler+0x50c>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	2b0b      	cmp	r3, #11
 80073ee:	d121      	bne.n	8007434 <ROS_Handler+0x3b0>
 80073f0:	4b69      	ldr	r3, [pc, #420]	; (8007598 <ROS_Handler+0x514>)
 80073f2:	f8d3 3003 	ldr.w	r3, [r3, #3]
 80073f6:	461a      	mov	r2, r3
			{
				memcpy(&path_index, &ROS_buff[3], 4);
 80073f8:	4b68      	ldr	r3, [pc, #416]	; (800759c <ROS_Handler+0x518>)
 80073fa:	601a      	str	r2, [r3, #0]
				if(point_num[path_index - 1])
 80073fc:	4b6b      	ldr	r3, [pc, #428]	; (80075ac <ROS_Handler+0x528>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	4b66      	ldr	r3, [pc, #408]	; (800759c <ROS_Handler+0x518>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007408:	3b01      	subs	r3, #1
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <ROS_Handler+0x39a>
				{
					ros.ros_path_start = 1;
 8007414:	4a64      	ldr	r2, [pc, #400]	; (80075a8 <ROS_Handler+0x524>)
 8007416:	7813      	ldrb	r3, [r2, #0]
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	7013      	strb	r3, [r2, #0]
				}

				state = 0;
 800741e:	4b5d      	ldr	r3, [pc, #372]	; (8007594 <ROS_Handler+0x510>)
 8007420:	2200      	movs	r2, #0
 8007422:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007424:	4b5e      	ldr	r3, [pc, #376]	; (80075a0 <ROS_Handler+0x51c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2207      	movs	r2, #7
 800742a:	495b      	ldr	r1, [pc, #364]	; (8007598 <ROS_Handler+0x514>)
 800742c:	4618      	mov	r0, r3
 800742e:	f010 fee1 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 8007432:	e01b      	b.n	800746c <ROS_Handler+0x3e8>
			}

			else if(instruction == STOP_RUN)
 8007434:	4b56      	ldr	r3, [pc, #344]	; (8007590 <ROS_Handler+0x50c>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b0c      	cmp	r3, #12
 800743a:	d117      	bne.n	800746c <ROS_Handler+0x3e8>
			{
				ros.ros_stop = 1;
 800743c:	4a5a      	ldr	r2, [pc, #360]	; (80075a8 <ROS_Handler+0x524>)
 800743e:	7813      	ldrb	r3, [r2, #0]
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	7013      	strb	r3, [r2, #0]
				state = 0;
 8007446:	4b53      	ldr	r3, [pc, #332]	; (8007594 <ROS_Handler+0x510>)
 8007448:	2200      	movs	r2, #0
 800744a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800744c:	4b54      	ldr	r3, [pc, #336]	; (80075a0 <ROS_Handler+0x51c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2207      	movs	r2, #7
 8007452:	4951      	ldr	r1, [pc, #324]	; (8007598 <ROS_Handler+0x514>)
 8007454:	4618      	mov	r0, r3
 8007456:	f010 fecd 	bl	80181f4 <HAL_UART_Receive_IT>
			if(instruction == TEST)
 800745a:	e007      	b.n	800746c <ROS_Handler+0x3e8>
			}
		}

		else
		{
			HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800745c:	4b50      	ldr	r3, [pc, #320]	; (80075a0 <ROS_Handler+0x51c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2207      	movs	r2, #7
 8007462:	494d      	ldr	r1, [pc, #308]	; (8007598 <ROS_Handler+0x514>)
 8007464:	4618      	mov	r0, r3
 8007466:	f010 fec5 	bl	80181f4 <HAL_UART_Receive_IT>
		}

		break;
 800746a:	e156      	b.n	800771a <ROS_Handler+0x696>
			if(instruction == TEST)
 800746c:	bf00      	nop
		break;
 800746e:	e154      	b.n	800771a <ROS_Handler+0x696>

	case 1:
		for(int i = 0; i < test_point_num; i++)
 8007470:	2300      	movs	r3, #0
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	e01f      	b.n	80074b6 <ROS_Handler+0x432>
		{
			for(int j = 0; j < 7; j++)
 8007476:	2300      	movs	r3, #0
 8007478:	623b      	str	r3, [r7, #32]
 800747a:	e016      	b.n	80074aa <ROS_Handler+0x426>
			{
				memcpy(&test_points[i][j], &ROS_buff[j * 4 + i * 28], 4);
 800747c:	4b4c      	ldr	r3, [pc, #304]	; (80075b0 <ROS_Handler+0x52c>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	18d1      	adds	r1, r2, r3
 800748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007490:	4613      	mov	r3, r2
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	1a9a      	subs	r2, r3, r2
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	4413      	add	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4a3e      	ldr	r2, [pc, #248]	; (8007598 <ROS_Handler+0x514>)
 800749e:	4413      	add	r3, r2
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	600b      	str	r3, [r1, #0]
			for(int j = 0; j < 7; j++)
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	3301      	adds	r3, #1
 80074a8:	623b      	str	r3, [r7, #32]
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	2b06      	cmp	r3, #6
 80074ae:	dde5      	ble.n	800747c <ROS_Handler+0x3f8>
		for(int i = 0; i < test_point_num; i++)
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	3301      	adds	r3, #1
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
 80074b6:	4b3b      	ldr	r3, [pc, #236]	; (80075a4 <ROS_Handler+0x520>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074bc:	429a      	cmp	r2, r3
 80074be:	dbda      	blt.n	8007476 <ROS_Handler+0x3f2>
			}
		}

		for(int i = 0; i < test_point_num; i++)
 80074c0:	2300      	movs	r3, #0
 80074c2:	61fb      	str	r3, [r7, #28]
 80074c4:	e01b      	b.n	80074fe <ROS_Handler+0x47a>
		{
			for(int j = 0; j < 7; j++)
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
 80074ca:	e012      	b.n	80074f2 <ROS_Handler+0x46e>
			{
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&test_points[i][j], 4, HAL_MAX_DELAY);
 80074cc:	4b34      	ldr	r3, [pc, #208]	; (80075a0 <ROS_Handler+0x51c>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	4b37      	ldr	r3, [pc, #220]	; (80075b0 <ROS_Handler+0x52c>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	18d1      	adds	r1, r2, r3
 80074e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074e6:	2204      	movs	r2, #4
 80074e8:	f010 fdeb 	bl	80180c2 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	3301      	adds	r3, #1
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	2b06      	cmp	r3, #6
 80074f6:	dde9      	ble.n	80074cc <ROS_Handler+0x448>
		for(int i = 0; i < test_point_num; i++)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	3301      	adds	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	4b29      	ldr	r3, [pc, #164]	; (80075a4 <ROS_Handler+0x520>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	429a      	cmp	r2, r3
 8007506:	dbde      	blt.n	80074c6 <ROS_Handler+0x442>
			}
		}
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <ROS_Handler+0x51c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2207      	movs	r2, #7
 800750e:	4922      	ldr	r1, [pc, #136]	; (8007598 <ROS_Handler+0x514>)
 8007510:	4618      	mov	r0, r3
 8007512:	f010 fe6f 	bl	80181f4 <HAL_UART_Receive_IT>
		state = 0;
 8007516:	4b1f      	ldr	r3, [pc, #124]	; (8007594 <ROS_Handler+0x510>)
 8007518:	2200      	movs	r2, #0
 800751a:	701a      	strb	r2, [r3, #0]
		break;
 800751c:	e0fd      	b.n	800771a <ROS_Handler+0x696>

	case 2:
		point_buf = (float*)malloc(7 * sizeof(float));
 800751e:	201c      	movs	r0, #28
 8007520:	f015 fa06 	bl	801c930 <malloc>
 8007524:	4603      	mov	r3, r0
 8007526:	461a      	mov	r2, r3
 8007528:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <ROS_Handler+0x530>)
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	4b1a      	ldr	r3, [pc, #104]	; (8007598 <ROS_Handler+0x514>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
		memcpy(&point_index, &ROS_buff[0], 4);
 8007532:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <ROS_Handler+0x534>)
 8007534:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < 7; i++)
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e00e      	b.n	800755a <ROS_Handler+0x4d6>
		{
			memcpy(&point_buf[i], &ROS_buff[4 + i * 4], 4);
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <ROS_Handler+0x530>)
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	3201      	adds	r2, #1
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	4912      	ldr	r1, [pc, #72]	; (8007598 <ROS_Handler+0x514>)
 800754e:	440a      	add	r2, r1
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	3301      	adds	r3, #1
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b06      	cmp	r3, #6
 800755e:	dded      	ble.n	800753c <ROS_Handler+0x4b8>
		}

		for(int i = 0; i < 7; i++)
 8007560:	2300      	movs	r3, #0
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	e00e      	b.n	8007584 <ROS_Handler+0x500>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&point_buf[i], 4, HAL_MAX_DELAY);
 8007566:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <ROS_Handler+0x51c>)
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <ROS_Handler+0x530>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	18d1      	adds	r1, r2, r3
 8007574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007578:	2204      	movs	r2, #4
 800757a:	f010 fda2 	bl	80180c2 <HAL_UART_Transmit>
		for(int i = 0; i < 7; i++)
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	3301      	adds	r3, #1
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b06      	cmp	r3, #6
 8007588:	dded      	ble.n	8007566 <ROS_Handler+0x4e2>
		}

		for(int i = 0; i < 7; i++)
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e034      	b.n	80075fa <ROS_Handler+0x576>
 8007590:	20009470 	.word	0x20009470
 8007594:	200007d0 	.word	0x200007d0
 8007598:	20007c54 	.word	0x20007c54
 800759c:	20007538 	.word	0x20007538
 80075a0:	20009c00 	.word	0x20009c00
 80075a4:	20009484 	.word	0x20009484
 80075a8:	2000a378 	.word	0x2000a378
 80075ac:	2000948c 	.word	0x2000948c
 80075b0:	20009e9c 	.word	0x20009e9c
 80075b4:	20009478 	.word	0x20009478
 80075b8:	200098f0 	.word	0x200098f0
		{
			PP_Points[path_index - 1][point_index - 1][i] = point_buf[i];
 80075bc:	4b59      	ldr	r3, [pc, #356]	; (8007724 <ROS_Handler+0x6a0>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	441a      	add	r2, r3
 80075c6:	4b58      	ldr	r3, [pc, #352]	; (8007728 <ROS_Handler+0x6a4>)
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	4b58      	ldr	r3, [pc, #352]	; (800772c <ROS_Handler+0x6a8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075d2:	3b01      	subs	r3, #1
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	4b55      	ldr	r3, [pc, #340]	; (8007730 <ROS_Handler+0x6ac>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075e2:	3b01      	subs	r3, #1
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 7; i++)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b06      	cmp	r3, #6
 80075fe:	dddd      	ble.n	80075bc <ROS_Handler+0x538>
		}

		state = 0;
 8007600:	4b4c      	ldr	r3, [pc, #304]	; (8007734 <ROS_Handler+0x6b0>)
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007606:	4b4c      	ldr	r3, [pc, #304]	; (8007738 <ROS_Handler+0x6b4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2207      	movs	r2, #7
 800760c:	494b      	ldr	r1, [pc, #300]	; (800773c <ROS_Handler+0x6b8>)
 800760e:	4618      	mov	r0, r3
 8007610:	f010 fdf0 	bl	80181f4 <HAL_UART_Receive_IT>
		break;
 8007614:	e081      	b.n	800771a <ROS_Handler+0x696>
 8007616:	4b49      	ldr	r3, [pc, #292]	; (800773c <ROS_Handler+0x6b8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3

	case 3:
		memcpy(&point_index, &ROS_buff, 4);
 800761c:	4b44      	ldr	r3, [pc, #272]	; (8007730 <ROS_Handler+0x6ac>)
 800761e:	601a      	str	r2, [r3, #0]

		if(point_num[path_index - 1] == 1)
 8007620:	4b47      	ldr	r3, [pc, #284]	; (8007740 <ROS_Handler+0x6bc>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b41      	ldr	r3, [pc, #260]	; (800772c <ROS_Handler+0x6a8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800762c:	3b01      	subs	r3, #1
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d105      	bne.n	8007644 <ROS_Handler+0x5c0>
		{
			ROS_Delete(path_index);
 8007638:	4b3c      	ldr	r3, [pc, #240]	; (800772c <ROS_Handler+0x6a8>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fb25 	bl	8007c8c <ROS_Delete>
 8007642:	e05f      	b.n	8007704 <ROS_Handler+0x680>
		}
		else
		{
			point_num[path_index - 1]--;
 8007644:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <ROS_Handler+0x6bc>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b38      	ldr	r3, [pc, #224]	; (800772c <ROS_Handler+0x6a8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007650:	3b01      	subs	r3, #1
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	3a01      	subs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]

			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 800765c:	4b34      	ldr	r3, [pc, #208]	; (8007730 <ROS_Handler+0x6ac>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3b01      	subs	r3, #1
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	e01f      	b.n	80076a6 <ROS_Handler+0x622>
			{
				PP_Points[path_index - 1][i] = PP_Points[path_index - 1][i + 1];
 8007666:	4b30      	ldr	r3, [pc, #192]	; (8007728 <ROS_Handler+0x6a4>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b30      	ldr	r3, [pc, #192]	; (800772c <ROS_Handler+0x6a8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007672:	3b01      	subs	r3, #1
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3301      	adds	r3, #1
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	4b29      	ldr	r3, [pc, #164]	; (8007728 <ROS_Handler+0x6a4>)
 8007684:	6819      	ldr	r1, [r3, #0]
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <ROS_Handler+0x6a8>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800768e:	3b01      	subs	r3, #1
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	6819      	ldr	r1, [r3, #0]
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	601a      	str	r2, [r3, #0]
			for(int i = point_index - 1; i < point_num[path_index - 1]; i++)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	4b26      	ldr	r3, [pc, #152]	; (8007740 <ROS_Handler+0x6bc>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	4b20      	ldr	r3, [pc, #128]	; (800772c <ROS_Handler+0x6a8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076b2:	3b01      	subs	r3, #1
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	429a      	cmp	r2, r3
 80076be:	dbd2      	blt.n	8007666 <ROS_Handler+0x5e2>
			}

			PP_Points[path_index - 1] = (float**)realloc(PP_Points[path_index - 1], point_num[path_index - 1] * sizeof(float*));
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <ROS_Handler+0x6a4>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b19      	ldr	r3, [pc, #100]	; (800772c <ROS_Handler+0x6a8>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	3b01      	subs	r3, #1
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <ROS_Handler+0x6bc>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b14      	ldr	r3, [pc, #80]	; (800772c <ROS_Handler+0x6a8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076e0:	3b01      	subs	r3, #1
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	0099      	lsls	r1, r3, #2
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <ROS_Handler+0x6a4>)
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <ROS_Handler+0x6a8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076f6:	3b01      	subs	r3, #1
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	18d4      	adds	r4, r2, r3
 80076fc:	f016 f862 	bl	801d7c4 <realloc>
 8007700:	4603      	mov	r3, r0
 8007702:	6023      	str	r3, [r4, #0]
		}

		state = 0;
 8007704:	4b0b      	ldr	r3, [pc, #44]	; (8007734 <ROS_Handler+0x6b0>)
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <ROS_Handler+0x6b4>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2207      	movs	r2, #7
 8007710:	490a      	ldr	r1, [pc, #40]	; (800773c <ROS_Handler+0x6b8>)
 8007712:	4618      	mov	r0, r3
 8007714:	f010 fd6e 	bl	80181f4 <HAL_UART_Receive_IT>
		break;
 8007718:	bf00      	nop
	}

}
 800771a:	bf00      	nop
 800771c:	373c      	adds	r7, #60	; 0x3c
 800771e:	46bd      	mov	sp, r7
 8007720:	bd90      	pop	{r4, r7, pc}
 8007722:	bf00      	nop
 8007724:	20009478 	.word	0x20009478
 8007728:	20009468 	.word	0x20009468
 800772c:	20007538 	.word	0x20007538
 8007730:	200098f0 	.word	0x200098f0
 8007734:	200007d0 	.word	0x200007d0
 8007738:	20009c00 	.word	0x20009c00
 800773c:	20007c54 	.word	0x20007c54
 8007740:	2000948c 	.word	0x2000948c

08007744 <ROS_Read_Flash>:

/*
 * Call this function in set() to rewrite PP_Points with value stored in Flash
 */
void ROS_Read_Flash(void)
{
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b091      	sub	sp, #68	; 0x44
 8007748:	af02      	add	r7, sp, #8
	// Enabling checking of FLASH value using usart5 by pressing reset button
	uint32_t address = SECTOR8;
 800774a:	4b7d      	ldr	r3, [pc, #500]	; (8007940 <ROS_Read_Flash+0x1fc>)
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(&path_num, (__IO uint32_t *)address, 4);
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	4b7b      	ldr	r3, [pc, #492]	; (8007944 <ROS_Read_Flash+0x200>)
 8007756:	601a      	str	r2, [r3, #0]
	address += 4;
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	3304      	adds	r3, #4
 800775c:	637b      	str	r3, [r7, #52]	; 0x34

	if(path_num)
 800775e:	4b79      	ldr	r3, [pc, #484]	; (8007944 <ROS_Read_Flash+0x200>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8150 	beq.w	8007a08 <ROS_Read_Flash+0x2c4>
	{
		sprintf((char*)ROS_buff, "path_num is %d\n\n", path_num);
 8007768:	4b76      	ldr	r3, [pc, #472]	; (8007944 <ROS_Read_Flash+0x200>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	4976      	ldr	r1, [pc, #472]	; (8007948 <ROS_Read_Flash+0x204>)
 8007770:	4876      	ldr	r0, [pc, #472]	; (800794c <ROS_Read_Flash+0x208>)
 8007772:	f016 f8dd 	bl	801d930 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 8007776:	4875      	ldr	r0, [pc, #468]	; (800794c <ROS_Read_Flash+0x208>)
 8007778:	f7f8 fd2a 	bl	80001d0 <strlen>
 800777c:	4603      	mov	r3, r0
 800777e:	b29a      	uxth	r2, r3
 8007780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007784:	4971      	ldr	r1, [pc, #452]	; (800794c <ROS_Read_Flash+0x208>)
 8007786:	4872      	ldr	r0, [pc, #456]	; (8007950 <ROS_Read_Flash+0x20c>)
 8007788:	f010 fc9b 	bl	80180c2 <HAL_UART_Transmit>

		PP_Points = (float***)malloc(path_num * sizeof(float**));
 800778c:	4b6d      	ldr	r3, [pc, #436]	; (8007944 <ROS_Read_Flash+0x200>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4618      	mov	r0, r3
 8007794:	f015 f8cc 	bl	801c930 <malloc>
 8007798:	4603      	mov	r3, r0
 800779a:	461a      	mov	r2, r3
 800779c:	4b6d      	ldr	r3, [pc, #436]	; (8007954 <ROS_Read_Flash+0x210>)
 800779e:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 80077a0:	4b68      	ldr	r3, [pc, #416]	; (8007944 <ROS_Read_Flash+0x200>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f015 f8c2 	bl	801c930 <malloc>
 80077ac:	4603      	mov	r3, r0
 80077ae:	461a      	mov	r2, r3
 80077b0:	4b69      	ldr	r3, [pc, #420]	; (8007958 <ROS_Read_Flash+0x214>)
 80077b2:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < path_num; i++)
 80077b4:	2300      	movs	r3, #0
 80077b6:	633b      	str	r3, [r7, #48]	; 0x30
 80077b8:	e00d      	b.n	80077d6 <ROS_Read_Flash+0x92>
		{
			memcpy(&point_num[i], (__IO uint32_t *)address, 4);
 80077ba:	4b67      	ldr	r3, [pc, #412]	; (8007958 <ROS_Read_Flash+0x214>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	601a      	str	r2, [r3, #0]
			address += 4;
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	3304      	adds	r3, #4
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
		for(int i = 0; i < path_num; i++)
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	3301      	adds	r3, #1
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
 80077d6:	4b5b      	ldr	r3, [pc, #364]	; (8007944 <ROS_Read_Flash+0x200>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077dc:	429a      	cmp	r2, r3
 80077de:	dbec      	blt.n	80077ba <ROS_Read_Flash+0x76>
		}

		for(int i = 0; i < path_num; i++)
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077e4:	e01a      	b.n	800781c <ROS_Read_Flash+0xd8>
		{
			sprintf((char*)ROS_buff, "Point num for path %d is %d\n", i + 1, point_num[i]);
 80077e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e8:	1c59      	adds	r1, r3, #1
 80077ea:	4b5b      	ldr	r3, [pc, #364]	; (8007958 <ROS_Read_Flash+0x214>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	460a      	mov	r2, r1
 80077f8:	4958      	ldr	r1, [pc, #352]	; (800795c <ROS_Read_Flash+0x218>)
 80077fa:	4854      	ldr	r0, [pc, #336]	; (800794c <ROS_Read_Flash+0x208>)
 80077fc:	f016 f898 	bl	801d930 <siprintf>
			HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 8007800:	4852      	ldr	r0, [pc, #328]	; (800794c <ROS_Read_Flash+0x208>)
 8007802:	f7f8 fce5 	bl	80001d0 <strlen>
 8007806:	4603      	mov	r3, r0
 8007808:	b29a      	uxth	r2, r3
 800780a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780e:	494f      	ldr	r1, [pc, #316]	; (800794c <ROS_Read_Flash+0x208>)
 8007810:	484f      	ldr	r0, [pc, #316]	; (8007950 <ROS_Read_Flash+0x20c>)
 8007812:	f010 fc56 	bl	80180c2 <HAL_UART_Transmit>
		for(int i = 0; i < path_num; i++)
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	3301      	adds	r3, #1
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781c:	4b49      	ldr	r3, [pc, #292]	; (8007944 <ROS_Read_Flash+0x200>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007822:	429a      	cmp	r2, r3
 8007824:	dbdf      	blt.n	80077e6 <ROS_Read_Flash+0xa2>
		}
		HAL_UART_Transmit(&huart5, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 8007826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800782a:	2201      	movs	r2, #1
 800782c:	494c      	ldr	r1, [pc, #304]	; (8007960 <ROS_Read_Flash+0x21c>)
 800782e:	4848      	ldr	r0, [pc, #288]	; (8007950 <ROS_Read_Flash+0x20c>)
 8007830:	f010 fc47 	bl	80180c2 <HAL_UART_Transmit>

		for(int i = 0; i < path_num; i++)
 8007834:	2300      	movs	r3, #0
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
 8007838:	e013      	b.n	8007862 <ROS_Read_Flash+0x11e>
		{
			PP_Points[i] = (float**)malloc(point_num[i] * sizeof(float*));
 800783a:	4b47      	ldr	r3, [pc, #284]	; (8007958 <ROS_Read_Flash+0x214>)
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	0099      	lsls	r1, r3, #2
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <ROS_Read_Flash+0x210>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	18d4      	adds	r4, r2, r3
 8007852:	4608      	mov	r0, r1
 8007854:	f015 f86c 	bl	801c930 <malloc>
 8007858:	4603      	mov	r3, r0
 800785a:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < path_num; i++)
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	3301      	adds	r3, #1
 8007860:	62bb      	str	r3, [r7, #40]	; 0x28
 8007862:	4b38      	ldr	r3, [pc, #224]	; (8007944 <ROS_Read_Flash+0x200>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007868:	429a      	cmp	r2, r3
 800786a:	dbe6      	blt.n	800783a <ROS_Read_Flash+0xf6>
		}

		for(int i = 0; i < path_num; i++)
 800786c:	2300      	movs	r3, #0
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e01f      	b.n	80078b2 <ROS_Read_Flash+0x16e>
		{
			for(int j = 0; j < point_num[i]; j++)
 8007872:	2300      	movs	r3, #0
 8007874:	623b      	str	r3, [r7, #32]
 8007876:	e010      	b.n	800789a <ROS_Read_Flash+0x156>
			{
				PP_Points[i][j] = (float*)malloc(7 * sizeof(float));
 8007878:	4b36      	ldr	r3, [pc, #216]	; (8007954 <ROS_Read_Flash+0x210>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	18d4      	adds	r4, r2, r3
 800788a:	201c      	movs	r0, #28
 800788c:	f015 f850 	bl	801c930 <malloc>
 8007890:	4603      	mov	r3, r0
 8007892:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[i]; j++)
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	3301      	adds	r3, #1
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <ROS_Read_Flash+0x214>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	dbe5      	blt.n	8007878 <ROS_Read_Flash+0x134>
		for(int i = 0; i < path_num; i++)
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	3301      	adds	r3, #1
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <ROS_Read_Flash+0x200>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b8:	429a      	cmp	r2, r3
 80078ba:	dbda      	blt.n	8007872 <ROS_Read_Flash+0x12e>
			}
		}

		for(int i = 0; i < path_num; i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	e02d      	b.n	800791e <ROS_Read_Flash+0x1da>
		{
			for(int j = 0; j < point_num[i]; j++)
 80078c2:	2300      	movs	r3, #0
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	e01e      	b.n	8007906 <ROS_Read_Flash+0x1c2>
			{
				for(int k = 0; k < 7; k++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	e015      	b.n	80078fa <ROS_Read_Flash+0x1b6>
				{
					memcpy(&PP_Points[i][j][k], (__IO uint32_t *)address, 4);
 80078ce:	4b21      	ldr	r3, [pc, #132]	; (8007954 <ROS_Read_Flash+0x210>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ea:	6812      	ldr	r2, [r2, #0]
 80078ec:	601a      	str	r2, [r3, #0]
					address += 4;
 80078ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f0:	3304      	adds	r3, #4
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
				for(int k = 0; k < 7; k++)
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3301      	adds	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b06      	cmp	r3, #6
 80078fe:	dde6      	ble.n	80078ce <ROS_Read_Flash+0x18a>
			for(int j = 0; j < point_num[i]; j++)
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	3301      	adds	r3, #1
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	4b14      	ldr	r3, [pc, #80]	; (8007958 <ROS_Read_Flash+0x214>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	429a      	cmp	r2, r3
 8007916:	dbd7      	blt.n	80078c8 <ROS_Read_Flash+0x184>
		for(int i = 0; i < path_num; i++)
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	3301      	adds	r3, #1
 800791c:	61fb      	str	r3, [r7, #28]
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <ROS_Read_Flash+0x200>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	429a      	cmp	r2, r3
 8007926:	dbcc      	blt.n	80078c2 <ROS_Read_Flash+0x17e>
				}
			}
		}
		int n = 9;
 8007928:	2309      	movs	r3, #9
 800792a:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < path_num; i++)
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e064      	b.n	80079fc <ROS_Read_Flash+0x2b8>
		{
			for(int j = 0; j < point_num[i]; j++)
 8007932:	2300      	movs	r3, #0
 8007934:	60bb      	str	r3, [r7, #8]
 8007936:	e04e      	b.n	80079d6 <ROS_Read_Flash+0x292>
			{
				for(int k = 0; k < 7; k++)
 8007938:	2300      	movs	r3, #0
 800793a:	607b      	str	r3, [r7, #4]
 800793c:	e03b      	b.n	80079b6 <ROS_Read_Flash+0x272>
 800793e:	bf00      	nop
 8007940:	08080004 	.word	0x08080004
 8007944:	20009a00 	.word	0x20009a00
 8007948:	08021e14 	.word	0x08021e14
 800794c:	20007c54 	.word	0x20007c54
 8007950:	200067e4 	.word	0x200067e4
 8007954:	20009468 	.word	0x20009468
 8007958:	2000948c 	.word	0x2000948c
 800795c:	08021e28 	.word	0x08021e28
 8007960:	08021e48 	.word	0x08021e48
				{
					sprintf(data, "\npoint%d[%d] = %.3f;", n, k, PP_Points[i][j][k]);
 8007964:	4b32      	ldr	r3, [pc, #200]	; (8007a30 <ROS_Read_Flash+0x2ec>)
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7f8 fde1 	bl	8000548 <__aeabi_f2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	e9cd 2300 	strd	r2, r3, [sp]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4928      	ldr	r1, [pc, #160]	; (8007a34 <ROS_Read_Flash+0x2f0>)
 8007994:	4828      	ldr	r0, [pc, #160]	; (8007a38 <ROS_Read_Flash+0x2f4>)
 8007996:	f015 ffcb 	bl	801d930 <siprintf>
					HAL_UART_Transmit(&huart5, data, strlen(data), HAL_MAX_DELAY);
 800799a:	4827      	ldr	r0, [pc, #156]	; (8007a38 <ROS_Read_Flash+0x2f4>)
 800799c:	f7f8 fc18 	bl	80001d0 <strlen>
 80079a0:	4603      	mov	r3, r0
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079a8:	4923      	ldr	r1, [pc, #140]	; (8007a38 <ROS_Read_Flash+0x2f4>)
 80079aa:	4824      	ldr	r0, [pc, #144]	; (8007a3c <ROS_Read_Flash+0x2f8>)
 80079ac:	f010 fb89 	bl	80180c2 <HAL_UART_Transmit>
				for(int k = 0; k < 7; k++)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3301      	adds	r3, #1
 80079b4:	607b      	str	r3, [r7, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b06      	cmp	r3, #6
 80079ba:	ddd3      	ble.n	8007964 <ROS_Read_Flash+0x220>
				}
				HAL_UART_Transmit(&huart5, (uint8_t*)"\n", 1, HAL_MAX_DELAY);
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079c0:	2201      	movs	r2, #1
 80079c2:	491f      	ldr	r1, [pc, #124]	; (8007a40 <ROS_Read_Flash+0x2fc>)
 80079c4:	481d      	ldr	r0, [pc, #116]	; (8007a3c <ROS_Read_Flash+0x2f8>)
 80079c6:	f010 fb7c 	bl	80180c2 <HAL_UART_Transmit>
				n ++;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3301      	adds	r3, #1
 80079ce:	613b      	str	r3, [r7, #16]
			for(int j = 0; j < point_num[i]; j++)
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <ROS_Read_Flash+0x300>)
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	dba7      	blt.n	8007938 <ROS_Read_Flash+0x1f4>
			}
			HAL_UART_Transmit(&huart5, (uint8_t*)"//next path", 1, HAL_MAX_DELAY);
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ec:	2201      	movs	r2, #1
 80079ee:	4916      	ldr	r1, [pc, #88]	; (8007a48 <ROS_Read_Flash+0x304>)
 80079f0:	4812      	ldr	r0, [pc, #72]	; (8007a3c <ROS_Read_Flash+0x2f8>)
 80079f2:	f010 fb66 	bl	80180c2 <HAL_UART_Transmit>
		for(int i = 0; i < path_num; i++)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <ROS_Read_Flash+0x308>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	db95      	blt.n	8007932 <ROS_Read_Flash+0x1ee>
	else
	{
		sprintf((char*)ROS_buff, "No memory in flash");
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
	}
}
 8007a06:	e00e      	b.n	8007a26 <ROS_Read_Flash+0x2e2>
		sprintf((char*)ROS_buff, "No memory in flash");
 8007a08:	4911      	ldr	r1, [pc, #68]	; (8007a50 <ROS_Read_Flash+0x30c>)
 8007a0a:	4812      	ldr	r0, [pc, #72]	; (8007a54 <ROS_Read_Flash+0x310>)
 8007a0c:	f015 ff90 	bl	801d930 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, strlen((char*)ROS_buff), HAL_MAX_DELAY);
 8007a10:	4810      	ldr	r0, [pc, #64]	; (8007a54 <ROS_Read_Flash+0x310>)
 8007a12:	f7f8 fbdd 	bl	80001d0 <strlen>
 8007a16:	4603      	mov	r3, r0
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a1e:	490d      	ldr	r1, [pc, #52]	; (8007a54 <ROS_Read_Flash+0x310>)
 8007a20:	4806      	ldr	r0, [pc, #24]	; (8007a3c <ROS_Read_Flash+0x2f8>)
 8007a22:	f010 fb4e 	bl	80180c2 <HAL_UART_Transmit>
}
 8007a26:	bf00      	nop
 8007a28:	373c      	adds	r7, #60	; 0x3c
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd90      	pop	{r4, r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20009468 	.word	0x20009468
 8007a34:	08021e4c 	.word	0x08021e4c
 8007a38:	20006948 	.word	0x20006948
 8007a3c:	200067e4 	.word	0x200067e4
 8007a40:	08021e48 	.word	0x08021e48
 8007a44:	2000948c 	.word	0x2000948c
 8007a48:	08021e64 	.word	0x08021e64
 8007a4c:	20009a00 	.word	0x20009a00
 8007a50:	08021e70 	.word	0x08021e70
 8007a54:	20007c54 	.word	0x20007c54

08007a58 <ROS_Register>:
/*
 * Once the testing path is satisfied, calling this function will register the path in PP_Points
 * Only registered path can be run through RNSPPstart(PP_Points[counter])
 */
void ROS_Register(void)
{
 8007a58:	b590      	push	{r4, r7, lr}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
	path_num++;
 8007a5e:	4b84      	ldr	r3, [pc, #528]	; (8007c70 <ROS_Register+0x218>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a82      	ldr	r2, [pc, #520]	; (8007c70 <ROS_Register+0x218>)
 8007a66:	6013      	str	r3, [r2, #0]
	if(path_num > 1)
 8007a68:	4b81      	ldr	r3, [pc, #516]	; (8007c70 <ROS_Register+0x218>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	dd46      	ble.n	8007afe <ROS_Register+0xa6>
	{
		PP_Points = (float***)realloc(PP_Points, path_num * sizeof(float**));
 8007a70:	4b80      	ldr	r3, [pc, #512]	; (8007c74 <ROS_Register+0x21c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a7e      	ldr	r2, [pc, #504]	; (8007c70 <ROS_Register+0x218>)
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	0092      	lsls	r2, r2, #2
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f015 fea1 	bl	801d7c4 <realloc>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4a7b      	ldr	r2, [pc, #492]	; (8007c74 <ROS_Register+0x21c>)
 8007a86:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 8007a88:	4b7b      	ldr	r3, [pc, #492]	; (8007c78 <ROS_Register+0x220>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a78      	ldr	r2, [pc, #480]	; (8007c70 <ROS_Register+0x218>)
 8007a8e:	6812      	ldr	r2, [r2, #0]
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	4611      	mov	r1, r2
 8007a94:	4618      	mov	r0, r3
 8007a96:	f015 fe95 	bl	801d7c4 <realloc>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	4a76      	ldr	r2, [pc, #472]	; (8007c78 <ROS_Register+0x220>)
 8007a9e:	6013      	str	r3, [r2, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8007aa0:	4b76      	ldr	r3, [pc, #472]	; (8007c7c <ROS_Register+0x224>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0099      	lsls	r1, r3, #2
 8007aa6:	4b73      	ldr	r3, [pc, #460]	; (8007c74 <ROS_Register+0x21c>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b71      	ldr	r3, [pc, #452]	; (8007c70 <ROS_Register+0x218>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	18d4      	adds	r4, r2, r3
 8007ab8:	4608      	mov	r0, r1
 8007aba:	f014 ff39 	bl	801c930 <malloc>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	e014      	b.n	8007af2 <ROS_Register+0x9a>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 8007ac8:	4b6a      	ldr	r3, [pc, #424]	; (8007c74 <ROS_Register+0x21c>)
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <ROS_Register+0x218>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	18d4      	adds	r4, r2, r3
 8007ae2:	201c      	movs	r0, #28
 8007ae4:	f014 ff24 	bl	801c930 <malloc>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3301      	adds	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]
 8007af2:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <ROS_Register+0x224>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	dbe5      	blt.n	8007ac8 <ROS_Register+0x70>
 8007afc:	e045      	b.n	8007b8a <ROS_Register+0x132>
		}
	}
	else if(path_num == 1)
 8007afe:	4b5c      	ldr	r3, [pc, #368]	; (8007c70 <ROS_Register+0x218>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d141      	bne.n	8007b8a <ROS_Register+0x132>
	{
		PP_Points = (float***)malloc(path_num * sizeof(float**));
 8007b06:	4b5a      	ldr	r3, [pc, #360]	; (8007c70 <ROS_Register+0x218>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f014 ff0f 	bl	801c930 <malloc>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	4b57      	ldr	r3, [pc, #348]	; (8007c74 <ROS_Register+0x21c>)
 8007b18:	601a      	str	r2, [r3, #0]
		point_num = (int*)malloc(path_num * sizeof(int));
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <ROS_Register+0x218>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f014 ff05 	bl	801c930 <malloc>
 8007b26:	4603      	mov	r3, r0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <ROS_Register+0x220>)
 8007b2c:	601a      	str	r2, [r3, #0]

		PP_Points[path_num - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8007b2e:	4b53      	ldr	r3, [pc, #332]	; (8007c7c <ROS_Register+0x224>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	0099      	lsls	r1, r3, #2
 8007b34:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <ROS_Register+0x21c>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b4d      	ldr	r3, [pc, #308]	; (8007c70 <ROS_Register+0x218>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b40:	3b01      	subs	r3, #1
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	18d4      	adds	r4, r2, r3
 8007b46:	4608      	mov	r0, r1
 8007b48:	f014 fef2 	bl	801c930 <malloc>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	e014      	b.n	8007b80 <ROS_Register+0x128>
		{
			PP_Points[path_num - 1][i] = (float*)malloc(7 * sizeof(float));
 8007b56:	4b47      	ldr	r3, [pc, #284]	; (8007c74 <ROS_Register+0x21c>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b45      	ldr	r3, [pc, #276]	; (8007c70 <ROS_Register+0x218>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	3b01      	subs	r3, #1
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	18d4      	adds	r4, r2, r3
 8007b70:	201c      	movs	r0, #28
 8007b72:	f014 fedd 	bl	801c930 <malloc>
 8007b76:	4603      	mov	r3, r0
 8007b78:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	4b3e      	ldr	r3, [pc, #248]	; (8007c7c <ROS_Register+0x224>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	dbe5      	blt.n	8007b56 <ROS_Register+0xfe>
		}
	}

	point_num[path_num - 1] = test_point_num;
 8007b8a:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <ROS_Register+0x220>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4b38      	ldr	r3, [pc, #224]	; (8007c70 <ROS_Register+0x218>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b96:	3b01      	subs	r3, #1
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4a37      	ldr	r2, [pc, #220]	; (8007c7c <ROS_Register+0x224>)
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < test_point_num; i++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e027      	b.n	8007bf8 <ROS_Register+0x1a0>
	{
		for(int j = 0; j < 7; j++)
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	e01e      	b.n	8007bec <ROS_Register+0x194>
		{
			PP_Points[path_num - 1][i][j] = test_points[i][j];
 8007bae:	4b34      	ldr	r3, [pc, #208]	; (8007c80 <ROS_Register+0x228>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <ROS_Register+0x21c>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <ROS_Register+0x218>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	6819      	ldr	r1, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	440b      	add	r3, r1
 8007be2:	6812      	ldr	r2, [r2, #0]
 8007be4:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 7; j++)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60bb      	str	r3, [r7, #8]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b06      	cmp	r3, #6
 8007bf0:	dddd      	ble.n	8007bae <ROS_Register+0x156>
	for(int i = 0; i < test_point_num; i++)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	4b20      	ldr	r3, [pc, #128]	; (8007c7c <ROS_Register+0x224>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	dbd2      	blt.n	8007ba8 <ROS_Register+0x150>
		}
	}

	for(int i = 0; i < test_point_num; i++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	607b      	str	r3, [r7, #4]
 8007c06:	e023      	b.n	8007c50 <ROS_Register+0x1f8>
	{
		for(int j = 0; j < 7; j++)
 8007c08:	2300      	movs	r3, #0
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	e01a      	b.n	8007c44 <ROS_Register+0x1ec>
		{
			HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[path_num - 1][i][j], 4, HAL_MAX_DELAY);
 8007c0e:	4b1d      	ldr	r3, [pc, #116]	; (8007c84 <ROS_Register+0x22c>)
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	4b18      	ldr	r3, [pc, #96]	; (8007c74 <ROS_Register+0x21c>)
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <ROS_Register+0x218>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	18d1      	adds	r1, r2, r3
 8007c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c38:	2204      	movs	r2, #4
 8007c3a:	f010 fa42 	bl	80180c2 <HAL_UART_Transmit>
		for(int j = 0; j < 7; j++)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	3301      	adds	r3, #1
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b06      	cmp	r3, #6
 8007c48:	dde1      	ble.n	8007c0e <ROS_Register+0x1b6>
	for(int i = 0; i < test_point_num; i++)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	607b      	str	r3, [r7, #4]
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <ROS_Register+0x224>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	dbd6      	blt.n	8007c08 <ROS_Register+0x1b0>
		}
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <ROS_Register+0x22c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2207      	movs	r2, #7
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <ROS_Register+0x230>)
 8007c62:	4618      	mov	r0, r3
 8007c64:	f010 fac6 	bl	80181f4 <HAL_UART_Receive_IT>
}
 8007c68:	bf00      	nop
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	20009a00 	.word	0x20009a00
 8007c74:	20009468 	.word	0x20009468
 8007c78:	2000948c 	.word	0x2000948c
 8007c7c:	20009484 	.word	0x20009484
 8007c80:	20009e9c 	.word	0x20009e9c
 8007c84:	20009c00 	.word	0x20009c00
 8007c88:	20007c54 	.word	0x20007c54

08007c8c <ROS_Delete>:
 * Delete specific path in PP_Points
 * User not able to run the path again
 * Can only delete registered path
 */
void ROS_Delete(int path_index)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	path_num--;
 8007c94:	4b62      	ldr	r3, [pc, #392]	; (8007e20 <ROS_Delete+0x194>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	4a61      	ldr	r2, [pc, #388]	; (8007e20 <ROS_Delete+0x194>)
 8007c9c:	6013      	str	r3, [r2, #0]
	if(path_index - 1 == path_num)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	1e5a      	subs	r2, r3, #1
 8007ca2:	4b5f      	ldr	r3, [pc, #380]	; (8007e20 <ROS_Delete+0x194>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d13e      	bne.n	8007d28 <ROS_Delete+0x9c>
	{
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 8007caa:	4b5e      	ldr	r3, [pc, #376]	; (8007e24 <ROS_Delete+0x198>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a5c      	ldr	r2, [pc, #368]	; (8007e20 <ROS_Delete+0x194>)
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f015 fd84 	bl	801d7c4 <realloc>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	4a59      	ldr	r2, [pc, #356]	; (8007e24 <ROS_Delete+0x198>)
 8007cc0:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]
 8007cc6:	e00d      	b.n	8007ce4 <ROS_Delete+0x58>
		{
			total_point_num += point_num[i];
 8007cc8:	4b56      	ldr	r3, [pc, #344]	; (8007e24 <ROS_Delete+0x198>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	4b54      	ldr	r3, [pc, #336]	; (8007e28 <ROS_Delete+0x19c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4413      	add	r3, r2
 8007cda:	4a53      	ldr	r2, [pc, #332]	; (8007e28 <ROS_Delete+0x19c>)
 8007cdc:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	4b4e      	ldr	r3, [pc, #312]	; (8007e20 <ROS_Delete+0x194>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	dbec      	blt.n	8007cc8 <ROS_Delete+0x3c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 8007cee:	4b4f      	ldr	r3, [pc, #316]	; (8007e2c <ROS_Delete+0x1a0>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4b4d      	ldr	r3, [pc, #308]	; (8007e28 <ROS_Delete+0x19c>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	1a5b      	subs	r3, r3, r1
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f015 fd5e 	bl	801d7c4 <realloc>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4a48      	ldr	r2, [pc, #288]	; (8007e2c <ROS_Delete+0x1a0>)
 8007d0c:	6013      	str	r3, [r2, #0]

		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	4947      	ldr	r1, [pc, #284]	; (8007e30 <ROS_Delete+0x1a4>)
 8007d12:	4848      	ldr	r0, [pc, #288]	; (8007e34 <ROS_Delete+0x1a8>)
 8007d14:	f015 fe0c 	bl	801d930 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
 8007d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1c:	2210      	movs	r2, #16
 8007d1e:	4945      	ldr	r1, [pc, #276]	; (8007e34 <ROS_Delete+0x1a8>)
 8007d20:	4845      	ldr	r0, [pc, #276]	; (8007e38 <ROS_Delete+0x1ac>)
 8007d22:	f010 f9ce 	bl	80180c2 <HAL_UART_Transmit>
 8007d26:	e06f      	b.n	8007e08 <ROS_Delete+0x17c>
	}

	else
	{
		for(int i = path_index - 1; i < path_num; i++)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	613b      	str	r3, [r7, #16]
 8007d2e:	e00f      	b.n	8007d50 <ROS_Delete+0xc4>
		{
			point_num[i] = point_num[i + 1];
 8007d30:	4b3c      	ldr	r3, [pc, #240]	; (8007e24 <ROS_Delete+0x198>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	3301      	adds	r3, #1
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	441a      	add	r2, r3
 8007d3c:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <ROS_Delete+0x198>)
 8007d3e:	6819      	ldr	r1, [r3, #0]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	6812      	ldr	r2, [r2, #0]
 8007d48:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	4b33      	ldr	r3, [pc, #204]	; (8007e20 <ROS_Delete+0x194>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	dbea      	blt.n	8007d30 <ROS_Delete+0xa4>
		}
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 8007d5a:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <ROS_Delete+0x198>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a30      	ldr	r2, [pc, #192]	; (8007e20 <ROS_Delete+0x194>)
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f015 fd2c 	bl	801d7c4 <realloc>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	4a2d      	ldr	r2, [pc, #180]	; (8007e24 <ROS_Delete+0x198>)
 8007d70:	6013      	str	r3, [r2, #0]

		for(int i = path_index - 1; i < path_num; i++)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e00f      	b.n	8007d9a <ROS_Delete+0x10e>
		{
			PP_Points[i] = PP_Points[i + 1];
 8007d7a:	4b2c      	ldr	r3, [pc, #176]	; (8007e2c <ROS_Delete+0x1a0>)
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3301      	adds	r3, #1
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	441a      	add	r2, r3
 8007d86:	4b29      	ldr	r3, [pc, #164]	; (8007e2c <ROS_Delete+0x1a0>)
 8007d88:	6819      	ldr	r1, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	440b      	add	r3, r1
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	601a      	str	r2, [r3, #0]
		for(int i = path_index - 1; i < path_num; i++)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4b21      	ldr	r3, [pc, #132]	; (8007e20 <ROS_Delete+0x194>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	dbea      	blt.n	8007d7a <ROS_Delete+0xee>
		}

		for(int i = 0; i < path_num; i++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	60bb      	str	r3, [r7, #8]
 8007da8:	e00d      	b.n	8007dc6 <ROS_Delete+0x13a>
		{
			total_point_num += point_num[i];
 8007daa:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <ROS_Delete+0x198>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b1c      	ldr	r3, [pc, #112]	; (8007e28 <ROS_Delete+0x19c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4413      	add	r3, r2
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	; (8007e28 <ROS_Delete+0x19c>)
 8007dbe:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60bb      	str	r3, [r7, #8]
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <ROS_Delete+0x194>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	dbec      	blt.n	8007daa <ROS_Delete+0x11e>
		}

		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 8007dd0:	4b16      	ldr	r3, [pc, #88]	; (8007e2c <ROS_Delete+0x1a0>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <ROS_Delete+0x19c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	1a5b      	subs	r3, r3, r1
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f015 fced 	bl	801d7c4 <realloc>
 8007dea:	4603      	mov	r3, r0
 8007dec:	4a0f      	ldr	r2, [pc, #60]	; (8007e2c <ROS_Delete+0x1a0>)
 8007dee:	6013      	str	r3, [r2, #0]
		sprintf((char*)ROS_buff, "Path index is %d\n", path_index);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	490f      	ldr	r1, [pc, #60]	; (8007e30 <ROS_Delete+0x1a4>)
 8007df4:	480f      	ldr	r0, [pc, #60]	; (8007e34 <ROS_Delete+0x1a8>)
 8007df6:	f015 fd9b 	bl	801d930 <siprintf>
		HAL_UART_Transmit(&huart5, ROS_buff, 16, HAL_MAX_DELAY);
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dfe:	2210      	movs	r2, #16
 8007e00:	490c      	ldr	r1, [pc, #48]	; (8007e34 <ROS_Delete+0x1a8>)
 8007e02:	480d      	ldr	r0, [pc, #52]	; (8007e38 <ROS_Delete+0x1ac>)
 8007e04:	f010 f95d 	bl	80180c2 <HAL_UART_Transmit>
	}

	HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <ROS_Delete+0x1b0>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2207      	movs	r2, #7
 8007e0e:	4909      	ldr	r1, [pc, #36]	; (8007e34 <ROS_Delete+0x1a8>)
 8007e10:	4618      	mov	r0, r3
 8007e12:	f010 f9ef 	bl	80181f4 <HAL_UART_Receive_IT>

}
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20009a00 	.word	0x20009a00
 8007e24:	2000948c 	.word	0x2000948c
 8007e28:	20009600 	.word	0x20009600
 8007e2c:	20009468 	.word	0x20009468
 8007e30:	08021e84 	.word	0x08021e84
 8007e34:	20007c54 	.word	0x20007c54
 8007e38:	200067e4 	.word	0x200067e4
 8007e3c:	20009c00 	.word	0x20009c00

08007e40 <ROS_DeleteAll>:
/*
 * Delete all existing registered path
 * Usually used to reset all path registered
 */
void ROS_DeleteAll(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
	for(int i = 0; i < path_num; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e01e      	b.n	8007e8a <ROS_DeleteAll+0x4a>
	{
		for(int j = 0; j < point_num[i]; j++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]
 8007e50:	e00f      	b.n	8007e72 <ROS_DeleteAll+0x32>
		{
			free(PP_Points[i][j]);
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <ROS_DeleteAll+0xa4>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f014 fd6a 	bl	801c940 <free>
		for(int j = 0; j < point_num[i]; j++)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	4b1d      	ldr	r3, [pc, #116]	; (8007ee8 <ROS_DeleteAll+0xa8>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	dbe6      	blt.n	8007e52 <ROS_DeleteAll+0x12>
	for(int i = 0; i < path_num; i++)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3301      	adds	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	4b18      	ldr	r3, [pc, #96]	; (8007eec <ROS_DeleteAll+0xac>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	dbdb      	blt.n	8007e4c <ROS_DeleteAll+0xc>
		}
	}

	for(int i = 0; i < path_num; i++)
 8007e94:	2300      	movs	r3, #0
 8007e96:	607b      	str	r3, [r7, #4]
 8007e98:	e00b      	b.n	8007eb2 <ROS_DeleteAll+0x72>
	{
		free(PP_Points[i]);
 8007e9a:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <ROS_DeleteAll+0xa4>)
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f014 fd4a 	bl	801c940 <free>
	for(int i = 0; i < path_num; i++)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <ROS_DeleteAll+0xac>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	dbee      	blt.n	8007e9a <ROS_DeleteAll+0x5a>
	}

	free(PP_Points);
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <ROS_DeleteAll+0xa4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f014 fd3d 	bl	801c940 <free>
	free(point_num);
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <ROS_DeleteAll+0xa8>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f014 fd38 	bl	801c940 <free>

	ROS_Init(ROS_UART);
 8007ed0:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <ROS_DeleteAll+0xb0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff f817 	bl	8006f08 <ROS_Init>
}
 8007eda:	bf00      	nop
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20009468 	.word	0x20009468
 8007ee8:	2000948c 	.word	0x2000948c
 8007eec:	20009a00 	.word	0x20009a00
 8007ef0:	20009c00 	.word	0x20009c00

08007ef4 <ROS_EditPath>:
 * Allow user to edit registered path with different number of points than original ones
 * After satisfied the testing path, it will overwrite the desired path in PP_Points
 * Call RNSPPStart(PP_Points[${editing_index}] to see changes
 */
void ROS_EditPath(void)
{
 8007ef4:	b590      	push	{r4, r7, lr}
 8007ef6:	b095      	sub	sp, #84	; 0x54
 8007ef8:	af00      	add	r7, sp, #0
	total_point_num = 0;
 8007efa:	4b99      	ldr	r3, [pc, #612]	; (8008160 <ROS_EditPath+0x26c>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	4b98      	ldr	r3, [pc, #608]	; (8008164 <ROS_EditPath+0x270>)
 8007f02:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8007f06:	461a      	mov	r2, r3
	memcpy(&edit_index, &ROS_buff[3], 4);
 8007f08:	4b97      	ldr	r3, [pc, #604]	; (8008168 <ROS_EditPath+0x274>)
 8007f0a:	601a      	str	r2, [r3, #0]

	if(edit_index == path_num)
 8007f0c:	4b96      	ldr	r3, [pc, #600]	; (8008168 <ROS_EditPath+0x274>)
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4b96      	ldr	r3, [pc, #600]	; (800816c <ROS_EditPath+0x278>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d137      	bne.n	8007f88 <ROS_EditPath+0x94>
	{
		/*
		 Just delete the last path and require user to register again
		 */
		path_num--;
 8007f18:	4b94      	ldr	r3, [pc, #592]	; (800816c <ROS_EditPath+0x278>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	4a93      	ldr	r2, [pc, #588]	; (800816c <ROS_EditPath+0x278>)
 8007f20:	6013      	str	r3, [r2, #0]
		point_num = (int*)realloc(point_num, path_num * sizeof(int));
 8007f22:	4b93      	ldr	r3, [pc, #588]	; (8008170 <ROS_EditPath+0x27c>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a91      	ldr	r2, [pc, #580]	; (800816c <ROS_EditPath+0x278>)
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	0092      	lsls	r2, r2, #2
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f015 fc48 	bl	801d7c4 <realloc>
 8007f34:	4603      	mov	r3, r0
 8007f36:	4a8e      	ldr	r2, [pc, #568]	; (8008170 <ROS_EditPath+0x27c>)
 8007f38:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f3e:	e00d      	b.n	8007f5c <ROS_EditPath+0x68>
		{
			total_point_num += point_num[i];
 8007f40:	4b8b      	ldr	r3, [pc, #556]	; (8008170 <ROS_EditPath+0x27c>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	4b84      	ldr	r3, [pc, #528]	; (8008160 <ROS_EditPath+0x26c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4413      	add	r3, r2
 8007f52:	4a83      	ldr	r2, [pc, #524]	; (8008160 <ROS_EditPath+0x26c>)
 8007f54:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	3301      	adds	r3, #1
 8007f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f5c:	4b83      	ldr	r3, [pc, #524]	; (800816c <ROS_EditPath+0x278>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f62:	429a      	cmp	r2, r3
 8007f64:	dbec      	blt.n	8007f40 <ROS_EditPath+0x4c>
		}
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 8007f66:	4b83      	ldr	r3, [pc, #524]	; (8008174 <ROS_EditPath+0x280>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4b7d      	ldr	r3, [pc, #500]	; (8008160 <ROS_EditPath+0x26c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	460b      	mov	r3, r1
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	1a5b      	subs	r3, r3, r1
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f015 fc22 	bl	801d7c4 <realloc>
 8007f80:	4603      	mov	r3, r0
 8007f82:	4a7c      	ldr	r2, [pc, #496]	; (8008174 <ROS_EditPath+0x280>)
 8007f84:	6013      	str	r3, [r2, #0]
//		}
//
//		free(Edit_Buff);
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
	}
}
 8007f86:	e21a      	b.n	80083be <ROS_EditPath+0x4ca>
		edit_offset = path_num - edit_index;
 8007f88:	4b78      	ldr	r3, [pc, #480]	; (800816c <ROS_EditPath+0x278>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b76      	ldr	r3, [pc, #472]	; (8008168 <ROS_EditPath+0x274>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	4a79      	ldr	r2, [pc, #484]	; (8008178 <ROS_EditPath+0x284>)
 8007f94:	6013      	str	r3, [r2, #0]
		Edit_Buff = (float***)malloc(edit_offset * sizeof(float**));
 8007f96:	4b78      	ldr	r3, [pc, #480]	; (8008178 <ROS_EditPath+0x284>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f014 fcc7 	bl	801c930 <malloc>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	4b75      	ldr	r3, [pc, #468]	; (800817c <ROS_EditPath+0x288>)
 8007fa8:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < edit_offset ; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	e016      	b.n	8007fde <ROS_EditPath+0xea>
			Edit_Buff[i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 8007fb0:	4b6f      	ldr	r3, [pc, #444]	; (8008170 <ROS_EditPath+0x27c>)
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	4b6c      	ldr	r3, [pc, #432]	; (8008168 <ROS_EditPath+0x274>)
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fba:	440b      	add	r3, r1
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	0099      	lsls	r1, r3, #2
 8007fc4:	4b6d      	ldr	r3, [pc, #436]	; (800817c <ROS_EditPath+0x288>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	18d4      	adds	r4, r2, r3
 8007fce:	4608      	mov	r0, r1
 8007fd0:	f014 fcae 	bl	801c930 <malloc>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset ; i++)
 8007fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fda:	3301      	adds	r3, #1
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fde:	4b66      	ldr	r3, [pc, #408]	; (8008178 <ROS_EditPath+0x284>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	dbe3      	blt.n	8007fb0 <ROS_EditPath+0xbc>
		for(int i = 0; i < edit_offset; i++)
 8007fe8:	2300      	movs	r3, #0
 8007fea:	647b      	str	r3, [r7, #68]	; 0x44
 8007fec:	e022      	b.n	8008034 <ROS_EditPath+0x140>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8007fee:	2300      	movs	r3, #0
 8007ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ff2:	e010      	b.n	8008016 <ROS_EditPath+0x122>
				Edit_Buff[i][j] = (float*)malloc(7 * sizeof(float));
 8007ff4:	4b61      	ldr	r3, [pc, #388]	; (800817c <ROS_EditPath+0x288>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	18d4      	adds	r4, r2, r3
 8008006:	201c      	movs	r0, #28
 8008008:	f014 fc92 	bl	801c930 <malloc>
 800800c:	4603      	mov	r3, r0
 800800e:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008012:	3301      	adds	r3, #1
 8008014:	643b      	str	r3, [r7, #64]	; 0x40
 8008016:	4b56      	ldr	r3, [pc, #344]	; (8008170 <ROS_EditPath+0x27c>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b53      	ldr	r3, [pc, #332]	; (8008168 <ROS_EditPath+0x274>)
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008020:	440b      	add	r3, r1
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800802a:	429a      	cmp	r2, r3
 800802c:	dbe2      	blt.n	8007ff4 <ROS_EditPath+0x100>
		for(int i = 0; i < edit_offset; i++)
 800802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008030:	3301      	adds	r3, #1
 8008032:	647b      	str	r3, [r7, #68]	; 0x44
 8008034:	4b50      	ldr	r3, [pc, #320]	; (8008178 <ROS_EditPath+0x284>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800803a:	429a      	cmp	r2, r3
 800803c:	dbd7      	blt.n	8007fee <ROS_EditPath+0xfa>
		for(int i = 0; i < edit_offset; i++)
 800803e:	2300      	movs	r3, #0
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008042:	e03c      	b.n	80080be <ROS_EditPath+0x1ca>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008044:	2300      	movs	r3, #0
 8008046:	63bb      	str	r3, [r7, #56]	; 0x38
 8008048:	e02a      	b.n	80080a0 <ROS_EditPath+0x1ac>
				for(int k = 0; k < 7; k++)
 800804a:	2300      	movs	r3, #0
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	e021      	b.n	8008094 <ROS_EditPath+0x1a0>
					Edit_Buff[i][j][k] = PP_Points[edit_index + i][j][k];
 8008050:	4b48      	ldr	r3, [pc, #288]	; (8008174 <ROS_EditPath+0x280>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	4b44      	ldr	r3, [pc, #272]	; (8008168 <ROS_EditPath+0x274>)
 8008056:	6819      	ldr	r1, [r3, #0]
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	440b      	add	r3, r1
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	441a      	add	r2, r3
 8008070:	4b42      	ldr	r3, [pc, #264]	; (800817c <ROS_EditPath+0x288>)
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	6819      	ldr	r1, [r3, #0]
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008090:	3301      	adds	r3, #1
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	2b06      	cmp	r3, #6
 8008098:	ddda      	ble.n	8008050 <ROS_EditPath+0x15c>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	3301      	adds	r3, #1
 800809e:	63bb      	str	r3, [r7, #56]	; 0x38
 80080a0:	4b33      	ldr	r3, [pc, #204]	; (8008170 <ROS_EditPath+0x27c>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b30      	ldr	r3, [pc, #192]	; (8008168 <ROS_EditPath+0x274>)
 80080a6:	6819      	ldr	r1, [r3, #0]
 80080a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080aa:	440b      	add	r3, r1
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dbc8      	blt.n	800804a <ROS_EditPath+0x156>
		for(int i = 0; i < edit_offset; i++)
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	3301      	adds	r3, #1
 80080bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <ROS_EditPath+0x284>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c4:	429a      	cmp	r2, r3
 80080c6:	dbbd      	blt.n	8008044 <ROS_EditPath+0x150>
		for(int i = 0; i < path_num; i++)
 80080c8:	2300      	movs	r3, #0
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
 80080cc:	e01f      	b.n	800810e <ROS_EditPath+0x21a>
			if(i % edit_index == 0)
 80080ce:	4b26      	ldr	r3, [pc, #152]	; (8008168 <ROS_EditPath+0x274>)
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80080d8:	fb02 f201 	mul.w	r2, r2, r1
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <ROS_EditPath+0x1fe>
				total_point_num += test_point_num;
 80080e2:	4b1f      	ldr	r3, [pc, #124]	; (8008160 <ROS_EditPath+0x26c>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b26      	ldr	r3, [pc, #152]	; (8008180 <ROS_EditPath+0x28c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	4a1c      	ldr	r2, [pc, #112]	; (8008160 <ROS_EditPath+0x26c>)
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	e00a      	b.n	8008108 <ROS_EditPath+0x214>
				total_point_num += point_num[i];
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <ROS_EditPath+0x27c>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b18      	ldr	r3, [pc, #96]	; (8008160 <ROS_EditPath+0x26c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4413      	add	r3, r2
 8008104:	4a16      	ldr	r2, [pc, #88]	; (8008160 <ROS_EditPath+0x26c>)
 8008106:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < path_num; i++)
 8008108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810a:	3301      	adds	r3, #1
 800810c:	633b      	str	r3, [r7, #48]	; 0x30
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <ROS_EditPath+0x278>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008114:	429a      	cmp	r2, r3
 8008116:	dbda      	blt.n	80080ce <ROS_EditPath+0x1da>
		PP_Points = (float***)realloc(PP_Points, total_point_num * 7 * sizeof(float));
 8008118:	4b16      	ldr	r3, [pc, #88]	; (8008174 <ROS_EditPath+0x280>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <ROS_EditPath+0x26c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4619      	mov	r1, r3
 8008122:	460b      	mov	r3, r1
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	1a5b      	subs	r3, r3, r1
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f015 fb49 	bl	801d7c4 <realloc>
 8008132:	4603      	mov	r3, r0
 8008134:	4a0f      	ldr	r2, [pc, #60]	; (8008174 <ROS_EditPath+0x280>)
 8008136:	6013      	str	r3, [r2, #0]
		PP_Points[edit_index - 1] = (float**)malloc(test_point_num * sizeof(float*));
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <ROS_EditPath+0x28c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	0099      	lsls	r1, r3, #2
 800813e:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <ROS_EditPath+0x280>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b09      	ldr	r3, [pc, #36]	; (8008168 <ROS_EditPath+0x274>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800814a:	3b01      	subs	r3, #1
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	18d4      	adds	r4, r2, r3
 8008150:	4608      	mov	r0, r1
 8008152:	f014 fbed 	bl	801c930 <malloc>
 8008156:	4603      	mov	r3, r0
 8008158:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 800815a:	2300      	movs	r3, #0
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800815e:	e026      	b.n	80081ae <ROS_EditPath+0x2ba>
 8008160:	20009600 	.word	0x20009600
 8008164:	20007c54 	.word	0x20007c54
 8008168:	200098d4 	.word	0x200098d4
 800816c:	20009a00 	.word	0x20009a00
 8008170:	2000948c 	.word	0x2000948c
 8008174:	20009468 	.word	0x20009468
 8008178:	2000a714 	.word	0x2000a714
 800817c:	20007050 	.word	0x20007050
 8008180:	20009484 	.word	0x20009484
			PP_Points[edit_index - 1][i] = (float*)malloc(7 * sizeof(float));
 8008184:	4b90      	ldr	r3, [pc, #576]	; (80083c8 <ROS_EditPath+0x4d4>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	4b90      	ldr	r3, [pc, #576]	; (80083cc <ROS_EditPath+0x4d8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008190:	3b01      	subs	r3, #1
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	18d4      	adds	r4, r2, r3
 800819e:	201c      	movs	r0, #28
 80081a0:	f014 fbc6 	bl	801c930 <malloc>
 80081a4:	4603      	mov	r3, r0
 80081a6:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < test_point_num; i++)
 80081a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081aa:	3301      	adds	r3, #1
 80081ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ae:	4b88      	ldr	r3, [pc, #544]	; (80083d0 <ROS_EditPath+0x4dc>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b4:	429a      	cmp	r2, r3
 80081b6:	dbe5      	blt.n	8008184 <ROS_EditPath+0x290>
		for(int i = 0; i < test_point_num; i++)
 80081b8:	2300      	movs	r3, #0
 80081ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80081bc:	e027      	b.n	800820e <ROS_EditPath+0x31a>
			for(int j = 0; j < 7; j++)
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
 80081c2:	e01e      	b.n	8008202 <ROS_EditPath+0x30e>
				PP_Points[edit_index - 1][i][j] = test_points[i][j];
 80081c4:	4b83      	ldr	r3, [pc, #524]	; (80083d4 <ROS_EditPath+0x4e0>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	441a      	add	r2, r3
 80081d6:	4b7c      	ldr	r3, [pc, #496]	; (80083c8 <ROS_EditPath+0x4d4>)
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	4b7c      	ldr	r3, [pc, #496]	; (80083cc <ROS_EditPath+0x4d8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081e2:	3b01      	subs	r3, #1
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	6819      	ldr	r1, [r3, #0]
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	6812      	ldr	r2, [r2, #0]
 80081fa:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < 7; j++)
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	3301      	adds	r3, #1
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	2b06      	cmp	r3, #6
 8008206:	dddd      	ble.n	80081c4 <ROS_EditPath+0x2d0>
		for(int i = 0; i < test_point_num; i++)
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	3301      	adds	r3, #1
 800820c:	62bb      	str	r3, [r7, #40]	; 0x28
 800820e:	4b70      	ldr	r3, [pc, #448]	; (80083d0 <ROS_EditPath+0x4dc>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008214:	429a      	cmp	r2, r3
 8008216:	dbd2      	blt.n	80081be <ROS_EditPath+0x2ca>
		for(int i = 0; i < edit_offset; i++)
 8008218:	2300      	movs	r3, #0
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	e018      	b.n	8008250 <ROS_EditPath+0x35c>
			PP_Points[edit_index + i] = (float**)malloc(point_num[edit_index + i] * sizeof(float*));
 800821e:	4b6e      	ldr	r3, [pc, #440]	; (80083d8 <ROS_EditPath+0x4e4>)
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b6a      	ldr	r3, [pc, #424]	; (80083cc <ROS_EditPath+0x4d8>)
 8008224:	6819      	ldr	r1, [r3, #0]
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	440b      	add	r3, r1
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	0098      	lsls	r0, r3, #2
 8008232:	4b65      	ldr	r3, [pc, #404]	; (80083c8 <ROS_EditPath+0x4d4>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b65      	ldr	r3, [pc, #404]	; (80083cc <ROS_EditPath+0x4d8>)
 8008238:	6819      	ldr	r1, [r3, #0]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	440b      	add	r3, r1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	18d4      	adds	r4, r2, r3
 8008242:	f014 fb75 	bl	801c930 <malloc>
 8008246:	4603      	mov	r3, r0
 8008248:	6023      	str	r3, [r4, #0]
		for(int i = 0; i < edit_offset; i++)
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	3301      	adds	r3, #1
 800824e:	623b      	str	r3, [r7, #32]
 8008250:	4b62      	ldr	r3, [pc, #392]	; (80083dc <ROS_EditPath+0x4e8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a3a      	ldr	r2, [r7, #32]
 8008256:	429a      	cmp	r2, r3
 8008258:	dbe1      	blt.n	800821e <ROS_EditPath+0x32a>
		for(int i = 0; i < edit_offset; i++)
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	e025      	b.n	80082ac <ROS_EditPath+0x3b8>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008260:	2300      	movs	r3, #0
 8008262:	61bb      	str	r3, [r7, #24]
 8008264:	e013      	b.n	800828e <ROS_EditPath+0x39a>
				PP_Points[edit_index + i][j] = (float*)malloc(7 * sizeof(float));
 8008266:	4b58      	ldr	r3, [pc, #352]	; (80083c8 <ROS_EditPath+0x4d4>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	4b58      	ldr	r3, [pc, #352]	; (80083cc <ROS_EditPath+0x4d8>)
 800826c:	6819      	ldr	r1, [r3, #0]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	440b      	add	r3, r1
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	18d4      	adds	r4, r2, r3
 800827e:	201c      	movs	r0, #28
 8008280:	f014 fb56 	bl	801c930 <malloc>
 8008284:	4603      	mov	r3, r0
 8008286:	6023      	str	r3, [r4, #0]
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	3301      	adds	r3, #1
 800828c:	61bb      	str	r3, [r7, #24]
 800828e:	4b52      	ldr	r3, [pc, #328]	; (80083d8 <ROS_EditPath+0x4e4>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b4e      	ldr	r3, [pc, #312]	; (80083cc <ROS_EditPath+0x4d8>)
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	440b      	add	r3, r1
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	dbdf      	blt.n	8008266 <ROS_EditPath+0x372>
		for(int i = 0; i < edit_offset; i++)
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	3301      	adds	r3, #1
 80082aa:	61fb      	str	r3, [r7, #28]
 80082ac:	4b4b      	ldr	r3, [pc, #300]	; (80083dc <ROS_EditPath+0x4e8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	dbd4      	blt.n	8008260 <ROS_EditPath+0x36c>
		for(int i = 0; i < edit_offset; i++)
 80082b6:	2300      	movs	r3, #0
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	e03c      	b.n	8008336 <ROS_EditPath+0x442>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	e02a      	b.n	8008318 <ROS_EditPath+0x424>
				for(int k = 0; k < 7; k++)
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	e021      	b.n	800830c <ROS_EditPath+0x418>
					PP_Points[edit_index + i][j][k] = Edit_Buff[i][j][k];
 80082c8:	4b45      	ldr	r3, [pc, #276]	; (80083e0 <ROS_EditPath+0x4ec>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	441a      	add	r2, r3
 80082e2:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <ROS_EditPath+0x4d4>)
 80082e4:	6819      	ldr	r1, [r3, #0]
 80082e6:	4b39      	ldr	r3, [pc, #228]	; (80083cc <ROS_EditPath+0x4d8>)
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4403      	add	r3, r0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	6819      	ldr	r1, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	440b      	add	r3, r1
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < 7; k++)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3301      	adds	r3, #1
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b06      	cmp	r3, #6
 8008310:	ddda      	ble.n	80082c8 <ROS_EditPath+0x3d4>
			for(int j = 0; j < point_num[edit_index + i]; j++)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	3301      	adds	r3, #1
 8008316:	613b      	str	r3, [r7, #16]
 8008318:	4b2f      	ldr	r3, [pc, #188]	; (80083d8 <ROS_EditPath+0x4e4>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b2b      	ldr	r3, [pc, #172]	; (80083cc <ROS_EditPath+0x4d8>)
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	440b      	add	r3, r1
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	429a      	cmp	r2, r3
 800832e:	dbc8      	blt.n	80082c2 <ROS_EditPath+0x3ce>
		for(int i = 0; i < edit_offset; i++)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	3301      	adds	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	4b29      	ldr	r3, [pc, #164]	; (80083dc <ROS_EditPath+0x4e8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	429a      	cmp	r2, r3
 800833e:	dbbd      	blt.n	80082bc <ROS_EditPath+0x3c8>
		point_num[edit_index - 1] = test_point_num;
 8008340:	4b25      	ldr	r3, [pc, #148]	; (80083d8 <ROS_EditPath+0x4e4>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	4b21      	ldr	r3, [pc, #132]	; (80083cc <ROS_EditPath+0x4d8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800834c:	3b01      	subs	r3, #1
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	4a1f      	ldr	r2, [pc, #124]	; (80083d0 <ROS_EditPath+0x4dc>)
 8008354:	6812      	ldr	r2, [r2, #0]
 8008356:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < test_point_num; i++)
 8008358:	2300      	movs	r3, #0
 800835a:	60bb      	str	r3, [r7, #8]
 800835c:	e023      	b.n	80083a6 <ROS_EditPath+0x4b2>
			for(int j = 0; j < 7; j++)
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	e01a      	b.n	800839a <ROS_EditPath+0x4a6>
				HAL_UART_Transmit(ROS_UART, (uint8_t*)&PP_Points[edit_index - 1][i][j], 4, HAL_MAX_DELAY);
 8008364:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <ROS_EditPath+0x4f0>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <ROS_EditPath+0x4d4>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <ROS_EditPath+0x4d8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008374:	3b01      	subs	r3, #1
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	4413      	add	r3, r2
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	18d1      	adds	r1, r2, r3
 800838a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800838e:	2204      	movs	r2, #4
 8008390:	f00f fe97 	bl	80180c2 <HAL_UART_Transmit>
			for(int j = 0; j < 7; j++)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3301      	adds	r3, #1
 8008398:	607b      	str	r3, [r7, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b06      	cmp	r3, #6
 800839e:	dde1      	ble.n	8008364 <ROS_EditPath+0x470>
		for(int i = 0; i < test_point_num; i++)
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	3301      	adds	r3, #1
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <ROS_EditPath+0x4dc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	dbd6      	blt.n	800835e <ROS_EditPath+0x46a>
		HAL_UART_Receive_IT(ROS_UART, ROS_buff, 7);
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <ROS_EditPath+0x4f0>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2207      	movs	r2, #7
 80083b6:	490c      	ldr	r1, [pc, #48]	; (80083e8 <ROS_EditPath+0x4f4>)
 80083b8:	4618      	mov	r0, r3
 80083ba:	f00f ff1b 	bl	80181f4 <HAL_UART_Receive_IT>
}
 80083be:	bf00      	nop
 80083c0:	3754      	adds	r7, #84	; 0x54
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd90      	pop	{r4, r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20009468 	.word	0x20009468
 80083cc:	200098d4 	.word	0x200098d4
 80083d0:	20009484 	.word	0x20009484
 80083d4:	20009e9c 	.word	0x20009e9c
 80083d8:	2000948c 	.word	0x2000948c
 80083dc:	2000a714 	.word	0x2000a714
 80083e0:	20007050 	.word	0x20007050
 80083e4:	20009c00 	.word	0x20009c00
 80083e8:	20007c54 	.word	0x20007c54

080083ec <ServoxInit>:
 * 						  					TIM_CHANNEL_3
 * 						  					TIM_CHANNEL_4
 * Function Return		: None
 * Function Example		: ServoInit(&SERVO1, &htim3, GPIOA,GPIO_Pin_6, TIM_CHANNEL_1);
 */
void ServoxInit(SERVO_t* servo, TIM_HandleTypeDef* htimx, GPIO_TypeDef * SERVO_GPIOx,uint16_t SERVO_GPIO_Pin, uint32_t channel){
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08c      	sub	sp, #48	; 0x30
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
 80083f8:	807b      	strh	r3, [r7, #2]

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083fa:	f107 0318 	add.w	r3, r7, #24
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	605a      	str	r2, [r3, #4]
 8008404:	609a      	str	r2, [r3, #8]
 8008406:	60da      	str	r2, [r3, #12]
		TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008408:	f107 0310 	add.w	r3, r7, #16
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	605a      	str	r2, [r3, #4]


		if(htimx == &htim1){
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	4a6d      	ldr	r2, [pc, #436]	; (80085cc <ServoxInit+0x1e0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d106      	bne.n	8008428 <ServoxInit+0x3c>
			htimx->Instance = TIM1;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	4a6c      	ldr	r2, [pc, #432]	; (80085d0 <ServoxInit+0x1e4>)
 800841e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	22a7      	movs	r2, #167	; 0xa7
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	e078      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim2)	{
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4a6a      	ldr	r2, [pc, #424]	; (80085d4 <ServoxInit+0x1e8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d107      	bne.n	8008440 <ServoxInit+0x54>
			htimx->Instance = TIM2;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008436:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2253      	movs	r2, #83	; 0x53
 800843c:	605a      	str	r2, [r3, #4]
 800843e:	e06c      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim3)	{
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4a65      	ldr	r2, [pc, #404]	; (80085d8 <ServoxInit+0x1ec>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d106      	bne.n	8008456 <ServoxInit+0x6a>
			htimx->Instance = TIM3;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	4a64      	ldr	r2, [pc, #400]	; (80085dc <ServoxInit+0x1f0>)
 800844c:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2253      	movs	r2, #83	; 0x53
 8008452:	605a      	str	r2, [r3, #4]
 8008454:	e061      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim4)	{
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4a61      	ldr	r2, [pc, #388]	; (80085e0 <ServoxInit+0x1f4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d106      	bne.n	800846c <ServoxInit+0x80>
			htimx->Instance = TIM4;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	4a60      	ldr	r2, [pc, #384]	; (80085e4 <ServoxInit+0x1f8>)
 8008462:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2253      	movs	r2, #83	; 0x53
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	e056      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim5)	{
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4a5e      	ldr	r2, [pc, #376]	; (80085e8 <ServoxInit+0x1fc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d106      	bne.n	8008482 <ServoxInit+0x96>
			htimx->Instance = TIM5;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	4a5d      	ldr	r2, [pc, #372]	; (80085ec <ServoxInit+0x200>)
 8008478:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2253      	movs	r2, #83	; 0x53
 800847e:	605a      	str	r2, [r3, #4]
 8008480:	e04b      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim8)	{
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	4a5a      	ldr	r2, [pc, #360]	; (80085f0 <ServoxInit+0x204>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d106      	bne.n	8008498 <ServoxInit+0xac>
			htimx->Instance = TIM8;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	4a59      	ldr	r2, [pc, #356]	; (80085f4 <ServoxInit+0x208>)
 800848e:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	22a7      	movs	r2, #167	; 0xa7
 8008494:	605a      	str	r2, [r3, #4]
 8008496:	e040      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim9)	{
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4a57      	ldr	r2, [pc, #348]	; (80085f8 <ServoxInit+0x20c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d106      	bne.n	80084ae <ServoxInit+0xc2>
			htimx->Instance = TIM9;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4a56      	ldr	r2, [pc, #344]	; (80085fc <ServoxInit+0x210>)
 80084a4:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	22a7      	movs	r2, #167	; 0xa7
 80084aa:	605a      	str	r2, [r3, #4]
 80084ac:	e035      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim10)	{
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4a53      	ldr	r2, [pc, #332]	; (8008600 <ServoxInit+0x214>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d106      	bne.n	80084c4 <ServoxInit+0xd8>
			htimx->Instance = TIM10;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	4a52      	ldr	r2, [pc, #328]	; (8008604 <ServoxInit+0x218>)
 80084ba:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	22a7      	movs	r2, #167	; 0xa7
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	e02a      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim11)	{
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4a50      	ldr	r2, [pc, #320]	; (8008608 <ServoxInit+0x21c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d106      	bne.n	80084da <ServoxInit+0xee>
			htimx->Instance = TIM11;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	4a4f      	ldr	r2, [pc, #316]	; (800860c <ServoxInit+0x220>)
 80084d0:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 167;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	22a7      	movs	r2, #167	; 0xa7
 80084d6:	605a      	str	r2, [r3, #4]
 80084d8:	e01f      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim12)	{
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	4a4c      	ldr	r2, [pc, #304]	; (8008610 <ServoxInit+0x224>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d106      	bne.n	80084f0 <ServoxInit+0x104>
			htimx->Instance = TIM12;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4a4b      	ldr	r2, [pc, #300]	; (8008614 <ServoxInit+0x228>)
 80084e6:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2253      	movs	r2, #83	; 0x53
 80084ec:	605a      	str	r2, [r3, #4]
 80084ee:	e014      	b.n	800851a <ServoxInit+0x12e>
		}
		else if(htimx == &htim13)	{
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4a49      	ldr	r2, [pc, #292]	; (8008618 <ServoxInit+0x22c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d106      	bne.n	8008506 <ServoxInit+0x11a>
			htimx->Instance = TIM13;
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4a48      	ldr	r2, [pc, #288]	; (800861c <ServoxInit+0x230>)
 80084fc:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2253      	movs	r2, #83	; 0x53
 8008502:	605a      	str	r2, [r3, #4]
 8008504:	e009      	b.n	800851a <ServoxInit+0x12e>
			}
		else if(htimx == &htim14)	{
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	4a45      	ldr	r2, [pc, #276]	; (8008620 <ServoxInit+0x234>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d105      	bne.n	800851a <ServoxInit+0x12e>
			htimx->Instance = TIM14;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4a44      	ldr	r2, [pc, #272]	; (8008624 <ServoxInit+0x238>)
 8008512:	601a      	str	r2, [r3, #0]
			htimx->Init.Prescaler = 83;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2253      	movs	r2, #83	; 0x53
 8008518:	605a      	str	r2, [r3, #4]
			}


		htimx->Init.CounterMode = TIM_COUNTERMODE_UP;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2200      	movs	r2, #0
 800851e:	609a      	str	r2, [r3, #8]
		htimx->Init.Period = 19999;
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8008526:	60da      	str	r2, [r3, #12]
		htimx->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	611a      	str	r2, [r3, #16]
		htimx->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2280      	movs	r2, #128	; 0x80
 8008532:	619a      	str	r2, [r3, #24]
		 if (HAL_TIM_Base_Init(htimx) != HAL_OK)
 8008534:	68b8      	ldr	r0, [r7, #8]
 8008536:	f00e fd77 	bl	8017028 <HAL_TIM_Base_Init>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <ServoxInit+0x158>
		  {
		    Error_Handler();
 8008540:	f7fc fcbe 	bl	8004ec0 <Error_Handler>
		  }
		  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008548:	61bb      	str	r3, [r7, #24]
		  if (HAL_TIM_ConfigClockSource(htimx, &sClockSourceConfig) != HAL_OK)
 800854a:	f107 0318 	add.w	r3, r7, #24
 800854e:	4619      	mov	r1, r3
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f00f f8dd 	bl	8017710 <HAL_TIM_ConfigClockSource>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <ServoxInit+0x174>
		  {
		    Error_Handler();
 800855c:	f7fc fcb0 	bl	8004ec0 <Error_Handler>
		  }
		if (HAL_TIM_PWM_Init(htimx) != HAL_OK)
 8008560:	68b8      	ldr	r0, [r7, #8]
 8008562:	f00e fdd4 	bl	801710e <HAL_TIM_PWM_Init>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <ServoxInit+0x184>
			{
				Error_Handler();
 800856c:	f7fc fca8 	bl	8004ec0 <Error_Handler>
			}

		sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008570:	2300      	movs	r3, #0
 8008572:	613b      	str	r3, [r7, #16]
		sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
		if (HAL_TIMEx_MasterConfigSynchronization(htimx, &sMasterConfig) != HAL_OK)
 8008578:	f107 0310 	add.w	r3, r7, #16
 800857c:	4619      	mov	r1, r3
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	f00f fcc2 	bl	8017f08 <HAL_TIMEx_MasterConfigSynchronization>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <ServoxInit+0x1a2>
		{
			Error_Handler();
 800858a:	f7fc fc99 	bl	8004ec0 <Error_Handler>
		}


	    HAL_TIM_Base_Start(htimx);
 800858e:	68b8      	ldr	r0, [r7, #8]
 8008590:	f00e fd75 	bl	801707e <HAL_TIM_Base_Start>

	GPIOPinsInit(SERVO_GPIOx, SERVO_GPIO_Pin, GPIO_MODE_AF_PP, GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008594:	8879      	ldrh	r1, [r7, #2]
 8008596:	2301      	movs	r3, #1
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	2302      	movs	r3, #2
 800859c:	2202      	movs	r2, #2
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7f8 ffaa 	bl	80014f8 <GPIOPinsInit>

	servo->htimx = htimx;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	601a      	str	r2, [r3, #0]
	servo->htimx_Channel = channel;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ae:	605a      	str	r2, [r3, #4]

	PWMChannelConfig(htimx, channel , SERVO_GPIOx,SERVO_GPIO_Pin);
 80085b0:	887b      	ldrh	r3, [r7, #2]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f7f9 f97e 	bl	80018b8 <PWMChannelConfig>

	servo->currentPulse = 0;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	3728      	adds	r7, #40	; 0x28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200069ec 	.word	0x200069ec
 80085d0:	40010000 	.word	0x40010000
 80085d4:	20006af0 	.word	0x20006af0
 80085d8:	200067a0 	.word	0x200067a0
 80085dc:	40000400 	.word	0x40000400
 80085e0:	200065dc 	.word	0x200065dc
 80085e4:	40000800 	.word	0x40000800
 80085e8:	20006760 	.word	0x20006760
 80085ec:	40000c00 	.word	0x40000c00
 80085f0:	2000659c 	.word	0x2000659c
 80085f4:	40010400 	.word	0x40010400
 80085f8:	20006a2c 	.word	0x20006a2c
 80085fc:	40014000 	.word	0x40014000
 8008600:	200066bc 	.word	0x200066bc
 8008604:	40014400 	.word	0x40014400
 8008608:	20006904 	.word	0x20006904
 800860c:	40014800 	.word	0x40014800
 8008610:	20006c10 	.word	0x20006c10
 8008614:	40001800 	.word	0x40001800
 8008618:	20006884 	.word	0x20006884
 800861c:	40001c00 	.word	0x40001c00
 8008620:	20006bd0 	.word	0x20006bd0
 8008624:	40002000 	.word	0x40002000

08008628 <ServoSetPulse>:
 * 						  pulse		output compare pulse to be set
 * Function Return		: None
 * Function Example		: ServoSetPulse(&SERVO1, 1000);
 */

void ServoSetPulse(SERVO_t* servo, uint32_t pulse){
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
	if(pulse < servo->SERVO_pulseMinLimit){
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	429a      	cmp	r2, r3
 800863a:	d204      	bcs.n	8008646 <ServoSetPulse+0x1e>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	695a      	ldr	r2, [r3, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	621a      	str	r2, [r3, #32]
 8008644:	e00c      	b.n	8008660 <ServoSetPulse+0x38>
	}else if(pulse > servo->SERVO_pulseMaxLimit){
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d904      	bls.n	800865a <ServoSetPulse+0x32>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	621a      	str	r2, [r3, #32]
 8008658:	e002      	b.n	8008660 <ServoSetPulse+0x38>
	}else{
		servo->currentPulse = pulse;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	683a      	ldr	r2, [r7, #0]
 800865e:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d106      	bne.n	8008676 <ServoSetPulse+0x4e>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	6a12      	ldr	r2, [r2, #32]
 8008672:	635a      	str	r2, [r3, #52]	; 0x34

}
 8008674:	e01b      	b.n	80086ae <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	2b04      	cmp	r3, #4
 800867c:	d106      	bne.n	800868c <ServoSetPulse+0x64>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	6393      	str	r3, [r2, #56]	; 0x38
}
 800868a:	e010      	b.n	80086ae <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	2b08      	cmp	r3, #8
 8008692:	d106      	bne.n	80086a2 <ServoSetPulse+0x7a>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80086a0:	e005      	b.n	80086ae <ServoSetPulse+0x86>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	6413      	str	r3, [r2, #64]	; 0x40
}
 80086ae:	bf00      	nop
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <ServoInitPulseLimit>:
	servo->TIMx_Compare = servo->SERVO_pulse0degree + (servo->SERVO_pulse1degree)*angle;
	servo->currentPulse = servo->TIMx_Compare;
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->TIMx_Compare);
}

void ServoInitPulseLimit(SERVO_t* servo, uint32_t MinPulse, uint32_t MaxPulse){
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
	servo->SERVO_pulseMinLimit = MinPulse;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	615a      	str	r2, [r3, #20]
	servo->SERVO_pulseMaxLimit = MaxPulse;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	619a      	str	r2, [r3, #24]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <ServoMovePulse>:
void ServoMovePulse(SERVO_t* servo, int pulse){
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
	servo->currentPulse = servo->currentPulse + pulse;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a1a      	ldr	r2, [r3, #32]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]

	if(servo->currentPulse < servo->SERVO_pulseMinLimit){
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1a      	ldr	r2, [r3, #32]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d203      	bcs.n	8008708 <ServoMovePulse+0x2a>
		servo->currentPulse = servo->SERVO_pulseMinLimit;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	695a      	ldr	r2, [r3, #20]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	621a      	str	r2, [r3, #32]
	}
	if(servo->currentPulse > servo->SERVO_pulseMaxLimit){
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <ServoMovePulse+0x3e>
		servo->currentPulse = servo->SERVO_pulseMaxLimit;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	621a      	str	r2, [r3, #32]
	}
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <ServoMovePulse+0x54>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6a12      	ldr	r2, [r2, #32]
 800872e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8008730:	e01b      	b.n	800876a <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b04      	cmp	r3, #4
 8008738:	d106      	bne.n	8008748 <ServoMovePulse+0x6a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008746:	e010      	b.n	800876a <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d106      	bne.n	800875e <ServoMovePulse+0x80>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a1b      	ldr	r3, [r3, #32]
 800875a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800875c:	e005      	b.n	800876a <ServoMovePulse+0x8c>
	__HAL_TIM_SET_COMPARE(servo->htimx, servo->htimx_Channel, servo->currentPulse);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	6413      	str	r3, [r2, #64]	; 0x40
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <SPI1_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI1_IRQHandler(void)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi1);
 800877c:	4802      	ldr	r0, [pc, #8]	; (8008788 <SPI1_IRQHandler+0x10>)
 800877e:	f00e fb35 	bl	8016dec <HAL_SPI_IRQHandler>
}
 8008782:	bf00      	nop
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20009d38 	.word	0x20009d38

0800878c <SPI2_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI2_IRQHandler(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi2);
 8008790:	4802      	ldr	r0, [pc, #8]	; (800879c <SPI2_IRQHandler+0x10>)
 8008792:	f00e fb2b 	bl	8016dec <HAL_SPI_IRQHandler>
}
 8008796:	bf00      	nop
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2000738c 	.word	0x2000738c

080087a0 <SPI3_IRQHandler>:
 * Function Arguments	: None
 * Function Return		: None
 * Function Example		: None
 */
void SPI3_IRQHandler(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
    HAL_SPI_IRQHandler(&hspi3);
 80087a4:	4802      	ldr	r0, [pc, #8]	; (80087b0 <SPI3_IRQHandler+0x10>)
 80087a6:	f00e fb21 	bl	8016dec <HAL_SPI_IRQHandler>
}
 80087aa:	bf00      	nop
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20007b80 	.word	0x20007b80

080087b4 <registerPath>:
 */

#include "TuningInterface/TuningInterface.h"
#include "Tune.h"

void registerPath(float path[][7], int numPoint, ...){
 80087b4:	b40e      	push	{r1, r2, r3}
 80087b6:	b480      	push	{r7}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
	va_list pinconfig;
	va_start(pinconfig, numPoint);
 80087be:	f107 0320 	add.w	r3, r7, #32
 80087c2:	60bb      	str	r3, [r7, #8]
	float* point;
	for(int i=0; i<numPoint; i++){
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e021      	b.n	800880e <registerPath+0x5a>
		point = va_arg(pinconfig, float *);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	1d1a      	adds	r2, r3, #4
 80087ce:	60ba      	str	r2, [r7, #8]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<7; j++){
 80087d4:	2300      	movs	r3, #0
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	e013      	b.n	8008802 <registerPath+0x4e>
			path[i][j] = point[j];
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	18d0      	adds	r0, r2, r3
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	4613      	mov	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	1899      	adds	r1, r3, r2
 80087f2:	6802      	ldr	r2, [r0, #0]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	440b      	add	r3, r1
 80087fa:	601a      	str	r2, [r3, #0]
		for(int j=0; j<7; j++){
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	3301      	adds	r3, #1
 8008800:	613b      	str	r3, [r7, #16]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b06      	cmp	r3, #6
 8008806:	dde8      	ble.n	80087da <registerPath+0x26>
	for(int i=0; i<numPoint; i++){
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	3301      	adds	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	429a      	cmp	r2, r3
 8008814:	dbd9      	blt.n	80087ca <registerPath+0x16>
		}
	}
	va_end(pinconfig);
}
 8008816:	bf00      	nop
 8008818:	bf00      	nop
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	b003      	add	sp, #12
 8008824:	4770      	bx	lr
	...

08008828 <Initialize>:
uint8_t mailbox = 0, buf2_flag = 0, buf2_flagC2 = 0;

/************************************************/
/*		 	 	Functions		       		  	*/
/************************************************/
void Initialize(){
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af04      	add	r7, sp, #16
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800882e:	f009 f80b 	bl	8011848 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8008832:	f7fa fd3f 	bl	80032b4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIOPinsInit (LED1_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008836:	2301      	movs	r3, #1
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2302      	movs	r3, #2
 800883c:	2201      	movs	r2, #1
 800883e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008842:	48c4      	ldr	r0, [pc, #784]	; (8008b54 <Initialize+0x32c>)
 8008844:	f7f8 fe58 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (LED2_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008848:	2301      	movs	r3, #1
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	2302      	movs	r3, #2
 800884e:	2201      	movs	r2, #1
 8008850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008854:	48bf      	ldr	r0, [pc, #764]	; (8008b54 <Initialize+0x32c>)
 8008856:	f7f8 fe4f 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (LED3_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800885a:	2301      	movs	r3, #1
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	2302      	movs	r3, #2
 8008860:	2201      	movs	r2, #1
 8008862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008866:	48bb      	ldr	r0, [pc, #748]	; (8008b54 <Initialize+0x32c>)
 8008868:	f7f8 fe46 	bl	80014f8 <GPIOPinsInit>

	GPIOPinsInit (PB1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800886c:	2301      	movs	r3, #1
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2302      	movs	r3, #2
 8008872:	2200      	movs	r2, #0
 8008874:	2180      	movs	r1, #128	; 0x80
 8008876:	48b8      	ldr	r0, [pc, #736]	; (8008b58 <Initialize+0x330>)
 8008878:	f7f8 fe3e 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (PB2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 800887c:	2301      	movs	r3, #1
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	2302      	movs	r3, #2
 8008882:	2200      	movs	r2, #0
 8008884:	2101      	movs	r1, #1
 8008886:	48b5      	ldr	r0, [pc, #724]	; (8008b5c <Initialize+0x334>)
 8008888:	f7f8 fe36 	bl	80014f8 <GPIOPinsInit>

	/*Normal IOs*/
	GPIOPinsInit (IP1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800888c:	2301      	movs	r3, #1
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	2301      	movs	r3, #1
 8008892:	2200      	movs	r2, #0
 8008894:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008898:	48b0      	ldr	r0, [pc, #704]	; (8008b5c <Initialize+0x334>)
 800889a:	f7f8 fe2d 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800889e:	2301      	movs	r3, #1
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	2301      	movs	r3, #1
 80088a4:	2200      	movs	r2, #0
 80088a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80088aa:	48ac      	ldr	r0, [pc, #688]	; (8008b5c <Initialize+0x334>)
 80088ac:	f7f8 fe24 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80088b0:	2301      	movs	r3, #1
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	2301      	movs	r3, #1
 80088b6:	2200      	movs	r2, #0
 80088b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088bc:	48a7      	ldr	r0, [pc, #668]	; (8008b5c <Initialize+0x334>)
 80088be:	f7f8 fe1b 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80088c2:	2301      	movs	r3, #1
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2301      	movs	r3, #1
 80088c8:	2200      	movs	r2, #0
 80088ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088ce:	48a3      	ldr	r0, [pc, #652]	; (8008b5c <Initialize+0x334>)
 80088d0:	f7f8 fe12 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80088d4:	2301      	movs	r3, #1
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	2301      	movs	r3, #1
 80088da:	2200      	movs	r2, #0
 80088dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088e0:	489d      	ldr	r0, [pc, #628]	; (8008b58 <Initialize+0x330>)
 80088e2:	f7f8 fe09 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80088e6:	2301      	movs	r3, #1
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	2301      	movs	r3, #1
 80088ec:	2200      	movs	r2, #0
 80088ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088f2:	4899      	ldr	r0, [pc, #612]	; (8008b58 <Initialize+0x330>)
 80088f4:	f7f8 fe00 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP7_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80088f8:	2301      	movs	r3, #1
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	2301      	movs	r3, #1
 80088fe:	2200      	movs	r2, #0
 8008900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008904:	4896      	ldr	r0, [pc, #600]	; (8008b60 <Initialize+0x338>)
 8008906:	f7f8 fdf7 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP8_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800890a:	2301      	movs	r3, #1
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2301      	movs	r3, #1
 8008910:	2200      	movs	r2, #0
 8008912:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008916:	4892      	ldr	r0, [pc, #584]	; (8008b60 <Initialize+0x338>)
 8008918:	f7f8 fdee 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800891c:	2301      	movs	r3, #1
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	2301      	movs	r3, #1
 8008922:	2200      	movs	r2, #0
 8008924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008928:	488a      	ldr	r0, [pc, #552]	; (8008b54 <Initialize+0x32c>)
 800892a:	f7f8 fde5 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP10_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 800892e:	2301      	movs	r3, #1
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	2301      	movs	r3, #1
 8008934:	2200      	movs	r2, #0
 8008936:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800893a:	488a      	ldr	r0, [pc, #552]	; (8008b64 <Initialize+0x33c>)
 800893c:	f7f8 fddc 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP11_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008940:	2301      	movs	r3, #1
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	2301      	movs	r3, #1
 8008946:	2200      	movs	r2, #0
 8008948:	2108      	movs	r1, #8
 800894a:	4885      	ldr	r0, [pc, #532]	; (8008b60 <Initialize+0x338>)
 800894c:	f7f8 fdd4 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP12_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008950:	2301      	movs	r3, #1
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	2301      	movs	r3, #1
 8008956:	2200      	movs	r2, #0
 8008958:	2110      	movs	r1, #16
 800895a:	4881      	ldr	r0, [pc, #516]	; (8008b60 <Initialize+0x338>)
 800895c:	f7f8 fdcc 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP13_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008960:	2301      	movs	r3, #1
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	2301      	movs	r3, #1
 8008966:	2200      	movs	r2, #0
 8008968:	2180      	movs	r1, #128	; 0x80
 800896a:	487d      	ldr	r0, [pc, #500]	; (8008b60 <Initialize+0x338>)
 800896c:	f7f8 fdc4 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP14_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008970:	2301      	movs	r3, #1
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	2301      	movs	r3, #1
 8008976:	2200      	movs	r2, #0
 8008978:	2120      	movs	r1, #32
 800897a:	4877      	ldr	r0, [pc, #476]	; (8008b58 <Initialize+0x330>)
 800897c:	f7f8 fdbc 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP15_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008980:	2301      	movs	r3, #1
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2301      	movs	r3, #1
 8008986:	2200      	movs	r2, #0
 8008988:	2140      	movs	r1, #64	; 0x40
 800898a:	4873      	ldr	r0, [pc, #460]	; (8008b58 <Initialize+0x330>)
 800898c:	f7f8 fdb4 	bl	80014f8 <GPIOPinsInit>

	GPIOPinsInit (IP16_Analog1_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 8008990:	2301      	movs	r3, #1
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	2301      	movs	r3, #1
 8008996:	2200      	movs	r2, #0
 8008998:	2101      	movs	r1, #1
 800899a:	486e      	ldr	r0, [pc, #440]	; (8008b54 <Initialize+0x32c>)
 800899c:	f7f8 fdac 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP17_Analog2_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80089a0:	2301      	movs	r3, #1
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	2301      	movs	r3, #1
 80089a6:	2200      	movs	r2, #0
 80089a8:	2102      	movs	r1, #2
 80089aa:	486a      	ldr	r0, [pc, #424]	; (8008b54 <Initialize+0x32c>)
 80089ac:	f7f8 fda4 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP18_Analog3_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80089b0:	2301      	movs	r3, #1
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	2301      	movs	r3, #1
 80089b6:	2200      	movs	r2, #0
 80089b8:	2104      	movs	r1, #4
 80089ba:	4866      	ldr	r0, [pc, #408]	; (8008b54 <Initialize+0x32c>)
 80089bc:	f7f8 fd9c 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP19_Analog4_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80089c0:	2301      	movs	r3, #1
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2301      	movs	r3, #1
 80089c6:	2200      	movs	r2, #0
 80089c8:	2108      	movs	r1, #8
 80089ca:	4862      	ldr	r0, [pc, #392]	; (8008b54 <Initialize+0x32c>)
 80089cc:	f7f8 fd94 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP20_Analog5_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80089d0:	2301      	movs	r3, #1
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	2301      	movs	r3, #1
 80089d6:	2200      	movs	r2, #0
 80089d8:	2110      	movs	r1, #16
 80089da:	485e      	ldr	r0, [pc, #376]	; (8008b54 <Initialize+0x32c>)
 80089dc:	f7f8 fd8c 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP21_Analog6_PIN, GPIO_MODE_INPUT,GPIO_SPEED_FREQ_MEDIUM, GPIO_PULLUP);
 80089e0:	2301      	movs	r3, #1
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2301      	movs	r3, #1
 80089e6:	2200      	movs	r2, #0
 80089e8:	2120      	movs	r1, #32
 80089ea:	485a      	ldr	r0, [pc, #360]	; (8008b54 <Initialize+0x32c>)
 80089ec:	f7f8 fd84 	bl	80014f8 <GPIOPinsInit>

//	MUXInit(&MUX, MUX1_INPUT_PIN, MUX1_S0_PIN, MUX1_S1_PIN, MUX1_S2_PIN);
	SHIFTREGInit (&SR, CASCADE_1, SR_SCK_PIN, SR_RCK_PIN, SR_SI_PIN);
 80089f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	4b59      	ldr	r3, [pc, #356]	; (8008b5c <Initialize+0x334>)
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089fe:	9301      	str	r3, [sp, #4]
 8008a00:	4b56      	ldr	r3, [pc, #344]	; (8008b5c <Initialize+0x334>)
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	4a55      	ldr	r2, [pc, #340]	; (8008b5c <Initialize+0x334>)
 8008a08:	2101      	movs	r1, #1
 8008a0a:	4857      	ldr	r0, [pc, #348]	; (8008b68 <Initialize+0x340>)
 8008a0c:	f7f9 fbe8 	bl	80021e0 <SHIFTREGInit>

	//https://stackoverflow.com/questions/50243996/what-are-valid-values-of-hal-nvic-setpriority-when-using-stm32-and-freertos
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a10:	2003      	movs	r0, #3
 8008a12:	f00a faf0 	bl	8012ff6 <HAL_NVIC_SetPriorityGrouping>

	/*************** Set Interrupt Priorities in BIOS/priorities.h ***************/

//	I2CxInit (&hi2c1,main_board_1, CLOCK_SPEED_400KHz,ENABLE);
	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 8008a16:	4b55      	ldr	r3, [pc, #340]	; (8008b6c <Initialize+0x344>)
 8008a18:	2208      	movs	r2, #8
 8008a1a:	4955      	ldr	r1, [pc, #340]	; (8008b70 <Initialize+0x348>)
 8008a1c:	4855      	ldr	r0, [pc, #340]	; (8008b74 <Initialize+0x34c>)
 8008a1e:	f7fb f90d 	bl	8003c3c <I2CX_DMA_RX_Init>
//	ServoDriverInit(&srv_drv,&hi2c3,0x40);

//	UARTx_DMA_Rx_Init(&huart5, &hdma_uart5_rx, 115200);//Bluebee Tuning?
//	UARTx_DMA_Rx_Init(&huart4, &hdma_uart4_rx, 115200); //Jetson
//	UARTInit(&huart2, 115200, DISABLE);
	UARTInit(&huart4, 115200, ENABLE);
 8008a22:	2201      	movs	r2, #1
 8008a24:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008a28:	4853      	ldr	r0, [pc, #332]	; (8008b78 <Initialize+0x350>)
 8008a2a:	f7fa fe49 	bl	80036c0 <UARTInit>
	UARTInit(&huart5, 115200, DISABLE);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008a34:	4851      	ldr	r0, [pc, #324]	; (8008b7c <Initialize+0x354>)
 8008a36:	f7fa fe43 	bl	80036c0 <UARTInit>

	QEIInit(&htim1);
 8008a3a:	4851      	ldr	r0, [pc, #324]	; (8008b80 <Initialize+0x358>)
 8008a3c:	f7f9 f8c8 	bl	8001bd0 <QEIInit>
	QEIInit(&htim4);
 8008a40:	4850      	ldr	r0, [pc, #320]	; (8008b84 <Initialize+0x35c>)
 8008a42:	f7f9 f8c5 	bl	8001bd0 <QEIInit>
//	QEIInit(&htim8);

	CANxInit(&hcan1,4,CAN_FILTER_FIFO0,0,0,0,CAN_500KHz);
 8008a46:	2300      	movs	r3, #0
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	2200      	movs	r2, #0
 8008a56:	2104      	movs	r1, #4
 8008a58:	484b      	ldr	r0, [pc, #300]	; (8008b88 <Initialize+0x360>)
 8008a5a:	f7fa ff89 	bl	8003970 <CANxInit>

	PWMTimeBaseInit(&htim3, 20000, 3);
 8008a5e:	2203      	movs	r2, #3
 8008a60:	f644 6120 	movw	r1, #20000	; 0x4e20
 8008a64:	4849      	ldr	r0, [pc, #292]	; (8008b8c <Initialize+0x364>)
 8008a66:	f7f8 fe41 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim3, TIM_CHANNEL_3, TIM3_CHANNEL3_PIN);
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4a3a      	ldr	r2, [pc, #232]	; (8008b58 <Initialize+0x330>)
 8008a6e:	2108      	movs	r1, #8
 8008a70:	4846      	ldr	r0, [pc, #280]	; (8008b8c <Initialize+0x364>)
 8008a72:	f7f8 ff21 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim3, TIM_CHANNEL_4 , TIM3_CHANNEL4_PIN);
 8008a76:	2302      	movs	r3, #2
 8008a78:	4a37      	ldr	r2, [pc, #220]	; (8008b58 <Initialize+0x330>)
 8008a7a:	210c      	movs	r1, #12
 8008a7c:	4843      	ldr	r0, [pc, #268]	; (8008b8c <Initialize+0x364>)
 8008a7e:	f7f8 ff1b 	bl	80018b8 <PWMChannelConfig>

	PWMTimeBaseInit(&htim5, 2000, 88);
 8008a82:	2258      	movs	r2, #88	; 0x58
 8008a84:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008a88:	4841      	ldr	r0, [pc, #260]	; (8008b90 <Initialize+0x368>)
 8008a8a:	f7f8 fe2f 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim5, TIM_CHANNEL_1, TIM5_CHANNEL1_PIN);
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4a34      	ldr	r2, [pc, #208]	; (8008b64 <Initialize+0x33c>)
 8008a92:	2100      	movs	r1, #0
 8008a94:	483e      	ldr	r0, [pc, #248]	; (8008b90 <Initialize+0x368>)
 8008a96:	f7f8 ff0f 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_2, TIM5_CHANNEL2_PIN);
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	4a31      	ldr	r2, [pc, #196]	; (8008b64 <Initialize+0x33c>)
 8008a9e:	2104      	movs	r1, #4
 8008aa0:	483b      	ldr	r0, [pc, #236]	; (8008b90 <Initialize+0x368>)
 8008aa2:	f7f8 ff09 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_3, TIM5_CHANNEL3_PIN);
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	4a2e      	ldr	r2, [pc, #184]	; (8008b64 <Initialize+0x33c>)
 8008aaa:	2108      	movs	r1, #8
 8008aac:	4838      	ldr	r0, [pc, #224]	; (8008b90 <Initialize+0x368>)
 8008aae:	f7f8 ff03 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim5, TIM_CHANNEL_4, TIM5_CHANNEL4_PIN);
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	4a2b      	ldr	r2, [pc, #172]	; (8008b64 <Initialize+0x33c>)
 8008ab6:	210c      	movs	r1, #12
 8008ab8:	4835      	ldr	r0, [pc, #212]	; (8008b90 <Initialize+0x368>)
 8008aba:	f7f8 fefd 	bl	80018b8 <PWMChannelConfig>

	PWMTimeBaseInit(&htim9, 2000, 4);
 8008abe:	2204      	movs	r2, #4
 8008ac0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008ac4:	4833      	ldr	r0, [pc, #204]	; (8008b94 <Initialize+0x36c>)
 8008ac6:	f7f8 fe11 	bl	80016ec <PWMTimeBaseInit>
	PWMChannelConfig(&htim9, TIM_CHANNEL_1, TIM9_CHANNEL1_PIN);
 8008aca:	2320      	movs	r3, #32
 8008acc:	4a23      	ldr	r2, [pc, #140]	; (8008b5c <Initialize+0x334>)
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4830      	ldr	r0, [pc, #192]	; (8008b94 <Initialize+0x36c>)
 8008ad2:	f7f8 fef1 	bl	80018b8 <PWMChannelConfig>
	PWMChannelConfig(&htim9, TIM_CHANNEL_2, TIM9_CHANNEL2_PIN);
 8008ad6:	2340      	movs	r3, #64	; 0x40
 8008ad8:	4a20      	ldr	r2, [pc, #128]	; (8008b5c <Initialize+0x334>)
 8008ada:	2104      	movs	r1, #4
 8008adc:	482d      	ldr	r0, [pc, #180]	; (8008b94 <Initialize+0x36c>)
 8008ade:	f7f8 feeb 	bl	80018b8 <PWMChannelConfig>

	BDCInit(&BDC1, &htim3, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[1]), Bit6, Bit7);
 8008ae2:	2380      	movs	r3, #128	; 0x80
 8008ae4:	9302      	str	r3, [sp, #8]
 8008ae6:	2340      	movs	r3, #64	; 0x40
 8008ae8:	9301      	str	r3, [sp, #4]
 8008aea:	4b2b      	ldr	r3, [pc, #172]	; (8008b98 <Initialize+0x370>)
 8008aec:	9300      	str	r3, [sp, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	220c      	movs	r2, #12
 8008af2:	4926      	ldr	r1, [pc, #152]	; (8008b8c <Initialize+0x364>)
 8008af4:	4829      	ldr	r0, [pc, #164]	; (8008b9c <Initialize+0x374>)
 8008af6:	f7f8 fbba 	bl	800126e <BDCInit>
	BDCInit(&BDC2, &htim3, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[1]), Bit4, Bit5);
 8008afa:	2320      	movs	r3, #32
 8008afc:	9302      	str	r3, [sp, #8]
 8008afe:	2310      	movs	r3, #16
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <Initialize+0x370>)
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	2300      	movs	r3, #0
 8008b08:	2208      	movs	r2, #8
 8008b0a:	4920      	ldr	r1, [pc, #128]	; (8008b8c <Initialize+0x364>)
 8008b0c:	4824      	ldr	r0, [pc, #144]	; (8008ba0 <Initialize+0x378>)
 8008b0e:	f7f8 fbae 	bl	800126e <BDCInit>
	BDCInit(&BDC3, &htim9, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[1]), Bit2, Bit3);
 8008b12:	2308      	movs	r3, #8
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	2304      	movs	r3, #4
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	4b1f      	ldr	r3, [pc, #124]	; (8008b98 <Initialize+0x370>)
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2200      	movs	r2, #0
 8008b22:	491c      	ldr	r1, [pc, #112]	; (8008b94 <Initialize+0x36c>)
 8008b24:	481f      	ldr	r0, [pc, #124]	; (8008ba4 <Initialize+0x37c>)
 8008b26:	f7f8 fba2 	bl	800126e <BDCInit>
	BDCInit(&BDC4, &htim9, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[1]), Bit0, Bit1);
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	2301      	movs	r3, #1
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	4b19      	ldr	r3, [pc, #100]	; (8008b98 <Initialize+0x370>)
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	2300      	movs	r3, #0
 8008b38:	2204      	movs	r2, #4
 8008b3a:	4916      	ldr	r1, [pc, #88]	; (8008b94 <Initialize+0x36c>)
 8008b3c:	481a      	ldr	r0, [pc, #104]	; (8008ba8 <Initialize+0x380>)
 8008b3e:	f7f8 fb96 	bl	800126e <BDCInit>
	BDCInit(&BDC5, &htim5, TIM_CHANNEL_4, SHIFTREG, &(SR.cast[0]), Bit6, Bit7);
 8008b42:	2380      	movs	r3, #128	; 0x80
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	2340      	movs	r3, #64	; 0x40
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	4b18      	ldr	r3, [pc, #96]	; (8008bac <Initialize+0x384>)
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e02e      	b.n	8008bb0 <Initialize+0x388>
 8008b52:	bf00      	nop
 8008b54:	40020800 	.word	0x40020800
 8008b58:	40020400 	.word	0x40020400
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	40020c00 	.word	0x40020c00
 8008b64:	40020000 	.word	0x40020000
 8008b68:	20009608 	.word	0x20009608
 8008b6c:	00061a80 	.word	0x00061a80
 8008b70:	2000a064 	.word	0x2000a064
 8008b74:	20007630 	.word	0x20007630
 8008b78:	20006ab0 	.word	0x20006ab0
 8008b7c:	200067e4 	.word	0x200067e4
 8008b80:	200069ec 	.word	0x200069ec
 8008b84:	200065dc 	.word	0x200065dc
 8008b88:	20006fe4 	.word	0x20006fe4
 8008b8c:	200067a0 	.word	0x200067a0
 8008b90:	20006760 	.word	0x20006760
 8008b94:	20006a2c 	.word	0x20006a2c
 8008b98:	20009624 	.word	0x20009624
 8008b9c:	2000a5d4 	.word	0x2000a5d4
 8008ba0:	20007b24 	.word	0x20007b24
 8008ba4:	200076dc 	.word	0x200076dc
 8008ba8:	20009710 	.word	0x20009710
 8008bac:	20009620 	.word	0x20009620
 8008bb0:	220c      	movs	r2, #12
 8008bb2:	4993      	ldr	r1, [pc, #588]	; (8008e00 <Initialize+0x5d8>)
 8008bb4:	4893      	ldr	r0, [pc, #588]	; (8008e04 <Initialize+0x5dc>)
 8008bb6:	f7f8 fb5a 	bl	800126e <BDCInit>
	BDCInit(&BDC6, &htim5, TIM_CHANNEL_3, SHIFTREG, &(SR.cast[0]), Bit4, Bit5);
 8008bba:	2320      	movs	r3, #32
 8008bbc:	9302      	str	r3, [sp, #8]
 8008bbe:	2310      	movs	r3, #16
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	4b91      	ldr	r3, [pc, #580]	; (8008e08 <Initialize+0x5e0>)
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2208      	movs	r2, #8
 8008bca:	498d      	ldr	r1, [pc, #564]	; (8008e00 <Initialize+0x5d8>)
 8008bcc:	488f      	ldr	r0, [pc, #572]	; (8008e0c <Initialize+0x5e4>)
 8008bce:	f7f8 fb4e 	bl	800126e <BDCInit>
	BDCInit(&BDC7, &htim5, TIM_CHANNEL_2, SHIFTREG, &(SR.cast[0]), Bit2, Bit3);
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	9302      	str	r3, [sp, #8]
 8008bd6:	2304      	movs	r3, #4
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	4b8b      	ldr	r3, [pc, #556]	; (8008e08 <Initialize+0x5e0>)
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	2300      	movs	r3, #0
 8008be0:	2204      	movs	r2, #4
 8008be2:	4987      	ldr	r1, [pc, #540]	; (8008e00 <Initialize+0x5d8>)
 8008be4:	488a      	ldr	r0, [pc, #552]	; (8008e10 <Initialize+0x5e8>)
 8008be6:	f7f8 fb42 	bl	800126e <BDCInit>
	BDCInit(&BDC8, &htim5, TIM_CHANNEL_1, SHIFTREG, &(SR.cast[0]), Bit0, Bit1);
 8008bea:	2302      	movs	r3, #2
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	2301      	movs	r3, #1
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	4b85      	ldr	r3, [pc, #532]	; (8008e08 <Initialize+0x5e0>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4981      	ldr	r1, [pc, #516]	; (8008e00 <Initialize+0x5d8>)
 8008bfc:	4885      	ldr	r0, [pc, #532]	; (8008e14 <Initialize+0x5ec>)
 8008bfe:	f7f8 fb36 	bl	800126e <BDCInit>

	//Laser
	ADC_DMAxInit(&adc,&hadc2,&hdma_adc1,2);
 8008c02:	2302      	movs	r3, #2
 8008c04:	4a84      	ldr	r2, [pc, #528]	; (8008e18 <Initialize+0x5f0>)
 8008c06:	4985      	ldr	r1, [pc, #532]	; (8008e1c <Initialize+0x5f4>)
 8008c08:	4885      	ldr	r0, [pc, #532]	; (8008e20 <Initialize+0x5f8>)
 8008c0a:	f7f8 f9ef 	bl	8000fec <ADC_DMAxInit>
	ADC_Channel_Config(&adc,ADC_CHANNEL_10,IP16_Analog1_PIN);
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4a84      	ldr	r2, [pc, #528]	; (8008e24 <Initialize+0x5fc>)
 8008c12:	210a      	movs	r1, #10
 8008c14:	4882      	ldr	r0, [pc, #520]	; (8008e20 <Initialize+0x5f8>)
 8008c16:	f7f8 faef 	bl	80011f8 <ADC_Channel_Config>
	ADC_Channel_Config(&adc,ADC_CHANNEL_11,IP17_Analog2_PIN);
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	4a81      	ldr	r2, [pc, #516]	; (8008e24 <Initialize+0x5fc>)
 8008c1e:	210b      	movs	r1, #11
 8008c20:	487f      	ldr	r0, [pc, #508]	; (8008e20 <Initialize+0x5f8>)
 8008c22:	f7f8 fae9 	bl	80011f8 <ADC_Channel_Config>

	KalmanFilterInit(1, &(adc.ADC_value[0]), &x_kfo, 7.27, 16.03, 0.15, &kf_adc_x);
 8008c26:	4b80      	ldr	r3, [pc, #512]	; (8008e28 <Initialize+0x600>)
 8008c28:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8008e2c <Initialize+0x604>
 8008c2c:	eddf 0a80 	vldr	s1, [pc, #512]	; 8008e30 <Initialize+0x608>
 8008c30:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8008e34 <Initialize+0x60c>
 8008c34:	4a80      	ldr	r2, [pc, #512]	; (8008e38 <Initialize+0x610>)
 8008c36:	4981      	ldr	r1, [pc, #516]	; (8008e3c <Initialize+0x614>)
 8008c38:	2001      	movs	r0, #1
 8008c3a:	f7fb f977 	bl	8003f2c <KalmanFilterInit>
	KalmanFilterInit(1, &(adc.ADC_value[1]), &y_kfo, 7.5, 12.01, 2.0, &kf_adc_y);
 8008c3e:	4b80      	ldr	r3, [pc, #512]	; (8008e40 <Initialize+0x618>)
 8008c40:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8008c44:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8008e44 <Initialize+0x61c>
 8008c48:	eeb1 0a0e 	vmov.f32	s0, #30	; 0x40f00000  7.5
 8008c4c:	4a7e      	ldr	r2, [pc, #504]	; (8008e48 <Initialize+0x620>)
 8008c4e:	497f      	ldr	r1, [pc, #508]	; (8008e4c <Initialize+0x624>)
 8008c50:	2001      	movs	r0, #1
 8008c52:	f7fb f96b 	bl	8003f2c <KalmanFilterInit>

	Moving_Average_Init (&move_aveX, &x_kfo, &x_kfoav);
 8008c56:	4a7e      	ldr	r2, [pc, #504]	; (8008e50 <Initialize+0x628>)
 8008c58:	4977      	ldr	r1, [pc, #476]	; (8008e38 <Initialize+0x610>)
 8008c5a:	487e      	ldr	r0, [pc, #504]	; (8008e54 <Initialize+0x62c>)
 8008c5c:	f7fc ff3c 	bl	8005ad8 <Moving_Average_Init>
	Moving_Average_Init (&move_aveY, &y_kfo, &y_kfoav);
 8008c60:	4a7d      	ldr	r2, [pc, #500]	; (8008e58 <Initialize+0x630>)
 8008c62:	4979      	ldr	r1, [pc, #484]	; (8008e48 <Initialize+0x620>)
 8008c64:	487d      	ldr	r0, [pc, #500]	; (8008e5c <Initialize+0x634>)
 8008c66:	f7fc ff37 	bl	8005ad8 <Moving_Average_Init>

//target from A is 5.5
	LaserInit (25, 4096, 0.05, 6.5, &x_kfoav, &laser_dist_x, &X_laser);
 8008c6a:	4a7d      	ldr	r2, [pc, #500]	; (8008e60 <Initialize+0x638>)
 8008c6c:	497d      	ldr	r1, [pc, #500]	; (8008e64 <Initialize+0x63c>)
 8008c6e:	4878      	ldr	r0, [pc, #480]	; (8008e50 <Initialize+0x628>)
 8008c70:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8008c74:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8008e68 <Initialize+0x640>
 8008c78:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8008e6c <Initialize+0x644>
 8008c7c:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8008c80:	f7fb fa3e 	bl	8004100 <LaserInit>
	LaserInit (75, 3875, 0.05, 6.5, &y_kfoav, &laser_dist_y, &Y_laser);
 8008c84:	4a7a      	ldr	r2, [pc, #488]	; (8008e70 <Initialize+0x648>)
 8008c86:	497b      	ldr	r1, [pc, #492]	; (8008e74 <Initialize+0x64c>)
 8008c88:	4873      	ldr	r0, [pc, #460]	; (8008e58 <Initialize+0x630>)
 8008c8a:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 8008c8e:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8008e68 <Initialize+0x640>
 8008c92:	eddf 0a79 	vldr	s1, [pc, #484]	; 8008e78 <Initialize+0x650>
 8008c96:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8008e7c <Initialize+0x654>
 8008c9a:	f7fb fa31 	bl	8004100 <LaserInit>

	PIDSourceInit(&pidi_laser_X, &pido_laser_X, &pid_laser_X);
 8008c9e:	4a78      	ldr	r2, [pc, #480]	; (8008e80 <Initialize+0x658>)
 8008ca0:	4978      	ldr	r1, [pc, #480]	; (8008e84 <Initialize+0x65c>)
 8008ca2:	4879      	ldr	r0, [pc, #484]	; (8008e88 <Initialize+0x660>)
 8008ca4:	f7fc ff8d 	bl	8005bc2 <PIDSourceInit>
	PIDGainInit(0.001, 1.0, 1.0/0.2, 3.0, 2.0, 0.0, 0.00, 30, &pid_laser_X);
 8008ca8:	4875      	ldr	r0, [pc, #468]	; (8008e80 <Initialize+0x658>)
 8008caa:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008cae:	ed9f 3a77 	vldr	s6, [pc, #476]	; 8008e8c <Initialize+0x664>
 8008cb2:	eddf 2a76 	vldr	s5, [pc, #472]	; 8008e8c <Initialize+0x664>
 8008cb6:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8008cba:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8008cbe:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8008cc2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008cc6:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8008e90 <Initialize+0x668>
 8008cca:	f7fc ff8c 	bl	8005be6 <PIDGainInit>
	PIDDelayInit(&pid_laser_X);
 8008cce:	486c      	ldr	r0, [pc, #432]	; (8008e80 <Initialize+0x658>)
 8008cd0:	f7fd f8f7 	bl	8005ec2 <PIDDelayInit>

	PIDSourceInit(&pidi_laser_Y, &pido_laser_Y, &pid_laser_Y);
 8008cd4:	4a6f      	ldr	r2, [pc, #444]	; (8008e94 <Initialize+0x66c>)
 8008cd6:	4970      	ldr	r1, [pc, #448]	; (8008e98 <Initialize+0x670>)
 8008cd8:	4870      	ldr	r0, [pc, #448]	; (8008e9c <Initialize+0x674>)
 8008cda:	f7fc ff72 	bl	8005bc2 <PIDSourceInit>
	PIDGainInit(0.001, 1.0, 1.0/0.2, 3.0, 2.0, 0.0, 0.00, 30, &pid_laser_Y);
 8008cde:	486d      	ldr	r0, [pc, #436]	; (8008e94 <Initialize+0x66c>)
 8008ce0:	eef3 3a0e 	vmov.f32	s7, #62	; 0x41f00000  30.0
 8008ce4:	ed9f 3a69 	vldr	s6, [pc, #420]	; 8008e8c <Initialize+0x664>
 8008ce8:	eddf 2a68 	vldr	s5, [pc, #416]	; 8008e8c <Initialize+0x664>
 8008cec:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
 8008cf0:	eef0 1a08 	vmov.f32	s3, #8	; 0x40400000  3.0
 8008cf4:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8008cf8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8008cfc:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8008e90 <Initialize+0x668>
 8008d00:	f7fc ff71 	bl	8005be6 <PIDGainInit>
	PIDDelayInit(&pid_laser_Y);
 8008d04:	4863      	ldr	r0, [pc, #396]	; (8008e94 <Initialize+0x66c>)
 8008d06:	f7fd f8dc 	bl	8005ec2 <PIDDelayInit>

	ServoxInit(&SERVO_LagoriF1, &htim5, GPIOA, GPIO_PIN_3, TIM_CHANNEL_4);
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	2308      	movs	r3, #8
 8008d10:	4a63      	ldr	r2, [pc, #396]	; (8008ea0 <Initialize+0x678>)
 8008d12:	493b      	ldr	r1, [pc, #236]	; (8008e00 <Initialize+0x5d8>)
 8008d14:	4863      	ldr	r0, [pc, #396]	; (8008ea4 <Initialize+0x67c>)
 8008d16:	f7ff fb69 	bl	80083ec <ServoxInit>
	ServoxInit(&SERVO_LagoriF2, &htim5, GPIOA, GPIO_PIN_2, TIM_CHANNEL_3);
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2304      	movs	r3, #4
 8008d20:	4a5f      	ldr	r2, [pc, #380]	; (8008ea0 <Initialize+0x678>)
 8008d22:	4937      	ldr	r1, [pc, #220]	; (8008e00 <Initialize+0x5d8>)
 8008d24:	4860      	ldr	r0, [pc, #384]	; (8008ea8 <Initialize+0x680>)
 8008d26:	f7ff fb61 	bl	80083ec <ServoxInit>
	ServoxInit(&SERVO_BallV, &htim5, GPIOA, GPIO_PIN_1, TIM_CHANNEL_2);
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2302      	movs	r3, #2
 8008d30:	4a5b      	ldr	r2, [pc, #364]	; (8008ea0 <Initialize+0x678>)
 8008d32:	4933      	ldr	r1, [pc, #204]	; (8008e00 <Initialize+0x5d8>)
 8008d34:	485d      	ldr	r0, [pc, #372]	; (8008eac <Initialize+0x684>)
 8008d36:	f7ff fb59 	bl	80083ec <ServoxInit>
	ServoxInit(&SERVO_BallH, &htim5, GPIOA, GPIO_PIN_0, TIM_CHANNEL_1);
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2301      	movs	r3, #1
 8008d40:	4a57      	ldr	r2, [pc, #348]	; (8008ea0 <Initialize+0x678>)
 8008d42:	492f      	ldr	r1, [pc, #188]	; (8008e00 <Initialize+0x5d8>)
 8008d44:	485a      	ldr	r0, [pc, #360]	; (8008eb0 <Initialize+0x688>)
 8008d46:	f7ff fb51 	bl	80083ec <ServoxInit>

	ServoInitPulseLimit(&SERVO_BallV, svbvrealu_pulse, svbvd_pulse);
 8008d4a:	f640 228c 	movw	r2, #2700	; 0xa8c
 8008d4e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8008d52:	4856      	ldr	r0, [pc, #344]	; (8008eac <Initialize+0x684>)
 8008d54:	f7ff fcb1 	bl	80086ba <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_BallH, svbhB2_pulse, svbhA2_pulse);
 8008d58:	f640 024d 	movw	r2, #2125	; 0x84d
 8008d5c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008d60:	4853      	ldr	r0, [pc, #332]	; (8008eb0 <Initialize+0x688>)
 8008d62:	f7ff fcaa 	bl	80086ba <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_LagoriF1, svlf, svloff);
 8008d66:	f240 7221 	movw	r2, #1825	; 0x721
 8008d6a:	f240 1145 	movw	r1, #325	; 0x145
 8008d6e:	484d      	ldr	r0, [pc, #308]	; (8008ea4 <Initialize+0x67c>)
 8008d70:	f7ff fca3 	bl	80086ba <ServoInitPulseLimit>
	ServoInitPulseLimit(&SERVO_LagoriF2, svloff2, svlf2);
 8008d74:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8008d78:	f240 316b 	movw	r1, #875	; 0x36b
 8008d7c:	484a      	ldr	r0, [pc, #296]	; (8008ea8 <Initialize+0x680>)
 8008d7e:	f7ff fc9c 	bl	80086ba <ServoInitPulseLimit>
//	VESCInit(31920, 7, 0.0037, VESC1, &vesc1);

//	SPIx_DMA_TX_Init(&hspi1, &hdma_spi1_tx, SPI1_NSS_PIN, SPI_MODE_MASTER);

	//Unused peripheral pins can be used as GPIO Input or Output
	GPIOPinsInit (SPI1_MISO_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008d82:	2301      	movs	r3, #1
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	2302      	movs	r3, #2
 8008d88:	2201      	movs	r2, #1
 8008d8a:	2140      	movs	r1, #64	; 0x40
 8008d8c:	4844      	ldr	r0, [pc, #272]	; (8008ea0 <Initialize+0x678>)
 8008d8e:	f7f8 fbb3 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_MOSI_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008d92:	2301      	movs	r3, #1
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2302      	movs	r3, #2
 8008d98:	2201      	movs	r2, #1
 8008d9a:	2180      	movs	r1, #128	; 0x80
 8008d9c:	4840      	ldr	r0, [pc, #256]	; (8008ea0 <Initialize+0x678>)
 8008d9e:	f7f8 fbab 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_SCK_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008da2:	2301      	movs	r3, #1
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	2302      	movs	r3, #2
 8008da8:	2201      	movs	r2, #1
 8008daa:	2120      	movs	r1, #32
 8008dac:	483c      	ldr	r0, [pc, #240]	; (8008ea0 <Initialize+0x678>)
 8008dae:	f7f8 fba3 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (SPI1_NSS_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008db2:	2301      	movs	r3, #1
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2302      	movs	r3, #2
 8008db8:	2201      	movs	r2, #1
 8008dba:	2110      	movs	r1, #16
 8008dbc:	4838      	ldr	r0, [pc, #224]	; (8008ea0 <Initialize+0x678>)
 8008dbe:	f7f8 fb9b 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (UART3_Tx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dce:	4839      	ldr	r0, [pc, #228]	; (8008eb4 <Initialize+0x68c>)
 8008dd0:	f7f8 fb92 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (UART3_Rx, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	2302      	movs	r3, #2
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008de0:	4834      	ldr	r0, [pc, #208]	; (8008eb4 <Initialize+0x68c>)
 8008de2:	f7f8 fb89 	bl	80014f8 <GPIOPinsInit>
	GPIOPinsInit (IP9_PIN, GPIO_MODE_OUTPUT_PP,GPIO_SPEED_FREQ_HIGH, GPIO_PULLUP);
 8008de6:	2301      	movs	r3, #1
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	2302      	movs	r3, #2
 8008dec:	2201      	movs	r2, #1
 8008dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008df2:	480c      	ldr	r0, [pc, #48]	; (8008e24 <Initialize+0x5fc>)
 8008df4:	f7f8 fb80 	bl	80014f8 <GPIOPinsInit>
}
 8008df8:	bf00      	nop
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20006760 	.word	0x20006760
 8008e04:	2000a494 	.word	0x2000a494
 8008e08:	20009620 	.word	0x20009620
 8008e0c:	200097a4 	.word	0x200097a4
 8008e10:	200097c8 	.word	0x200097c8
 8008e14:	200078ac 	.word	0x200078ac
 8008e18:	20006e88 	.word	0x20006e88
 8008e1c:	20006d50 	.word	0x20006d50
 8008e20:	20009684 	.word	0x20009684
 8008e24:	40020800 	.word	0x40020800
 8008e28:	200070ec 	.word	0x200070ec
 8008e2c:	3e19999a 	.word	0x3e19999a
 8008e30:	41803d71 	.word	0x41803d71
 8008e34:	40e8a3d7 	.word	0x40e8a3d7
 8008e38:	20007700 	.word	0x20007700
 8008e3c:	20009690 	.word	0x20009690
 8008e40:	2000994c 	.word	0x2000994c
 8008e44:	414028f6 	.word	0x414028f6
 8008e48:	20007190 	.word	0x20007190
 8008e4c:	20009692 	.word	0x20009692
 8008e50:	2000a6a0 	.word	0x2000a6a0
 8008e54:	200093e0 	.word	0x200093e0
 8008e58:	20007388 	.word	0x20007388
 8008e5c:	2000a37c 	.word	0x2000a37c
 8008e60:	200098b4 	.word	0x200098b4
 8008e64:	2000a368 	.word	0x2000a368
 8008e68:	3d4ccccd 	.word	0x3d4ccccd
 8008e6c:	45800000 	.word	0x45800000
 8008e70:	200099b8 	.word	0x200099b8
 8008e74:	20007774 	.word	0x20007774
 8008e78:	45723000 	.word	0x45723000
 8008e7c:	42960000 	.word	0x42960000
 8008e80:	200077f4 	.word	0x200077f4
 8008e84:	20009b04 	.word	0x20009b04
 8008e88:	20007684 	.word	0x20007684
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	3a83126f 	.word	0x3a83126f
 8008e94:	20009ea4 	.word	0x20009ea4
 8008e98:	200091e0 	.word	0x200091e0
 8008e9c:	20009920 	.word	0x20009920
 8008ea0:	40020000 	.word	0x40020000
 8008ea4:	20009974 	.word	0x20009974
 8008ea8:	2000a5f8 	.word	0x2000a5f8
 8008eac:	20009738 	.word	0x20009738
 8008eb0:	20009924 	.word	0x20009924
 8008eb4:	40020c00 	.word	0x40020c00

08008eb8 <CAN1_RX0_IRQHandler>:



void CAN1_RX0_IRQHandler()
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8008ebc:	4802      	ldr	r0, [pc, #8]	; (8008ec8 <CAN1_RX0_IRQHandler+0x10>)
 8008ebe:	f009 fd85 	bl	80129cc <HAL_CAN_IRQHandler>

}
 8008ec2:	bf00      	nop
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20006fe4 	.word	0x20006fe4

08008ecc <CAN2_RX1_IRQHandler>:

void CAN2_RX1_IRQHandler()
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0

	HAL_CAN_IRQHandler(&hcan2);
 8008ed0:	4802      	ldr	r0, [pc, #8]	; (8008edc <CAN2_RX1_IRQHandler+0x10>)
 8008ed2:	f009 fd7b 	bl	80129cc <HAL_CAN_IRQHandler>

}
 8008ed6:	bf00      	nop
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	20006fbc 	.word	0x20006fbc

08008ee0 <CAN_PROCESS>:


void CAN_PROCESS(PACKET_t packet_src){
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	71fb      	strb	r3, [r7, #7]


	switch(packet_src){
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d004      	beq.n	8008efa <CAN_PROCESS+0x1a>
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d12f      	bne.n	8008f54 <CAN_PROCESS+0x74>

	case VESC_PACKET:
		decode_VESC();
 8008ef4:	f008 fb28 	bl	8011548 <decode_VESC>
		//		varF(DI, 0.5, 5.0),
		//		varF(DD, 0.000, 0.5),
		break;
 8008ef8:	e02c      	b.n	8008f54 <CAN_PROCESS+0x74>

	case RNS_PACKET:

		if(insData_receive[0] == 1){
 8008efa:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d107      	bne.n	8008f12 <CAN_PROCESS+0x32>
			rns.RNS_data.common_instruction = insData_receive[1];
 8008f02:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008f04:	785a      	ldrb	r2, [r3, #1]
 8008f06:	4b16      	ldr	r3, [pc, #88]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			insData_receive[0]=2;
 8008f0c:	4b13      	ldr	r3, [pc, #76]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008f0e:	2202      	movs	r2, #2
 8008f10:	701a      	strb	r2, [r3, #0]
		}
		if(insData_receive[0] == 17){
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b11      	cmp	r3, #17
 8008f18:	d11b      	bne.n	8008f52 <CAN_PROCESS+0x72>
			if(buf2_flag == 1){
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <CAN_PROCESS+0x84>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d117      	bne.n	8008f52 <CAN_PROCESS+0x72>
				rns.RNS_data.common_instruction = insData_receive[1];
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008f24:	785a      	ldrb	r2, [r3, #1]
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				rns.RNS_data.common_buffer[0].data = buf1_receive[0].data;
 8008f2c:	4b0e      	ldr	r3, [pc, #56]	; (8008f68 <CAN_PROCESS+0x88>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0b      	ldr	r2, [pc, #44]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f32:	6553      	str	r3, [r2, #84]	; 0x54
				rns.RNS_data.common_buffer[1].data = buf1_receive[1].data;
 8008f34:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <CAN_PROCESS+0x88>)
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f3a:	6593      	str	r3, [r2, #88]	; 0x58
				rns.RNS_data.common_buffer[2].data = buf2_receive[0].data;
 8008f3c:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <CAN_PROCESS+0x8c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f42:	65d3      	str	r3, [r2, #92]	; 0x5c
				rns.RNS_data.common_buffer[3].data = buf2_receive[1].data;
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <CAN_PROCESS+0x8c>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	4a05      	ldr	r2, [pc, #20]	; (8008f60 <CAN_PROCESS+0x80>)
 8008f4a:	6613      	str	r3, [r2, #96]	; 0x60
				insData_receive[0]=3;
 8008f4c:	4b03      	ldr	r3, [pc, #12]	; (8008f5c <CAN_PROCESS+0x7c>)
 8008f4e:	2203      	movs	r2, #3
 8008f50:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
 8008f52:	bf00      	nop

	}

}
 8008f54:	bf00      	nop
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20007510 	.word	0x20007510
 8008f60:	200091e8 	.word	0x200091e8
 8008f64:	20000834 	.word	0x20000834
 8008f68:	20009d24 	.word	0x20009d24
 8008f6c:	20009e7c 	.word	0x20009e7c

08008f70 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8008f70:	b5b0      	push	{r4, r5, r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a80      	ldr	r2, [pc, #512]	; (800917c <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	f040 808f 	bne.w	80090a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN1RxMessage, aData);
 8008f82:	f107 030c 	add.w	r3, r7, #12
 8008f86:	4a7e      	ldr	r2, [pc, #504]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8008f88:	2100      	movs	r1, #0
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f009 fbe6 	bl	801275c <HAL_CAN_GetRxMessage>
		//	sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);

		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 8008f90:	4b7b      	ldr	r3, [pc, #492]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d117      	bne.n	8008fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 8008f98:	4a7a      	ldr	r2, [pc, #488]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8008f9a:	4b79      	ldr	r3, [pc, #484]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 8008fac:	4b75      	ldr	r3, [pc, #468]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8008fae:	331c      	adds	r3, #28
 8008fb0:	f107 020c 	add.w	r2, r7, #12
 8008fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fb8:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 8008fbc:	4871      	ldr	r0, [pc, #452]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8008fbe:	f008 fbe3 	bl	8011788 <set_rx_frames>
			source = VESC_PACKET;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
 8008fc6:	e062      	b.n	800908e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
		}else{
			source = RNS_PACKET;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 8008fcc:	4b6c      	ldr	r3, [pc, #432]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b1c      	cmp	r3, #28
 8008fd2:	d819      	bhi.n	8009008 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
 8008fd4:	2b14      	cmp	r3, #20
 8008fd6:	d359      	bcc.n	800908c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8008fd8:	3b14      	subs	r3, #20
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	d856      	bhi.n	800908c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
 8008fde:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	08009029 	.word	0x08009029
 8008fec:	0800903b 	.word	0x0800903b
 8008ff0:	0800908d 	.word	0x0800908d
 8008ff4:	0800908d 	.word	0x0800908d
 8008ff8:	0800908d 	.word	0x0800908d
 8008ffc:	0800908d 	.word	0x0800908d
 8009000:	0800908d 	.word	0x0800908d
 8009004:	0800908d 	.word	0x0800908d
 8009008:	f5b3 6fea 	cmp.w	r3, #1872	; 0x750
 800900c:	d021      	beq.n	8009052 <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
					faul_counter = 0;
				}else{
					faul_counter ++;
				}
			default:
				break;
 800900e:	e03d      	b.n	800908c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8009010:	4b5b      	ldr	r3, [pc, #364]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	f107 030c 	add.w	r3, r7, #12
 8009018:	4619      	mov	r1, r3
 800901a:	485b      	ldr	r0, [pc, #364]	; (8009188 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800901c:	f013 fc98 	bl	801c950 <memcpy>
				buf2_flag = 0;
 8009020:	4b5a      	ldr	r3, [pc, #360]	; (800918c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
				break;
 8009026:	e032      	b.n	800908e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 8009028:	4b55      	ldr	r3, [pc, #340]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800902a:	691a      	ldr	r2, [r3, #16]
 800902c:	f107 030c 	add.w	r3, r7, #12
 8009030:	4619      	mov	r1, r3
 8009032:	4857      	ldr	r0, [pc, #348]	; (8009190 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8009034:	f013 fc8c 	bl	801c950 <memcpy>
				break;
 8009038:	e029      	b.n	800908e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800903a:	4b51      	ldr	r3, [pc, #324]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	f107 030c 	add.w	r3, r7, #12
 8009042:	4619      	mov	r1, r3
 8009044:	4853      	ldr	r0, [pc, #332]	; (8009194 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8009046:	f013 fc83 	bl	801c950 <memcpy>
				buf2_flag = 1;
 800904a:	4b50      	ldr	r3, [pc, #320]	; (800918c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800904c:	2201      	movs	r2, #1
 800904e:	701a      	strb	r2, [r3, #0]
				break;
 8009050:	e01d      	b.n	800908e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
				if(faul_counter >= 2000){
 8009052:	4b51      	ldr	r3, [pc, #324]	; (8009198 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800905a:	d312      	bcc.n	8009082 <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
					led2 = !led2;
 800905c:	4b4f      	ldr	r3, [pc, #316]	; (800919c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009064:	b2db      	uxtb	r3, r3
 8009066:	4a4d      	ldr	r2, [pc, #308]	; (800919c <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8009068:	2b00      	cmp	r3, #0
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2d9      	uxtb	r1, r3
 8009072:	7853      	ldrb	r3, [r2, #1]
 8009074:	f361 1386 	bfi	r3, r1, #6, #1
 8009078:	7053      	strb	r3, [r2, #1]
					faul_counter = 0;
 800907a:	4b47      	ldr	r3, [pc, #284]	; (8009198 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800907c:	2200      	movs	r2, #0
 800907e:	601a      	str	r2, [r3, #0]
				break;
 8009080:	e004      	b.n	800908c <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
					faul_counter ++;
 8009082:	4b45      	ldr	r3, [pc, #276]	; (8009198 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3301      	adds	r3, #1
 8009088:	4a43      	ldr	r2, [pc, #268]	; (8009198 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800908a:	6013      	str	r3, [r2, #0]
				break;
 800908c:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff ff25 	bl	8008ee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009096:	2102      	movs	r1, #2
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f009 fc71 	bl	8012980 <HAL_CAN_ActivateNotification>
			}
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}
}
 800909e:	e069      	b.n	8009174 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0 , &CAN2RxMessage, aData);
 80090a0:	f107 030c 	add.w	r3, r7, #12
 80090a4:	4a3e      	ldr	r2, [pc, #248]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80090a6:	2100      	movs	r1, #0
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f009 fb57 	bl	801275c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 80090ae:	4b3c      	ldr	r3, [pc, #240]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d117      	bne.n	80090e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x176>
			vescmsg.Rxmsg = CAN2RxMessage;
 80090b6:	4a33      	ldr	r2, [pc, #204]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80090b8:	4b39      	ldr	r3, [pc, #228]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80090ba:	4614      	mov	r4, r2
 80090bc:	461d      	mov	r5, r3
 80090be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80090c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80090ca:	4b2e      	ldr	r3, [pc, #184]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80090cc:	331c      	adds	r3, #28
 80090ce:	f107 020c 	add.w	r2, r7, #12
 80090d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80090d6:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80090da:	482a      	ldr	r0, [pc, #168]	; (8009184 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 80090dc:	f008 fb54 	bl	8011788 <set_rx_frames>
			source = VESC_PACKET;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]
 80090e4:	e03e      	b.n	8009164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
			source = RNS_PACKET;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75fb      	strb	r3, [r7, #23]
			switch(CAN1RxMessage.StdId){
 80090ea:	4b25      	ldr	r3, [pc, #148]	; (8009180 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	3b14      	subs	r3, #20
 80090f0:	2b08      	cmp	r3, #8
 80090f2:	d836      	bhi.n	8009162 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
 80090f4:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80090f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fa:	bf00      	nop
 80090fc:	08009121 	.word	0x08009121
 8009100:	08009139 	.word	0x08009139
 8009104:	0800914b 	.word	0x0800914b
 8009108:	08009163 	.word	0x08009163
 800910c:	08009163 	.word	0x08009163
 8009110:	08009163 	.word	0x08009163
 8009114:	08009163 	.word	0x08009163
 8009118:	08009163 	.word	0x08009163
 800911c:	08009163 	.word	0x08009163
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8009120:	4b1f      	ldr	r3, [pc, #124]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	f107 030c 	add.w	r3, r7, #12
 8009128:	4619      	mov	r1, r3
 800912a:	4817      	ldr	r0, [pc, #92]	; (8009188 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 800912c:	f013 fc10 	bl	801c950 <memcpy>
				buf2_flag = 0;
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8009132:	2200      	movs	r2, #0
 8009134:	701a      	strb	r2, [r3, #0]
				break;
 8009136:	e015      	b.n	8009164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8009138:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800913a:	691a      	ldr	r2, [r3, #16]
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	4619      	mov	r1, r3
 8009142:	4813      	ldr	r0, [pc, #76]	; (8009190 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8009144:	f013 fc04 	bl	801c950 <memcpy>
				break;
 8009148:	e00c      	b.n	8009164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 800914a:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800914c:	691a      	ldr	r2, [r3, #16]
 800914e:	f107 030c 	add.w	r3, r7, #12
 8009152:	4619      	mov	r1, r3
 8009154:	480f      	ldr	r0, [pc, #60]	; (8009194 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8009156:	f013 fbfb 	bl	801c950 <memcpy>
				buf2_flag = 1;
 800915a:	4b0c      	ldr	r3, [pc, #48]	; (800918c <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
				break;
 8009160:	e000      	b.n	8009164 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>
				break;
 8009162:	bf00      	nop
		CAN_PROCESS(source);
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff feba 	bl	8008ee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 800916c:	2110      	movs	r1, #16
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f009 fc06 	bl	8012980 <HAL_CAN_ActivateNotification>
}
 8009174:	bf00      	nop
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bdb0      	pop	{r4, r5, r7, pc}
 800917c:	20006fe4 	.word	0x20006fe4
 8009180:	2000700c 	.word	0x2000700c
 8009184:	2000977c 	.word	0x2000977c
 8009188:	20007510 	.word	0x20007510
 800918c:	20000834 	.word	0x20000834
 8009190:	20009d24 	.word	0x20009d24
 8009194:	20009e7c 	.word	0x20009e7c
 8009198:	20009848 	.word	0x20009848
 800919c:	40020814 	.word	0x40020814
 80091a0:	20006f78 	.word	0x20006f78

080091a4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 80091a4:	b5b0      	push	{r4, r5, r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	uint8_t aData[8];
	PACKET_t source;

	if(hcan == &hcan1){
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a6d      	ldr	r2, [pc, #436]	; (8009364 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d16a      	bne.n	800928a <HAL_CAN_RxFifo1MsgPendingCallback+0xe6>

		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN1RxMessage, aData);
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4a6b      	ldr	r2, [pc, #428]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80091ba:	2101      	movs	r1, #1
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f009 facd 	bl	801275c <HAL_CAN_GetRxMessage>
		//sprintf(data,"%d %d %d %d %d %d %d %d \r\n",aData[0],aData[1],aData[2],aData[3],aData[4],aData[5],aData[6],aData[7]);
		if(CAN1RxMessage.IDE == CAN_ID_EXT)
 80091c2:	4b69      	ldr	r3, [pc, #420]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d117      	bne.n	80091fa <HAL_CAN_RxFifo1MsgPendingCallback+0x56>
		{
			vescmsg.Rxmsg = CAN1RxMessage;
 80091ca:	4a68      	ldr	r2, [pc, #416]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80091cc:	4b66      	ldr	r3, [pc, #408]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 80091ce:	4614      	mov	r4, r2
 80091d0:	461d      	mov	r5, r3
 80091d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80091da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80091de:	4b63      	ldr	r3, [pc, #396]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80091e0:	331c      	adds	r3, #28
 80091e2:	f107 020c 	add.w	r2, r7, #12
 80091e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80091ea:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80091ee:	485f      	ldr	r0, [pc, #380]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80091f0:	f008 faca 	bl	8011788 <set_rx_frames>
			source = VESC_PACKET;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
 80091f8:	e03e      	b.n	8009278 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>

		}else{
			source = RNS_PACKET;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 80091fe:	4b5c      	ldr	r3, [pc, #368]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3b14      	subs	r3, #20
 8009204:	2b08      	cmp	r3, #8
 8009206:	d836      	bhi.n	8009276 <HAL_CAN_RxFifo1MsgPendingCallback+0xd2>
 8009208:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 800920a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920e:	bf00      	nop
 8009210:	08009235 	.word	0x08009235
 8009214:	0800924d 	.word	0x0800924d
 8009218:	0800925f 	.word	0x0800925f
 800921c:	08009277 	.word	0x08009277
 8009220:	08009277 	.word	0x08009277
 8009224:	08009277 	.word	0x08009277
 8009228:	08009277 	.word	0x08009277
 800922c:	08009277 	.word	0x08009277
 8009230:	08009277 	.word	0x08009277
			case RNS_TO_mainboard:
				memcpy(&insData_receive, &aData, CAN1RxMessage.DLC);
 8009234:	4b4c      	ldr	r3, [pc, #304]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009236:	691a      	ldr	r2, [r3, #16]
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	4619      	mov	r1, r3
 800923e:	484d      	ldr	r0, [pc, #308]	; (8009374 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8009240:	f013 fb86 	bl	801c950 <memcpy>
				buf2_flag = 0;
 8009244:	4b4c      	ldr	r3, [pc, #304]	; (8009378 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]

				break;
 800924a:	e015      	b.n	8009278 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf1:
				memcpy(&buf1_receive, &aData, CAN1RxMessage.DLC);
 800924c:	4b46      	ldr	r3, [pc, #280]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 800924e:	691a      	ldr	r2, [r3, #16]
 8009250:	f107 030c 	add.w	r3, r7, #12
 8009254:	4619      	mov	r1, r3
 8009256:	4849      	ldr	r0, [pc, #292]	; (800937c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 8009258:	f013 fb7a 	bl	801c950 <memcpy>

				break;
 800925c:	e00c      	b.n	8009278 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case RNS_TO_mainboard_buf2:
				memcpy(&buf2_receive, &aData, CAN1RxMessage.DLC);
 800925e:	4b42      	ldr	r3, [pc, #264]	; (8009368 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c4>)
 8009260:	691a      	ldr	r2, [r3, #16]
 8009262:	f107 030c 	add.w	r3, r7, #12
 8009266:	4619      	mov	r1, r3
 8009268:	4845      	ldr	r0, [pc, #276]	; (8009380 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800926a:	f013 fb71 	bl	801c950 <memcpy>
				buf2_flag = 1;
 800926e:	4b42      	ldr	r3, [pc, #264]	; (8009378 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009270:	2201      	movs	r2, #1
 8009272:	701a      	strb	r2, [r3, #0]
				break;
 8009274:	e000      	b.n	8009278 <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>
			case XY_feedback_state :
				break;
			default:
				break;
 8009276:	bf00      	nop
			}
		}
		CAN_PROCESS(source);
 8009278:	7dfb      	ldrb	r3, [r7, #23]
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff fe30 	bl	8008ee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009280:	2102      	movs	r1, #2
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f009 fb7c 	bl	8012980 <HAL_CAN_ActivateNotification>
		}
		CAN_PROCESS(source);
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
	}

}
 8009288:	e068      	b.n	800935c <HAL_CAN_RxFifo1MsgPendingCallback+0x1b8>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1 , &CAN2RxMessage, aData);
 800928a:	f107 030c 	add.w	r3, r7, #12
 800928e:	4a38      	ldr	r2, [pc, #224]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009290:	2101      	movs	r1, #1
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f009 fa62 	bl	801275c <HAL_CAN_GetRxMessage>
		if(CAN2RxMessage.IDE == CAN_ID_EXT)
 8009298:	4b35      	ldr	r3, [pc, #212]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d117      	bne.n	80092d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x12c>
			vescmsg.Rxmsg = CAN2RxMessage;
 80092a0:	4a32      	ldr	r2, [pc, #200]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80092a2:	4b33      	ldr	r3, [pc, #204]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80092a4:	4614      	mov	r4, r2
 80092a6:	461d      	mov	r5, r3
 80092a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80092ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80092b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			memcpy(vescmsg.Data, aData,8);
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80092b6:	331c      	adds	r3, #28
 80092b8:	f107 020c 	add.w	r2, r7, #12
 80092bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092c0:	e883 0003 	stmia.w	r3, {r0, r1}
			set_rx_frames(&vescmsg);
 80092c4:	4829      	ldr	r0, [pc, #164]	; (800936c <HAL_CAN_RxFifo1MsgPendingCallback+0x1c8>)
 80092c6:	f008 fa5f 	bl	8011788 <set_rx_frames>
			source = VESC_PACKET;
 80092ca:	2301      	movs	r3, #1
 80092cc:	75fb      	strb	r3, [r7, #23]
 80092ce:	e03d      	b.n	800934c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
			source = RNS_PACKET;
 80092d0:	2300      	movs	r3, #0
 80092d2:	75fb      	strb	r3, [r7, #23]
			switch(CAN2RxMessage.StdId){
 80092d4:	4b26      	ldr	r3, [pc, #152]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3b14      	subs	r3, #20
 80092da:	2b08      	cmp	r3, #8
 80092dc:	d835      	bhi.n	800934a <HAL_CAN_RxFifo1MsgPendingCallback+0x1a6>
 80092de:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x140>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009309 	.word	0x08009309
 80092e8:	08009321 	.word	0x08009321
 80092ec:	08009333 	.word	0x08009333
 80092f0:	0800934b 	.word	0x0800934b
 80092f4:	0800934b 	.word	0x0800934b
 80092f8:	0800934b 	.word	0x0800934b
 80092fc:	0800934b 	.word	0x0800934b
 8009300:	0800934b 	.word	0x0800934b
 8009304:	0800934b 	.word	0x0800934b
				memcpy(&insData_receive, &aData, CAN2RxMessage.DLC);
 8009308:	4b19      	ldr	r3, [pc, #100]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	4619      	mov	r1, r3
 8009312:	4818      	ldr	r0, [pc, #96]	; (8009374 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d0>)
 8009314:	f013 fb1c 	bl	801c950 <memcpy>
				buf2_flag = 0;
 8009318:	4b17      	ldr	r3, [pc, #92]	; (8009378 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
				break;
 800931e:	e015      	b.n	800934c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf1_receive, &aData, CAN2RxMessage.DLC);
 8009320:	4b13      	ldr	r3, [pc, #76]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009322:	691a      	ldr	r2, [r3, #16]
 8009324:	f107 030c 	add.w	r3, r7, #12
 8009328:	4619      	mov	r1, r3
 800932a:	4814      	ldr	r0, [pc, #80]	; (800937c <HAL_CAN_RxFifo1MsgPendingCallback+0x1d8>)
 800932c:	f013 fb10 	bl	801c950 <memcpy>
				break;
 8009330:	e00c      	b.n	800934c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				memcpy(&buf2_receive, &aData, CAN2RxMessage.DLC);
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <HAL_CAN_RxFifo1MsgPendingCallback+0x1cc>)
 8009334:	691a      	ldr	r2, [r3, #16]
 8009336:	f107 030c 	add.w	r3, r7, #12
 800933a:	4619      	mov	r1, r3
 800933c:	4810      	ldr	r0, [pc, #64]	; (8009380 <HAL_CAN_RxFifo1MsgPendingCallback+0x1dc>)
 800933e:	f013 fb07 	bl	801c950 <memcpy>
				buf2_flag = 1;
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d4>)
 8009344:	2201      	movs	r2, #1
 8009346:	701a      	strb	r2, [r3, #0]
				break;
 8009348:	e000      	b.n	800934c <HAL_CAN_RxFifo1MsgPendingCallback+0x1a8>
				break;
 800934a:	bf00      	nop
		CAN_PROCESS(source);
 800934c:	7dfb      	ldrb	r3, [r7, #23]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fdc6 	bl	8008ee0 <CAN_PROCESS>
		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8009354:	2110      	movs	r1, #16
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f009 fb12 	bl	8012980 <HAL_CAN_ActivateNotification>
}
 800935c:	bf00      	nop
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bdb0      	pop	{r4, r5, r7, pc}
 8009364:	20006fe4 	.word	0x20006fe4
 8009368:	2000700c 	.word	0x2000700c
 800936c:	2000977c 	.word	0x2000977c
 8009370:	20006f78 	.word	0x20006f78
 8009374:	20007510 	.word	0x20007510
 8009378:	20000834 	.word	0x20000834
 800937c:	20009d24 	.word	0x20009d24
 8009380:	20009e7c 	.word	0x20009e7c

08009384 <set>:
#include "common.h"
#include "math.h"

float expoint[1][7]={{2.0, 0.0, 0.35, 35.0, 0.0, 0.0, 0.0}};

void set(void) {
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0

	Initialize();
 8009388:	f7ff fa4e 	bl	8008828 <Initialize>
	PSxInitDMA(&ps4,&hi2c1);
 800938c:	492a      	ldr	r1, [pc, #168]	; (8009438 <set+0xb4>)
 800938e:	482b      	ldr	r0, [pc, #172]	; (800943c <set+0xb8>)
 8009390:	f7fc fdc8 	bl	8005f24 <PSxInitDMA>
	//	PSxInitUART(&ps4, &huart3);
	TIMxInit(&htim6, 20000, 84);
 8009394:	2254      	movs	r2, #84	; 0x54
 8009396:	f644 6120 	movw	r1, #20000	; 0x4e20
 800939a:	4829      	ldr	r0, [pc, #164]	; (8009440 <set+0xbc>)
 800939c:	f7f9 fff6 	bl	800338c <TIMxInit>
	RNS_config(&hcan1);
 80093a0:	4828      	ldr	r0, [pc, #160]	; (8009444 <set+0xc0>)
 80093a2:	f000 f85d 	bl	8009460 <RNS_config>
	led3 = 1;
 80093a6:	4a28      	ldr	r2, [pc, #160]	; (8009448 <set+0xc4>)
 80093a8:	7853      	ldrb	r3, [r2, #1]
 80093aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ae:	7053      	strb	r3, [r2, #1]

	MODNInit(MODN_FWD_OMNI, 4.0, 0.75, 3.0, 0.03, 800);
 80093b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80093b4:	eddf 1a25 	vldr	s3, [pc, #148]	; 800944c <set+0xc8>
 80093b8:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 80093bc:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 80093c0:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80093c4:	2000      	movs	r0, #0
 80093c6:	f7fb fd83 	bl	8004ed0 <MODNInit>

	setPP_points();
 80093ca:	f001 fde7 	bl	800af9c <setPP_points>
//	laser_dist.R1fB = 5.5;
//	laser_dist.stickfA = 0.5;
//	laser_dist.stickfB = 0.5;

//	svBallvp(svbvu_pulse + 300)
	svBRup
 80093ce:	f44f 7116 	mov.w	r1, #600	; 0x258
 80093d2:	481f      	ldr	r0, [pc, #124]	; (8009450 <set+0xcc>)
 80093d4:	f7ff f928 	bl	8008628 <ServoSetPulse>
	svBRA
 80093d8:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80093dc:	481d      	ldr	r0, [pc, #116]	; (8009454 <set+0xd0>)
 80093de:	f7ff f923 	bl	8008628 <ServoSetPulse>
	Await(1000);
 80093e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093e6:	f004 f865 	bl	800d4b4 <Await>
	led3 = 0;
 80093ea:	4a17      	ldr	r2, [pc, #92]	; (8009448 <set+0xc4>)
 80093ec:	7853      	ldrb	r3, [r2, #1]
 80093ee:	f36f 13c7 	bfc	r3, #7, #1
 80093f2:	7053      	strb	r3, [r2, #1]
	svBRrealup
 80093f4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80093f8:	4815      	ldr	r0, [pc, #84]	; (8009450 <set+0xcc>)
 80093fa:	f7ff f915 	bl	8008628 <ServoSetPulse>
	BgripOFF
 80093fe:	4a12      	ldr	r2, [pc, #72]	; (8009448 <set+0xc4>)
 8009400:	7853      	ldrb	r3, [r2, #1]
 8009402:	f36f 0300 	bfc	r3, #0, #1
 8009406:	7053      	strb	r3, [r2, #1]
	svCloseFlip
 8009408:	f240 7121 	movw	r1, #1825	; 0x721
 800940c:	4812      	ldr	r0, [pc, #72]	; (8009458 <set+0xd4>)
 800940e:	f7ff f90b 	bl	8008628 <ServoSetPulse>
 8009412:	f240 316b 	movw	r1, #875	; 0x36b
 8009416:	4811      	ldr	r0, [pc, #68]	; (800945c <set+0xd8>)
 8009418:	f7ff f906 	bl	8008628 <ServoSetPulse>
	QEIReset(QEI1);
 800941c:	2001      	movs	r0, #1
 800941e:	f7f8 fcd5 	bl	8001dcc <QEIReset>
//	QEIReset(QEI4);
	QEISwap(QEI1, QEI_Swap);
 8009422:	2101      	movs	r1, #1
 8009424:	2001      	movs	r0, #1
 8009426:	f7f8 fd31 	bl	8001e8c <QEISwap>
	QEISwap(QEI4, QEI_Swap);
 800942a:	2101      	movs	r1, #1
 800942c:	2004      	movs	r0, #4
 800942e:	f7f8 fd2d 	bl	8001e8c <QEISwap>
//	QEIWrite(QEI1, 300);		//needed for gripok condition
//	QEIWrite(QEI4, 600);

}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20007630 	.word	0x20007630
 800943c:	2000a0c8 	.word	0x2000a0c8
 8009440:	200069ac 	.word	0x200069ac
 8009444:	20006fe4 	.word	0x20006fe4
 8009448:	40020814 	.word	0x40020814
 800944c:	3cf5c28f 	.word	0x3cf5c28f
 8009450:	20009738 	.word	0x20009738
 8009454:	20009924 	.word	0x20009924
 8009458:	20009974 	.word	0x20009974
 800945c:	2000a5f8 	.word	0x2000a5f8

08009460 <RNS_config>:

void RNS_config(CAN_HandleTypeDef* hcanx) {
 8009460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009464:	b088      	sub	sp, #32
 8009466:	af06      	add	r7, sp, #24
 8009468:	6078      	str	r0, [r7, #4]

	AP = 3.005; AI = 4.247; AD = 0.025;
 800946a:	4baf      	ldr	r3, [pc, #700]	; (8009728 <RNS_config+0x2c8>)
 800946c:	4aaf      	ldr	r2, [pc, #700]	; (800972c <RNS_config+0x2cc>)
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	4baf      	ldr	r3, [pc, #700]	; (8009730 <RNS_config+0x2d0>)
 8009472:	4ab0      	ldr	r2, [pc, #704]	; (8009734 <RNS_config+0x2d4>)
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	4bb0      	ldr	r3, [pc, #704]	; (8009738 <RNS_config+0x2d8>)
 8009478:	4ab0      	ldr	r2, [pc, #704]	; (800973c <RNS_config+0x2dc>)
 800947a:	601a      	str	r2, [r3, #0]
	BP = 3.081; BI = 4.210; BD = 0.025;
 800947c:	4bb0      	ldr	r3, [pc, #704]	; (8009740 <RNS_config+0x2e0>)
 800947e:	4ab1      	ldr	r2, [pc, #708]	; (8009744 <RNS_config+0x2e4>)
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	4bb1      	ldr	r3, [pc, #708]	; (8009748 <RNS_config+0x2e8>)
 8009484:	4ab1      	ldr	r2, [pc, #708]	; (800974c <RNS_config+0x2ec>)
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	4bb1      	ldr	r3, [pc, #708]	; (8009750 <RNS_config+0x2f0>)
 800948a:	4aac      	ldr	r2, [pc, #688]	; (800973c <RNS_config+0x2dc>)
 800948c:	601a      	str	r2, [r3, #0]
	CP = 2.900; CI = 3.823; CD = 0.025;
 800948e:	4bb1      	ldr	r3, [pc, #708]	; (8009754 <RNS_config+0x2f4>)
 8009490:	4ab1      	ldr	r2, [pc, #708]	; (8009758 <RNS_config+0x2f8>)
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	4bb1      	ldr	r3, [pc, #708]	; (800975c <RNS_config+0x2fc>)
 8009496:	4ab2      	ldr	r2, [pc, #712]	; (8009760 <RNS_config+0x300>)
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	4bb2      	ldr	r3, [pc, #712]	; (8009764 <RNS_config+0x304>)
 800949c:	4aa7      	ldr	r2, [pc, #668]	; (800973c <RNS_config+0x2dc>)
 800949e:	601a      	str	r2, [r3, #0]
	DP = 3.025; DI = 4.225; DD = 0.030;
 80094a0:	4bb1      	ldr	r3, [pc, #708]	; (8009768 <RNS_config+0x308>)
 80094a2:	4ab2      	ldr	r2, [pc, #712]	; (800976c <RNS_config+0x30c>)
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	4bb2      	ldr	r3, [pc, #712]	; (8009770 <RNS_config+0x310>)
 80094a8:	4ab2      	ldr	r2, [pc, #712]	; (8009774 <RNS_config+0x314>)
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	4bb2      	ldr	r3, [pc, #712]	; (8009778 <RNS_config+0x318>)
 80094ae:	4ab3      	ldr	r2, [pc, #716]	; (800977c <RNS_config+0x31c>)
 80094b0:	601a      	str	r2, [r3, #0]
//	AP = 2.000; AI = 3.800; AD = 0.02;
//	BP = 2.400; BI = 3.800; BD = 0.02;
//	CP = 1.746; CI = 2.003; CD = 0.001;
//	DP = 1.500; DI = 2.000; DD = 0.000;

	RNSInit(hcanx, &rns);
 80094b2:	49b3      	ldr	r1, [pc, #716]	; (8009780 <RNS_config+0x320>)
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fd f8e1 	bl	800667c <RNSInit>
	//Encoder dcba(0-swap, 1-keep)  BDC dir dcba(0-keep, 1-swap) //0x00 0x00 0x
	RNSSet(&rns, RNS_DEVICE_CONFIG, (float) 0b00000101, (float) fwd_omni, (float) roboconPID);
 80094ba:	f04f 0200 	mov.w	r2, #0
 80094be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094c6:	f04f 0200 	mov.w	r2, #0
 80094ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094ce:	e9cd 2300 	strd	r2, r3, [sp]
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	4bab      	ldr	r3, [pc, #684]	; (8009784 <RNS_config+0x324>)
 80094d8:	2124      	movs	r1, #36	; 0x24
 80094da:	48a9      	ldr	r0, [pc, #676]	; (8009780 <RNS_config+0x320>)
 80094dc:	f7fd fb42 	bl	8006b64 <RNSSet>

	/*****************INITIALIZE ENC VALUE | ENC RATIO*****************/
	RNSSet(&rns, RNS_X_Y_ENC_CONFIG, 0.05 / 4000.0 * 3.142, 2.0,
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094ec:	a37a      	add	r3, pc, #488	; (adr r3, 80096d8 <RNS_config+0x278>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80094fe:	e9cd 2300 	strd	r2, r3, [sp]
 8009502:	a375      	add	r3, pc, #468	; (adr r3, 80096d8 <RNS_config+0x278>)
 8009504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009508:	2149      	movs	r1, #73	; 0x49
 800950a:	489d      	ldr	r0, [pc, #628]	; (8009780 <RNS_config+0x320>)
 800950c:	f7fd fb2a 	bl	8006b64 <RNSSet>
			0.05 / 4000.0 * 3.142, 2.0); //1.0 for nonswap , 2.0 for swap
	RNSSet(&rns, RNS_F_KCD_PTD, 2582.331/2588.222, 0.125 * 31.42 / 2582.331);
 8009510:	a373      	add	r3, pc, #460	; (adr r3, 80096e0 <RNS_config+0x280>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	e9cd 2300 	strd	r2, r3, [sp]
 800951a:	a373      	add	r3, pc, #460	; (adr r3, 80096e8 <RNS_config+0x288>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	211f      	movs	r1, #31
 8009522:	4897      	ldr	r0, [pc, #604]	; (8009780 <RNS_config+0x320>)
 8009524:	f7fd fb1e 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_B_KCD_PTD, 2579.189/2572.120, 0.125 * 31.42 / 2579.189);
 8009528:	a371      	add	r3, pc, #452	; (adr r3, 80096f0 <RNS_config+0x290>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	e9cd 2300 	strd	r2, r3, [sp]
 8009532:	a371      	add	r3, pc, #452	; (adr r3, 80096f8 <RNS_config+0x298>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	2120      	movs	r1, #32
 800953a:	4891      	ldr	r0, [pc, #580]	; (8009780 <RNS_config+0x320>)
 800953c:	f7fd fb12 	bl	8006b64 <RNSSet>

	/*****************INITIALIZE MOTOR MAX SPEED*****************/
	RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 9.087, 19999.0);
 8009540:	a36f      	add	r3, pc, #444	; (adr r3, 8009700 <RNS_config+0x2a0>)
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800954a:	a36f      	add	r3, pc, #444	; (adr r3, 8009708 <RNS_config+0x2a8>)
 800954c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009550:	e9cd 2300 	strd	r2, r3, [sp]
 8009554:	f04f 0200 	mov.w	r2, #0
 8009558:	4b8b      	ldr	r3, [pc, #556]	; (8009788 <RNS_config+0x328>)
 800955a:	212b      	movs	r1, #43	; 0x2b
 800955c:	4888      	ldr	r0, [pc, #544]	; (8009780 <RNS_config+0x320>)
 800955e:	f7fd fb01 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 9.548, 19999.0);
 8009562:	a367      	add	r3, pc, #412	; (adr r3, 8009700 <RNS_config+0x2a0>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800956c:	a368      	add	r3, pc, #416	; (adr r3, 8009710 <RNS_config+0x2b0>)
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	e9cd 2300 	strd	r2, r3, [sp]
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	4b83      	ldr	r3, [pc, #524]	; (8009788 <RNS_config+0x328>)
 800957c:	212c      	movs	r1, #44	; 0x2c
 800957e:	4880      	ldr	r0, [pc, #512]	; (8009780 <RNS_config+0x320>)
 8009580:	f7fd faf0 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 7.928, 19999.0);
 8009584:	a35e      	add	r3, pc, #376	; (adr r3, 8009700 <RNS_config+0x2a0>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800958e:	a362      	add	r3, pc, #392	; (adr r3, 8009718 <RNS_config+0x2b8>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	e9cd 2300 	strd	r2, r3, [sp]
 8009598:	f04f 0200 	mov.w	r2, #0
 800959c:	4b7a      	ldr	r3, [pc, #488]	; (8009788 <RNS_config+0x328>)
 800959e:	212d      	movs	r1, #45	; 0x2d
 80095a0:	4877      	ldr	r0, [pc, #476]	; (8009780 <RNS_config+0x320>)
 80095a2:	f7fd fadf 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 8.993, 19999.0);
 80095a6:	a356      	add	r3, pc, #344	; (adr r3, 8009700 <RNS_config+0x2a0>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009720 <RNS_config+0x2c0>)
 80095b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b6:	e9cd 2300 	strd	r2, r3, [sp]
 80095ba:	f04f 0200 	mov.w	r2, #0
 80095be:	4b72      	ldr	r3, [pc, #456]	; (8009788 <RNS_config+0x328>)
 80095c0:	212e      	movs	r1, #46	; 0x2e
 80095c2:	486f      	ldr	r0, [pc, #444]	; (8009780 <RNS_config+0x320>)
 80095c4:	f7fd face 	bl	8006b64 <RNSSet>

	RNSSet(&rns, RNS_F_LEFT_VEL_PID,  AP, AI, AD);
 80095c8:	4b57      	ldr	r3, [pc, #348]	; (8009728 <RNS_config+0x2c8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7f6 ffbb 	bl	8000548 <__aeabi_f2d>
 80095d2:	4680      	mov	r8, r0
 80095d4:	4689      	mov	r9, r1
 80095d6:	4b56      	ldr	r3, [pc, #344]	; (8009730 <RNS_config+0x2d0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7f6 ffb4 	bl	8000548 <__aeabi_f2d>
 80095e0:	4604      	mov	r4, r0
 80095e2:	460d      	mov	r5, r1
 80095e4:	4b54      	ldr	r3, [pc, #336]	; (8009738 <RNS_config+0x2d8>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7f6 ffad 	bl	8000548 <__aeabi_f2d>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095f6:	e9cd 4500 	strd	r4, r5, [sp]
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	212f      	movs	r1, #47	; 0x2f
 8009600:	485f      	ldr	r0, [pc, #380]	; (8009780 <RNS_config+0x320>)
 8009602:	f7fd faaf 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_F_RIGHT_VEL_PID, BP, BI , BD);
 8009606:	4b4e      	ldr	r3, [pc, #312]	; (8009740 <RNS_config+0x2e0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f7f6 ff9c 	bl	8000548 <__aeabi_f2d>
 8009610:	4680      	mov	r8, r0
 8009612:	4689      	mov	r9, r1
 8009614:	4b4c      	ldr	r3, [pc, #304]	; (8009748 <RNS_config+0x2e8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4618      	mov	r0, r3
 800961a:	f7f6 ff95 	bl	8000548 <__aeabi_f2d>
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
 8009622:	4b4b      	ldr	r3, [pc, #300]	; (8009750 <RNS_config+0x2f0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4618      	mov	r0, r3
 8009628:	f7f6 ff8e 	bl	8000548 <__aeabi_f2d>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009634:	e9cd 4500 	strd	r4, r5, [sp]
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	2130      	movs	r1, #48	; 0x30
 800963e:	4850      	ldr	r0, [pc, #320]	; (8009780 <RNS_config+0x320>)
 8009640:	f7fd fa90 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_B_LEFT_VEL_PID,  CP, CI, CD);
 8009644:	4b43      	ldr	r3, [pc, #268]	; (8009754 <RNS_config+0x2f4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4618      	mov	r0, r3
 800964a:	f7f6 ff7d 	bl	8000548 <__aeabi_f2d>
 800964e:	4680      	mov	r8, r0
 8009650:	4689      	mov	r9, r1
 8009652:	4b42      	ldr	r3, [pc, #264]	; (800975c <RNS_config+0x2fc>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4618      	mov	r0, r3
 8009658:	f7f6 ff76 	bl	8000548 <__aeabi_f2d>
 800965c:	4604      	mov	r4, r0
 800965e:	460d      	mov	r5, r1
 8009660:	4b40      	ldr	r3, [pc, #256]	; (8009764 <RNS_config+0x304>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f7f6 ff6f 	bl	8000548 <__aeabi_f2d>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009672:	e9cd 4500 	strd	r4, r5, [sp]
 8009676:	4642      	mov	r2, r8
 8009678:	464b      	mov	r3, r9
 800967a:	2131      	movs	r1, #49	; 0x31
 800967c:	4840      	ldr	r0, [pc, #256]	; (8009780 <RNS_config+0x320>)
 800967e:	f7fd fa71 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_B_RIGHT_VEL_PID,  DP, DI, DD);
 8009682:	4b39      	ldr	r3, [pc, #228]	; (8009768 <RNS_config+0x308>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f7f6 ff5e 	bl	8000548 <__aeabi_f2d>
 800968c:	4680      	mov	r8, r0
 800968e:	4689      	mov	r9, r1
 8009690:	4b37      	ldr	r3, [pc, #220]	; (8009770 <RNS_config+0x310>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f7f6 ff57 	bl	8000548 <__aeabi_f2d>
 800969a:	4604      	mov	r4, r0
 800969c:	460d      	mov	r5, r1
 800969e:	4b36      	ldr	r3, [pc, #216]	; (8009778 <RNS_config+0x318>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f6 ff50 	bl	8000548 <__aeabi_f2d>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096b0:	e9cd 4500 	strd	r4, r5, [sp]
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	2132      	movs	r1, #50	; 0x32
 80096ba:	4831      	ldr	r0, [pc, #196]	; (8009780 <RNS_config+0x320>)
 80096bc:	f7fd fa52 	bl	8006b64 <RNSSet>

	//	RNSSet(&rns, RNS_F_LEFT_VEL_FUZZY_PID_BASE, 0.2, 0.2, 0.2);
	//	RNSSet(&rns, RNS_F_LEFT_VEL_FUZZY_PID_PARAM, 0.02, 0.02, 0.02);

	RNSSet(&rns, RNS_PPInit); //Path Planning
 80096c0:	2116      	movs	r1, #22
 80096c2:	482f      	ldr	r0, [pc, #188]	; (8009780 <RNS_config+0x320>)
 80096c4:	f7fd fa4e 	bl	8006b64 <RNSSet>
//	RNSSet(&rns, RNS_PPSetZ, PPArgSet);
	RNSSet(&rns, RNS_PPPathPID, 1.0, 0.5, 0.5);
 80096c8:	f04f 0200 	mov.w	r2, #0
 80096cc:	4b2f      	ldr	r3, [pc, #188]	; (800978c <RNS_config+0x32c>)
 80096ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	e05b      	b.n	8009790 <RNS_config+0x330>
 80096d8:	b9727cf5 	.word	0xb9727cf5
 80096dc:	3f049766 	.word	0x3f049766
 80096e0:	922ee21c 	.word	0x922ee21c
 80096e4:	3f58eb2b 	.word	0x3f58eb2b
 80096e8:	b6ec4ad1 	.word	0xb6ec4ad1
 80096ec:	3fefed5a 	.word	0x3fefed5a
 80096f0:	fe8286d1 	.word	0xfe8286d1
 80096f4:	3f58f2f0 	.word	0x3f58f2f0
 80096f8:	d19c2ac3 	.word	0xd19c2ac3
 80096fc:	3ff00b41 	.word	0x3ff00b41
 8009700:	00000000 	.word	0x00000000
 8009704:	40d387c0 	.word	0x40d387c0
 8009708:	a9e7f0e7 	.word	0xa9e7f0e7
 800970c:	3fbc2c0f 	.word	0x3fbc2c0f
 8009710:	886b3f62 	.word	0x886b3f62
 8009714:	3fbacfd8 	.word	0x3fbacfd8
 8009718:	e3d7b389 	.word	0xe3d7b389
 800971c:	3fc02532 	.word	0x3fc02532
 8009720:	1f5ec3e8 	.word	0x1f5ec3e8
 8009724:	3fbc7772 	.word	0x3fbc7772
 8009728:	2000a374 	.word	0x2000a374
 800972c:	404051ec 	.word	0x404051ec
 8009730:	20007770 	.word	0x20007770
 8009734:	4087e76d 	.word	0x4087e76d
 8009738:	2000a36c 	.word	0x2000a36c
 800973c:	3ccccccd 	.word	0x3ccccccd
 8009740:	200079fc 	.word	0x200079fc
 8009744:	40452f1b 	.word	0x40452f1b
 8009748:	2000946c 	.word	0x2000946c
 800974c:	4086b852 	.word	0x4086b852
 8009750:	20007760 	.word	0x20007760
 8009754:	20009704 	.word	0x20009704
 8009758:	4039999a 	.word	0x4039999a
 800975c:	200098b0 	.word	0x200098b0
 8009760:	4074ac08 	.word	0x4074ac08
 8009764:	20007058 	.word	0x20007058
 8009768:	20009ef8 	.word	0x20009ef8
 800976c:	4041999a 	.word	0x4041999a
 8009770:	20007534 	.word	0x20007534
 8009774:	40873333 	.word	0x40873333
 8009778:	20009b24 	.word	0x20009b24
 800977c:	3cf5c28f 	.word	0x3cf5c28f
 8009780:	200091e8 	.word	0x200091e8
 8009784:	40140000 	.word	0x40140000
 8009788:	3ff00000 	.word	0x3ff00000
 800978c:	3fe00000 	.word	0x3fe00000
 8009790:	4b25      	ldr	r3, [pc, #148]	; (8009828 <RNS_config+0x3c8>)
 8009792:	e9cd 2300 	strd	r2, r3, [sp]
 8009796:	f04f 0200 	mov.w	r2, #0
 800979a:	4b24      	ldr	r3, [pc, #144]	; (800982c <RNS_config+0x3cc>)
 800979c:	2146      	movs	r1, #70	; 0x46
 800979e:	4824      	ldr	r0, [pc, #144]	; (8009830 <RNS_config+0x3d0>)
 80097a0:	f7fd f9e0 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_PPEndPID, 0.5, 0.1, 1.0);
 80097a4:	f04f 0200 	mov.w	r2, #0
 80097a8:	4b20      	ldr	r3, [pc, #128]	; (800982c <RNS_config+0x3cc>)
 80097aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097ae:	a318      	add	r3, pc, #96	; (adr r3, 8009810 <RNS_config+0x3b0>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	e9cd 2300 	strd	r2, r3, [sp]
 80097b8:	f04f 0200 	mov.w	r2, #0
 80097bc:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <RNS_config+0x3c8>)
 80097be:	2147      	movs	r1, #71	; 0x47
 80097c0:	481b      	ldr	r0, [pc, #108]	; (8009830 <RNS_config+0x3d0>)
 80097c2:	f7fd f9cf 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_PPZPID, 1.0, 0.05, 0.2, 5.5);
 80097c6:	f04f 0200 	mov.w	r2, #0
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <RNS_config+0x3d4>)
 80097cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097d0:	a311      	add	r3, pc, #68	; (adr r3, 8009818 <RNS_config+0x3b8>)
 80097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097da:	a311      	add	r3, pc, #68	; (adr r3, 8009820 <RNS_config+0x3c0>)
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	e9cd 2300 	strd	r2, r3, [sp]
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	4b10      	ldr	r3, [pc, #64]	; (800982c <RNS_config+0x3cc>)
 80097ea:	214f      	movs	r1, #79	; 0x4f
 80097ec:	4810      	ldr	r0, [pc, #64]	; (8009830 <RNS_config+0x3d0>)
 80097ee:	f7fd f9b9 	bl	8006b64 <RNSSet>
	RNSSet(&rns, RNS_PPSetCRV_PTS, 10.0);         // Change No. of Points in the Curved Path
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	4b10      	ldr	r3, [pc, #64]	; (8009838 <RNS_config+0x3d8>)
 80097f8:	211d      	movs	r1, #29
 80097fa:	480d      	ldr	r0, [pc, #52]	; (8009830 <RNS_config+0x3d0>)
 80097fc:	f7fd f9b2 	bl	8006b64 <RNSSet>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
 8009810:	9999999a 	.word	0x9999999a
 8009814:	3fb99999 	.word	0x3fb99999
 8009818:	9999999a 	.word	0x9999999a
 800981c:	3fc99999 	.word	0x3fc99999
 8009820:	9999999a 	.word	0x9999999a
 8009824:	3fa99999 	.word	0x3fa99999
 8009828:	3fe00000 	.word	0x3fe00000
 800982c:	3ff00000 	.word	0x3ff00000
 8009830:	200091e8 	.word	0x200091e8
 8009834:	40160000 	.word	0x40160000
 8009838:	40240000 	.word	0x40240000

0800983c <manual_mode>:

void manual_mode(void){
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
	while(sys.manual){
 8009840:	e0cd      	b.n	80099de <manual_mode+0x1a2>
		//NAVI

		if(ps4.button == R1_SQUARE)
 8009842:	4b6c      	ldr	r3, [pc, #432]	; (80099f4 <manual_mode+0x1b8>)
 8009844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009846:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800984a:	d10b      	bne.n	8009864 <manual_mode+0x28>
			RNSVelocity(2.5, 2.5, 2.5, 2.5, &rns);
 800984c:	486a      	ldr	r0, [pc, #424]	; (80099f8 <manual_mode+0x1bc>)
 800984e:	eef0 1a04 	vmov.f32	s3, #4	; 0x40200000  2.5
 8009852:	eeb0 1a04 	vmov.f32	s2, #4	; 0x40200000  2.5
 8009856:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800985a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800985e:	f7fc ffc5 	bl	80067ec <RNSVelocity>
 8009862:	e003      	b.n	800986c <manual_mode+0x30>
		else
			realMODN(&ps4, &rns);
 8009864:	4964      	ldr	r1, [pc, #400]	; (80099f8 <manual_mode+0x1bc>)
 8009866:	4863      	ldr	r0, [pc, #396]	; (80099f4 <manual_mode+0x1b8>)
 8009868:	f7fb fe76 	bl	8005558 <realMODN>

		if(ps4.button == R1){
 800986c:	4b61      	ldr	r3, [pc, #388]	; (80099f4 <manual_mode+0x1b8>)
 800986e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009874:	d104      	bne.n	8009880 <manual_mode+0x44>
			setSpeedMODN(7.0);
 8009876:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800987a:	f7fc f91d 	bl	8005ab8 <setSpeedMODN>
 800987e:	e003      	b.n	8009888 <manual_mode+0x4c>
		}else{
			setSpeedMODN(4.0);
 8009880:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8009884:	f7fc f918 	bl	8005ab8 <setSpeedMODN>
		}

		//flipservo
		if(lagori.flip == 1){
 8009888:	4b5c      	ldr	r3, [pc, #368]	; (80099fc <manual_mode+0x1c0>)
 800988a:	785b      	ldrb	r3, [r3, #1]
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b01      	cmp	r3, #1
 8009894:	d10a      	bne.n	80098ac <manual_mode+0x70>
			svFlip
 8009896:	f240 1145 	movw	r1, #325	; 0x145
 800989a:	4859      	ldr	r0, [pc, #356]	; (8009a00 <manual_mode+0x1c4>)
 800989c:	f7fe fec4 	bl	8008628 <ServoSetPulse>
 80098a0:	f640 01fc 	movw	r1, #2300	; 0x8fc
 80098a4:	4857      	ldr	r0, [pc, #348]	; (8009a04 <manual_mode+0x1c8>)
 80098a6:	f7fe febf 	bl	8008628 <ServoSetPulse>
 80098aa:	e010      	b.n	80098ce <manual_mode+0x92>
		}else if(lagori.flip == 0){
 80098ac:	4b53      	ldr	r3, [pc, #332]	; (80099fc <manual_mode+0x1c0>)
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d109      	bne.n	80098ce <manual_mode+0x92>
			svNoFlip
 80098ba:	f240 3139 	movw	r1, #825	; 0x339
 80098be:	4850      	ldr	r0, [pc, #320]	; (8009a00 <manual_mode+0x1c4>)
 80098c0:	f7fe feb2 	bl	8008628 <ServoSetPulse>
 80098c4:	f240 713a 	movw	r1, #1850	; 0x73a
 80098c8:	484e      	ldr	r0, [pc, #312]	; (8009a04 <manual_mode+0x1c8>)
 80098ca:	f7fe fead 	bl	8008628 <ServoSetPulse>
		}

		//lagori gripper
		if(lagori.pwstate == 0){	//open
 80098ce:	4b4b      	ldr	r3, [pc, #300]	; (80099fc <manual_mode+0x1c0>)
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d11b      	bne.n	8009914 <manual_mode+0xd8>
			lagori.gripok = 0;
 80098dc:	4a47      	ldr	r2, [pc, #284]	; (80099fc <manual_mode+0x1c0>)
 80098de:	7853      	ldrb	r3, [r2, #1]
 80098e0:	f36f 1386 	bfc	r3, #6, #1
 80098e4:	7053      	strb	r3, [r2, #1]
			if(!LGopen)
 80098e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098ea:	4847      	ldr	r0, [pc, #284]	; (8009a08 <manual_mode+0x1cc>)
 80098ec:	f00a fd5a 	bl	80143a4 <HAL_GPIO_ReadPin>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d004      	beq.n	8009900 <manual_mode+0xc4>
				LGPW(9000)
 80098f6:	4945      	ldr	r1, [pc, #276]	; (8009a0c <manual_mode+0x1d0>)
 80098f8:	4845      	ldr	r0, [pc, #276]	; (8009a10 <manual_mode+0x1d4>)
 80098fa:	f7f7 fd41 	bl	8001380 <WriteBDC>
 80098fe:	e06e      	b.n	80099de <manual_mode+0x1a2>
			else{
				LGPW(0)
 8009900:	2100      	movs	r1, #0
 8009902:	4843      	ldr	r0, [pc, #268]	; (8009a10 <manual_mode+0x1d4>)
 8009904:	f7f7 fd3c 	bl	8001380 <WriteBDC>
				lagori.pwstate = 3;
 8009908:	4a3c      	ldr	r2, [pc, #240]	; (80099fc <manual_mode+0x1c0>)
 800990a:	7853      	ldrb	r3, [r2, #1]
 800990c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009910:	7053      	strb	r3, [r2, #1]
 8009912:	e064      	b.n	80099de <manual_mode+0x1a2>
			}
		}
		else if(lagori.pwstate == 1){	//grip
 8009914:	4b39      	ldr	r3, [pc, #228]	; (80099fc <manual_mode+0x1c0>)
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b10      	cmp	r3, #16
 8009920:	d13c      	bne.n	800999c <manual_mode+0x160>
			if(lsLGl && lsLGr){
 8009922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009926:	483b      	ldr	r0, [pc, #236]	; (8009a14 <manual_mode+0x1d8>)
 8009928:	f00a fd3c 	bl	80143a4 <HAL_GPIO_ReadPin>
 800992c:	4603      	mov	r3, r0
 800992e:	2b01      	cmp	r3, #1
 8009930:	d11a      	bne.n	8009968 <manual_mode+0x12c>
 8009932:	2108      	movs	r1, #8
 8009934:	4838      	ldr	r0, [pc, #224]	; (8009a18 <manual_mode+0x1dc>)
 8009936:	f00a fd35 	bl	80143a4 <HAL_GPIO_ReadPin>
 800993a:	4603      	mov	r3, r0
 800993c:	2b01      	cmp	r3, #1
 800993e:	d113      	bne.n	8009968 <manual_mode+0x12c>
				LGPW(-9000)
 8009940:	f242 3128 	movw	r1, #9000	; 0x2328
 8009944:	4832      	ldr	r0, [pc, #200]	; (8009a10 <manual_mode+0x1d4>)
 8009946:	f7f7 fd1b 	bl	8001380 <WriteBDC>
				if(enqpwLG < dangerclose){
 800994a:	4b34      	ldr	r3, [pc, #208]	; (8009a1c <manual_mode+0x1e0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f513 7fe1 	cmn.w	r3, #450	; 0x1c2
 8009952:	da44      	bge.n	80099de <manual_mode+0x1a2>
					LGPW(0)
 8009954:	2100      	movs	r1, #0
 8009956:	482e      	ldr	r0, [pc, #184]	; (8009a10 <manual_mode+0x1d4>)
 8009958:	f7f7 fd12 	bl	8001380 <WriteBDC>
					lagori.pwstate = 0;
 800995c:	4a27      	ldr	r2, [pc, #156]	; (80099fc <manual_mode+0x1c0>)
 800995e:	7853      	ldrb	r3, [r2, #1]
 8009960:	f36f 1305 	bfc	r3, #4, #2
 8009964:	7053      	strb	r3, [r2, #1]
				if(enqpwLG < dangerclose){
 8009966:	e03a      	b.n	80099de <manual_mode+0x1a2>
				}
			}else{
				LGPW(0)
 8009968:	2100      	movs	r1, #0
 800996a:	4829      	ldr	r0, [pc, #164]	; (8009a10 <manual_mode+0x1d4>)
 800996c:	f7f7 fd08 	bl	8001380 <WriteBDC>
				lagori.gripok = 1;
 8009970:	4a22      	ldr	r2, [pc, #136]	; (80099fc <manual_mode+0x1c0>)
 8009972:	7853      	ldrb	r3, [r2, #1]
 8009974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009978:	7053      	strb	r3, [r2, #1]
				lagori.pwstate = 3;
 800997a:	4a20      	ldr	r2, [pc, #128]	; (80099fc <manual_mode+0x1c0>)
 800997c:	7853      	ldrb	r3, [r2, #1]
 800997e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009982:	7053      	strb	r3, [r2, #1]
				sprintf(data, "pwenq, %d\n", enqpwLG);
 8009984:	4b25      	ldr	r3, [pc, #148]	; (8009a1c <manual_mode+0x1e0>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	4925      	ldr	r1, [pc, #148]	; (8009a20 <manual_mode+0x1e4>)
 800998c:	4825      	ldr	r0, [pc, #148]	; (8009a24 <manual_mode+0x1e8>)
 800998e:	f013 ffcf 	bl	801d930 <siprintf>
				UARTSend
 8009992:	4924      	ldr	r1, [pc, #144]	; (8009a24 <manual_mode+0x1e8>)
 8009994:	4824      	ldr	r0, [pc, #144]	; (8009a28 <manual_mode+0x1ec>)
 8009996:	f7f9 ff9b 	bl	80038d0 <UARTPrintString>
 800999a:	e020      	b.n	80099de <manual_mode+0x1a2>
			}
		}
		else if(lagori.pwstate == 2){	//close OR retry
 800999c:	4b17      	ldr	r3, [pc, #92]	; (80099fc <manual_mode+0x1c0>)
 800999e:	785b      	ldrb	r3, [r3, #1]
 80099a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b20      	cmp	r3, #32
 80099a8:	d119      	bne.n	80099de <manual_mode+0x1a2>
			if(!(LGclose))	LGPW(-9000)
 80099aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80099ae:	4816      	ldr	r0, [pc, #88]	; (8009a08 <manual_mode+0x1cc>)
 80099b0:	f00a fcf8 	bl	80143a4 <HAL_GPIO_ReadPin>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d005      	beq.n	80099c6 <manual_mode+0x18a>
 80099ba:	f242 3128 	movw	r1, #9000	; 0x2328
 80099be:	4814      	ldr	r0, [pc, #80]	; (8009a10 <manual_mode+0x1d4>)
 80099c0:	f7f7 fcde 	bl	8001380 <WriteBDC>
 80099c4:	e00b      	b.n	80099de <manual_mode+0x1a2>
			else{
				LGPW(0)
 80099c6:	2100      	movs	r1, #0
 80099c8:	4811      	ldr	r0, [pc, #68]	; (8009a10 <manual_mode+0x1d4>)
 80099ca:	f7f7 fcd9 	bl	8001380 <WriteBDC>
				QEIReset(QEI1);
 80099ce:	2001      	movs	r0, #1
 80099d0:	f7f8 f9fc 	bl	8001dcc <QEIReset>
				lagori.pwstate = 3;
 80099d4:	4a09      	ldr	r2, [pc, #36]	; (80099fc <manual_mode+0x1c0>)
 80099d6:	7853      	ldrb	r3, [r2, #1]
 80099d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80099dc:	7053      	strb	r3, [r2, #1]
	while(sys.manual){
 80099de:	4b13      	ldr	r3, [pc, #76]	; (8009a2c <manual_mode+0x1f0>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	f003 0308 	and.w	r3, r3, #8
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f47f af2a 	bne.w	8009842 <manual_mode+0x6>
			}
		}

	}
}
 80099ee:	bf00      	nop
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	2000a0c8 	.word	0x2000a0c8
 80099f8:	200091e8 	.word	0x200091e8
 80099fc:	20009844 	.word	0x20009844
 8009a00:	20009974 	.word	0x20009974
 8009a04:	2000a5f8 	.word	0x2000a5f8
 8009a08:	40021000 	.word	0x40021000
 8009a0c:	ffffdcd8 	.word	0xffffdcd8
 8009a10:	2000a5d4 	.word	0x2000a5d4
 8009a14:	40020000 	.word	0x40020000
 8009a18:	40020c00 	.word	0x40020c00
 8009a1c:	200099fc 	.word	0x200099fc
 8009a20:	08022210 	.word	0x08022210
 8009a24:	20006948 	.word	0x20006948
 8009a28:	200067e4 	.word	0x200067e4
 8009a2c:	2000779c 	.word	0x2000779c

08009a30 <lagori_func>:

void lagori_func (void){
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0

	//esp32Init(&huart3);
	lagori.flip = 2;
 8009a34:	4ac4      	ldr	r2, [pc, #784]	; (8009d48 <lagori_func+0x318>)
 8009a36:	7853      	ldrb	r3, [r2, #1]
 8009a38:	2102      	movs	r1, #2
 8009a3a:	f361 0301 	bfi	r3, r1, #0, #2
 8009a3e:	7053      	strb	r3, [r2, #1]
	QEIReset(QEI4);
 8009a40:	2004      	movs	r0, #4
 8009a42:	f7f8 f9c3 	bl	8001dcc <QEIReset>
	svBRup
 8009a46:	f44f 7116 	mov.w	r1, #600	; 0x258
 8009a4a:	48c0      	ldr	r0, [pc, #768]	; (8009d4c <lagori_func+0x31c>)
 8009a4c:	f7fe fdec 	bl	8008628 <ServoSetPulse>
	svBRA
 8009a50:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8009a54:	48be      	ldr	r0, [pc, #760]	; (8009d50 <lagori_func+0x320>)
 8009a56:	f7fe fde7 	bl	8008628 <ServoSetPulse>
	Await(500);
 8009a5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009a5e:	f003 fd29 	bl	800d4b4 <Await>
	BgripOFF
 8009a62:	4abc      	ldr	r2, [pc, #752]	; (8009d54 <lagori_func+0x324>)
 8009a64:	7853      	ldrb	r3, [r2, #1]
 8009a66:	f36f 0300 	bfc	r3, #0, #1
 8009a6a:	7053      	strb	r3, [r2, #1]
	svBRrealup
 8009a6c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8009a70:	48b6      	ldr	r0, [pc, #728]	; (8009d4c <lagori_func+0x31c>)
 8009a72:	f7fe fdd9 	bl	8008628 <ServoSetPulse>
	svCloseFlip
 8009a76:	f240 7121 	movw	r1, #1825	; 0x721
 8009a7a:	48b7      	ldr	r0, [pc, #732]	; (8009d58 <lagori_func+0x328>)
 8009a7c:	f7fe fdd4 	bl	8008628 <ServoSetPulse>
 8009a80:	f240 316b 	movw	r1, #875	; 0x36b
 8009a84:	48b5      	ldr	r0, [pc, #724]	; (8009d5c <lagori_func+0x32c>)
 8009a86:	f7fe fdcf 	bl	8008628 <ServoSetPulse>
	lagori.pwstate = 0;
 8009a8a:	4aaf      	ldr	r2, [pc, #700]	; (8009d48 <lagori_func+0x318>)
 8009a8c:	7853      	ldrb	r3, [r2, #1]
 8009a8e:	f36f 1305 	bfc	r3, #4, #2
 8009a92:	7053      	strb	r3, [r2, #1]

//	lagori.pwstate = 2;
//	RNSSet(&rns, RNS_PPSetZ, 180);
//	QEIWrite(QEI1, -333);

	while(sys.manual){
 8009a94:	e2be      	b.n	800a014 <lagori_func+0x5e4>
		if(ps4.button == CROSS){		//grip lagori
 8009a96:	4bb2      	ldr	r3, [pc, #712]	; (8009d60 <lagori_func+0x330>)
 8009a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a9e:	d10b      	bne.n	8009ab8 <lagori_func+0x88>
			while(ps4.button == CROSS);
 8009aa0:	bf00      	nop
 8009aa2:	4baf      	ldr	r3, [pc, #700]	; (8009d60 <lagori_func+0x330>)
 8009aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aaa:	d0fa      	beq.n	8009aa2 <lagori_func+0x72>
			lagori.pwstate = 1;
 8009aac:	4aa6      	ldr	r2, [pc, #664]	; (8009d48 <lagori_func+0x318>)
 8009aae:	7853      	ldrb	r3, [r2, #1]
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f361 1305 	bfi	r3, r1, #4, #2
 8009ab6:	7053      	strb	r3, [r2, #1]
		}

		if(ps4.button == CIRCLE){		//flip 2, 3, 4, 5 + grip 1
 8009ab8:	4ba9      	ldr	r3, [pc, #676]	; (8009d60 <lagori_func+0x330>)
 8009aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ac0:	d140      	bne.n	8009b44 <lagori_func+0x114>
			//based on the height, bldc up, close grip, flip, release, bldc down
			while(ps4.button == CIRCLE);
 8009ac2:	bf00      	nop
 8009ac4:	4ba6      	ldr	r3, [pc, #664]	; (8009d60 <lagori_func+0x330>)
 8009ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009acc:	d0fa      	beq.n	8009ac4 <lagori_func+0x94>
			lagori.pwstate = 0;
 8009ace:	4a9e      	ldr	r2, [pc, #632]	; (8009d48 <lagori_func+0x318>)
 8009ad0:	7853      	ldrb	r3, [r2, #1]
 8009ad2:	f36f 1305 	bfc	r3, #4, #2
 8009ad6:	7053      	strb	r3, [r2, #1]
			lagori.bldclapp = 0;
 8009ad8:	4a9b      	ldr	r2, [pc, #620]	; (8009d48 <lagori_func+0x318>)
 8009ada:	7813      	ldrb	r3, [r2, #0]
 8009adc:	f36f 0300 	bfc	r3, #0, #1
 8009ae0:	7013      	strb	r3, [r2, #0]
			lagori.bldcfapp = 1;
 8009ae2:	4a99      	ldr	r2, [pc, #612]	; (8009d48 <lagori_func+0x318>)
 8009ae4:	7813      	ldrb	r3, [r2, #0]
 8009ae6:	f043 0302 	orr.w	r3, r3, #2
 8009aea:	7013      	strb	r3, [r2, #0]
			Await(750);
 8009aec:	f240 20ee 	movw	r0, #750	; 0x2ee
 8009af0:	f003 fce0 	bl	800d4b4 <Await>
//			while(lagori.bldcstart != 0){}
			lagori.flip = 1;
 8009af4:	4a94      	ldr	r2, [pc, #592]	; (8009d48 <lagori_func+0x318>)
 8009af6:	7853      	ldrb	r3, [r2, #1]
 8009af8:	2101      	movs	r1, #1
 8009afa:	f361 0301 	bfi	r3, r1, #0, #2
 8009afe:	7053      	strb	r3, [r2, #1]
			Await(333);
 8009b00:	f240 104d 	movw	r0, #333	; 0x14d
 8009b04:	f003 fcd6 	bl	800d4b4 <Await>
			while(!lagori.gripok){
 8009b08:	e00e      	b.n	8009b28 <lagori_func+0xf8>
				lagori.pwstate = 1;
 8009b0a:	4a8f      	ldr	r2, [pc, #572]	; (8009d48 <lagori_func+0x318>)
 8009b0c:	7853      	ldrb	r3, [r2, #1]
 8009b0e:	2101      	movs	r1, #1
 8009b10:	f361 1305 	bfi	r3, r1, #4, #2
 8009b14:	7053      	strb	r3, [r2, #1]
				Await(993);
 8009b16:	f240 30e1 	movw	r0, #993	; 0x3e1
 8009b1a:	f003 fccb 	bl	800d4b4 <Await>
				if(ps4.button == SQUARE)
 8009b1e:	4b90      	ldr	r3, [pc, #576]	; (8009d60 <lagori_func+0x330>)
 8009b20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b26:	d007      	beq.n	8009b38 <lagori_func+0x108>
			while(!lagori.gripok){
 8009b28:	4b87      	ldr	r3, [pc, #540]	; (8009d48 <lagori_func+0x318>)
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d0e9      	beq.n	8009b0a <lagori_func+0xda>
 8009b36:	e000      	b.n	8009b3a <lagori_func+0x10a>
					break;
 8009b38:	bf00      	nop
			}
			lagori.flip = 0;
 8009b3a:	4a83      	ldr	r2, [pc, #524]	; (8009d48 <lagori_func+0x318>)
 8009b3c:	7853      	ldrb	r3, [r2, #1]
 8009b3e:	f36f 0301 	bfc	r3, #0, #2
 8009b42:	7053      	strb	r3, [r2, #1]
		}

		if(ps4.button == TRIANGLE){		//push 4,5
 8009b44:	4b86      	ldr	r3, [pc, #536]	; (8009d60 <lagori_func+0x330>)
 8009b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b4c:	d126      	bne.n	8009b9c <lagori_func+0x16c>
			while(ps4.button == TRIANGLE);
 8009b4e:	bf00      	nop
 8009b50:	4b83      	ldr	r3, [pc, #524]	; (8009d60 <lagori_func+0x330>)
 8009b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b58:	d0fa      	beq.n	8009b50 <lagori_func+0x120>
			lagori.pwstate = 2;
 8009b5a:	4a7b      	ldr	r2, [pc, #492]	; (8009d48 <lagori_func+0x318>)
 8009b5c:	7853      	ldrb	r3, [r2, #1]
 8009b5e:	2102      	movs	r1, #2
 8009b60:	f361 1305 	bfi	r3, r1, #4, #2
 8009b64:	7053      	strb	r3, [r2, #1]
			lagori.bldcflayer = 4;
 8009b66:	4a78      	ldr	r2, [pc, #480]	; (8009d48 <lagori_func+0x318>)
 8009b68:	7813      	ldrb	r3, [r2, #0]
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	f361 1347 	bfi	r3, r1, #5, #3
 8009b70:	7013      	strb	r3, [r2, #0]
			lagori.bldcfapp = 1;
 8009b72:	4a75      	ldr	r2, [pc, #468]	; (8009d48 <lagori_func+0x318>)
 8009b74:	7813      	ldrb	r3, [r2, #0]
 8009b76:	f043 0302 	orr.w	r3, r3, #2
 8009b7a:	7013      	strb	r3, [r2, #0]
			lagori.flip = 2;
 8009b7c:	4a72      	ldr	r2, [pc, #456]	; (8009d48 <lagori_func+0x318>)
 8009b7e:	7853      	ldrb	r3, [r2, #1]
 8009b80:	2102      	movs	r1, #2
 8009b82:	f361 0301 	bfi	r3, r1, #0, #2
 8009b86:	7053      	strb	r3, [r2, #1]
			svCloseFlip
 8009b88:	f240 7121 	movw	r1, #1825	; 0x721
 8009b8c:	4872      	ldr	r0, [pc, #456]	; (8009d58 <lagori_func+0x328>)
 8009b8e:	f7fe fd4b 	bl	8008628 <ServoSetPulse>
 8009b92:	f240 316b 	movw	r1, #875	; 0x36b
 8009b96:	4871      	ldr	r0, [pc, #452]	; (8009d5c <lagori_func+0x32c>)
 8009b98:	f7fe fd46 	bl	8008628 <ServoSetPulse>
		}

		if(ps4.button == SQUARE){
 8009b9c:	4b70      	ldr	r3, [pc, #448]	; (8009d60 <lagori_func+0x330>)
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba4:	d16f      	bne.n	8009c86 <lagori_func+0x256>
			lagori.pwstate = 0;
 8009ba6:	4a68      	ldr	r2, [pc, #416]	; (8009d48 <lagori_func+0x318>)
 8009ba8:	7853      	ldrb	r3, [r2, #1]
 8009baa:	f36f 1305 	bfc	r3, #4, #2
 8009bae:	7053      	strb	r3, [r2, #1]
			lagori.flip = 2;
 8009bb0:	4a65      	ldr	r2, [pc, #404]	; (8009d48 <lagori_func+0x318>)
 8009bb2:	7853      	ldrb	r3, [r2, #1]
 8009bb4:	2102      	movs	r1, #2
 8009bb6:	f361 0301 	bfi	r3, r1, #0, #2
 8009bba:	7053      	strb	r3, [r2, #1]
			while(ps4.button == SQUARE);
 8009bbc:	bf00      	nop
 8009bbe:	4b68      	ldr	r3, [pc, #416]	; (8009d60 <lagori_func+0x330>)
 8009bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc6:	d0fa      	beq.n	8009bbe <lagori_func+0x18e>
			if(ps4.button == L1_SQUARE){	//retry state
 8009bc8:	4b65      	ldr	r3, [pc, #404]	; (8009d60 <lagori_func+0x330>)
 8009bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bcc:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 8009bd0:	d12c      	bne.n	8009c2c <lagori_func+0x1fc>
				while(ps4.button == L1_SQUARE);
 8009bd2:	bf00      	nop
 8009bd4:	4b62      	ldr	r3, [pc, #392]	; (8009d60 <lagori_func+0x330>)
 8009bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd8:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 8009bdc:	d0fa      	beq.n	8009bd4 <lagori_func+0x1a4>
				lagori.pwstate = 2;
 8009bde:	4a5a      	ldr	r2, [pc, #360]	; (8009d48 <lagori_func+0x318>)
 8009be0:	7853      	ldrb	r3, [r2, #1]
 8009be2:	2102      	movs	r1, #2
 8009be4:	f361 1305 	bfi	r3, r1, #4, #2
 8009be8:	7053      	strb	r3, [r2, #1]
				lagori.flip = 2;
 8009bea:	4a57      	ldr	r2, [pc, #348]	; (8009d48 <lagori_func+0x318>)
 8009bec:	7853      	ldrb	r3, [r2, #1]
 8009bee:	2102      	movs	r1, #2
 8009bf0:	f361 0301 	bfi	r3, r1, #0, #2
 8009bf4:	7053      	strb	r3, [r2, #1]
				svCloseFlip
 8009bf6:	f240 7121 	movw	r1, #1825	; 0x721
 8009bfa:	4857      	ldr	r0, [pc, #348]	; (8009d58 <lagori_func+0x328>)
 8009bfc:	f7fe fd14 	bl	8008628 <ServoSetPulse>
 8009c00:	f240 316b 	movw	r1, #875	; 0x36b
 8009c04:	4855      	ldr	r0, [pc, #340]	; (8009d5c <lagori_func+0x32c>)
 8009c06:	f7fe fd0f 	bl	8008628 <ServoSetPulse>
				lagori.pwstate = 2;
 8009c0a:	4a4f      	ldr	r2, [pc, #316]	; (8009d48 <lagori_func+0x318>)
 8009c0c:	7853      	ldrb	r3, [r2, #1]
 8009c0e:	2102      	movs	r1, #2
 8009c10:	f361 1305 	bfi	r3, r1, #4, #2
 8009c14:	7053      	strb	r3, [r2, #1]
				lagori.bldclayer = 0;
 8009c16:	4a4c      	ldr	r2, [pc, #304]	; (8009d48 <lagori_func+0x318>)
 8009c18:	7813      	ldrb	r3, [r2, #0]
 8009c1a:	f36f 0384 	bfc	r3, #2, #3
 8009c1e:	7013      	strb	r3, [r2, #0]
				lagori.bldclapp = 1;
 8009c20:	4a49      	ldr	r2, [pc, #292]	; (8009d48 <lagori_func+0x318>)
 8009c22:	7813      	ldrb	r3, [r2, #0]
 8009c24:	f043 0301 	orr.w	r3, r3, #1
 8009c28:	7013      	strb	r3, [r2, #0]
 8009c2a:	e02c      	b.n	8009c86 <lagori_func+0x256>
			}
			else{	//ready state
				while(ps4.button == R1_SQUARE);
 8009c2c:	bf00      	nop
 8009c2e:	4b4c      	ldr	r3, [pc, #304]	; (8009d60 <lagori_func+0x330>)
 8009c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c32:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 8009c36:	d0fa      	beq.n	8009c2e <lagori_func+0x1fe>
				if(target_enq >= layer1)
 8009c38:	4b4a      	ldr	r3, [pc, #296]	; (8009d64 <lagori_func+0x334>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f242 3227 	movw	r2, #8999	; 0x2327
 8009c40:	4293      	cmp	r3, r2
 8009c42:	dd05      	ble.n	8009c50 <lagori_func+0x220>
					lagori.pwstate = 2;
 8009c44:	4a40      	ldr	r2, [pc, #256]	; (8009d48 <lagori_func+0x318>)
 8009c46:	7853      	ldrb	r3, [r2, #1]
 8009c48:	2102      	movs	r1, #2
 8009c4a:	f361 1305 	bfi	r3, r1, #4, #2
 8009c4e:	7053      	strb	r3, [r2, #1]
				lagori.flip = 0;
 8009c50:	4a3d      	ldr	r2, [pc, #244]	; (8009d48 <lagori_func+0x318>)
 8009c52:	7853      	ldrb	r3, [r2, #1]
 8009c54:	f36f 0301 	bfc	r3, #0, #2
 8009c58:	7053      	strb	r3, [r2, #1]
				lagori.bldclayer = 0;
 8009c5a:	4a3b      	ldr	r2, [pc, #236]	; (8009d48 <lagori_func+0x318>)
 8009c5c:	7813      	ldrb	r3, [r2, #0]
 8009c5e:	f36f 0384 	bfc	r3, #2, #3
 8009c62:	7013      	strb	r3, [r2, #0]
				lagori.bldclapp = 1;
 8009c64:	4a38      	ldr	r2, [pc, #224]	; (8009d48 <lagori_func+0x318>)
 8009c66:	7813      	ldrb	r3, [r2, #0]
 8009c68:	f043 0301 	orr.w	r3, r3, #1
 8009c6c:	7013      	strb	r3, [r2, #0]
				while(enqpwLlf >= layer1);
 8009c6e:	bf00      	nop
 8009c70:	4b3d      	ldr	r3, [pc, #244]	; (8009d68 <lagori_func+0x338>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f242 3227 	movw	r2, #8999	; 0x2327
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	dcf9      	bgt.n	8009c70 <lagori_func+0x240>
				lagori.pwstate = 0;
 8009c7c:	4a32      	ldr	r2, [pc, #200]	; (8009d48 <lagori_func+0x318>)
 8009c7e:	7853      	ldrb	r3, [r2, #1]
 8009c80:	f36f 1305 	bfc	r3, #4, #2
 8009c84:	7053      	strb	r3, [r2, #1]
			}
		}

		if(ps4.button == UP){
 8009c86:	4b36      	ldr	r3, [pc, #216]	; (8009d60 <lagori_func+0x330>)
 8009c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8a:	2b10      	cmp	r3, #16
 8009c8c:	d134      	bne.n	8009cf8 <lagori_func+0x2c8>
			while(ps4.button == UP);
 8009c8e:	bf00      	nop
 8009c90:	4b33      	ldr	r3, [pc, #204]	; (8009d60 <lagori_func+0x330>)
 8009c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c94:	2b10      	cmp	r3, #16
 8009c96:	d0fb      	beq.n	8009c90 <lagori_func+0x260>
			if(!fx.svapp){
 8009c98:	4b34      	ldr	r3, [pc, #208]	; (8009d6c <lagori_func+0x33c>)
 8009c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d110      	bne.n	8009cca <lagori_func+0x29a>
				lagori.flip = 2;
 8009ca8:	4a27      	ldr	r2, [pc, #156]	; (8009d48 <lagori_func+0x318>)
 8009caa:	7853      	ldrb	r3, [r2, #1]
 8009cac:	2102      	movs	r1, #2
 8009cae:	f361 0301 	bfi	r3, r1, #0, #2
 8009cb2:	7053      	strb	r3, [r2, #1]
				svLGF1(1300)
 8009cb4:	f240 5114 	movw	r1, #1300	; 0x514
 8009cb8:	4827      	ldr	r0, [pc, #156]	; (8009d58 <lagori_func+0x328>)
 8009cba:	f7fe fcb5 	bl	8008628 <ServoSetPulse>
				svLGF2(1450)
 8009cbe:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8009cc2:	4826      	ldr	r0, [pc, #152]	; (8009d5c <lagori_func+0x32c>)
 8009cc4:	f7fe fcb0 	bl	8008628 <ServoSetPulse>
 8009cc8:	e004      	b.n	8009cd4 <lagori_func+0x2a4>
			}
			else{
				lagori.flip = 0;
 8009cca:	4a1f      	ldr	r2, [pc, #124]	; (8009d48 <lagori_func+0x318>)
 8009ccc:	7853      	ldrb	r3, [r2, #1]
 8009cce:	f36f 0301 	bfc	r3, #0, #2
 8009cd2:	7053      	strb	r3, [r2, #1]
			}
			fx.svapp = !fx.svapp;
 8009cd4:	4b25      	ldr	r3, [pc, #148]	; (8009d6c <lagori_func+0x33c>)
 8009cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2301      	moveq	r3, #1
 8009ce6:	2300      	movne	r3, #0
 8009ce8:	b2d9      	uxtb	r1, r3
 8009cea:	4a20      	ldr	r2, [pc, #128]	; (8009d6c <lagori_func+0x33c>)
 8009cec:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8009cf0:	f361 0300 	bfi	r3, r1, #0, #1
 8009cf4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		}


//		//manual pulley by layer/8
		if(ps4.button == L1){
 8009cf8:	4b19      	ldr	r3, [pc, #100]	; (8009d60 <lagori_func+0x330>)
 8009cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d00:	d13e      	bne.n	8009d80 <lagori_func+0x350>
			lagori.bldcstart  = 0;
 8009d02:	4a11      	ldr	r2, [pc, #68]	; (8009d48 <lagori_func+0x318>)
 8009d04:	7853      	ldrb	r3, [r2, #1]
 8009d06:	f36f 13c7 	bfc	r3, #7, #1
 8009d0a:	7053      	strb	r3, [r2, #1]
			if(fabs(ps4.joyR_y) >= 0.5)
 8009d0c:	4b14      	ldr	r3, [pc, #80]	; (8009d60 <lagori_func+0x330>)
 8009d0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009d12:	eef0 7ae7 	vabs.f32	s15, s15
 8009d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d22:	db29      	blt.n	8009d78 <lagori_func+0x348>
				LFPW(ps4.joyR_y * 12000)
 8009d24:	4b0e      	ldr	r3, [pc, #56]	; (8009d60 <lagori_func+0x330>)
 8009d26:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009d2a:	eef1 7a67 	vneg.f32	s15, s15
 8009d2e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009d70 <lagori_func+0x340>
 8009d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d3a:	ee17 1a90 	vmov	r1, s15
 8009d3e:	480d      	ldr	r0, [pc, #52]	; (8009d74 <lagori_func+0x344>)
 8009d40:	f7f7 fb1e 	bl	8001380 <WriteBDC>
 8009d44:	e01c      	b.n	8009d80 <lagori_func+0x350>
 8009d46:	bf00      	nop
 8009d48:	20009844 	.word	0x20009844
 8009d4c:	20009738 	.word	0x20009738
 8009d50:	20009924 	.word	0x20009924
 8009d54:	40020814 	.word	0x40020814
 8009d58:	20009974 	.word	0x20009974
 8009d5c:	2000a5f8 	.word	0x2000a5f8
 8009d60:	2000a0c8 	.word	0x2000a0c8
 8009d64:	20009474 	.word	0x20009474
 8009d68:	20007b78 	.word	0x20007b78
 8009d6c:	2000a144 	.word	0x2000a144
 8009d70:	463b8000 	.word	0x463b8000
 8009d74:	20007b24 	.word	0x20007b24
			else
				LFPW(0)
 8009d78:	2100      	movs	r1, #0
 8009d7a:	48ac      	ldr	r0, [pc, #688]	; (800a02c <lagori_func+0x5fc>)
 8009d7c:	f7f7 fb00 	bl	8001380 <WriteBDC>
		}

		//auto pulley
		if(lagori.gripok){
 8009d80:	4bab      	ldr	r3, [pc, #684]	; (800a030 <lagori_func+0x600>)
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d055      	beq.n	8009e3a <lagori_func+0x40a>
			if(enqpwLG < LGsize2){
 8009d8e:	4ba9      	ldr	r3, [pc, #676]	; (800a034 <lagori_func+0x604>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2b95      	cmp	r3, #149	; 0x95
 8009d94:	dc1b      	bgt.n	8009dce <lagori_func+0x39e>
				lagori.bldclayer = 5;
 8009d96:	4aa6      	ldr	r2, [pc, #664]	; (800a030 <lagori_func+0x600>)
 8009d98:	7813      	ldrb	r3, [r2, #0]
 8009d9a:	2105      	movs	r1, #5
 8009d9c:	f361 0384 	bfi	r3, r1, #2, #3
 8009da0:	7013      	strb	r3, [r2, #0]
				lagori.flip = 2;
 8009da2:	4aa3      	ldr	r2, [pc, #652]	; (800a030 <lagori_func+0x600>)
 8009da4:	7853      	ldrb	r3, [r2, #1]
 8009da6:	2102      	movs	r1, #2
 8009da8:	f361 0301 	bfi	r3, r1, #0, #2
 8009dac:	7053      	strb	r3, [r2, #1]
				svLGF1(1075)
 8009dae:	f240 4133 	movw	r1, #1075	; 0x433
 8009db2:	48a1      	ldr	r0, [pc, #644]	; (800a038 <lagori_func+0x608>)
 8009db4:	f7fe fc38 	bl	8008628 <ServoSetPulse>
				svLGF2(1575)
 8009db8:	f240 6127 	movw	r1, #1575	; 0x627
 8009dbc:	489f      	ldr	r0, [pc, #636]	; (800a03c <lagori_func+0x60c>)
 8009dbe:	f7fe fc33 	bl	8008628 <ServoSetPulse>
				lagori.bldclapp = 1;
 8009dc2:	4a9b      	ldr	r2, [pc, #620]	; (800a030 <lagori_func+0x600>)
 8009dc4:	7813      	ldrb	r3, [r2, #0]
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	7013      	strb	r3, [r2, #0]
 8009dcc:	e02b      	b.n	8009e26 <lagori_func+0x3f6>
			}
			else if(enqpwLG < LGsize3)	lagori.bldclayer = 4;
 8009dce:	4b99      	ldr	r3, [pc, #612]	; (800a034 <lagori_func+0x604>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009dd6:	da06      	bge.n	8009de6 <lagori_func+0x3b6>
 8009dd8:	4a95      	ldr	r2, [pc, #596]	; (800a030 <lagori_func+0x600>)
 8009dda:	7813      	ldrb	r3, [r2, #0]
 8009ddc:	2104      	movs	r1, #4
 8009dde:	f361 0384 	bfi	r3, r1, #2, #3
 8009de2:	7013      	strb	r3, [r2, #0]
 8009de4:	e01f      	b.n	8009e26 <lagori_func+0x3f6>
			else if(enqpwLG < LGsize4)	lagori.bldclayer = 3;
 8009de6:	4b93      	ldr	r3, [pc, #588]	; (800a034 <lagori_func+0x604>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f240 427d 	movw	r2, #1149	; 0x47d
 8009dee:	4293      	cmp	r3, r2
 8009df0:	dc06      	bgt.n	8009e00 <lagori_func+0x3d0>
 8009df2:	4a8f      	ldr	r2, [pc, #572]	; (800a030 <lagori_func+0x600>)
 8009df4:	7813      	ldrb	r3, [r2, #0]
 8009df6:	2103      	movs	r1, #3
 8009df8:	f361 0384 	bfi	r3, r1, #2, #3
 8009dfc:	7013      	strb	r3, [r2, #0]
 8009dfe:	e012      	b.n	8009e26 <lagori_func+0x3f6>
			else if(enqpwLG < LGsize5)	lagori.bldclayer = 2;
 8009e00:	4b8c      	ldr	r3, [pc, #560]	; (800a034 <lagori_func+0x604>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f240 628a 	movw	r2, #1674	; 0x68a
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	dc06      	bgt.n	8009e1a <lagori_func+0x3ea>
 8009e0c:	4a88      	ldr	r2, [pc, #544]	; (800a030 <lagori_func+0x600>)
 8009e0e:	7813      	ldrb	r3, [r2, #0]
 8009e10:	2102      	movs	r1, #2
 8009e12:	f361 0384 	bfi	r3, r1, #2, #3
 8009e16:	7013      	strb	r3, [r2, #0]
 8009e18:	e005      	b.n	8009e26 <lagori_func+0x3f6>
			else 						lagori.bldclayer = 1;
 8009e1a:	4a85      	ldr	r2, [pc, #532]	; (800a030 <lagori_func+0x600>)
 8009e1c:	7813      	ldrb	r3, [r2, #0]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	f361 0384 	bfi	r3, r1, #2, #3
 8009e24:	7013      	strb	r3, [r2, #0]
			lagori.bldclapp = 1;
 8009e26:	4a82      	ldr	r2, [pc, #520]	; (800a030 <lagori_func+0x600>)
 8009e28:	7813      	ldrb	r3, [r2, #0]
 8009e2a:	f043 0301 	orr.w	r3, r3, #1
 8009e2e:	7013      	strb	r3, [r2, #0]
			lagori.gripok = 0;
 8009e30:	4a7f      	ldr	r2, [pc, #508]	; (800a030 <lagori_func+0x600>)
 8009e32:	7853      	ldrb	r3, [r2, #1]
 8009e34:	f36f 1386 	bfc	r3, #6, #1
 8009e38:	7053      	strb	r3, [r2, #1]
		}

		// flip lagori
		if(LGHl)
 8009e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e3e:	4880      	ldr	r0, [pc, #512]	; (800a040 <lagori_func+0x610>)
 8009e40:	f00a fab0 	bl	80143a4 <HAL_GPIO_ReadPin>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <lagori_func+0x428>
			lagori.bldcflayer = 1;
 8009e4a:	4a79      	ldr	r2, [pc, #484]	; (800a030 <lagori_func+0x600>)
 8009e4c:	7813      	ldrb	r3, [r2, #0]
 8009e4e:	2101      	movs	r1, #1
 8009e50:	f361 1347 	bfi	r3, r1, #5, #3
 8009e54:	7013      	strb	r3, [r2, #0]
 8009e56:	e032      	b.n	8009ebe <lagori_func+0x48e>
		else if(LGHml)
 8009e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e5c:	4878      	ldr	r0, [pc, #480]	; (800a040 <lagori_func+0x610>)
 8009e5e:	f00a faa1 	bl	80143a4 <HAL_GPIO_ReadPin>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <lagori_func+0x446>
			lagori.bldcflayer = 2;
 8009e68:	4a71      	ldr	r2, [pc, #452]	; (800a030 <lagori_func+0x600>)
 8009e6a:	7813      	ldrb	r3, [r2, #0]
 8009e6c:	2102      	movs	r1, #2
 8009e6e:	f361 1347 	bfi	r3, r1, #5, #3
 8009e72:	7013      	strb	r3, [r2, #0]
 8009e74:	e023      	b.n	8009ebe <lagori_func+0x48e>
		else if(LGHm)
 8009e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e7a:	4872      	ldr	r0, [pc, #456]	; (800a044 <lagori_func+0x614>)
 8009e7c:	f00a fa92 	bl	80143a4 <HAL_GPIO_ReadPin>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <lagori_func+0x464>
			lagori.bldcflayer = 3;
 8009e86:	4a6a      	ldr	r2, [pc, #424]	; (800a030 <lagori_func+0x600>)
 8009e88:	7813      	ldrb	r3, [r2, #0]
 8009e8a:	2103      	movs	r1, #3
 8009e8c:	f361 1347 	bfi	r3, r1, #5, #3
 8009e90:	7013      	strb	r3, [r2, #0]
 8009e92:	e014      	b.n	8009ebe <lagori_func+0x48e>
		else if(LGHms)
 8009e94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009e98:	486a      	ldr	r0, [pc, #424]	; (800a044 <lagori_func+0x614>)
 8009e9a:	f00a fa83 	bl	80143a4 <HAL_GPIO_ReadPin>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <lagori_func+0x482>
			lagori.bldcflayer = 4;
 8009ea4:	4a62      	ldr	r2, [pc, #392]	; (800a030 <lagori_func+0x600>)
 8009ea6:	7813      	ldrb	r3, [r2, #0]
 8009ea8:	2104      	movs	r1, #4
 8009eaa:	f361 1347 	bfi	r3, r1, #5, #3
 8009eae:	7013      	strb	r3, [r2, #0]
 8009eb0:	e005      	b.n	8009ebe <lagori_func+0x48e>
		else
			lagori.bldcflayer = 5;
 8009eb2:	4a5f      	ldr	r2, [pc, #380]	; (800a030 <lagori_func+0x600>)
 8009eb4:	7813      	ldrb	r3, [r2, #0]
 8009eb6:	2105      	movs	r1, #5
 8009eb8:	f361 1347 	bfi	r3, r1, #5, #3
 8009ebc:	7013      	strb	r3, [r2, #0]

		//led indicator
		exled1 = 0;
 8009ebe:	4a62      	ldr	r2, [pc, #392]	; (800a048 <lagori_func+0x618>)
 8009ec0:	7853      	ldrb	r3, [r2, #1]
 8009ec2:	f36f 0341 	bfc	r3, #1, #1
 8009ec6:	7053      	strb	r3, [r2, #1]
		exled2 = 0;
 8009ec8:	4a5f      	ldr	r2, [pc, #380]	; (800a048 <lagori_func+0x618>)
 8009eca:	7853      	ldrb	r3, [r2, #1]
 8009ecc:	f36f 0300 	bfc	r3, #0, #1
 8009ed0:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
 8009ed2:	4a5e      	ldr	r2, [pc, #376]	; (800a04c <lagori_func+0x61c>)
 8009ed4:	7813      	ldrb	r3, [r2, #0]
 8009ed6:	f36f 13c7 	bfc	r3, #7, #1
 8009eda:	7013      	strb	r3, [r2, #0]
		exled4 = 0;
 8009edc:	4a5b      	ldr	r2, [pc, #364]	; (800a04c <lagori_func+0x61c>)
 8009ede:	7813      	ldrb	r3, [r2, #0]
 8009ee0:	f36f 1386 	bfc	r3, #6, #1
 8009ee4:	7013      	strb	r3, [r2, #0]
		exled5 = 0;
 8009ee6:	4a59      	ldr	r2, [pc, #356]	; (800a04c <lagori_func+0x61c>)
 8009ee8:	7813      	ldrb	r3, [r2, #0]
 8009eea:	f36f 1345 	bfc	r3, #5, #1
 8009eee:	7013      	strb	r3, [r2, #0]
		exled6 = 0;
 8009ef0:	4a56      	ldr	r2, [pc, #344]	; (800a04c <lagori_func+0x61c>)
 8009ef2:	7813      	ldrb	r3, [r2, #0]
 8009ef4:	f36f 1304 	bfc	r3, #4, #1
 8009ef8:	7013      	strb	r3, [r2, #0]
		if(lagori.bldclayer >= 1)			exled1 = 1;
 8009efa:	4b4d      	ldr	r3, [pc, #308]	; (800a030 <lagori_func+0x600>)
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	f003 031c 	and.w	r3, r3, #28
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d004      	beq.n	8009f12 <lagori_func+0x4e2>
 8009f08:	4a4f      	ldr	r2, [pc, #316]	; (800a048 <lagori_func+0x618>)
 8009f0a:	7853      	ldrb	r3, [r2, #1]
 8009f0c:	f043 0302 	orr.w	r3, r3, #2
 8009f10:	7053      	strb	r3, [r2, #1]
		if(lagori.bldclayer == 1)			exled2 = 1;
 8009f12:	4b47      	ldr	r3, [pc, #284]	; (800a030 <lagori_func+0x600>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	f003 031c 	and.w	r3, r3, #28
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d105      	bne.n	8009f2c <lagori_func+0x4fc>
 8009f20:	4a49      	ldr	r2, [pc, #292]	; (800a048 <lagori_func+0x618>)
 8009f22:	7853      	ldrb	r3, [r2, #1]
 8009f24:	f043 0301 	orr.w	r3, r3, #1
 8009f28:	7053      	strb	r3, [r2, #1]
 8009f2a:	e073      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldclayer == 2)		exled3 = 1;
 8009f2c:	4b40      	ldr	r3, [pc, #256]	; (800a030 <lagori_func+0x600>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 031c 	and.w	r3, r3, #28
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b08      	cmp	r3, #8
 8009f38:	d105      	bne.n	8009f46 <lagori_func+0x516>
 8009f3a:	4a44      	ldr	r2, [pc, #272]	; (800a04c <lagori_func+0x61c>)
 8009f3c:	7813      	ldrb	r3, [r2, #0]
 8009f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f42:	7013      	strb	r3, [r2, #0]
 8009f44:	e066      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldclayer == 3)		exled4 = 1;
 8009f46:	4b3a      	ldr	r3, [pc, #232]	; (800a030 <lagori_func+0x600>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	f003 031c 	and.w	r3, r3, #28
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b0c      	cmp	r3, #12
 8009f52:	d105      	bne.n	8009f60 <lagori_func+0x530>
 8009f54:	4a3d      	ldr	r2, [pc, #244]	; (800a04c <lagori_func+0x61c>)
 8009f56:	7813      	ldrb	r3, [r2, #0]
 8009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5c:	7013      	strb	r3, [r2, #0]
 8009f5e:	e059      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldclayer == 4)		exled5 = 1;
 8009f60:	4b33      	ldr	r3, [pc, #204]	; (800a030 <lagori_func+0x600>)
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	f003 031c 	and.w	r3, r3, #28
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b10      	cmp	r3, #16
 8009f6c:	d105      	bne.n	8009f7a <lagori_func+0x54a>
 8009f6e:	4a37      	ldr	r2, [pc, #220]	; (800a04c <lagori_func+0x61c>)
 8009f70:	7813      	ldrb	r3, [r2, #0]
 8009f72:	f043 0320 	orr.w	r3, r3, #32
 8009f76:	7013      	strb	r3, [r2, #0]
 8009f78:	e04c      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldclayer == 5)		exled6 = 1;
 8009f7a:	4b2d      	ldr	r3, [pc, #180]	; (800a030 <lagori_func+0x600>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	f003 031c 	and.w	r3, r3, #28
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b14      	cmp	r3, #20
 8009f86:	d105      	bne.n	8009f94 <lagori_func+0x564>
 8009f88:	4a30      	ldr	r2, [pc, #192]	; (800a04c <lagori_func+0x61c>)
 8009f8a:	7813      	ldrb	r3, [r2, #0]
 8009f8c:	f043 0310 	orr.w	r3, r3, #16
 8009f90:	7013      	strb	r3, [r2, #0]
 8009f92:	e03f      	b.n	800a014 <lagori_func+0x5e4>

		else if(lagori.bldcflayer == 1)		exled2 = 1;
 8009f94:	4b26      	ldr	r3, [pc, #152]	; (800a030 <lagori_func+0x600>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	f023 031f 	bic.w	r3, r3, #31
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	2b20      	cmp	r3, #32
 8009fa0:	d105      	bne.n	8009fae <lagori_func+0x57e>
 8009fa2:	4a29      	ldr	r2, [pc, #164]	; (800a048 <lagori_func+0x618>)
 8009fa4:	7853      	ldrb	r3, [r2, #1]
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	7053      	strb	r3, [r2, #1]
 8009fac:	e032      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldcflayer == 2)		exled3 = 1;
 8009fae:	4b20      	ldr	r3, [pc, #128]	; (800a030 <lagori_func+0x600>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	f023 031f 	bic.w	r3, r3, #31
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d105      	bne.n	8009fc8 <lagori_func+0x598>
 8009fbc:	4a23      	ldr	r2, [pc, #140]	; (800a04c <lagori_func+0x61c>)
 8009fbe:	7813      	ldrb	r3, [r2, #0]
 8009fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc4:	7013      	strb	r3, [r2, #0]
 8009fc6:	e025      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldcflayer == 3)		exled4 = 1;
 8009fc8:	4b19      	ldr	r3, [pc, #100]	; (800a030 <lagori_func+0x600>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	f023 031f 	bic.w	r3, r3, #31
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b60      	cmp	r3, #96	; 0x60
 8009fd4:	d105      	bne.n	8009fe2 <lagori_func+0x5b2>
 8009fd6:	4a1d      	ldr	r2, [pc, #116]	; (800a04c <lagori_func+0x61c>)
 8009fd8:	7813      	ldrb	r3, [r2, #0]
 8009fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fde:	7013      	strb	r3, [r2, #0]
 8009fe0:	e018      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldcflayer == 4)		exled5 = 1;
 8009fe2:	4b13      	ldr	r3, [pc, #76]	; (800a030 <lagori_func+0x600>)
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	f023 031f 	bic.w	r3, r3, #31
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b80      	cmp	r3, #128	; 0x80
 8009fee:	d105      	bne.n	8009ffc <lagori_func+0x5cc>
 8009ff0:	4a16      	ldr	r2, [pc, #88]	; (800a04c <lagori_func+0x61c>)
 8009ff2:	7813      	ldrb	r3, [r2, #0]
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	7013      	strb	r3, [r2, #0]
 8009ffa:	e00b      	b.n	800a014 <lagori_func+0x5e4>
		else if(lagori.bldcflayer == 5)		exled6 = 1;
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	; (800a030 <lagori_func+0x600>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f023 031f 	bic.w	r3, r3, #31
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2ba0      	cmp	r3, #160	; 0xa0
 800a008:	d104      	bne.n	800a014 <lagori_func+0x5e4>
 800a00a:	4a10      	ldr	r2, [pc, #64]	; (800a04c <lagori_func+0x61c>)
 800a00c:	7813      	ldrb	r3, [r2, #0]
 800a00e:	f043 0310 	orr.w	r3, r3, #16
 800a012:	7013      	strb	r3, [r2, #0]
	while(sys.manual){
 800a014:	4b0e      	ldr	r3, [pc, #56]	; (800a050 <lagori_func+0x620>)
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	f003 0308 	and.w	r3, r3, #8
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f47f ad39 	bne.w	8009a96 <lagori_func+0x66>
	}
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20007b24 	.word	0x20007b24
 800a030:	20009844 	.word	0x20009844
 800a034:	200099fc 	.word	0x200099fc
 800a038:	20009974 	.word	0x20009974
 800a03c:	2000a5f8 	.word	0x2000a5f8
 800a040:	40020400 	.word	0x40020400
 800a044:	40021000 	.word	0x40021000
 800a048:	40020c14 	.word	0x40020c14
 800a04c:	40020014 	.word	0x40020014
 800a050:	2000779c 	.word	0x2000779c

0800a054 <BLDC_func>:

void BLDC_func(void){
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
	int enqerr = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	603b      	str	r3, [r7, #0]
	float pwspeed = 0;
 800a05e:	f04f 0300 	mov.w	r3, #0
 800a062:	607b      	str	r3, [r7, #4]
	laser_dist.fAdist = 5.5;
 800a064:	4ba6      	ldr	r3, [pc, #664]	; (800a300 <BLDC_func+0x2ac>)
 800a066:	4aa7      	ldr	r2, [pc, #668]	; (800a304 <BLDC_func+0x2b0>)
 800a068:	601a      	str	r2, [r3, #0]
	laser_dist.fBdist = 6.0;
 800a06a:	4ba5      	ldr	r3, [pc, #660]	; (800a300 <BLDC_func+0x2ac>)
 800a06c:	4aa6      	ldr	r2, [pc, #664]	; (800a308 <BLDC_func+0x2b4>)
 800a06e:	605a      	str	r2, [r3, #4]
	laser_dist.R1dist = 0.2;
 800a070:	4ba3      	ldr	r3, [pc, #652]	; (800a300 <BLDC_func+0x2ac>)
 800a072:	4aa6      	ldr	r2, [pc, #664]	; (800a30c <BLDC_func+0x2b8>)
 800a074:	609a      	str	r2, [r3, #8]
	while(sys.control){
 800a076:	e136      	b.n	800a2e6 <BLDC_func+0x292>
		if(sys.manual){
 800a078:	4ba5      	ldr	r3, [pc, #660]	; (800a310 <BLDC_func+0x2bc>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 0308 	and.w	r3, r3, #8
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 8126 	beq.w	800a2d4 <BLDC_func+0x280>
			if(lagori.bldclapp){
 800a088:	4ba2      	ldr	r3, [pc, #648]	; (800a314 <BLDC_func+0x2c0>)
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 0301 	and.w	r3, r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d051      	beq.n	800a13a <BLDC_func+0xe6>
				if(lagori.bldclayer == 0)			target_enq = layerG;
 800a096:	4b9f      	ldr	r3, [pc, #636]	; (800a314 <BLDC_func+0x2c0>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	f003 031c 	and.w	r3, r3, #28
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d104      	bne.n	800a0ae <BLDC_func+0x5a>
 800a0a4:	4b9c      	ldr	r3, [pc, #624]	; (800a318 <BLDC_func+0x2c4>)
 800a0a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	e03a      	b.n	800a124 <BLDC_func+0xd0>
				else if(lagori.bldclayer == 1)		target_enq = layer1;
 800a0ae:	4b99      	ldr	r3, [pc, #612]	; (800a314 <BLDC_func+0x2c0>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	f003 031c 	and.w	r3, r3, #28
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d104      	bne.n	800a0c6 <BLDC_func+0x72>
 800a0bc:	4b96      	ldr	r3, [pc, #600]	; (800a318 <BLDC_func+0x2c4>)
 800a0be:	f242 3228 	movw	r2, #9000	; 0x2328
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	e02e      	b.n	800a124 <BLDC_func+0xd0>
				else if(lagori.bldclayer == 2)		target_enq = layer2;
 800a0c6:	4b93      	ldr	r3, [pc, #588]	; (800a314 <BLDC_func+0x2c0>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f003 031c 	and.w	r3, r3, #28
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d104      	bne.n	800a0de <BLDC_func+0x8a>
 800a0d4:	4b90      	ldr	r3, [pc, #576]	; (800a318 <BLDC_func+0x2c4>)
 800a0d6:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	e022      	b.n	800a124 <BLDC_func+0xd0>
				else if(lagori.bldclayer == 3)		target_enq = layer3;
 800a0de:	4b8d      	ldr	r3, [pc, #564]	; (800a314 <BLDC_func+0x2c0>)
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	f003 031c 	and.w	r3, r3, #28
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b0c      	cmp	r3, #12
 800a0ea:	d104      	bne.n	800a0f6 <BLDC_func+0xa2>
 800a0ec:	4b8a      	ldr	r3, [pc, #552]	; (800a318 <BLDC_func+0x2c4>)
 800a0ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e016      	b.n	800a124 <BLDC_func+0xd0>
				else if(lagori.bldclayer == 4)		target_enq = layer4;
 800a0f6:	4b87      	ldr	r3, [pc, #540]	; (800a314 <BLDC_func+0x2c0>)
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f003 031c 	and.w	r3, r3, #28
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b10      	cmp	r3, #16
 800a102:	d104      	bne.n	800a10e <BLDC_func+0xba>
 800a104:	4b84      	ldr	r3, [pc, #528]	; (800a318 <BLDC_func+0x2c4>)
 800a106:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800a10a:	601a      	str	r2, [r3, #0]
 800a10c:	e00a      	b.n	800a124 <BLDC_func+0xd0>
				else if(lagori.bldclayer == 5)		target_enq = layer5;
 800a10e:	4b81      	ldr	r3, [pc, #516]	; (800a314 <BLDC_func+0x2c0>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f003 031c 	and.w	r3, r3, #28
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b14      	cmp	r3, #20
 800a11a:	d103      	bne.n	800a124 <BLDC_func+0xd0>
 800a11c:	4b7e      	ldr	r3, [pc, #504]	; (800a318 <BLDC_func+0x2c4>)
 800a11e:	f646 1278 	movw	r2, #27000	; 0x6978
 800a122:	601a      	str	r2, [r3, #0]
				lagori.bldclapp = 0;
 800a124:	4a7b      	ldr	r2, [pc, #492]	; (800a314 <BLDC_func+0x2c0>)
 800a126:	7813      	ldrb	r3, [r2, #0]
 800a128:	f36f 0300 	bfc	r3, #0, #1
 800a12c:	7013      	strb	r3, [r2, #0]
				lagori.bldcstart  = 1;
 800a12e:	4a79      	ldr	r2, [pc, #484]	; (800a314 <BLDC_func+0x2c0>)
 800a130:	7853      	ldrb	r3, [r2, #1]
 800a132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a136:	7053      	strb	r3, [r2, #1]
 800a138:	e04b      	b.n	800a1d2 <BLDC_func+0x17e>
			}
			else if(lagori.bldcfapp){
 800a13a:	4b76      	ldr	r3, [pc, #472]	; (800a314 <BLDC_func+0x2c0>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d044      	beq.n	800a1d2 <BLDC_func+0x17e>
				if(lagori.bldcflayer == 1)			target_enq = svfl_layer;
 800a148:	4b72      	ldr	r3, [pc, #456]	; (800a314 <BLDC_func+0x2c0>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f023 031f 	bic.w	r3, r3, #31
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b20      	cmp	r3, #32
 800a154:	d104      	bne.n	800a160 <BLDC_func+0x10c>
 800a156:	4b70      	ldr	r3, [pc, #448]	; (800a318 <BLDC_func+0x2c4>)
 800a158:	f242 521c 	movw	r2, #9500	; 0x251c
 800a15c:	601a      	str	r2, [r3, #0]
 800a15e:	e02e      	b.n	800a1be <BLDC_func+0x16a>
				else if(lagori.bldcflayer == 2)		target_enq = svfml_layer;
 800a160:	4b6c      	ldr	r3, [pc, #432]	; (800a314 <BLDC_func+0x2c0>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	f023 031f 	bic.w	r3, r3, #31
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b40      	cmp	r3, #64	; 0x40
 800a16c:	d104      	bne.n	800a178 <BLDC_func+0x124>
 800a16e:	4b6a      	ldr	r3, [pc, #424]	; (800a318 <BLDC_func+0x2c4>)
 800a170:	f641 7259 	movw	r2, #8025	; 0x1f59
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	e022      	b.n	800a1be <BLDC_func+0x16a>
				else if(lagori.bldcflayer == 3)		target_enq = svfm_layer;
 800a178:	4b66      	ldr	r3, [pc, #408]	; (800a314 <BLDC_func+0x2c0>)
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	f023 031f 	bic.w	r3, r3, #31
 800a180:	b2db      	uxtb	r3, r3
 800a182:	2b60      	cmp	r3, #96	; 0x60
 800a184:	d104      	bne.n	800a190 <BLDC_func+0x13c>
 800a186:	4b64      	ldr	r3, [pc, #400]	; (800a318 <BLDC_func+0x2c4>)
 800a188:	f641 3226 	movw	r2, #6950	; 0x1b26
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e016      	b.n	800a1be <BLDC_func+0x16a>
				else if(lagori.bldcflayer == 4)		target_enq = svfms_layer;
 800a190:	4b60      	ldr	r3, [pc, #384]	; (800a314 <BLDC_func+0x2c0>)
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f023 031f 	bic.w	r3, r3, #31
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b80      	cmp	r3, #128	; 0x80
 800a19c:	d104      	bne.n	800a1a8 <BLDC_func+0x154>
 800a19e:	4b5e      	ldr	r3, [pc, #376]	; (800a318 <BLDC_func+0x2c4>)
 800a1a0:	f241 72d4 	movw	r2, #6100	; 0x17d4
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	e00a      	b.n	800a1be <BLDC_func+0x16a>
				else if(lagori.bldcflayer == 5)		target_enq = svfs_layer;
 800a1a8:	4b5a      	ldr	r3, [pc, #360]	; (800a314 <BLDC_func+0x2c0>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	f023 031f 	bic.w	r3, r3, #31
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2ba0      	cmp	r3, #160	; 0xa0
 800a1b4:	d103      	bne.n	800a1be <BLDC_func+0x16a>
 800a1b6:	4b58      	ldr	r3, [pc, #352]	; (800a318 <BLDC_func+0x2c4>)
 800a1b8:	f241 1294 	movw	r2, #4500	; 0x1194
 800a1bc:	601a      	str	r2, [r3, #0]
				lagori.bldcfapp = 0;
 800a1be:	4a55      	ldr	r2, [pc, #340]	; (800a314 <BLDC_func+0x2c0>)
 800a1c0:	7813      	ldrb	r3, [r2, #0]
 800a1c2:	f36f 0341 	bfc	r3, #1, #1
 800a1c6:	7013      	strb	r3, [r2, #0]
				lagori.bldcstart  = 1;
 800a1c8:	4a52      	ldr	r2, [pc, #328]	; (800a314 <BLDC_func+0x2c0>)
 800a1ca:	7853      	ldrb	r3, [r2, #1]
 800a1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d0:	7053      	strb	r3, [r2, #1]
			}

			//if +ve is up, arr = 20000
			enqerr = target_enq - enqpwLlf;
 800a1d2:	4b51      	ldr	r3, [pc, #324]	; (800a318 <BLDC_func+0x2c4>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	4b51      	ldr	r3, [pc, #324]	; (800a31c <BLDC_func+0x2c8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	603b      	str	r3, [r7, #0]
			pwspeed = enqerr;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a1e8:	edc7 7a01 	vstr	s15, [r7, #4]
			if(enqerr >= 17000)						pwspeed = 17000;
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	f244 2267 	movw	r2, #16999	; 0x4267
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	dd02      	ble.n	800a1fc <BLDC_func+0x1a8>
 800a1f6:	4b4a      	ldr	r3, [pc, #296]	; (800a320 <BLDC_func+0x2cc>)
 800a1f8:	607b      	str	r3, [r7, #4]
 800a1fa:	e01a      	b.n	800a232 <BLDC_func+0x1de>
			else if(enqerr <= 10000 && enqerr > 0)	pwspeed = 10000;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	f242 7210 	movw	r2, #10000	; 0x2710
 800a202:	4293      	cmp	r3, r2
 800a204:	dc05      	bgt.n	800a212 <BLDC_func+0x1be>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dd02      	ble.n	800a212 <BLDC_func+0x1be>
 800a20c:	4b45      	ldr	r3, [pc, #276]	; (800a324 <BLDC_func+0x2d0>)
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	e00f      	b.n	800a232 <BLDC_func+0x1de>
			else if(enqerr <= -14500)				pwspeed = -14500;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	4a44      	ldr	r2, [pc, #272]	; (800a328 <BLDC_func+0x2d4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	da02      	bge.n	800a220 <BLDC_func+0x1cc>
 800a21a:	4b44      	ldr	r3, [pc, #272]	; (800a32c <BLDC_func+0x2d8>)
 800a21c:	607b      	str	r3, [r7, #4]
 800a21e:	e008      	b.n	800a232 <BLDC_func+0x1de>
			else if(enqerr >= -9000 && enqerr < 0)	pwspeed = -9000;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	4a43      	ldr	r2, [pc, #268]	; (800a330 <BLDC_func+0x2dc>)
 800a224:	4293      	cmp	r3, r2
 800a226:	db04      	blt.n	800a232 <BLDC_func+0x1de>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	da01      	bge.n	800a232 <BLDC_func+0x1de>
 800a22e:	4b41      	ldr	r3, [pc, #260]	; (800a334 <BLDC_func+0x2e0>)
 800a230:	607b      	str	r3, [r7, #4]

			if(lagori.bldcstart){
 800a232:	4b38      	ldr	r3, [pc, #224]	; (800a314 <BLDC_func+0x2c0>)
 800a234:	785b      	ldrb	r3, [r3, #1]
 800a236:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d049      	beq.n	800a2d4 <BLDC_func+0x280>
//				if(LGl_lim && target_enq == layer5){	//when pile the smallest lagori
//					LFPW(0);
//					lagori.flip = 2;
//					lagori.bldcstart  = 0;
//				}
				if(target_enq == layer5 && enqerr >= 750){
 800a240:	4b35      	ldr	r3, [pc, #212]	; (800a318 <BLDC_func+0x2c4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f646 1278 	movw	r2, #27000	; 0x6978
 800a248:	4293      	cmp	r3, r2
 800a24a:	d10c      	bne.n	800a266 <BLDC_func+0x212>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800a252:	4293      	cmp	r3, r2
 800a254:	dd07      	ble.n	800a266 <BLDC_func+0x212>
					Await(150);
 800a256:	2096      	movs	r0, #150	; 0x96
 800a258:	f003 f92c 	bl	800d4b4 <Await>
					LFPW(0);
 800a25c:	2100      	movs	r1, #0
 800a25e:	4836      	ldr	r0, [pc, #216]	; (800a338 <BLDC_func+0x2e4>)
 800a260:	f7f7 f88e 	bl	8001380 <WriteBDC>
 800a264:	e036      	b.n	800a2d4 <BLDC_func+0x280>
				}
				else if(target_enq == layerG && enqerr >= -750){
 800a266:	4b2c      	ldr	r3, [pc, #176]	; (800a318 <BLDC_func+0x2c4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a26e:	d110      	bne.n	800a292 <BLDC_func+0x23e>
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	4a32      	ldr	r2, [pc, #200]	; (800a33c <BLDC_func+0x2e8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	db0c      	blt.n	800a292 <BLDC_func+0x23e>
					Await(150);
 800a278:	2096      	movs	r0, #150	; 0x96
 800a27a:	f003 f91b 	bl	800d4b4 <Await>
					LFPW(0);
 800a27e:	2100      	movs	r1, #0
 800a280:	482d      	ldr	r0, [pc, #180]	; (800a338 <BLDC_func+0x2e4>)
 800a282:	f7f7 f87d 	bl	8001380 <WriteBDC>
					lagori.bldcstart = 0;
 800a286:	4a23      	ldr	r2, [pc, #140]	; (800a314 <BLDC_func+0x2c0>)
 800a288:	7853      	ldrb	r3, [r2, #1]
 800a28a:	f36f 13c7 	bfc	r3, #7, #1
 800a28e:	7053      	strb	r3, [r2, #1]
 800a290:	e020      	b.n	800a2d4 <BLDC_func+0x280>
				}
				else if(enqerr <= 750 && enqerr >= -750){	//stop
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a298:	4293      	cmp	r3, r2
 800a29a:	dc10      	bgt.n	800a2be <BLDC_func+0x26a>
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	4a27      	ldr	r2, [pc, #156]	; (800a33c <BLDC_func+0x2e8>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	db0c      	blt.n	800a2be <BLDC_func+0x26a>
					Await(150);
 800a2a4:	2096      	movs	r0, #150	; 0x96
 800a2a6:	f003 f905 	bl	800d4b4 <Await>
					LFPW(0);
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	4822      	ldr	r0, [pc, #136]	; (800a338 <BLDC_func+0x2e4>)
 800a2ae:	f7f7 f867 	bl	8001380 <WriteBDC>
					lagori.bldcstart = 0;
 800a2b2:	4a18      	ldr	r2, [pc, #96]	; (800a314 <BLDC_func+0x2c0>)
 800a2b4:	7853      	ldrb	r3, [r2, #1]
 800a2b6:	f36f 13c7 	bfc	r3, #7, #1
 800a2ba:	7053      	strb	r3, [r2, #1]
 800a2bc:	e00a      	b.n	800a2d4 <BLDC_func+0x280>
				}
				else
					LFPW(pwspeed);
 800a2be:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2c2:	eef1 7a67 	vneg.f32	s15, s15
 800a2c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2ca:	ee17 1a90 	vmov	r1, s15
 800a2ce:	481a      	ldr	r0, [pc, #104]	; (800a338 <BLDC_func+0x2e4>)
 800a2d0:	f7f7 f856 	bl	8001380 <WriteBDC>
			}
		}

		laser_dist.fAdist = 5.5;
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <BLDC_func+0x2ac>)
 800a2d6:	4a0b      	ldr	r2, [pc, #44]	; (800a304 <BLDC_func+0x2b0>)
 800a2d8:	601a      	str	r2, [r3, #0]
		laser_dist.fBdist = 6.0;
 800a2da:	4b09      	ldr	r3, [pc, #36]	; (800a300 <BLDC_func+0x2ac>)
 800a2dc:	4a0a      	ldr	r2, [pc, #40]	; (800a308 <BLDC_func+0x2b4>)
 800a2de:	605a      	str	r2, [r3, #4]
		laser_dist.R1dist = 0.2;
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <BLDC_func+0x2ac>)
 800a2e2:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <BLDC_func+0x2b8>)
 800a2e4:	609a      	str	r2, [r3, #8]
	while(sys.control){
 800a2e6:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <BLDC_func+0x2bc>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f003 0301 	and.w	r3, r3, #1
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f47f aec1 	bne.w	800a078 <BLDC_func+0x24>
					}
				}
			}
		}
	}
}
 800a2f6:	bf00      	nop
 800a2f8:	bf00      	nop
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20007078 	.word	0x20007078
 800a304:	40b00000 	.word	0x40b00000
 800a308:	40c00000 	.word	0x40c00000
 800a30c:	3e4ccccd 	.word	0x3e4ccccd
 800a310:	2000779c 	.word	0x2000779c
 800a314:	20009844 	.word	0x20009844
 800a318:	20009474 	.word	0x20009474
 800a31c:	20007b78 	.word	0x20007b78
 800a320:	4684d000 	.word	0x4684d000
 800a324:	461c4000 	.word	0x461c4000
 800a328:	ffffc75d 	.word	0xffffc75d
 800a32c:	c6629000 	.word	0xc6629000
 800a330:	ffffdcd8 	.word	0xffffdcd8
 800a334:	c60ca000 	.word	0xc60ca000
 800a338:	20007b24 	.word	0x20007b24
 800a33c:	fffffd12 	.word	0xfffffd12

0800a340 <autonomous_mode>:

void autonomous_mode(void){
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
	int enqerr = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	603b      	str	r3, [r7, #0]
	float pwspeed = 0;
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	60fb      	str	r3, [r7, #12]
	//	initiate cylinder, servoBallH and servoBallV
	QEIReset(QEI4);
 800a350:	2004      	movs	r0, #4
 800a352:	f7f7 fd3b 	bl	8001dcc <QEIReset>
	BgripOFF
 800a356:	4aa5      	ldr	r2, [pc, #660]	; (800a5ec <autonomous_mode+0x2ac>)
 800a358:	7853      	ldrb	r3, [r2, #1]
 800a35a:	f36f 0300 	bfc	r3, #0, #1
 800a35e:	7053      	strb	r3, [r2, #1]
	svBRup
 800a360:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a364:	48a2      	ldr	r0, [pc, #648]	; (800a5f0 <autonomous_mode+0x2b0>)
 800a366:	f7fe f95f 	bl	8008628 <ServoSetPulse>
	svBRA
 800a36a:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800a36e:	48a1      	ldr	r0, [pc, #644]	; (800a5f4 <autonomous_mode+0x2b4>)
 800a370:	f7fe f95a 	bl	8008628 <ServoSetPulse>
	Await(500);
 800a374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a378:	f003 f89c 	bl	800d4b4 <Await>
	svBRrealup
 800a37c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800a380:	489b      	ldr	r0, [pc, #620]	; (800a5f0 <autonomous_mode+0x2b0>)
 800a382:	f7fe f951 	bl	8008628 <ServoSetPulse>
	svCloseFlip
 800a386:	f240 7121 	movw	r1, #1825	; 0x721
 800a38a:	489b      	ldr	r0, [pc, #620]	; (800a5f8 <autonomous_mode+0x2b8>)
 800a38c:	f7fe f94c 	bl	8008628 <ServoSetPulse>
 800a390:	f240 316b 	movw	r1, #875	; 0x36b
 800a394:	4899      	ldr	r0, [pc, #612]	; (800a5fc <autonomous_mode+0x2bc>)
 800a396:	f7fe f947 	bl	8008628 <ServoSetPulse>
	sys.auto2manual = 1;
 800a39a:	4a99      	ldr	r2, [pc, #612]	; (800a600 <autonomous_mode+0x2c0>)
 800a39c:	7813      	ldrb	r3, [r2, #0]
 800a39e:	f043 0310 	orr.w	r3, r3, #16
 800a3a2:	7013      	strb	r3, [r2, #0]
	target_enq = 5000;
 800a3a4:	4b97      	ldr	r3, [pc, #604]	; (800a604 <autonomous_mode+0x2c4>)
 800a3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3aa:	601a      	str	r2, [r3, #0]
	lagori.bldcstart  = 1;
 800a3ac:	4a96      	ldr	r2, [pc, #600]	; (800a608 <autonomous_mode+0x2c8>)
 800a3ae:	7853      	ldrb	r3, [r2, #1]
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b4:	7053      	strb	r3, [r2, #1]
	MODN.speed = 3.3;
 800a3b6:	4b95      	ldr	r3, [pc, #596]	; (800a60c <autonomous_mode+0x2cc>)
 800a3b8:	4a95      	ldr	r2, [pc, #596]	; (800a610 <autonomous_mode+0x2d0>)
 800a3ba:	61da      	str	r2, [r3, #28]
	while(sys.manual == 0){
 800a3bc:	f000 bc59 	b.w	800ac72 <autonomous_mode+0x932>
		if(!LGclose)	LGPW(-6000)
 800a3c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a3c4:	4893      	ldr	r0, [pc, #588]	; (800a614 <autonomous_mode+0x2d4>)
 800a3c6:	f009 ffed 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <autonomous_mode+0x9c>
 800a3d0:	f241 7170 	movw	r1, #6000	; 0x1770
 800a3d4:	4890      	ldr	r0, [pc, #576]	; (800a618 <autonomous_mode+0x2d8>)
 800a3d6:	f7f6 ffd3 	bl	8001380 <WriteBDC>
 800a3da:	e003      	b.n	800a3e4 <autonomous_mode+0xa4>
		else		LGPW(0)
 800a3dc:	2100      	movs	r1, #0
 800a3de:	488e      	ldr	r0, [pc, #568]	; (800a618 <autonomous_mode+0x2d8>)
 800a3e0:	f7f6 ffce 	bl	8001380 <WriteBDC>
		if(lagori.bldcstart){
 800a3e4:	4b88      	ldr	r3, [pc, #544]	; (800a608 <autonomous_mode+0x2c8>)
 800a3e6:	785b      	ldrb	r3, [r3, #1]
 800a3e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d050      	beq.n	800a494 <autonomous_mode+0x154>
			enqerr = target_enq - enqpwLlf;
 800a3f2:	4b84      	ldr	r3, [pc, #528]	; (800a604 <autonomous_mode+0x2c4>)
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	4b89      	ldr	r3, [pc, #548]	; (800a61c <autonomous_mode+0x2dc>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	603b      	str	r3, [r7, #0]
			pwspeed = enqerr;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	ee07 3a90 	vmov	s15, r3
 800a404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a408:	edc7 7a03 	vstr	s15, [r7, #12]
			if(enqerr >= 15000)						pwspeed = 15000;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	f643 2297 	movw	r2, #14999	; 0x3a97
 800a412:	4293      	cmp	r3, r2
 800a414:	dd02      	ble.n	800a41c <autonomous_mode+0xdc>
 800a416:	4b82      	ldr	r3, [pc, #520]	; (800a620 <autonomous_mode+0x2e0>)
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e01a      	b.n	800a452 <autonomous_mode+0x112>
			else if(enqerr <= 8500 && enqerr > 0)	pwspeed = 8500;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	f242 1234 	movw	r2, #8500	; 0x2134
 800a422:	4293      	cmp	r3, r2
 800a424:	dc05      	bgt.n	800a432 <autonomous_mode+0xf2>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	dd02      	ble.n	800a432 <autonomous_mode+0xf2>
 800a42c:	4b7d      	ldr	r3, [pc, #500]	; (800a624 <autonomous_mode+0x2e4>)
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	e00f      	b.n	800a452 <autonomous_mode+0x112>
			else if(enqerr <= -12500)				pwspeed = -12500;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	4a7c      	ldr	r2, [pc, #496]	; (800a628 <autonomous_mode+0x2e8>)
 800a436:	4293      	cmp	r3, r2
 800a438:	da02      	bge.n	800a440 <autonomous_mode+0x100>
 800a43a:	4b7c      	ldr	r3, [pc, #496]	; (800a62c <autonomous_mode+0x2ec>)
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	e008      	b.n	800a452 <autonomous_mode+0x112>
			else if(enqerr >= -6000 && enqerr < 0)	pwspeed = -6000;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	4a7b      	ldr	r2, [pc, #492]	; (800a630 <autonomous_mode+0x2f0>)
 800a444:	4293      	cmp	r3, r2
 800a446:	db04      	blt.n	800a452 <autonomous_mode+0x112>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	da01      	bge.n	800a452 <autonomous_mode+0x112>
 800a44e:	4b79      	ldr	r3, [pc, #484]	; (800a634 <autonomous_mode+0x2f4>)
 800a450:	60fb      	str	r3, [r7, #12]
			if(enqerr <= 750 && enqerr >= -750){	//stop
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	f240 22ee 	movw	r2, #750	; 0x2ee
 800a458:	4293      	cmp	r3, r2
 800a45a:	dc10      	bgt.n	800a47e <autonomous_mode+0x13e>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	4a76      	ldr	r2, [pc, #472]	; (800a638 <autonomous_mode+0x2f8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	db0c      	blt.n	800a47e <autonomous_mode+0x13e>
				Await(150);
 800a464:	2096      	movs	r0, #150	; 0x96
 800a466:	f003 f825 	bl	800d4b4 <Await>
				LFPW(0);
 800a46a:	2100      	movs	r1, #0
 800a46c:	4873      	ldr	r0, [pc, #460]	; (800a63c <autonomous_mode+0x2fc>)
 800a46e:	f7f6 ff87 	bl	8001380 <WriteBDC>
				lagori.bldcstart  = 0;
 800a472:	4a65      	ldr	r2, [pc, #404]	; (800a608 <autonomous_mode+0x2c8>)
 800a474:	7853      	ldrb	r3, [r2, #1]
 800a476:	f36f 13c7 	bfc	r3, #7, #1
 800a47a:	7053      	strb	r3, [r2, #1]
 800a47c:	e00a      	b.n	800a494 <autonomous_mode+0x154>
			}
			else
				LFPW(pwspeed);
 800a47e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a482:	eef1 7a67 	vneg.f32	s15, s15
 800a486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a48a:	ee17 1a90 	vmov	r1, s15
 800a48e:	486b      	ldr	r0, [pc, #428]	; (800a63c <autonomous_mode+0x2fc>)
 800a490:	f7f6 ff76 	bl	8001380 <WriteBDC>
		}

		//led2 - function
		//led3 - path plan
		if(ps4.button == SQUARE){		//to ball rack B
 800a494:	4b6a      	ldr	r3, [pc, #424]	; (800a640 <autonomous_mode+0x300>)
 800a496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a49c:	d159      	bne.n	800a552 <autonomous_mode+0x212>
			sys.auto2manual = 0;
 800a49e:	4a58      	ldr	r2, [pc, #352]	; (800a600 <autonomous_mode+0x2c0>)
 800a4a0:	7813      	ldrb	r3, [r2, #0]
 800a4a2:	f36f 1304 	bfc	r3, #4, #1
 800a4a6:	7013      	strb	r3, [r2, #0]
			while(ps4.button == SQUARE);
 800a4a8:	bf00      	nop
 800a4aa:	4b65      	ldr	r3, [pc, #404]	; (800a640 <autonomous_mode+0x300>)
 800a4ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b2:	d0fa      	beq.n	800a4aa <autonomous_mode+0x16a>
			if(ps4.button == L1_SQUARE){
 800a4b4:	4b62      	ldr	r3, [pc, #392]	; (800a640 <autonomous_mode+0x300>)
 800a4b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4b8:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800a4bc:	d114      	bne.n	800a4e8 <autonomous_mode+0x1a8>
				while(ps4.button == L1_SQUARE){
 800a4be:	e00d      	b.n	800a4dc <autonomous_mode+0x19c>
					pp.task = 3;
 800a4c0:	4a60      	ldr	r2, [pc, #384]	; (800a644 <autonomous_mode+0x304>)
 800a4c2:	7813      	ldrb	r3, [r2, #0]
 800a4c4:	2103      	movs	r1, #3
 800a4c6:	f361 03c5 	bfi	r3, r1, #3, #3
 800a4ca:	7013      	strb	r3, [r2, #0]
					pp.path = 3;
 800a4cc:	4a5d      	ldr	r2, [pc, #372]	; (800a644 <autonomous_mode+0x304>)
 800a4ce:	7813      	ldrb	r3, [r2, #0]
 800a4d0:	2103      	movs	r1, #3
 800a4d2:	f361 0302 	bfi	r3, r1, #0, #3
 800a4d6:	7013      	strb	r3, [r2, #0]
					pp_func();
 800a4d8:	f000 fcee 	bl	800aeb8 <pp_func>
				while(ps4.button == L1_SQUARE){
 800a4dc:	4b58      	ldr	r3, [pc, #352]	; (800a640 <autonomous_mode+0x300>)
 800a4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e0:	f5b3 4f04 	cmp.w	r3, #33792	; 0x8400
 800a4e4:	d0ec      	beq.n	800a4c0 <autonomous_mode+0x180>
 800a4e6:	e034      	b.n	800a552 <autonomous_mode+0x212>
				}
			}
			else if(ps4.button == R1_SQUARE){
 800a4e8:	4b55      	ldr	r3, [pc, #340]	; (800a640 <autonomous_mode+0x300>)
 800a4ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ec:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800a4f0:	d11f      	bne.n	800a532 <autonomous_mode+0x1f2>
				while(ps4.button == R1_SQUARE);
 800a4f2:	bf00      	nop
 800a4f4:	4b52      	ldr	r3, [pc, #328]	; (800a640 <autonomous_mode+0x300>)
 800a4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f8:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
 800a4fc:	d0fa      	beq.n	800a4f4 <autonomous_mode+0x1b4>
				RNSSet(&rns, RNS_RESET_POS);
 800a4fe:	2114      	movs	r1, #20
 800a500:	4851      	ldr	r0, [pc, #324]	; (800a648 <autonomous_mode+0x308>)
 800a502:	f7fc fb2f 	bl	8006b64 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800a506:	2117      	movs	r1, #23
 800a508:	484f      	ldr	r0, [pc, #316]	; (800a648 <autonomous_mode+0x308>)
 800a50a:	f7fc fb2b 	bl	8006b64 <RNSSet>
				pp.path = 2;
 800a50e:	4a4d      	ldr	r2, [pc, #308]	; (800a644 <autonomous_mode+0x304>)
 800a510:	7813      	ldrb	r3, [r2, #0]
 800a512:	2102      	movs	r1, #2
 800a514:	f361 0302 	bfi	r3, r1, #0, #3
 800a518:	7013      	strb	r3, [r2, #0]
				pp.task = 2;
 800a51a:	4a4a      	ldr	r2, [pc, #296]	; (800a644 <autonomous_mode+0x304>)
 800a51c:	7813      	ldrb	r3, [r2, #0]
 800a51e:	2102      	movs	r1, #2
 800a520:	f361 03c5 	bfi	r3, r1, #3, #3
 800a524:	7013      	strb	r3, [r2, #0]
				sys.ppstart = 1;
 800a526:	4a36      	ldr	r2, [pc, #216]	; (800a600 <autonomous_mode+0x2c0>)
 800a528:	7813      	ldrb	r3, [r2, #0]
 800a52a:	f043 0320 	orr.w	r3, r3, #32
 800a52e:	7013      	strb	r3, [r2, #0]
 800a530:	e00f      	b.n	800a552 <autonomous_mode+0x212>
			}
			else{
				pp.task ++;
 800a532:	4b44      	ldr	r3, [pc, #272]	; (800a644 <autonomous_mode+0x304>)
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	3301      	adds	r3, #1
 800a53e:	f003 0307 	and.w	r3, r3, #7
 800a542:	b2d9      	uxtb	r1, r3
 800a544:	4a3f      	ldr	r2, [pc, #252]	; (800a644 <autonomous_mode+0x304>)
 800a546:	7813      	ldrb	r3, [r2, #0]
 800a548:	f361 03c5 	bfi	r3, r1, #3, #3
 800a54c:	7013      	strb	r3, [r2, #0]
				pp_func();
 800a54e:	f000 fcb3 	bl	800aeb8 <pp_func>
			}
		}
		if(ps4.button == TRIANGLE){
 800a552:	4b3b      	ldr	r3, [pc, #236]	; (800a640 <autonomous_mode+0x300>)
 800a554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a55a:	d17c      	bne.n	800a656 <autonomous_mode+0x316>
			sys.auto2manual = 0;
 800a55c:	4a28      	ldr	r2, [pc, #160]	; (800a600 <autonomous_mode+0x2c0>)
 800a55e:	7813      	ldrb	r3, [r2, #0]
 800a560:	f36f 1304 	bfc	r3, #4, #1
 800a564:	7013      	strb	r3, [r2, #0]
			while(ps4.button == TRIANGLE);
 800a566:	bf00      	nop
 800a568:	4b35      	ldr	r3, [pc, #212]	; (800a640 <autonomous_mode+0x300>)
 800a56a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a56c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a570:	d0fa      	beq.n	800a568 <autonomous_mode+0x228>
			if(ps4.button == L1_TRIANGLE){
 800a572:	4b33      	ldr	r3, [pc, #204]	; (800a640 <autonomous_mode+0x300>)
 800a574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a576:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a57a:	d114      	bne.n	800a5a6 <autonomous_mode+0x266>
				while(ps4.button == L1_TRIANGLE);
 800a57c:	bf00      	nop
 800a57e:	4b30      	ldr	r3, [pc, #192]	; (800a640 <autonomous_mode+0x300>)
 800a580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a582:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a586:	d0fa      	beq.n	800a57e <autonomous_mode+0x23e>
				pp.task = 1;
 800a588:	4a2e      	ldr	r2, [pc, #184]	; (800a644 <autonomous_mode+0x304>)
 800a58a:	7813      	ldrb	r3, [r2, #0]
 800a58c:	2101      	movs	r1, #1
 800a58e:	f361 03c5 	bfi	r3, r1, #3, #3
 800a592:	7013      	strb	r3, [r2, #0]
				pp.path = 1;
 800a594:	4a2b      	ldr	r2, [pc, #172]	; (800a644 <autonomous_mode+0x304>)
 800a596:	7813      	ldrb	r3, [r2, #0]
 800a598:	2101      	movs	r1, #1
 800a59a:	f361 0302 	bfi	r3, r1, #0, #3
 800a59e:	7013      	strb	r3, [r2, #0]
				pp_func();
 800a5a0:	f000 fc8a 	bl	800aeb8 <pp_func>
 800a5a4:	e057      	b.n	800a656 <autonomous_mode+0x316>
			}
			else if(ps4.button == R1_TRIANGLE){
 800a5a6:	4b26      	ldr	r3, [pc, #152]	; (800a640 <autonomous_mode+0x300>)
 800a5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5aa:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800a5ae:	d14d      	bne.n	800a64c <autonomous_mode+0x30c>
				while(ps4.button == R1_TRIANGLE);
 800a5b0:	bf00      	nop
 800a5b2:	4b23      	ldr	r3, [pc, #140]	; (800a640 <autonomous_mode+0x300>)
 800a5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5b6:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800a5ba:	d0fa      	beq.n	800a5b2 <autonomous_mode+0x272>
				pp.task = 0;
 800a5bc:	4a21      	ldr	r2, [pc, #132]	; (800a644 <autonomous_mode+0x304>)
 800a5be:	7813      	ldrb	r3, [r2, #0]
 800a5c0:	f36f 03c5 	bfc	r3, #3, #3
 800a5c4:	7013      	strb	r3, [r2, #0]
				pp.path = 0;
 800a5c6:	4a1f      	ldr	r2, [pc, #124]	; (800a644 <autonomous_mode+0x304>)
 800a5c8:	7813      	ldrb	r3, [r2, #0]
 800a5ca:	f36f 0302 	bfc	r3, #0, #3
 800a5ce:	7013      	strb	r3, [r2, #0]
				RNSSet(&rns, RNS_RESET_POS);
 800a5d0:	2114      	movs	r1, #20
 800a5d2:	481d      	ldr	r0, [pc, #116]	; (800a648 <autonomous_mode+0x308>)
 800a5d4:	f7fc fac6 	bl	8006b64 <RNSSet>
				RNSSet(&rns, RNS_PP_Reset);
 800a5d8:	2117      	movs	r1, #23
 800a5da:	481b      	ldr	r0, [pc, #108]	; (800a648 <autonomous_mode+0x308>)
 800a5dc:	f7fc fac2 	bl	8006b64 <RNSSet>
				sys.ppstart = 1;
 800a5e0:	4a07      	ldr	r2, [pc, #28]	; (800a600 <autonomous_mode+0x2c0>)
 800a5e2:	7813      	ldrb	r3, [r2, #0]
 800a5e4:	f043 0320 	orr.w	r3, r3, #32
 800a5e8:	7013      	strb	r3, [r2, #0]
 800a5ea:	e034      	b.n	800a656 <autonomous_mode+0x316>
 800a5ec:	40020814 	.word	0x40020814
 800a5f0:	20009738 	.word	0x20009738
 800a5f4:	20009924 	.word	0x20009924
 800a5f8:	20009974 	.word	0x20009974
 800a5fc:	2000a5f8 	.word	0x2000a5f8
 800a600:	2000779c 	.word	0x2000779c
 800a604:	20009474 	.word	0x20009474
 800a608:	20009844 	.word	0x20009844
 800a60c:	20007540 	.word	0x20007540
 800a610:	40533333 	.word	0x40533333
 800a614:	40021000 	.word	0x40021000
 800a618:	2000a5d4 	.word	0x2000a5d4
 800a61c:	20007b78 	.word	0x20007b78
 800a620:	466a6000 	.word	0x466a6000
 800a624:	4604d000 	.word	0x4604d000
 800a628:	ffffcf2d 	.word	0xffffcf2d
 800a62c:	c6435000 	.word	0xc6435000
 800a630:	ffffe890 	.word	0xffffe890
 800a634:	c5bb8000 	.word	0xc5bb8000
 800a638:	fffffd12 	.word	0xfffffd12
 800a63c:	20007b24 	.word	0x20007b24
 800a640:	2000a0c8 	.word	0x2000a0c8
 800a644:	20007704 	.word	0x20007704
 800a648:	200091e8 	.word	0x200091e8
			}
			else{
				sys.ppstart = 1;
 800a64c:	4ab2      	ldr	r2, [pc, #712]	; (800a918 <autonomous_mode+0x5d8>)
 800a64e:	7813      	ldrb	r3, [r2, #0]
 800a650:	f043 0320 	orr.w	r3, r3, #32
 800a654:	7013      	strb	r3, [r2, #0]
			}
		}
		if(ps4.button == CROSS){
 800a656:	4bb1      	ldr	r3, [pc, #708]	; (800a91c <autonomous_mode+0x5dc>)
 800a658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a65e:	d10d      	bne.n	800a67c <autonomous_mode+0x33c>
			while(ps4.button == CROSS);
 800a660:	bf00      	nop
 800a662:	4bae      	ldr	r3, [pc, #696]	; (800a91c <autonomous_mode+0x5dc>)
 800a664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a66a:	d0fa      	beq.n	800a662 <autonomous_mode+0x322>
			RNSStop(&rns);
 800a66c:	48ac      	ldr	r0, [pc, #688]	; (800a920 <autonomous_mode+0x5e0>)
 800a66e:	f7fc f86d 	bl	800674c <RNSStop>
			sys.auto2manual = 1;
 800a672:	4aa9      	ldr	r2, [pc, #676]	; (800a918 <autonomous_mode+0x5d8>)
 800a674:	7813      	ldrb	r3, [r2, #0]
 800a676:	f043 0310 	orr.w	r3, r3, #16
 800a67a:	7013      	strb	r3, [r2, #0]
		}

		if(sys.auto2manual){
 800a67c:	4ba6      	ldr	r3, [pc, #664]	; (800a918 <autonomous_mode+0x5d8>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	f000 80c4 	beq.w	800a814 <autonomous_mode+0x4d4>
			if(ps4.button == R1)
 800a68c:	4ba3      	ldr	r3, [pc, #652]	; (800a91c <autonomous_mode+0x5dc>)
 800a68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a694:	d103      	bne.n	800a69e <autonomous_mode+0x35e>
				MODN.speed = 6.6;
 800a696:	4ba3      	ldr	r3, [pc, #652]	; (800a924 <autonomous_mode+0x5e4>)
 800a698:	4aa3      	ldr	r2, [pc, #652]	; (800a928 <autonomous_mode+0x5e8>)
 800a69a:	61da      	str	r2, [r3, #28]
 800a69c:	e002      	b.n	800a6a4 <autonomous_mode+0x364>
			else
				MODN.speed = 3.0;
 800a69e:	4ba1      	ldr	r3, [pc, #644]	; (800a924 <autonomous_mode+0x5e4>)
 800a6a0:	4aa2      	ldr	r2, [pc, #648]	; (800a92c <autonomous_mode+0x5ec>)
 800a6a2:	61da      	str	r2, [r3, #28]
			realMODN(&ps4, &rns);
 800a6a4:	499e      	ldr	r1, [pc, #632]	; (800a920 <autonomous_mode+0x5e0>)
 800a6a6:	489d      	ldr	r0, [pc, #628]	; (800a91c <autonomous_mode+0x5dc>)
 800a6a8:	f7fa ff56 	bl	8005558 <realMODN>

			if(ps4.button == L1){
 800a6ac:	4b9b      	ldr	r3, [pc, #620]	; (800a91c <autonomous_mode+0x5dc>)
 800a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b4:	d126      	bne.n	800a704 <autonomous_mode+0x3c4>
				if(pp.cyon == 0)
 800a6b6:	4b9e      	ldr	r3, [pc, #632]	; (800a930 <autonomous_mode+0x5f0>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d105      	bne.n	800a6d0 <autonomous_mode+0x390>
					BgripON
 800a6c4:	4a9b      	ldr	r2, [pc, #620]	; (800a934 <autonomous_mode+0x5f4>)
 800a6c6:	7853      	ldrb	r3, [r2, #1]
 800a6c8:	f043 0301 	orr.w	r3, r3, #1
 800a6cc:	7053      	strb	r3, [r2, #1]
 800a6ce:	e004      	b.n	800a6da <autonomous_mode+0x39a>
				else
					BgripOFF
 800a6d0:	4a98      	ldr	r2, [pc, #608]	; (800a934 <autonomous_mode+0x5f4>)
 800a6d2:	7853      	ldrb	r3, [r2, #1]
 800a6d4:	f36f 0300 	bfc	r3, #0, #1
 800a6d8:	7053      	strb	r3, [r2, #1]
				pp.cyon = !pp.cyon;
 800a6da:	4b95      	ldr	r3, [pc, #596]	; (800a930 <autonomous_mode+0x5f0>)
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	bf0c      	ite	eq
 800a6e8:	2301      	moveq	r3, #1
 800a6ea:	2300      	movne	r3, #0
 800a6ec:	b2d9      	uxtb	r1, r3
 800a6ee:	4a90      	ldr	r2, [pc, #576]	; (800a930 <autonomous_mode+0x5f0>)
 800a6f0:	7813      	ldrb	r3, [r2, #0]
 800a6f2:	f361 1386 	bfi	r3, r1, #6, #1
 800a6f6:	7013      	strb	r3, [r2, #0]
				while(ps4.button == L1);
 800a6f8:	bf00      	nop
 800a6fa:	4b88      	ldr	r3, [pc, #544]	; (800a91c <autonomous_mode+0x5dc>)
 800a6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a702:	d0fa      	beq.n	800a6fa <autonomous_mode+0x3ba>
			}

			if(ps4.button == DOWN){
 800a704:	4b85      	ldr	r3, [pc, #532]	; (800a91c <autonomous_mode+0x5dc>)
 800a706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a708:	2b40      	cmp	r3, #64	; 0x40
 800a70a:	d109      	bne.n	800a720 <autonomous_mode+0x3e0>
				while(ps4.button == DOWN);
 800a70c:	bf00      	nop
 800a70e:	4b83      	ldr	r3, [pc, #524]	; (800a91c <autonomous_mode+0x5dc>)
 800a710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d0fb      	beq.n	800a70e <autonomous_mode+0x3ce>
				svBRdown
 800a716:	f640 218c 	movw	r1, #2700	; 0xa8c
 800a71a:	4887      	ldr	r0, [pc, #540]	; (800a938 <autonomous_mode+0x5f8>)
 800a71c:	f7fd ff84 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.button == UP){
 800a720:	4b7e      	ldr	r3, [pc, #504]	; (800a91c <autonomous_mode+0x5dc>)
 800a722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a724:	2b10      	cmp	r3, #16
 800a726:	d109      	bne.n	800a73c <autonomous_mode+0x3fc>
				while(ps4.button == UP);
 800a728:	bf00      	nop
 800a72a:	4b7c      	ldr	r3, [pc, #496]	; (800a91c <autonomous_mode+0x5dc>)
 800a72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72e:	2b10      	cmp	r3, #16
 800a730:	d0fb      	beq.n	800a72a <autonomous_mode+0x3ea>
				svBRrealup
 800a732:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800a736:	4880      	ldr	r0, [pc, #512]	; (800a938 <autonomous_mode+0x5f8>)
 800a738:	f7fd ff76 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.button == LEFT){
 800a73c:	4b77      	ldr	r3, [pc, #476]	; (800a91c <autonomous_mode+0x5dc>)
 800a73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a740:	2b80      	cmp	r3, #128	; 0x80
 800a742:	d109      	bne.n	800a758 <autonomous_mode+0x418>
				while(ps4.button == LEFT);
 800a744:	bf00      	nop
 800a746:	4b75      	ldr	r3, [pc, #468]	; (800a91c <autonomous_mode+0x5dc>)
 800a748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74a:	2b80      	cmp	r3, #128	; 0x80
 800a74c:	d0fb      	beq.n	800a746 <autonomous_mode+0x406>
				svBRA
 800a74e:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800a752:	487a      	ldr	r0, [pc, #488]	; (800a93c <autonomous_mode+0x5fc>)
 800a754:	f7fd ff68 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.button == RIGHT){
 800a758:	4b70      	ldr	r3, [pc, #448]	; (800a91c <autonomous_mode+0x5dc>)
 800a75a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d109      	bne.n	800a774 <autonomous_mode+0x434>
				while(ps4.button == RIGHT);
 800a760:	bf00      	nop
 800a762:	4b6e      	ldr	r3, [pc, #440]	; (800a91c <autonomous_mode+0x5dc>)
 800a764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a766:	2b20      	cmp	r3, #32
 800a768:	d0fb      	beq.n	800a762 <autonomous_mode+0x422>
				svBRB
 800a76a:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800a76e:	4873      	ldr	r0, [pc, #460]	; (800a93c <autonomous_mode+0x5fc>)
 800a770:	f7fd ff5a 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.joyR_y >= 0.5){
 800a774:	4b69      	ldr	r3, [pc, #420]	; (800a91c <autonomous_mode+0x5dc>)
 800a776:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a77a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a77e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a786:	db0f      	blt.n	800a7a8 <autonomous_mode+0x468>
				while(ps4.joyR_y >= 0.5);
 800a788:	bf00      	nop
 800a78a:	4b64      	ldr	r3, [pc, #400]	; (800a91c <autonomous_mode+0x5dc>)
 800a78c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a794:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79c:	daf5      	bge.n	800a78a <autonomous_mode+0x44a>
				svBRup
 800a79e:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a7a2:	4865      	ldr	r0, [pc, #404]	; (800a938 <autonomous_mode+0x5f8>)
 800a7a4:	f7fd ff40 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.joyR_x >= 0.5){
 800a7a8:	4b5c      	ldr	r3, [pc, #368]	; (800a91c <autonomous_mode+0x5dc>)
 800a7aa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a7b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ba:	db0f      	blt.n	800a7dc <autonomous_mode+0x49c>
				while(ps4.joyR_x >= 0.5);
 800a7bc:	bf00      	nop
 800a7be:	4b57      	ldr	r3, [pc, #348]	; (800a91c <autonomous_mode+0x5dc>)
 800a7c0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a7c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d0:	daf5      	bge.n	800a7be <autonomous_mode+0x47e>
				svBRAback
 800a7d2:	f640 014d 	movw	r1, #2125	; 0x84d
 800a7d6:	4859      	ldr	r0, [pc, #356]	; (800a93c <autonomous_mode+0x5fc>)
 800a7d8:	f7fd ff26 	bl	8008628 <ServoSetPulse>
			}

			if(ps4.joyR_x <= -0.5){
 800a7dc:	4b4f      	ldr	r3, [pc, #316]	; (800a91c <autonomous_mode+0x5dc>)
 800a7de:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7e2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a7e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ee:	d900      	bls.n	800a7f2 <autonomous_mode+0x4b2>
 800a7f0:	e23f      	b.n	800ac72 <autonomous_mode+0x932>
				while(ps4.joyR_x <= -0.5);
 800a7f2:	bf00      	nop
 800a7f4:	4b49      	ldr	r3, [pc, #292]	; (800a91c <autonomous_mode+0x5dc>)
 800a7f6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a7fa:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a7fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a806:	d9f5      	bls.n	800a7f4 <autonomous_mode+0x4b4>
				svBRBback
 800a808:	f44f 7116 	mov.w	r1, #600	; 0x258
 800a80c:	484b      	ldr	r0, [pc, #300]	; (800a93c <autonomous_mode+0x5fc>)
 800a80e:	f7fd ff0b 	bl	8008628 <ServoSetPulse>
 800a812:	e22e      	b.n	800ac72 <autonomous_mode+0x932>
			}
		}
		else if(pp.path <= 4 && pp.task <= 4){
 800a814:	4b46      	ldr	r3, [pc, #280]	; (800a930 <autonomous_mode+0x5f0>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b04      	cmp	r3, #4
 800a820:	f200 8227 	bhi.w	800ac72 <autonomous_mode+0x932>
 800a824:	4b42      	ldr	r3, [pc, #264]	; (800a930 <autonomous_mode+0x5f0>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b04      	cmp	r3, #4
 800a830:	f200 821f 	bhi.w	800ac72 <autonomous_mode+0x932>
			//auto mode
			if(rns.RNS_data.common_instruction == RNS_BUSY){
 800a834:	4b3a      	ldr	r3, [pc, #232]	; (800a920 <autonomous_mode+0x5e0>)
 800a836:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d105      	bne.n	800a84a <autonomous_mode+0x50a>
				led3 = 0;
 800a83e:	4a3d      	ldr	r2, [pc, #244]	; (800a934 <autonomous_mode+0x5f4>)
 800a840:	7853      	ldrb	r3, [r2, #1]
 800a842:	f36f 13c7 	bfc	r3, #7, #1
 800a846:	7053      	strb	r3, [r2, #1]
 800a848:	e213      	b.n	800ac72 <autonomous_mode+0x932>
			}
			else if(sys.ppstart == 1 && (rns.RNS_data.common_instruction != RNS_BUSY)){
 800a84a:	4b33      	ldr	r3, [pc, #204]	; (800a918 <autonomous_mode+0x5d8>)
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01f      	beq.n	800a898 <autonomous_mode+0x558>
 800a858:	4b31      	ldr	r3, [pc, #196]	; (800a920 <autonomous_mode+0x5e0>)
 800a85a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d01a      	beq.n	800a898 <autonomous_mode+0x558>
				led2 = 1;
 800a862:	4a34      	ldr	r2, [pc, #208]	; (800a934 <autonomous_mode+0x5f4>)
 800a864:	7853      	ldrb	r3, [r2, #1]
 800a866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86a:	7053      	strb	r3, [r2, #1]
				pp.path ++;
 800a86c:	4b30      	ldr	r3, [pc, #192]	; (800a930 <autonomous_mode+0x5f0>)
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800a874:	b2db      	uxtb	r3, r3
 800a876:	3301      	adds	r3, #1
 800a878:	f003 0307 	and.w	r3, r3, #7
 800a87c:	b2d9      	uxtb	r1, r3
 800a87e:	4a2c      	ldr	r2, [pc, #176]	; (800a930 <autonomous_mode+0x5f0>)
 800a880:	7813      	ldrb	r3, [r2, #0]
 800a882:	f361 0302 	bfi	r3, r1, #0, #3
 800a886:	7013      	strb	r3, [r2, #0]
				pp_runpath();
 800a888:	f000 fa04 	bl	800ac94 <pp_runpath>
				sys.ppstart = 0;
 800a88c:	4a22      	ldr	r2, [pc, #136]	; (800a918 <autonomous_mode+0x5d8>)
 800a88e:	7813      	ldrb	r3, [r2, #0]
 800a890:	f36f 1345 	bfc	r3, #5, #1
 800a894:	7013      	strb	r3, [r2, #0]
 800a896:	e1ec      	b.n	800ac72 <autonomous_mode+0x932>
			}
			else if(sys.ppend == 1 && (rns.RNS_data.common_instruction != RNS_BUSY)){
 800a898:	4b1f      	ldr	r3, [pc, #124]	; (800a918 <autonomous_mode+0x5d8>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 81d2 	beq.w	800ac4c <autonomous_mode+0x90c>
 800a8a8:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <autonomous_mode+0x5e0>)
 800a8aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	f000 81cc 	beq.w	800ac4c <autonomous_mode+0x90c>
				led3 = 1;
 800a8b4:	4a1f      	ldr	r2, [pc, #124]	; (800a934 <autonomous_mode+0x5f4>)
 800a8b6:	7853      	ldrb	r3, [r2, #1]
 800a8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8bc:	7053      	strb	r3, [r2, #1]
				if(pp.path == 1){
 800a8be:	4b1c      	ldr	r3, [pc, #112]	; (800a930 <autonomous_mode+0x5f0>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	f040 80cd 	bne.w	800aa68 <autonomous_mode+0x728>
//						if(lsl1 || lsl2)
//							laserctrl();
//						else if(lsr1)
//							RNSVelocity(-1.25, 1.75, 1.75, 0.0, &rns);
//					}
					for(int i = 0; i < 3; i++){
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60bb      	str	r3, [r7, #8]
 800a8d2:	e0c5      	b.n	800aa60 <autonomous_mode+0x720>
						while (lsl1|| lsl2 || lsr1){
							if((!(lsl2 || lsr1)) && lsl1)
 800a8d4:	2180      	movs	r1, #128	; 0x80
 800a8d6:	481a      	ldr	r0, [pc, #104]	; (800a940 <autonomous_mode+0x600>)
 800a8d8:	f009 fd64 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d034      	beq.n	800a94c <autonomous_mode+0x60c>
 800a8e2:	2120      	movs	r1, #32
 800a8e4:	4817      	ldr	r0, [pc, #92]	; (800a944 <autonomous_mode+0x604>)
 800a8e6:	f009 fd5d 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d02d      	beq.n	800a94c <autonomous_mode+0x60c>
 800a8f0:	2110      	movs	r1, #16
 800a8f2:	4813      	ldr	r0, [pc, #76]	; (800a940 <autonomous_mode+0x600>)
 800a8f4:	f009 fd56 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d126      	bne.n	800a94c <autonomous_mode+0x60c>
								RNSVelocity(0.00, 0.75, 0.00, 0.25, &rns);
 800a8fe:	4808      	ldr	r0, [pc, #32]	; (800a920 <autonomous_mode+0x5e0>)
 800a900:	eef5 1a00 	vmov.f32	s3, #80	; 0x3e800000  0.250
 800a904:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800a948 <autonomous_mode+0x608>
 800a908:	eef6 0a08 	vmov.f32	s1, #104	; 0x3f400000  0.750
 800a90c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a948 <autonomous_mode+0x608>
 800a910:	f7fb ff6c 	bl	80067ec <RNSVelocity>
 800a914:	e075      	b.n	800aa02 <autonomous_mode+0x6c2>
 800a916:	bf00      	nop
 800a918:	2000779c 	.word	0x2000779c
 800a91c:	2000a0c8 	.word	0x2000a0c8
 800a920:	200091e8 	.word	0x200091e8
 800a924:	20007540 	.word	0x20007540
 800a928:	40d33333 	.word	0x40d33333
 800a92c:	40400000 	.word	0x40400000
 800a930:	20007704 	.word	0x20007704
 800a934:	40020814 	.word	0x40020814
 800a938:	20009738 	.word	0x20009738
 800a93c:	20009924 	.word	0x20009924
 800a940:	40020c00 	.word	0x40020c00
 800a944:	40020400 	.word	0x40020400
 800a948:	00000000 	.word	0x00000000
							else if(lsl1 && lsl2)
 800a94c:	2110      	movs	r1, #16
 800a94e:	48b8      	ldr	r0, [pc, #736]	; (800ac30 <autonomous_mode+0x8f0>)
 800a950:	f009 fd28 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a954:	4603      	mov	r3, r0
 800a956:	2b01      	cmp	r3, #1
 800a958:	d112      	bne.n	800a980 <autonomous_mode+0x640>
 800a95a:	2180      	movs	r1, #128	; 0x80
 800a95c:	48b4      	ldr	r0, [pc, #720]	; (800ac30 <autonomous_mode+0x8f0>)
 800a95e:	f009 fd21 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a962:	4603      	mov	r3, r0
 800a964:	2b01      	cmp	r3, #1
 800a966:	d10b      	bne.n	800a980 <autonomous_mode+0x640>
								RNSVelocity(1.0, 1.00, 1.00, 1.00, &rns);
 800a968:	48b2      	ldr	r0, [pc, #712]	; (800ac34 <autonomous_mode+0x8f4>)
 800a96a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800a96e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800a972:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800a976:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a97a:	f7fb ff37 	bl	80067ec <RNSVelocity>
 800a97e:	e040      	b.n	800aa02 <autonomous_mode+0x6c2>
							else if(lsl2)
 800a980:	2180      	movs	r1, #128	; 0x80
 800a982:	48ab      	ldr	r0, [pc, #684]	; (800ac30 <autonomous_mode+0x8f0>)
 800a984:	f009 fd0e 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d10b      	bne.n	800a9a6 <autonomous_mode+0x666>
								RNSVelocity(1.50, 0.00, 0.75, 0.75, &rns);
 800a98e:	48a9      	ldr	r0, [pc, #676]	; (800ac34 <autonomous_mode+0x8f4>)
 800a990:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 800a994:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800a998:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ac38 <autonomous_mode+0x8f8>
 800a99c:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800a9a0:	f7fb ff24 	bl	80067ec <RNSVelocity>
 800a9a4:	e02d      	b.n	800aa02 <autonomous_mode+0x6c2>
							else if(lsl1)
 800a9a6:	2110      	movs	r1, #16
 800a9a8:	48a1      	ldr	r0, [pc, #644]	; (800ac30 <autonomous_mode+0x8f0>)
 800a9aa:	f009 fcfb 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d10b      	bne.n	800a9cc <autonomous_mode+0x68c>
								RNSVelocity(0.00, 1.50, 0.75, 0.75, &rns);
 800a9b4:	489f      	ldr	r0, [pc, #636]	; (800ac34 <autonomous_mode+0x8f4>)
 800a9b6:	eef6 1a08 	vmov.f32	s3, #104	; 0x3f400000  0.750
 800a9ba:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800a9be:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800a9c2:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 800ac38 <autonomous_mode+0x8f8>
 800a9c6:	f7fb ff11 	bl	80067ec <RNSVelocity>
 800a9ca:	e01a      	b.n	800aa02 <autonomous_mode+0x6c2>
							else if(lsr1)
 800a9cc:	2120      	movs	r1, #32
 800a9ce:	489b      	ldr	r0, [pc, #620]	; (800ac3c <autonomous_mode+0x8fc>)
 800a9d0:	f009 fce8 	bl	80143a4 <HAL_GPIO_ReadPin>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d10b      	bne.n	800a9f2 <autonomous_mode+0x6b2>
								RNSVelocity(-0.50, 1.00, 1.00, -0.50, &rns);
 800a9da:	4896      	ldr	r0, [pc, #600]	; (800ac34 <autonomous_mode+0x8f4>)
 800a9dc:	eefe 1a00 	vmov.f32	s3, #224	; 0xbf000000 -0.5
 800a9e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800a9e4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800a9e8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a9ec:	f7fb fefe 	bl	80067ec <RNSVelocity>
 800a9f0:	e007      	b.n	800aa02 <autonomous_mode+0x6c2>
							else{
								RNSStop(&rns);
 800a9f2:	4890      	ldr	r0, [pc, #576]	; (800ac34 <autonomous_mode+0x8f4>)
 800a9f4:	f7fb feaa 	bl	800674c <RNSStop>
								pp.stickf = 0;
 800a9f8:	4a91      	ldr	r2, [pc, #580]	; (800ac40 <autonomous_mode+0x900>)
 800a9fa:	7813      	ldrb	r3, [r2, #0]
 800a9fc:	f36f 13c7 	bfc	r3, #7, #1
 800aa00:	7013      	strb	r3, [r2, #0]
							}
							if(ps4.button == CROSS){
 800aa02:	4b90      	ldr	r3, [pc, #576]	; (800ac44 <autonomous_mode+0x904>)
 800aa04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa0a:	d108      	bne.n	800aa1e <autonomous_mode+0x6de>
								RNSStop(&rns);
 800aa0c:	4889      	ldr	r0, [pc, #548]	; (800ac34 <autonomous_mode+0x8f4>)
 800aa0e:	f7fb fe9d 	bl	800674c <RNSStop>
								sys.auto2manual = 1;
 800aa12:	4a8d      	ldr	r2, [pc, #564]	; (800ac48 <autonomous_mode+0x908>)
 800aa14:	7813      	ldrb	r3, [r2, #0]
 800aa16:	f043 0310 	orr.w	r3, r3, #16
 800aa1a:	7013      	strb	r3, [r2, #0]
								break;
 800aa1c:	e017      	b.n	800aa4e <autonomous_mode+0x70e>
						while (lsl1|| lsl2 || lsr1){
 800aa1e:	2110      	movs	r1, #16
 800aa20:	4883      	ldr	r0, [pc, #524]	; (800ac30 <autonomous_mode+0x8f0>)
 800aa22:	f009 fcbf 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	f43f af53 	beq.w	800a8d4 <autonomous_mode+0x594>
 800aa2e:	2180      	movs	r1, #128	; 0x80
 800aa30:	487f      	ldr	r0, [pc, #508]	; (800ac30 <autonomous_mode+0x8f0>)
 800aa32:	f009 fcb7 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	f43f af4b 	beq.w	800a8d4 <autonomous_mode+0x594>
 800aa3e:	2120      	movs	r1, #32
 800aa40:	487e      	ldr	r0, [pc, #504]	; (800ac3c <autonomous_mode+0x8fc>)
 800aa42:	f009 fcaf 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	f43f af43 	beq.w	800a8d4 <autonomous_mode+0x594>
							}
						}
						Await(150);
 800aa4e:	2096      	movs	r0, #150	; 0x96
 800aa50:	f002 fd30 	bl	800d4b4 <Await>
						RNSStop(&rns);
 800aa54:	4877      	ldr	r0, [pc, #476]	; (800ac34 <autonomous_mode+0x8f4>)
 800aa56:	f7fb fe79 	bl	800674c <RNSStop>
					for(int i = 0; i < 3; i++){
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	60bb      	str	r3, [r7, #8]
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	dddb      	ble.n	800aa1e <autonomous_mode+0x6de>
 800aa66:	e0be      	b.n	800abe6 <autonomous_mode+0x8a6>
					}
				}
				else if(pp.path == 2){
 800aa68:	4b75      	ldr	r3, [pc, #468]	; (800ac40 <autonomous_mode+0x900>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 0307 	and.w	r3, r3, #7
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d10d      	bne.n	800aa92 <autonomous_mode+0x752>
					RNSStop(&rns);
 800aa76:	486f      	ldr	r0, [pc, #444]	; (800ac34 <autonomous_mode+0x8f4>)
 800aa78:	f7fb fe68 	bl	800674c <RNSStop>
					sys.auto2manual = 1;
 800aa7c:	4a72      	ldr	r2, [pc, #456]	; (800ac48 <autonomous_mode+0x908>)
 800aa7e:	7813      	ldrb	r3, [r2, #0]
 800aa80:	f043 0310 	orr.w	r3, r3, #16
 800aa84:	7013      	strb	r3, [r2, #0]
					pp.cyon = 0;
 800aa86:	4a6e      	ldr	r2, [pc, #440]	; (800ac40 <autonomous_mode+0x900>)
 800aa88:	7813      	ldrb	r3, [r2, #0]
 800aa8a:	f36f 1386 	bfc	r3, #6, #1
 800aa8e:	7013      	strb	r3, [r2, #0]
 800aa90:	e0a9      	b.n	800abe6 <autonomous_mode+0x8a6>
				}
				else if(pp.path == 3){
 800aa92:	4b6b      	ldr	r3, [pc, #428]	; (800ac40 <autonomous_mode+0x900>)
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	f003 0307 	and.w	r3, r3, #7
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	f040 8089 	bne.w	800abb4 <autonomous_mode+0x874>
//						if(ps4.button == CROSS){
//							RNSStop(&rns);
//							sys.auto2manual = 1;
//							break;
//					}
					for(int i = 0; i < 3; i++){
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
 800aaa6:	e081      	b.n	800abac <autonomous_mode+0x86c>
						while (lsl2|| lsr1 || lsr2){	//move front left
							if((!(lsl2 || lsr1)) && lsr2)
 800aaa8:	2180      	movs	r1, #128	; 0x80
 800aaaa:	4861      	ldr	r0, [pc, #388]	; (800ac30 <autonomous_mode+0x8f0>)
 800aaac:	f009 fc7a 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d019      	beq.n	800aaea <autonomous_mode+0x7aa>
 800aab6:	2120      	movs	r1, #32
 800aab8:	4860      	ldr	r0, [pc, #384]	; (800ac3c <autonomous_mode+0x8fc>)
 800aaba:	f009 fc73 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aabe:	4603      	mov	r3, r0
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d012      	beq.n	800aaea <autonomous_mode+0x7aa>
 800aac4:	2140      	movs	r1, #64	; 0x40
 800aac6:	485d      	ldr	r0, [pc, #372]	; (800ac3c <autonomous_mode+0x8fc>)
 800aac8:	f009 fc6c 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10b      	bne.n	800aaea <autonomous_mode+0x7aa>
								RNSVelocity(0.00, 0.00, 0.75, -0.25, &rns);
 800aad2:	4858      	ldr	r0, [pc, #352]	; (800ac34 <autonomous_mode+0x8f4>)
 800aad4:	eefd 1a00 	vmov.f32	s3, #208	; 0xbe800000 -0.250
 800aad8:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800aadc:	eddf 0a56 	vldr	s1, [pc, #344]	; 800ac38 <autonomous_mode+0x8f8>
 800aae0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800ac38 <autonomous_mode+0x8f8>
 800aae4:	f7fb fe82 	bl	80067ec <RNSVelocity>
 800aae8:	e034      	b.n	800ab54 <autonomous_mode+0x814>
							else if(lsr1 || lsr2)
 800aaea:	2120      	movs	r1, #32
 800aaec:	4853      	ldr	r0, [pc, #332]	; (800ac3c <autonomous_mode+0x8fc>)
 800aaee:	f009 fc59 	bl	80143a4 <HAL_GPIO_ReadPin>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d006      	beq.n	800ab06 <autonomous_mode+0x7c6>
 800aaf8:	2140      	movs	r1, #64	; 0x40
 800aafa:	4850      	ldr	r0, [pc, #320]	; (800ac3c <autonomous_mode+0x8fc>)
 800aafc:	f009 fc52 	bl	80143a4 <HAL_GPIO_ReadPin>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d10b      	bne.n	800ab1e <autonomous_mode+0x7de>
								RNSVelocity(-1.00, 1.00, 1.00, -1.00, &rns);
 800ab06:	484b      	ldr	r0, [pc, #300]	; (800ac34 <autonomous_mode+0x8f4>)
 800ab08:	eeff 1a00 	vmov.f32	s3, #240	; 0xbf800000 -1.0
 800ab0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ab10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ab14:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ab18:	f7fb fe68 	bl	80067ec <RNSVelocity>
 800ab1c:	e01a      	b.n	800ab54 <autonomous_mode+0x814>
							else if(lsl2)
 800ab1e:	2180      	movs	r1, #128	; 0x80
 800ab20:	4843      	ldr	r0, [pc, #268]	; (800ac30 <autonomous_mode+0x8f0>)
 800ab22:	f009 fc3f 	bl	80143a4 <HAL_GPIO_ReadPin>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10b      	bne.n	800ab44 <autonomous_mode+0x804>
								RNSVelocity(0.50, 1.00, 1.00, 0.50, &rns);
 800ab2c:	4841      	ldr	r0, [pc, #260]	; (800ac34 <autonomous_mode+0x8f4>)
 800ab2e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800ab32:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ab36:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800ab3a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800ab3e:	f7fb fe55 	bl	80067ec <RNSVelocity>
 800ab42:	e007      	b.n	800ab54 <autonomous_mode+0x814>
							else{
								RNSStop(&rns);
 800ab44:	483b      	ldr	r0, [pc, #236]	; (800ac34 <autonomous_mode+0x8f4>)
 800ab46:	f7fb fe01 	bl	800674c <RNSStop>
								pp.stickf = 0;
 800ab4a:	4a3d      	ldr	r2, [pc, #244]	; (800ac40 <autonomous_mode+0x900>)
 800ab4c:	7813      	ldrb	r3, [r2, #0]
 800ab4e:	f36f 13c7 	bfc	r3, #7, #1
 800ab52:	7013      	strb	r3, [r2, #0]
							}
							if(ps4.button == CROSS){
 800ab54:	4b3b      	ldr	r3, [pc, #236]	; (800ac44 <autonomous_mode+0x904>)
 800ab56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab5c:	d108      	bne.n	800ab70 <autonomous_mode+0x830>
								RNSStop(&rns);
 800ab5e:	4835      	ldr	r0, [pc, #212]	; (800ac34 <autonomous_mode+0x8f4>)
 800ab60:	f7fb fdf4 	bl	800674c <RNSStop>
								sys.auto2manual = 1;
 800ab64:	4a38      	ldr	r2, [pc, #224]	; (800ac48 <autonomous_mode+0x908>)
 800ab66:	7813      	ldrb	r3, [r2, #0]
 800ab68:	f043 0310 	orr.w	r3, r3, #16
 800ab6c:	7013      	strb	r3, [r2, #0]
								break;
 800ab6e:	e014      	b.n	800ab9a <autonomous_mode+0x85a>
						while (lsl2|| lsr1 || lsr2){	//move front left
 800ab70:	2180      	movs	r1, #128	; 0x80
 800ab72:	482f      	ldr	r0, [pc, #188]	; (800ac30 <autonomous_mode+0x8f0>)
 800ab74:	f009 fc16 	bl	80143a4 <HAL_GPIO_ReadPin>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d094      	beq.n	800aaa8 <autonomous_mode+0x768>
 800ab7e:	2120      	movs	r1, #32
 800ab80:	482e      	ldr	r0, [pc, #184]	; (800ac3c <autonomous_mode+0x8fc>)
 800ab82:	f009 fc0f 	bl	80143a4 <HAL_GPIO_ReadPin>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d08d      	beq.n	800aaa8 <autonomous_mode+0x768>
 800ab8c:	2140      	movs	r1, #64	; 0x40
 800ab8e:	482b      	ldr	r0, [pc, #172]	; (800ac3c <autonomous_mode+0x8fc>)
 800ab90:	f009 fc08 	bl	80143a4 <HAL_GPIO_ReadPin>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d086      	beq.n	800aaa8 <autonomous_mode+0x768>
							}
						}
						Await(150);
 800ab9a:	2096      	movs	r0, #150	; 0x96
 800ab9c:	f002 fc8a 	bl	800d4b4 <Await>
						RNSStop(&rns);
 800aba0:	4824      	ldr	r0, [pc, #144]	; (800ac34 <autonomous_mode+0x8f4>)
 800aba2:	f7fb fdd3 	bl	800674c <RNSStop>
					for(int i = 0; i < 3; i++){
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3301      	adds	r3, #1
 800abaa:	607b      	str	r3, [r7, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	ddde      	ble.n	800ab70 <autonomous_mode+0x830>
 800abb2:	e018      	b.n	800abe6 <autonomous_mode+0x8a6>
					}
				}
				else if(pp.path == 4){
 800abb4:	4b22      	ldr	r3, [pc, #136]	; (800ac40 <autonomous_mode+0x900>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d111      	bne.n	800abe6 <autonomous_mode+0x8a6>
//							RNSStop(&rns);
//							sys.auto2manual = 1;
//							break;
//						}
//					}
					RNSStop(&rns);
 800abc2:	481c      	ldr	r0, [pc, #112]	; (800ac34 <autonomous_mode+0x8f4>)
 800abc4:	f7fb fdc2 	bl	800674c <RNSStop>
					sys.auto2manual = 1;
 800abc8:	4a1f      	ldr	r2, [pc, #124]	; (800ac48 <autonomous_mode+0x908>)
 800abca:	7813      	ldrb	r3, [r2, #0]
 800abcc:	f043 0310 	orr.w	r3, r3, #16
 800abd0:	7013      	strb	r3, [r2, #0]
					pp.cyon = 0;
 800abd2:	4a1b      	ldr	r2, [pc, #108]	; (800ac40 <autonomous_mode+0x900>)
 800abd4:	7813      	ldrb	r3, [r2, #0]
 800abd6:	f36f 1386 	bfc	r3, #6, #1
 800abda:	7013      	strb	r3, [r2, #0]
					pp.path = 7;
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <autonomous_mode+0x900>)
 800abde:	7813      	ldrb	r3, [r2, #0]
 800abe0:	f043 0307 	orr.w	r3, r3, #7
 800abe4:	7013      	strb	r3, [r2, #0]
				}

				if(ps4.button != CROSS){
 800abe6:	4b17      	ldr	r3, [pc, #92]	; (800ac44 <autonomous_mode+0x904>)
 800abe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abee:	d00f      	beq.n	800ac10 <autonomous_mode+0x8d0>
					pp.task ++;
 800abf0:	4b13      	ldr	r3, [pc, #76]	; (800ac40 <autonomous_mode+0x900>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	3301      	adds	r3, #1
 800abfc:	f003 0307 	and.w	r3, r3, #7
 800ac00:	b2d9      	uxtb	r1, r3
 800ac02:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <autonomous_mode+0x900>)
 800ac04:	7813      	ldrb	r3, [r2, #0]
 800ac06:	f361 03c5 	bfi	r3, r1, #3, #3
 800ac0a:	7013      	strb	r3, [r2, #0]
					pp_func();
 800ac0c:	f000 f954 	bl	800aeb8 <pp_func>
				}
				pp.R1okpos = 0;
 800ac10:	4a0b      	ldr	r2, [pc, #44]	; (800ac40 <autonomous_mode+0x900>)
 800ac12:	7853      	ldrb	r3, [r2, #1]
 800ac14:	f36f 0300 	bfc	r3, #0, #1
 800ac18:	7053      	strb	r3, [r2, #1]
				pp.stickf = 0;
 800ac1a:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <autonomous_mode+0x900>)
 800ac1c:	7813      	ldrb	r3, [r2, #0]
 800ac1e:	f36f 13c7 	bfc	r3, #7, #1
 800ac22:	7013      	strb	r3, [r2, #0]
				sys.ppend = 0;
 800ac24:	4a08      	ldr	r2, [pc, #32]	; (800ac48 <autonomous_mode+0x908>)
 800ac26:	7813      	ldrb	r3, [r2, #0]
 800ac28:	f36f 1386 	bfc	r3, #6, #1
 800ac2c:	7013      	strb	r3, [r2, #0]
 800ac2e:	e020      	b.n	800ac72 <autonomous_mode+0x932>
 800ac30:	40020c00 	.word	0x40020c00
 800ac34:	200091e8 	.word	0x200091e8
 800ac38:	00000000 	.word	0x00000000
 800ac3c:	40020400 	.word	0x40020400
 800ac40:	20007704 	.word	0x20007704
 800ac44:	2000a0c8 	.word	0x2000a0c8
 800ac48:	2000779c 	.word	0x2000779c
			}
			else if(sys.ppend == 0 && sys.ppstart == 0){
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <autonomous_mode+0x94c>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10b      	bne.n	800ac72 <autonomous_mode+0x932>
 800ac5a:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <autonomous_mode+0x94c>)
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f003 0320 	and.w	r3, r3, #32
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d104      	bne.n	800ac72 <autonomous_mode+0x932>
				led2 = 0;
 800ac68:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <autonomous_mode+0x950>)
 800ac6a:	7853      	ldrb	r3, [r2, #1]
 800ac6c:	f36f 1386 	bfc	r3, #6, #1
 800ac70:	7053      	strb	r3, [r2, #1]
	while(sys.manual == 0){
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <autonomous_mode+0x94c>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f43f ab9f 	beq.w	800a3c0 <autonomous_mode+0x80>
			}
		}
	}
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	2000779c 	.word	0x2000779c
 800ac90:	40020814 	.word	0x40020814

0800ac94 <pp_runpath>:

void pp_runpath(void){
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b082      	sub	sp, #8
 800ac98:	af02      	add	r7, sp, #8
	switch(pp.path){
 800ac9a:	4b71      	ldr	r3, [pc, #452]	; (800ae60 <pp_runpath+0x1cc>)
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	f200 80cc 	bhi.w	800ae42 <pp_runpath+0x1ae>
 800acaa:	a201      	add	r2, pc, #4	; (adr r2, 800acb0 <pp_runpath+0x1c>)
 800acac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb0:	0800acc5 	.word	0x0800acc5
 800acb4:	0800accd 	.word	0x0800accd
 800acb8:	0800ad23 	.word	0x0800ad23
 800acbc:	0800ad8d 	.word	0x0800ad8d
 800acc0:	0800ade3 	.word	0x0800ade3
	case 0:
		RNSStop(&rns);
 800acc4:	4867      	ldr	r0, [pc, #412]	; (800ae64 <pp_runpath+0x1d0>)
 800acc6:	f7fb fd41 	bl	800674c <RNSStop>
		break;
 800acca:	e0c0      	b.n	800ae4e <pp_runpath+0x1ba>
	case 1:
		svBRup
 800accc:	f44f 7116 	mov.w	r1, #600	; 0x258
 800acd0:	4865      	ldr	r0, [pc, #404]	; (800ae68 <pp_runpath+0x1d4>)
 800acd2:	f7fd fca9 	bl	8008628 <ServoSetPulse>
//		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(ToBallRackA, 3, point1, point2, point3);
 800acd6:	4b65      	ldr	r3, [pc, #404]	; (800ae6c <pp_runpath+0x1d8>)
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	4b65      	ldr	r3, [pc, #404]	; (800ae70 <pp_runpath+0x1dc>)
 800acdc:	4a65      	ldr	r2, [pc, #404]	; (800ae74 <pp_runpath+0x1e0>)
 800acde:	2103      	movs	r1, #3
 800ace0:	4865      	ldr	r0, [pc, #404]	; (800ae78 <pp_runpath+0x1e4>)
 800ace2:	f7fd fd67 	bl	80087b4 <registerPath>
		RNSPPstart(ToBallRackA, 3, &rns);
 800ace6:	4a5f      	ldr	r2, [pc, #380]	; (800ae64 <pp_runpath+0x1d0>)
 800ace8:	2103      	movs	r1, #3
 800acea:	4863      	ldr	r0, [pc, #396]	; (800ae78 <pp_runpath+0x1e4>)
 800acec:	f7fb fda0 	bl	8006830 <RNSPPstart>
		svBRAback
 800acf0:	f640 014d 	movw	r1, #2125	; 0x84d
 800acf4:	4861      	ldr	r0, [pc, #388]	; (800ae7c <pp_runpath+0x1e8>)
 800acf6:	f7fd fc97 	bl	8008628 <ServoSetPulse>
		Await(5555);
 800acfa:	f241 50b3 	movw	r0, #5555	; 0x15b3
 800acfe:	f002 fbd9 	bl	800d4b4 <Await>
		BgripON
 800ad02:	4a5f      	ldr	r2, [pc, #380]	; (800ae80 <pp_runpath+0x1ec>)
 800ad04:	7853      	ldrb	r3, [r2, #1]
 800ad06:	f043 0301 	orr.w	r3, r3, #1
 800ad0a:	7053      	strb	r3, [r2, #1]
		svBRA
 800ad0c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800ad10:	485a      	ldr	r0, [pc, #360]	; (800ae7c <pp_runpath+0x1e8>)
 800ad12:	f7fd fc89 	bl	8008628 <ServoSetPulse>
		pp.stickf = 1;
 800ad16:	4a52      	ldr	r2, [pc, #328]	; (800ae60 <pp_runpath+0x1cc>)
 800ad18:	7813      	ldrb	r3, [r2, #0]
 800ad1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad1e:	7013      	strb	r3, [r2, #0]
		break;
 800ad20:	e095      	b.n	800ae4e <pp_runpath+0x1ba>
	case 2:
		svBRAback
 800ad22:	f640 014d 	movw	r1, #2125	; 0x84d
 800ad26:	4855      	ldr	r0, [pc, #340]	; (800ae7c <pp_runpath+0x1e8>)
 800ad28:	f7fd fc7e 	bl	8008628 <ServoSetPulse>
//		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
		//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(BackToR1A, 3, point5, point6, point7);
 800ad2c:	4b55      	ldr	r3, [pc, #340]	; (800ae84 <pp_runpath+0x1f0>)
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4b55      	ldr	r3, [pc, #340]	; (800ae88 <pp_runpath+0x1f4>)
 800ad32:	4a56      	ldr	r2, [pc, #344]	; (800ae8c <pp_runpath+0x1f8>)
 800ad34:	2103      	movs	r1, #3
 800ad36:	4856      	ldr	r0, [pc, #344]	; (800ae90 <pp_runpath+0x1fc>)
 800ad38:	f7fd fd3c 	bl	80087b4 <registerPath>
		RNSPPstart(BackToR1A, 3, &rns);
 800ad3c:	4a49      	ldr	r2, [pc, #292]	; (800ae64 <pp_runpath+0x1d0>)
 800ad3e:	2103      	movs	r1, #3
 800ad40:	4853      	ldr	r0, [pc, #332]	; (800ae90 <pp_runpath+0x1fc>)
 800ad42:	f7fb fd75 	bl	8006830 <RNSPPstart>
		while(SERVO_BallV.currentPulse > svbvu_pulse + 150){
 800ad46:	e007      	b.n	800ad58 <pp_runpath+0xc4>
			ServoMovePulse(&SERVO_BallV, -6);
 800ad48:	f06f 0105 	mvn.w	r1, #5
 800ad4c:	4846      	ldr	r0, [pc, #280]	; (800ae68 <pp_runpath+0x1d4>)
 800ad4e:	f7fd fcc6 	bl	80086de <ServoMovePulse>
			Await(3);
 800ad52:	2003      	movs	r0, #3
 800ad54:	f002 fbae 	bl	800d4b4 <Await>
		while(SERVO_BallV.currentPulse > svbvu_pulse + 150){
 800ad58:	4b43      	ldr	r3, [pc, #268]	; (800ae68 <pp_runpath+0x1d4>)
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d8f1      	bhi.n	800ad48 <pp_runpath+0xb4>
		}
		svBRup
 800ad64:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ad68:	483f      	ldr	r0, [pc, #252]	; (800ae68 <pp_runpath+0x1d4>)
 800ad6a:	f7fd fc5d 	bl	8008628 <ServoSetPulse>
		svBRA
 800ad6e:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800ad72:	4842      	ldr	r0, [pc, #264]	; (800ae7c <pp_runpath+0x1e8>)
 800ad74:	f7fd fc58 	bl	8008628 <ServoSetPulse>
		Await(4000);
 800ad78:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800ad7c:	f002 fb9a 	bl	800d4b4 <Await>
		svBRrealup
 800ad80:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800ad84:	4838      	ldr	r0, [pc, #224]	; (800ae68 <pp_runpath+0x1d4>)
 800ad86:	f7fd fc4f 	bl	8008628 <ServoSetPulse>
		break;
 800ad8a:	e060      	b.n	800ae4e <pp_runpath+0x1ba>
	case 3:
		svBRup
 800ad8c:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ad90:	4835      	ldr	r0, [pc, #212]	; (800ae68 <pp_runpath+0x1d4>)
 800ad92:	f7fd fc49 	bl	8008628 <ServoSetPulse>
		svBRB
 800ad96:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800ad9a:	4838      	ldr	r0, [pc, #224]	; (800ae7c <pp_runpath+0x1e8>)
 800ad9c:	f7fd fc44 	bl	8008628 <ServoSetPulse>
//		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
		//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(ToBallRackB, 3, point9, point10, point11);
 800ada0:	4b3c      	ldr	r3, [pc, #240]	; (800ae94 <pp_runpath+0x200>)
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	4b3c      	ldr	r3, [pc, #240]	; (800ae98 <pp_runpath+0x204>)
 800ada6:	4a3d      	ldr	r2, [pc, #244]	; (800ae9c <pp_runpath+0x208>)
 800ada8:	2103      	movs	r1, #3
 800adaa:	483d      	ldr	r0, [pc, #244]	; (800aea0 <pp_runpath+0x20c>)
 800adac:	f7fd fd02 	bl	80087b4 <registerPath>
		RNSPPstart(ToBallRackB, 3, &rns);
 800adb0:	4a2c      	ldr	r2, [pc, #176]	; (800ae64 <pp_runpath+0x1d0>)
 800adb2:	2103      	movs	r1, #3
 800adb4:	483a      	ldr	r0, [pc, #232]	; (800aea0 <pp_runpath+0x20c>)
 800adb6:	f7fb fd3b 	bl	8006830 <RNSPPstart>
		BgripOFF
 800adba:	4a31      	ldr	r2, [pc, #196]	; (800ae80 <pp_runpath+0x1ec>)
 800adbc:	7853      	ldrb	r3, [r2, #1]
 800adbe:	f36f 0300 	bfc	r3, #0, #1
 800adc2:	7053      	strb	r3, [r2, #1]
//		svBRBback
		Await(5555);
 800adc4:	f241 50b3 	movw	r0, #5555	; 0x15b3
 800adc8:	f002 fb74 	bl	800d4b4 <Await>
		BgripON
 800adcc:	4a2c      	ldr	r2, [pc, #176]	; (800ae80 <pp_runpath+0x1ec>)
 800adce:	7853      	ldrb	r3, [r2, #1]
 800add0:	f043 0301 	orr.w	r3, r3, #1
 800add4:	7053      	strb	r3, [r2, #1]
		pp.stickf = 1;
 800add6:	4a22      	ldr	r2, [pc, #136]	; (800ae60 <pp_runpath+0x1cc>)
 800add8:	7813      	ldrb	r3, [r2, #0]
 800adda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adde:	7013      	strb	r3, [r2, #0]
		break;
 800ade0:	e035      	b.n	800ae4e <pp_runpath+0x1ba>
	case 4:
//		svBRBback
//		RNSSet(&rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
		//		RNSPPstart_PS(PP_Points[pp.path - 1], point_num[pp.path - 1], &rns);
		registerPath(BackToR1B, 3, point12, point13, point14);
 800ade2:	4b30      	ldr	r3, [pc, #192]	; (800aea4 <pp_runpath+0x210>)
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	4b30      	ldr	r3, [pc, #192]	; (800aea8 <pp_runpath+0x214>)
 800ade8:	4a30      	ldr	r2, [pc, #192]	; (800aeac <pp_runpath+0x218>)
 800adea:	2103      	movs	r1, #3
 800adec:	4830      	ldr	r0, [pc, #192]	; (800aeb0 <pp_runpath+0x21c>)
 800adee:	f7fd fce1 	bl	80087b4 <registerPath>
		RNSPPstart(BackToR1B, 3, &rns);
 800adf2:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <pp_runpath+0x1d0>)
 800adf4:	2103      	movs	r1, #3
 800adf6:	482e      	ldr	r0, [pc, #184]	; (800aeb0 <pp_runpath+0x21c>)
 800adf8:	f7fb fd1a 	bl	8006830 <RNSPPstart>
		while(SERVO_BallV.currentPulse > svbvu_pulse + 150){
 800adfc:	e007      	b.n	800ae0e <pp_runpath+0x17a>
			ServoMovePulse(&SERVO_BallV, -6);
 800adfe:	f06f 0105 	mvn.w	r1, #5
 800ae02:	4819      	ldr	r0, [pc, #100]	; (800ae68 <pp_runpath+0x1d4>)
 800ae04:	f7fd fc6b 	bl	80086de <ServoMovePulse>
			Await(3);
 800ae08:	2003      	movs	r0, #3
 800ae0a:	f002 fb53 	bl	800d4b4 <Await>
		while(SERVO_BallV.currentPulse > svbvu_pulse + 150){
 800ae0e:	4b16      	ldr	r3, [pc, #88]	; (800ae68 <pp_runpath+0x1d4>)
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d8f1      	bhi.n	800adfe <pp_runpath+0x16a>
		}
		svBRB
 800ae1a:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800ae1e:	4817      	ldr	r0, [pc, #92]	; (800ae7c <pp_runpath+0x1e8>)
 800ae20:	f7fd fc02 	bl	8008628 <ServoSetPulse>
		svBRup
 800ae24:	f44f 7116 	mov.w	r1, #600	; 0x258
 800ae28:	480f      	ldr	r0, [pc, #60]	; (800ae68 <pp_runpath+0x1d4>)
 800ae2a:	f7fd fbfd 	bl	8008628 <ServoSetPulse>
		Await(4000);
 800ae2e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800ae32:	f002 fb3f 	bl	800d4b4 <Await>
		svBRrealup
 800ae36:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800ae3a:	480b      	ldr	r0, [pc, #44]	; (800ae68 <pp_runpath+0x1d4>)
 800ae3c:	f7fd fbf4 	bl	8008628 <ServoSetPulse>
		break;
 800ae40:	e005      	b.n	800ae4e <pp_runpath+0x1ba>
	default:
		pp.path = 0;
 800ae42:	4a07      	ldr	r2, [pc, #28]	; (800ae60 <pp_runpath+0x1cc>)
 800ae44:	7813      	ldrb	r3, [r2, #0]
 800ae46:	f36f 0302 	bfc	r3, #0, #3
 800ae4a:	7013      	strb	r3, [r2, #0]
		break;
 800ae4c:	bf00      	nop
	}
	sys.ppend = 1;
 800ae4e:	4a19      	ldr	r2, [pc, #100]	; (800aeb4 <pp_runpath+0x220>)
 800ae50:	7813      	ldrb	r3, [r2, #0]
 800ae52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae56:	7013      	strb	r3, [r2, #0]
}
 800ae58:	bf00      	nop
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	20007704 	.word	0x20007704
 800ae64:	200091e8 	.word	0x200091e8
 800ae68:	20009738 	.word	0x20009738
 800ae6c:	20009d04 	.word	0x20009d04
 800ae70:	20007514 	.word	0x20007514
 800ae74:	20009b08 	.word	0x20009b08
 800ae78:	200077a0 	.word	0x200077a0
 800ae7c:	20009924 	.word	0x20009924
 800ae80:	40020814 	.word	0x40020814
 800ae84:	2000705c 	.word	0x2000705c
 800ae88:	20007a08 	.word	0x20007a08
 800ae8c:	2000a5b8 	.word	0x2000a5b8
 800ae90:	200096ac 	.word	0x200096ac
 800ae94:	200073ec 	.word	0x200073ec
 800ae98:	2000975c 	.word	0x2000975c
 800ae9c:	20007174 	.word	0x20007174
 800aea0:	20009bac 	.word	0x20009bac
 800aea4:	2000a464 	.word	0x2000a464
 800aea8:	20009998 	.word	0x20009998
 800aeac:	20007780 	.word	0x20007780
 800aeb0:	2000a718 	.word	0x2000a718
 800aeb4:	2000779c 	.word	0x2000779c

0800aeb8 <pp_func>:

void pp_func(void){
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
	switch(pp.task){
 800aebc:	4b32      	ldr	r3, [pc, #200]	; (800af88 <pp_func+0xd0>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d002      	beq.n	800aed0 <pp_func+0x18>
 800aeca:	2b03      	cmp	r3, #3
 800aecc:	d027      	beq.n	800af1e <pp_func+0x66>
 800aece:	e04d      	b.n	800af6c <pp_func+0xb4>
	case 1:
		svBRA
 800aed0:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800aed4:	482d      	ldr	r0, [pc, #180]	; (800af8c <pp_func+0xd4>)
 800aed6:	f7fd fba7 	bl	8008628 <ServoSetPulse>
		svBRup
 800aeda:	f44f 7116 	mov.w	r1, #600	; 0x258
 800aede:	482c      	ldr	r0, [pc, #176]	; (800af90 <pp_func+0xd8>)
 800aee0:	f7fd fba2 	bl	8008628 <ServoSetPulse>
		BgripON
 800aee4:	4a2b      	ldr	r2, [pc, #172]	; (800af94 <pp_func+0xdc>)
 800aee6:	7853      	ldrb	r3, [r2, #1]
 800aee8:	f043 0301 	orr.w	r3, r3, #1
 800aeec:	7053      	strb	r3, [r2, #1]
		svBRdown
 800aeee:	f640 218c 	movw	r1, #2700	; 0xa8c
 800aef2:	4827      	ldr	r0, [pc, #156]	; (800af90 <pp_func+0xd8>)
 800aef4:	f7fd fb98 	bl	8008628 <ServoSetPulse>
		Await(800);
 800aef8:	f44f 7048 	mov.w	r0, #800	; 0x320
 800aefc:	f002 fada 	bl	800d4b4 <Await>
		BgripOFF
 800af00:	4a24      	ldr	r2, [pc, #144]	; (800af94 <pp_func+0xdc>)
 800af02:	7853      	ldrb	r3, [r2, #1]
 800af04:	f36f 0300 	bfc	r3, #0, #1
 800af08:	7053      	strb	r3, [r2, #1]
		Await(600);
 800af0a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800af0e:	f002 fad1 	bl	800d4b4 <Await>
		svBallvp(2000)
 800af12:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800af16:	481e      	ldr	r0, [pc, #120]	; (800af90 <pp_func+0xd8>)
 800af18:	f7fd fb86 	bl	8008628 <ServoSetPulse>
		break;
 800af1c:	e02c      	b.n	800af78 <pp_func+0xc0>
	case 3:
		svBRB
 800af1e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800af22:	481a      	ldr	r0, [pc, #104]	; (800af8c <pp_func+0xd4>)
 800af24:	f7fd fb80 	bl	8008628 <ServoSetPulse>
		svBRup
 800af28:	f44f 7116 	mov.w	r1, #600	; 0x258
 800af2c:	4818      	ldr	r0, [pc, #96]	; (800af90 <pp_func+0xd8>)
 800af2e:	f7fd fb7b 	bl	8008628 <ServoSetPulse>
		BgripON
 800af32:	4a18      	ldr	r2, [pc, #96]	; (800af94 <pp_func+0xdc>)
 800af34:	7853      	ldrb	r3, [r2, #1]
 800af36:	f043 0301 	orr.w	r3, r3, #1
 800af3a:	7053      	strb	r3, [r2, #1]
		svBRdown
 800af3c:	f640 218c 	movw	r1, #2700	; 0xa8c
 800af40:	4813      	ldr	r0, [pc, #76]	; (800af90 <pp_func+0xd8>)
 800af42:	f7fd fb71 	bl	8008628 <ServoSetPulse>
		Await(800);
 800af46:	f44f 7048 	mov.w	r0, #800	; 0x320
 800af4a:	f002 fab3 	bl	800d4b4 <Await>
		BgripOFF;
 800af4e:	4a11      	ldr	r2, [pc, #68]	; (800af94 <pp_func+0xdc>)
 800af50:	7853      	ldrb	r3, [r2, #1]
 800af52:	f36f 0300 	bfc	r3, #0, #1
 800af56:	7053      	strb	r3, [r2, #1]
		Await(600);
 800af58:	f44f 7016 	mov.w	r0, #600	; 0x258
 800af5c:	f002 faaa 	bl	800d4b4 <Await>
		svBallvp(2000)
 800af60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800af64:	480a      	ldr	r0, [pc, #40]	; (800af90 <pp_func+0xd8>)
 800af66:	f7fd fb5f 	bl	8008628 <ServoSetPulse>
		break;
 800af6a:	e005      	b.n	800af78 <pp_func+0xc0>
	default:
		pp.task = 0;
 800af6c:	4a06      	ldr	r2, [pc, #24]	; (800af88 <pp_func+0xd0>)
 800af6e:	7813      	ldrb	r3, [r2, #0]
 800af70:	f36f 03c5 	bfc	r3, #3, #3
 800af74:	7013      	strb	r3, [r2, #0]
		break;
 800af76:	bf00      	nop
	}
	sys.ppstart = 1;
 800af78:	4a07      	ldr	r2, [pc, #28]	; (800af98 <pp_func+0xe0>)
 800af7a:	7813      	ldrb	r3, [r2, #0]
 800af7c:	f043 0320 	orr.w	r3, r3, #32
 800af80:	7013      	strb	r3, [r2, #0]
}
 800af82:	bf00      	nop
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20007704 	.word	0x20007704
 800af8c:	20009924 	.word	0x20009924
 800af90:	20009738 	.word	0x20009738
 800af94:	40020814 	.word	0x40020814
 800af98:	2000779c 	.word	0x2000779c

0800af9c <setPP_points>:

void setPP_points(void){
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0

	//to back rack A
	point1[0] = 6.0;
 800afa0:	4b7f      	ldr	r3, [pc, #508]	; (800b1a0 <setPP_points+0x204>)
 800afa2:	4a80      	ldr	r2, [pc, #512]	; (800b1a4 <setPP_points+0x208>)
 800afa4:	601a      	str	r2, [r3, #0]
	point1[1] = 4.55;
 800afa6:	4b7e      	ldr	r3, [pc, #504]	; (800b1a0 <setPP_points+0x204>)
 800afa8:	4a7f      	ldr	r2, [pc, #508]	; (800b1a8 <setPP_points+0x20c>)
 800afaa:	605a      	str	r2, [r3, #4]
	point1[2] = 0.750;
 800afac:	4b7c      	ldr	r3, [pc, #496]	; (800b1a0 <setPP_points+0x204>)
 800afae:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800afb2:	609a      	str	r2, [r3, #8]
	point1[3] = 90.00;
 800afb4:	4b7a      	ldr	r3, [pc, #488]	; (800b1a0 <setPP_points+0x204>)
 800afb6:	4a7d      	ldr	r2, [pc, #500]	; (800b1ac <setPP_points+0x210>)
 800afb8:	60da      	str	r2, [r3, #12]
	point1[4] = 0.0;
 800afba:	4b79      	ldr	r3, [pc, #484]	; (800b1a0 <setPP_points+0x204>)
 800afbc:	f04f 0200 	mov.w	r2, #0
 800afc0:	611a      	str	r2, [r3, #16]

	point2[0] = 5.0;
 800afc2:	4b7b      	ldr	r3, [pc, #492]	; (800b1b0 <setPP_points+0x214>)
 800afc4:	4a7b      	ldr	r2, [pc, #492]	; (800b1b4 <setPP_points+0x218>)
 800afc6:	601a      	str	r2, [r3, #0]
	point2[1] = 5.3;
 800afc8:	4b79      	ldr	r3, [pc, #484]	; (800b1b0 <setPP_points+0x214>)
 800afca:	4a7b      	ldr	r2, [pc, #492]	; (800b1b8 <setPP_points+0x21c>)
 800afcc:	605a      	str	r2, [r3, #4]
	point2[2] = 2.700;
 800afce:	4b78      	ldr	r3, [pc, #480]	; (800b1b0 <setPP_points+0x214>)
 800afd0:	4a7a      	ldr	r2, [pc, #488]	; (800b1bc <setPP_points+0x220>)
 800afd2:	609a      	str	r2, [r3, #8]
	point2[3] = 90.00;
 800afd4:	4b76      	ldr	r3, [pc, #472]	; (800b1b0 <setPP_points+0x214>)
 800afd6:	4a75      	ldr	r2, [pc, #468]	; (800b1ac <setPP_points+0x210>)
 800afd8:	60da      	str	r2, [r3, #12]
	point2[4] = 0.0;
 800afda:	4b75      	ldr	r3, [pc, #468]	; (800b1b0 <setPP_points+0x214>)
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	611a      	str	r2, [r3, #16]

	point3[0] = 3.9;
 800afe2:	4b77      	ldr	r3, [pc, #476]	; (800b1c0 <setPP_points+0x224>)
 800afe4:	4a77      	ldr	r2, [pc, #476]	; (800b1c4 <setPP_points+0x228>)
 800afe6:	601a      	str	r2, [r3, #0]
	point3[1] = 5.4;
 800afe8:	4b75      	ldr	r3, [pc, #468]	; (800b1c0 <setPP_points+0x224>)
 800afea:	4a77      	ldr	r2, [pc, #476]	; (800b1c8 <setPP_points+0x22c>)
 800afec:	605a      	str	r2, [r3, #4]
	point3[2] = 3.825;
 800afee:	4b74      	ldr	r3, [pc, #464]	; (800b1c0 <setPP_points+0x224>)
 800aff0:	4a76      	ldr	r2, [pc, #472]	; (800b1cc <setPP_points+0x230>)
 800aff2:	609a      	str	r2, [r3, #8]
	point3[3] = 90.00;
 800aff4:	4b72      	ldr	r3, [pc, #456]	; (800b1c0 <setPP_points+0x224>)
 800aff6:	4a6d      	ldr	r2, [pc, #436]	; (800b1ac <setPP_points+0x210>)
 800aff8:	60da      	str	r2, [r3, #12]
	point3[4] = 0.0;
 800affa:	4b71      	ldr	r3, [pc, #452]	; (800b1c0 <setPP_points+0x224>)
 800affc:	f04f 0200 	mov.w	r2, #0
 800b000:	611a      	str	r2, [r3, #16]
//	point3[3] = 90.00;
//	point3[4] = 0.0;

	//Back to R1

	point5[0] = 7.5;
 800b002:	4b73      	ldr	r3, [pc, #460]	; (800b1d0 <setPP_points+0x234>)
 800b004:	4a73      	ldr	r2, [pc, #460]	; (800b1d4 <setPP_points+0x238>)
 800b006:	601a      	str	r2, [r3, #0]
	point5[1] = 5.200;
 800b008:	4b71      	ldr	r3, [pc, #452]	; (800b1d0 <setPP_points+0x234>)
 800b00a:	4a73      	ldr	r2, [pc, #460]	; (800b1d8 <setPP_points+0x23c>)
 800b00c:	605a      	str	r2, [r3, #4]
	point5[2] = 1.15;
 800b00e:	4b70      	ldr	r3, [pc, #448]	; (800b1d0 <setPP_points+0x234>)
 800b010:	4a72      	ldr	r2, [pc, #456]	; (800b1dc <setPP_points+0x240>)
 800b012:	609a      	str	r2, [r3, #8]
	point5[3] = 90.00;
 800b014:	4b6e      	ldr	r3, [pc, #440]	; (800b1d0 <setPP_points+0x234>)
 800b016:	4a65      	ldr	r2, [pc, #404]	; (800b1ac <setPP_points+0x210>)
 800b018:	60da      	str	r2, [r3, #12]
	point5[4] = 6.0;
 800b01a:	4b6d      	ldr	r3, [pc, #436]	; (800b1d0 <setPP_points+0x234>)
 800b01c:	4a61      	ldr	r2, [pc, #388]	; (800b1a4 <setPP_points+0x208>)
 800b01e:	611a      	str	r2, [r3, #16]

	point6[0] = 7.5;
 800b020:	4b6f      	ldr	r3, [pc, #444]	; (800b1e0 <setPP_points+0x244>)
 800b022:	4a6c      	ldr	r2, [pc, #432]	; (800b1d4 <setPP_points+0x238>)
 800b024:	601a      	str	r2, [r3, #0]
	point6[1] = 2.250;
 800b026:	4b6e      	ldr	r3, [pc, #440]	; (800b1e0 <setPP_points+0x244>)
 800b028:	4a6e      	ldr	r2, [pc, #440]	; (800b1e4 <setPP_points+0x248>)
 800b02a:	605a      	str	r2, [r3, #4]
	point6[2] = 0.75;
 800b02c:	4b6c      	ldr	r3, [pc, #432]	; (800b1e0 <setPP_points+0x244>)
 800b02e:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800b032:	609a      	str	r2, [r3, #8]
	point6[3] = 90.00;
 800b034:	4b6a      	ldr	r3, [pc, #424]	; (800b1e0 <setPP_points+0x244>)
 800b036:	4a5d      	ldr	r2, [pc, #372]	; (800b1ac <setPP_points+0x210>)
 800b038:	60da      	str	r2, [r3, #12]
	point6[4] = 0.0;
 800b03a:	4b69      	ldr	r3, [pc, #420]	; (800b1e0 <setPP_points+0x244>)
 800b03c:	f04f 0200 	mov.w	r2, #0
 800b040:	611a      	str	r2, [r3, #16]

	point7[0] = 4.5;
 800b042:	4b69      	ldr	r3, [pc, #420]	; (800b1e8 <setPP_points+0x24c>)
 800b044:	4a69      	ldr	r2, [pc, #420]	; (800b1ec <setPP_points+0x250>)
 800b046:	601a      	str	r2, [r3, #0]
	point7[1] = 0.45;
 800b048:	4b67      	ldr	r3, [pc, #412]	; (800b1e8 <setPP_points+0x24c>)
 800b04a:	4a69      	ldr	r2, [pc, #420]	; (800b1f0 <setPP_points+0x254>)
 800b04c:	605a      	str	r2, [r3, #4]
	point7[2] = 0.500;
 800b04e:	4b66      	ldr	r3, [pc, #408]	; (800b1e8 <setPP_points+0x24c>)
 800b050:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800b054:	609a      	str	r2, [r3, #8]
	point7[3] = 90.00;
 800b056:	4b64      	ldr	r3, [pc, #400]	; (800b1e8 <setPP_points+0x24c>)
 800b058:	4a54      	ldr	r2, [pc, #336]	; (800b1ac <setPP_points+0x210>)
 800b05a:	60da      	str	r2, [r3, #12]
	point7[4] = 0.0;
 800b05c:	4b62      	ldr	r3, [pc, #392]	; (800b1e8 <setPP_points+0x24c>)
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	611a      	str	r2, [r3, #16]

	//to ball rack B
	point9[0] = 6.0;
 800b064:	4b63      	ldr	r3, [pc, #396]	; (800b1f4 <setPP_points+0x258>)
 800b066:	4a4f      	ldr	r2, [pc, #316]	; (800b1a4 <setPP_points+0x208>)
 800b068:	601a      	str	r2, [r3, #0]
	point9[1] = -4.5;
 800b06a:	4b62      	ldr	r3, [pc, #392]	; (800b1f4 <setPP_points+0x258>)
 800b06c:	4a62      	ldr	r2, [pc, #392]	; (800b1f8 <setPP_points+0x25c>)
 800b06e:	605a      	str	r2, [r3, #4]
	point9[2] = 0.7;
 800b070:	4b60      	ldr	r3, [pc, #384]	; (800b1f4 <setPP_points+0x258>)
 800b072:	4a62      	ldr	r2, [pc, #392]	; (800b1fc <setPP_points+0x260>)
 800b074:	609a      	str	r2, [r3, #8]
	point9[3] = 0;
 800b076:	4b5f      	ldr	r3, [pc, #380]	; (800b1f4 <setPP_points+0x258>)
 800b078:	f04f 0200 	mov.w	r2, #0
 800b07c:	60da      	str	r2, [r3, #12]
	point9[4] = 0;
 800b07e:	4b5d      	ldr	r3, [pc, #372]	; (800b1f4 <setPP_points+0x258>)
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	611a      	str	r2, [r3, #16]
	point9[5] = 0;
 800b086:	4b5b      	ldr	r3, [pc, #364]	; (800b1f4 <setPP_points+0x258>)
 800b088:	f04f 0200 	mov.w	r2, #0
 800b08c:	615a      	str	r2, [r3, #20]
	point9[6] = 0;
 800b08e:	4b59      	ldr	r3, [pc, #356]	; (800b1f4 <setPP_points+0x258>)
 800b090:	f04f 0200 	mov.w	r2, #0
 800b094:	619a      	str	r2, [r3, #24]

	point10[0] = 4.8;
 800b096:	4b5a      	ldr	r3, [pc, #360]	; (800b200 <setPP_points+0x264>)
 800b098:	4a5a      	ldr	r2, [pc, #360]	; (800b204 <setPP_points+0x268>)
 800b09a:	601a      	str	r2, [r3, #0]
	point10[1] = -5.15;
 800b09c:	4b58      	ldr	r3, [pc, #352]	; (800b200 <setPP_points+0x264>)
 800b09e:	4a5a      	ldr	r2, [pc, #360]	; (800b208 <setPP_points+0x26c>)
 800b0a0:	605a      	str	r2, [r3, #4]
	point10[2] = 3;
 800b0a2:	4b57      	ldr	r3, [pc, #348]	; (800b200 <setPP_points+0x264>)
 800b0a4:	4a59      	ldr	r2, [pc, #356]	; (800b20c <setPP_points+0x270>)
 800b0a6:	609a      	str	r2, [r3, #8]
	point10[3] = 0;
 800b0a8:	4b55      	ldr	r3, [pc, #340]	; (800b200 <setPP_points+0x264>)
 800b0aa:	f04f 0200 	mov.w	r2, #0
 800b0ae:	60da      	str	r2, [r3, #12]
	point10[4] = 0;
 800b0b0:	4b53      	ldr	r3, [pc, #332]	; (800b200 <setPP_points+0x264>)
 800b0b2:	f04f 0200 	mov.w	r2, #0
 800b0b6:	611a      	str	r2, [r3, #16]
	point10[5] = 0;
 800b0b8:	4b51      	ldr	r3, [pc, #324]	; (800b200 <setPP_points+0x264>)
 800b0ba:	f04f 0200 	mov.w	r2, #0
 800b0be:	615a      	str	r2, [r3, #20]
	point10[6] = 0;
 800b0c0:	4b4f      	ldr	r3, [pc, #316]	; (800b200 <setPP_points+0x264>)
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	619a      	str	r2, [r3, #24]

	point11[0] = 3.6;
 800b0c8:	4b51      	ldr	r3, [pc, #324]	; (800b210 <setPP_points+0x274>)
 800b0ca:	4a52      	ldr	r2, [pc, #328]	; (800b214 <setPP_points+0x278>)
 800b0cc:	601a      	str	r2, [r3, #0]
	point11[1] = -5.20;
 800b0ce:	4b50      	ldr	r3, [pc, #320]	; (800b210 <setPP_points+0x274>)
 800b0d0:	4a51      	ldr	r2, [pc, #324]	; (800b218 <setPP_points+0x27c>)
 800b0d2:	605a      	str	r2, [r3, #4]
	point11[2] = 4.00;
 800b0d4:	4b4e      	ldr	r3, [pc, #312]	; (800b210 <setPP_points+0x274>)
 800b0d6:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800b0da:	609a      	str	r2, [r3, #8]
	point11[3] = 0;
 800b0dc:	4b4c      	ldr	r3, [pc, #304]	; (800b210 <setPP_points+0x274>)
 800b0de:	f04f 0200 	mov.w	r2, #0
 800b0e2:	60da      	str	r2, [r3, #12]
	point11[4] = 0;
 800b0e4:	4b4a      	ldr	r3, [pc, #296]	; (800b210 <setPP_points+0x274>)
 800b0e6:	f04f 0200 	mov.w	r2, #0
 800b0ea:	611a      	str	r2, [r3, #16]
	point11[5] = 0;
 800b0ec:	4b48      	ldr	r3, [pc, #288]	; (800b210 <setPP_points+0x274>)
 800b0ee:	f04f 0200 	mov.w	r2, #0
 800b0f2:	615a      	str	r2, [r3, #20]
	point11[6] = 0;
 800b0f4:	4b46      	ldr	r3, [pc, #280]	; (800b210 <setPP_points+0x274>)
 800b0f6:	f04f 0200 	mov.w	r2, #0
 800b0fa:	619a      	str	r2, [r3, #24]
//	point11[4] = 0;
//	point11[5] = 0;
//	point11[6] = 0;

	//back to R1
	point12[0] = 7.5;
 800b0fc:	4b47      	ldr	r3, [pc, #284]	; (800b21c <setPP_points+0x280>)
 800b0fe:	4a35      	ldr	r2, [pc, #212]	; (800b1d4 <setPP_points+0x238>)
 800b100:	601a      	str	r2, [r3, #0]
	point12[1] = -5.0;
 800b102:	4b46      	ldr	r3, [pc, #280]	; (800b21c <setPP_points+0x280>)
 800b104:	4a46      	ldr	r2, [pc, #280]	; (800b220 <setPP_points+0x284>)
 800b106:	605a      	str	r2, [r3, #4]
	point12[2] = 1.45;
 800b108:	4b44      	ldr	r3, [pc, #272]	; (800b21c <setPP_points+0x280>)
 800b10a:	4a46      	ldr	r2, [pc, #280]	; (800b224 <setPP_points+0x288>)
 800b10c:	609a      	str	r2, [r3, #8]
	point12[3] = 0;
 800b10e:	4b43      	ldr	r3, [pc, #268]	; (800b21c <setPP_points+0x280>)
 800b110:	f04f 0200 	mov.w	r2, #0
 800b114:	60da      	str	r2, [r3, #12]
	point12[4] = 0;
 800b116:	4b41      	ldr	r3, [pc, #260]	; (800b21c <setPP_points+0x280>)
 800b118:	f04f 0200 	mov.w	r2, #0
 800b11c:	611a      	str	r2, [r3, #16]
	point12[5] = 0;
 800b11e:	4b3f      	ldr	r3, [pc, #252]	; (800b21c <setPP_points+0x280>)
 800b120:	f04f 0200 	mov.w	r2, #0
 800b124:	615a      	str	r2, [r3, #20]
	point12[6] = 0;
 800b126:	4b3d      	ldr	r3, [pc, #244]	; (800b21c <setPP_points+0x280>)
 800b128:	f04f 0200 	mov.w	r2, #0
 800b12c:	619a      	str	r2, [r3, #24]

	point13[0] = 7.5;
 800b12e:	4b3e      	ldr	r3, [pc, #248]	; (800b228 <setPP_points+0x28c>)
 800b130:	4a28      	ldr	r2, [pc, #160]	; (800b1d4 <setPP_points+0x238>)
 800b132:	601a      	str	r2, [r3, #0]
	point13[1] = -2.25;
 800b134:	4b3c      	ldr	r3, [pc, #240]	; (800b228 <setPP_points+0x28c>)
 800b136:	4a3d      	ldr	r2, [pc, #244]	; (800b22c <setPP_points+0x290>)
 800b138:	605a      	str	r2, [r3, #4]
	point13[2] = 0.6;
 800b13a:	4b3b      	ldr	r3, [pc, #236]	; (800b228 <setPP_points+0x28c>)
 800b13c:	4a3c      	ldr	r2, [pc, #240]	; (800b230 <setPP_points+0x294>)
 800b13e:	609a      	str	r2, [r3, #8]
	point13[3] = 0;
 800b140:	4b39      	ldr	r3, [pc, #228]	; (800b228 <setPP_points+0x28c>)
 800b142:	f04f 0200 	mov.w	r2, #0
 800b146:	60da      	str	r2, [r3, #12]
	point13[4] = 0;
 800b148:	4b37      	ldr	r3, [pc, #220]	; (800b228 <setPP_points+0x28c>)
 800b14a:	f04f 0200 	mov.w	r2, #0
 800b14e:	611a      	str	r2, [r3, #16]
	point13[5] = 0;
 800b150:	4b35      	ldr	r3, [pc, #212]	; (800b228 <setPP_points+0x28c>)
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	615a      	str	r2, [r3, #20]
	point13[6] = 0;
 800b158:	4b33      	ldr	r3, [pc, #204]	; (800b228 <setPP_points+0x28c>)
 800b15a:	f04f 0200 	mov.w	r2, #0
 800b15e:	619a      	str	r2, [r3, #24]

	point14[0] = 4.5;
 800b160:	4b34      	ldr	r3, [pc, #208]	; (800b234 <setPP_points+0x298>)
 800b162:	4a22      	ldr	r2, [pc, #136]	; (800b1ec <setPP_points+0x250>)
 800b164:	601a      	str	r2, [r3, #0]
	point14[1] = 0.00;
 800b166:	4b33      	ldr	r3, [pc, #204]	; (800b234 <setPP_points+0x298>)
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
	point14[2] = 0.60;
 800b16e:	4b31      	ldr	r3, [pc, #196]	; (800b234 <setPP_points+0x298>)
 800b170:	4a2f      	ldr	r2, [pc, #188]	; (800b230 <setPP_points+0x294>)
 800b172:	609a      	str	r2, [r3, #8]
	point14[3] = 0;
 800b174:	4b2f      	ldr	r3, [pc, #188]	; (800b234 <setPP_points+0x298>)
 800b176:	f04f 0200 	mov.w	r2, #0
 800b17a:	60da      	str	r2, [r3, #12]
	point14[4] = 0;
 800b17c:	4b2d      	ldr	r3, [pc, #180]	; (800b234 <setPP_points+0x298>)
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	611a      	str	r2, [r3, #16]
	point14[5] = 0;
 800b184:	4b2b      	ldr	r3, [pc, #172]	; (800b234 <setPP_points+0x298>)
 800b186:	f04f 0200 	mov.w	r2, #0
 800b18a:	615a      	str	r2, [r3, #20]
	point14[6] = 0;
 800b18c:	4b29      	ldr	r3, [pc, #164]	; (800b234 <setPP_points+0x298>)
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	619a      	str	r2, [r3, #24]
}
 800b194:	bf00      	nop
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20009b08 	.word	0x20009b08
 800b1a4:	40c00000 	.word	0x40c00000
 800b1a8:	4091999a 	.word	0x4091999a
 800b1ac:	42b40000 	.word	0x42b40000
 800b1b0:	20007514 	.word	0x20007514
 800b1b4:	40a00000 	.word	0x40a00000
 800b1b8:	40a9999a 	.word	0x40a9999a
 800b1bc:	402ccccd 	.word	0x402ccccd
 800b1c0:	20009d04 	.word	0x20009d04
 800b1c4:	4079999a 	.word	0x4079999a
 800b1c8:	40accccd 	.word	0x40accccd
 800b1cc:	4074cccd 	.word	0x4074cccd
 800b1d0:	2000a5b8 	.word	0x2000a5b8
 800b1d4:	40f00000 	.word	0x40f00000
 800b1d8:	40a66666 	.word	0x40a66666
 800b1dc:	3f933333 	.word	0x3f933333
 800b1e0:	20007a08 	.word	0x20007a08
 800b1e4:	40100000 	.word	0x40100000
 800b1e8:	2000705c 	.word	0x2000705c
 800b1ec:	40900000 	.word	0x40900000
 800b1f0:	3ee66666 	.word	0x3ee66666
 800b1f4:	20007174 	.word	0x20007174
 800b1f8:	c0900000 	.word	0xc0900000
 800b1fc:	3f333333 	.word	0x3f333333
 800b200:	2000975c 	.word	0x2000975c
 800b204:	4099999a 	.word	0x4099999a
 800b208:	c0a4cccd 	.word	0xc0a4cccd
 800b20c:	40400000 	.word	0x40400000
 800b210:	200073ec 	.word	0x200073ec
 800b214:	40666666 	.word	0x40666666
 800b218:	c0a66666 	.word	0xc0a66666
 800b21c:	20007780 	.word	0x20007780
 800b220:	c0a00000 	.word	0xc0a00000
 800b224:	3fb9999a 	.word	0x3fb9999a
 800b228:	20009998 	.word	0x20009998
 800b22c:	c0100000 	.word	0xc0100000
 800b230:	3f19999a 	.word	0x3f19999a
 800b234:	2000a464 	.word	0x2000a464

0800b238 <button>:
		v4 = -pido_laser_X;
	}
	RNSVelocity(v1,v2, v3, v4, &rns);
}

void button(void){
 800b238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b23c:	b08a      	sub	sp, #40	; 0x28
 800b23e:	af06      	add	r7, sp, #24
	int pulseH = 1000, pulseV = 500, pulseF1 = 1000, pulseF2 = 1000;;
 800b240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b24a:	60bb      	str	r3, [r7, #8]
 800b24c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b250:	607b      	str	r3, [r7, #4]
 800b252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b256:	603b      	str	r3, [r7, #0]
	if(ps4.button == CROSS){
 800b258:	4b9c      	ldr	r3, [pc, #624]	; (800b4cc <button+0x294>)
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b260:	f040 80f3 	bne.w	800b44a <button+0x212>
		counter = 0;
 800b264:	4b9a      	ldr	r3, [pc, #616]	; (800b4d0 <button+0x298>)
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]
		press ++;
 800b26a:	4b9a      	ldr	r3, [pc, #616]	; (800b4d4 <button+0x29c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3301      	adds	r3, #1
 800b270:	4a98      	ldr	r2, [pc, #608]	; (800b4d4 <button+0x29c>)
 800b272:	6013      	str	r3, [r2, #0]
		led3 = 0;
 800b274:	4a98      	ldr	r2, [pc, #608]	; (800b4d8 <button+0x2a0>)
 800b276:	7853      	ldrb	r3, [r2, #1]
 800b278:	f36f 13c7 	bfc	r3, #7, #1
 800b27c:	7053      	strb	r3, [r2, #1]
		while(ps4.button == CROSS){
 800b27e:	e01c      	b.n	800b2ba <button+0x82>
			//for long push button 1
			if(counter >= 2000){
 800b280:	4b93      	ldr	r3, [pc, #588]	; (800b4d0 <button+0x298>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b288:	db17      	blt.n	800b2ba <button+0x82>
				led2 = !led2;
 800b28a:	4b93      	ldr	r3, [pc, #588]	; (800b4d8 <button+0x2a0>)
 800b28c:	785b      	ldrb	r3, [r3, #1]
 800b28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b292:	b2db      	uxtb	r3, r3
 800b294:	4a90      	ldr	r2, [pc, #576]	; (800b4d8 <button+0x2a0>)
 800b296:	2b00      	cmp	r3, #0
 800b298:	bf0c      	ite	eq
 800b29a:	2301      	moveq	r3, #1
 800b29c:	2300      	movne	r3, #0
 800b29e:	b2d9      	uxtb	r1, r3
 800b2a0:	7853      	ldrb	r3, [r2, #1]
 800b2a2:	f361 1386 	bfi	r3, r1, #6, #1
 800b2a6:	7053      	strb	r3, [r2, #1]
				press= 0;
 800b2a8:	4b8a      	ldr	r3, [pc, #552]	; (800b4d4 <button+0x29c>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]
				while(ps4.button == CROSS);
 800b2ae:	bf00      	nop
 800b2b0:	4b86      	ldr	r3, [pc, #536]	; (800b4cc <button+0x294>)
 800b2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2b8:	d0fa      	beq.n	800b2b0 <button+0x78>
		while(ps4.button == CROSS){
 800b2ba:	4b84      	ldr	r3, [pc, #528]	; (800b4cc <button+0x294>)
 800b2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2c2:	d0dd      	beq.n	800b280 <button+0x48>
			}
		}
		led3 = 1;
 800b2c4:	4a84      	ldr	r2, [pc, #528]	; (800b4d8 <button+0x2a0>)
 800b2c6:	7853      	ldrb	r3, [r2, #1]
 800b2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2cc:	7053      	strb	r3, [r2, #1]
		switch (press){
 800b2ce:	4b81      	ldr	r3, [pc, #516]	; (800b4d4 <button+0x29c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	2b06      	cmp	r3, #6
 800b2d6:	f200 80b4 	bhi.w	800b442 <button+0x20a>
 800b2da:	a201      	add	r2, pc, #4	; (adr r2, 800b2e0 <button+0xa8>)
 800b2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e0:	0800b2fd 	.word	0x0800b2fd
 800b2e4:	0800b32b 	.word	0x0800b32b
 800b2e8:	0800b359 	.word	0x0800b359
 800b2ec:	0800b387 	.word	0x0800b387
 800b2f0:	0800b3b5 	.word	0x0800b3b5
 800b2f4:	0800b3c7 	.word	0x0800b3c7
 800b2f8:	0800b405 	.word	0x0800b405
		case 1:
			sprintf(data, "get servo pulse of verticle ball(joyR_y)\n");
 800b2fc:	4977      	ldr	r1, [pc, #476]	; (800b4dc <button+0x2a4>)
 800b2fe:	4878      	ldr	r0, [pc, #480]	; (800b4e0 <button+0x2a8>)
 800b300:	f012 fb16 	bl	801d930 <siprintf>
			UARTSend
 800b304:	4976      	ldr	r1, [pc, #472]	; (800b4e0 <button+0x2a8>)
 800b306:	4877      	ldr	r0, [pc, #476]	; (800b4e4 <button+0x2ac>)
 800b308:	f7f8 fae2 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b30c:	2032      	movs	r0, #50	; 0x32
 800b30e:	f002 f8d1 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE to record pulses\n\n");
 800b312:	4975      	ldr	r1, [pc, #468]	; (800b4e8 <button+0x2b0>)
 800b314:	4872      	ldr	r0, [pc, #456]	; (800b4e0 <button+0x2a8>)
 800b316:	f012 fb0b 	bl	801d930 <siprintf>
			UARTSend
 800b31a:	4971      	ldr	r1, [pc, #452]	; (800b4e0 <button+0x2a8>)
 800b31c:	4871      	ldr	r0, [pc, #452]	; (800b4e4 <button+0x2ac>)
 800b31e:	f7f8 fad7 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b322:	2032      	movs	r0, #50	; 0x32
 800b324:	f002 f8c6 	bl	800d4b4 <Await>
			break;
 800b328:	e090      	b.n	800b44c <button+0x214>
		case 2:
			sprintf(data, "get servo pulse of horizontal ball(joyR_y)\n");
 800b32a:	4970      	ldr	r1, [pc, #448]	; (800b4ec <button+0x2b4>)
 800b32c:	486c      	ldr	r0, [pc, #432]	; (800b4e0 <button+0x2a8>)
 800b32e:	f012 faff 	bl	801d930 <siprintf>
			UARTSend
 800b332:	496b      	ldr	r1, [pc, #428]	; (800b4e0 <button+0x2a8>)
 800b334:	486b      	ldr	r0, [pc, #428]	; (800b4e4 <button+0x2ac>)
 800b336:	f7f8 facb 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b33a:	2032      	movs	r0, #50	; 0x32
 800b33c:	f002 f8ba 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE to record pulses\n\n");
 800b340:	4969      	ldr	r1, [pc, #420]	; (800b4e8 <button+0x2b0>)
 800b342:	4867      	ldr	r0, [pc, #412]	; (800b4e0 <button+0x2a8>)
 800b344:	f012 faf4 	bl	801d930 <siprintf>
			UARTSend
 800b348:	4965      	ldr	r1, [pc, #404]	; (800b4e0 <button+0x2a8>)
 800b34a:	4866      	ldr	r0, [pc, #408]	; (800b4e4 <button+0x2ac>)
 800b34c:	f7f8 fac0 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b350:	2032      	movs	r0, #50	; 0x32
 800b352:	f002 f8af 	bl	800d4b4 <Await>
			break;
 800b356:	e079      	b.n	800b44c <button+0x214>
		case 3:
			sprintf(data, "get servo pulse of lagori flip(joyR_y)\n");
 800b358:	4965      	ldr	r1, [pc, #404]	; (800b4f0 <button+0x2b8>)
 800b35a:	4861      	ldr	r0, [pc, #388]	; (800b4e0 <button+0x2a8>)
 800b35c:	f012 fae8 	bl	801d930 <siprintf>
			UARTSend
 800b360:	495f      	ldr	r1, [pc, #380]	; (800b4e0 <button+0x2a8>)
 800b362:	4860      	ldr	r0, [pc, #384]	; (800b4e4 <button+0x2ac>)
 800b364:	f7f8 fab4 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b368:	2032      	movs	r0, #50	; 0x32
 800b36a:	f002 f8a3 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800b36e:	4961      	ldr	r1, [pc, #388]	; (800b4f4 <button+0x2bc>)
 800b370:	485b      	ldr	r0, [pc, #364]	; (800b4e0 <button+0x2a8>)
 800b372:	f012 fadd 	bl	801d930 <siprintf>
			UARTSend
 800b376:	495a      	ldr	r1, [pc, #360]	; (800b4e0 <button+0x2a8>)
 800b378:	485a      	ldr	r0, [pc, #360]	; (800b4e4 <button+0x2ac>)
 800b37a:	f7f8 faa9 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b37e:	2032      	movs	r0, #50	; 0x32
 800b380:	f002 f898 	bl	800d4b4 <Await>
			break;
 800b384:	e062      	b.n	800b44c <button+0x214>
		case 4:
			sprintf(data, "get servo pulse of lagori flip(joyR_y)\n");
 800b386:	495a      	ldr	r1, [pc, #360]	; (800b4f0 <button+0x2b8>)
 800b388:	4855      	ldr	r0, [pc, #340]	; (800b4e0 <button+0x2a8>)
 800b38a:	f012 fad1 	bl	801d930 <siprintf>
			UARTSend
 800b38e:	4954      	ldr	r1, [pc, #336]	; (800b4e0 <button+0x2a8>)
 800b390:	4854      	ldr	r0, [pc, #336]	; (800b4e4 <button+0x2ac>)
 800b392:	f7f8 fa9d 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b396:	2032      	movs	r0, #50	; 0x32
 800b398:	f002 f88c 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800b39c:	4955      	ldr	r1, [pc, #340]	; (800b4f4 <button+0x2bc>)
 800b39e:	4850      	ldr	r0, [pc, #320]	; (800b4e0 <button+0x2a8>)
 800b3a0:	f012 fac6 	bl	801d930 <siprintf>
			UARTSend
 800b3a4:	494e      	ldr	r1, [pc, #312]	; (800b4e0 <button+0x2a8>)
 800b3a6:	484f      	ldr	r0, [pc, #316]	; (800b4e4 <button+0x2ac>)
 800b3a8:	f7f8 fa92 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b3ac:	2032      	movs	r0, #50	; 0x32
 800b3ae:	f002 f881 	bl	800d4b4 <Await>
			break;
 800b3b2:	e04b      	b.n	800b44c <button+0x214>
		case 5:
			sprintf(data, "lazer(KF)\n\n");
 800b3b4:	4950      	ldr	r1, [pc, #320]	; (800b4f8 <button+0x2c0>)
 800b3b6:	484a      	ldr	r0, [pc, #296]	; (800b4e0 <button+0x2a8>)
 800b3b8:	f012 faba 	bl	801d930 <siprintf>
			UARTSend
 800b3bc:	4948      	ldr	r1, [pc, #288]	; (800b4e0 <button+0x2a8>)
 800b3be:	4849      	ldr	r0, [pc, #292]	; (800b4e4 <button+0x2ac>)
 800b3c0:	f7f8 fa86 	bl	80038d0 <UARTPrintString>
			break;
 800b3c4:	e042      	b.n	800b44c <button+0x214>
		case 6:
			sprintf(data, "get pulses at ball racks, press and hold L1 for verticle\n");
 800b3c6:	494d      	ldr	r1, [pc, #308]	; (800b4fc <button+0x2c4>)
 800b3c8:	4845      	ldr	r0, [pc, #276]	; (800b4e0 <button+0x2a8>)
 800b3ca:	f012 fab1 	bl	801d930 <siprintf>
			UARTSend
 800b3ce:	4944      	ldr	r1, [pc, #272]	; (800b4e0 <button+0x2a8>)
 800b3d0:	4844      	ldr	r0, [pc, #272]	; (800b4e4 <button+0x2ac>)
 800b3d2:	f7f8 fa7d 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b3d6:	2032      	movs	r0, #50	; 0x32
 800b3d8:	f002 f86c 	bl	800d4b4 <Await>
			sprintf(data, "ball pulse, R1 for valve, joyR_y to adj. pulses\n");
 800b3dc:	4948      	ldr	r1, [pc, #288]	; (800b500 <button+0x2c8>)
 800b3de:	4840      	ldr	r0, [pc, #256]	; (800b4e0 <button+0x2a8>)
 800b3e0:	f012 faa6 	bl	801d930 <siprintf>
			UARTSend
 800b3e4:	493e      	ldr	r1, [pc, #248]	; (800b4e0 <button+0x2a8>)
 800b3e6:	483f      	ldr	r0, [pc, #252]	; (800b4e4 <button+0x2ac>)
 800b3e8:	f7f8 fa72 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b3ec:	2032      	movs	r0, #50	; 0x32
 800b3ee:	f002 f861 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS(special) to record pulses\n\n");
 800b3f2:	4944      	ldr	r1, [pc, #272]	; (800b504 <button+0x2cc>)
 800b3f4:	483a      	ldr	r0, [pc, #232]	; (800b4e0 <button+0x2a8>)
 800b3f6:	f012 fa9b 	bl	801d930 <siprintf>
			UARTSend
 800b3fa:	4939      	ldr	r1, [pc, #228]	; (800b4e0 <button+0x2a8>)
 800b3fc:	4839      	ldr	r0, [pc, #228]	; (800b4e4 <button+0x2ac>)
 800b3fe:	f7f8 fa67 	bl	80038d0 <UARTPrintString>
			break;
 800b402:	e023      	b.n	800b44c <button+0x214>
		case 7:
			sprintf(data, "get pulses at lagori sv, press and hold L1 for F2 pulse\n");
 800b404:	4940      	ldr	r1, [pc, #256]	; (800b508 <button+0x2d0>)
 800b406:	4836      	ldr	r0, [pc, #216]	; (800b4e0 <button+0x2a8>)
 800b408:	f012 fa92 	bl	801d930 <siprintf>
			UARTSend
 800b40c:	4934      	ldr	r1, [pc, #208]	; (800b4e0 <button+0x2a8>)
 800b40e:	4835      	ldr	r0, [pc, #212]	; (800b4e4 <button+0x2ac>)
 800b410:	f7f8 fa5e 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b414:	2032      	movs	r0, #50	; 0x32
 800b416:	f002 f84d 	bl	800d4b4 <Await>
			sprintf(data, "and gripping, joyR_y to adj. pulses, joyL_x for pw\n");
 800b41a:	493c      	ldr	r1, [pc, #240]	; (800b50c <button+0x2d4>)
 800b41c:	4830      	ldr	r0, [pc, #192]	; (800b4e0 <button+0x2a8>)
 800b41e:	f012 fa87 	bl	801d930 <siprintf>
			UARTSend
 800b422:	492f      	ldr	r1, [pc, #188]	; (800b4e0 <button+0x2a8>)
 800b424:	482f      	ldr	r0, [pc, #188]	; (800b4e4 <button+0x2ac>)
 800b426:	f7f8 fa53 	bl	80038d0 <UARTPrintString>
			Await(50);
 800b42a:	2032      	movs	r0, #50	; 0x32
 800b42c:	f002 f842 	bl	800d4b4 <Await>
			sprintf(data, "press TRIANGLE/SQUARE/CROSS to record pulses\n\n");
 800b430:	4930      	ldr	r1, [pc, #192]	; (800b4f4 <button+0x2bc>)
 800b432:	482b      	ldr	r0, [pc, #172]	; (800b4e0 <button+0x2a8>)
 800b434:	f012 fa7c 	bl	801d930 <siprintf>
			UARTSend
 800b438:	4929      	ldr	r1, [pc, #164]	; (800b4e0 <button+0x2a8>)
 800b43a:	482a      	ldr	r0, [pc, #168]	; (800b4e4 <button+0x2ac>)
 800b43c:	f7f8 fa48 	bl	80038d0 <UARTPrintString>
			break;
 800b440:	e004      	b.n	800b44c <button+0x214>
		default:
			press = 0;
 800b442:	4b24      	ldr	r3, [pc, #144]	; (800b4d4 <button+0x29c>)
 800b444:	2200      	movs	r2, #0
 800b446:	601a      	str	r2, [r3, #0]
			break;
 800b448:	e000      	b.n	800b44c <button+0x214>
		}
	}
 800b44a:	bf00      	nop
	if(ps4.button == CIRCLE){
 800b44c:	4b1f      	ldr	r3, [pc, #124]	; (800b4cc <button+0x294>)
 800b44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b454:	f040 854d 	bne.w	800bef2 <button+0xcba>
		led3 = 0;
 800b458:	4a1f      	ldr	r2, [pc, #124]	; (800b4d8 <button+0x2a0>)
 800b45a:	7853      	ldrb	r3, [r2, #1]
 800b45c:	f36f 13c7 	bfc	r3, #7, #1
 800b460:	7053      	strb	r3, [r2, #1]
		while(ps4.button == CIRCLE){
 800b462:	bf00      	nop
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <button+0x294>)
 800b466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b46c:	d0fa      	beq.n	800b464 <button+0x22c>
		}
		led3 = 1;
 800b46e:	4a1a      	ldr	r2, [pc, #104]	; (800b4d8 <button+0x2a0>)
 800b470:	7853      	ldrb	r3, [r2, #1]
 800b472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b476:	7053      	strb	r3, [r2, #1]
		switch (press){
 800b478:	4b16      	ldr	r3, [pc, #88]	; (800b4d4 <button+0x29c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	2b06      	cmp	r3, #6
 800b480:	f200 8534 	bhi.w	800beec <button+0xcb4>
 800b484:	a201      	add	r2, pc, #4	; (adr r2, 800b48c <button+0x254>)
 800b486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48a:	bf00      	nop
 800b48c:	0800b4a9 	.word	0x0800b4a9
 800b490:	0800b5bb 	.word	0x0800b5bb
 800b494:	0800b67b 	.word	0x0800b67b
 800b498:	0800b817 	.word	0x0800b817
 800b49c:	0800b975 	.word	0x0800b975
 800b4a0:	0800ba01 	.word	0x0800ba01
 800b4a4:	0800bc7d 	.word	0x0800bc7d
		case 1:
			exled1 = 1;
 800b4a8:	4a19      	ldr	r2, [pc, #100]	; (800b510 <button+0x2d8>)
 800b4aa:	7853      	ldrb	r3, [r2, #1]
 800b4ac:	f043 0302 	orr.w	r3, r3, #2
 800b4b0:	7053      	strb	r3, [r2, #1]
			pulse = 1000;
 800b4b2:	4b18      	ldr	r3, [pc, #96]	; (800b514 <button+0x2dc>)
 800b4b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4b8:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_BallV, 300, 2800);
 800b4ba:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800b4be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b4c2:	4815      	ldr	r0, [pc, #84]	; (800b518 <button+0x2e0>)
 800b4c4:	f7fd f8f9 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800b4c8:	e059      	b.n	800b57e <button+0x346>
 800b4ca:	bf00      	nop
 800b4cc:	2000a0c8 	.word	0x2000a0c8
 800b4d0:	200097a0 	.word	0x200097a0
 800b4d4:	20009d34 	.word	0x20009d34
 800b4d8:	40020814 	.word	0x40020814
 800b4dc:	0802221c 	.word	0x0802221c
 800b4e0:	20006948 	.word	0x20006948
 800b4e4:	200067e4 	.word	0x200067e4
 800b4e8:	08022248 	.word	0x08022248
 800b4ec:	08022274 	.word	0x08022274
 800b4f0:	080222a0 	.word	0x080222a0
 800b4f4:	080222c8 	.word	0x080222c8
 800b4f8:	080222f8 	.word	0x080222f8
 800b4fc:	08022304 	.word	0x08022304
 800b500:	08022340 	.word	0x08022340
 800b504:	08022374 	.word	0x08022374
 800b508:	080223ac 	.word	0x080223ac
 800b50c:	080223e8 	.word	0x080223e8
 800b510:	40020c14 	.word	0x40020c14
 800b514:	20009840 	.word	0x20009840
 800b518:	20009738 	.word	0x20009738
				SERVO_getPulse();
 800b51c:	f001 f81e 	bl	800c55c <SERVO_getPulse>
				svBallvp(pulse)
 800b520:	4b89      	ldr	r3, [pc, #548]	; (800b748 <button+0x510>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4619      	mov	r1, r3
 800b526:	4889      	ldr	r0, [pc, #548]	; (800b74c <button+0x514>)
 800b528:	f7fd f87e 	bl	8008628 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800b52c:	4b88      	ldr	r3, [pc, #544]	; (800b750 <button+0x518>)
 800b52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b534:	d109      	bne.n	800b54a <button+0x312>
					fx.svbV1 = pulse;
 800b536:	4b84      	ldr	r3, [pc, #528]	; (800b748 <button+0x510>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a86      	ldr	r2, [pc, #536]	; (800b754 <button+0x51c>)
 800b53c:	6093      	str	r3, [r2, #8]
					while(ps4.button == TRIANGLE);
 800b53e:	bf00      	nop
 800b540:	4b83      	ldr	r3, [pc, #524]	; (800b750 <button+0x518>)
 800b542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b548:	d0fa      	beq.n	800b540 <button+0x308>
				}
				if(ps4.button == SQUARE){
 800b54a:	4b81      	ldr	r3, [pc, #516]	; (800b750 <button+0x518>)
 800b54c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b552:	d109      	bne.n	800b568 <button+0x330>
					fx.svbV2 = pulse;
 800b554:	4b7c      	ldr	r3, [pc, #496]	; (800b748 <button+0x510>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a7e      	ldr	r2, [pc, #504]	; (800b754 <button+0x51c>)
 800b55a:	60d3      	str	r3, [r2, #12]
					while(ps4.button == SQUARE);
 800b55c:	bf00      	nop
 800b55e:	4b7c      	ldr	r3, [pc, #496]	; (800b750 <button+0x518>)
 800b560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b566:	d0fa      	beq.n	800b55e <button+0x326>
				}
				sprintf(data, "pulse: %d\n", pulse);
 800b568:	4b77      	ldr	r3, [pc, #476]	; (800b748 <button+0x510>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	461a      	mov	r2, r3
 800b56e:	497a      	ldr	r1, [pc, #488]	; (800b758 <button+0x520>)
 800b570:	487a      	ldr	r0, [pc, #488]	; (800b75c <button+0x524>)
 800b572:	f012 f9dd 	bl	801d930 <siprintf>
				UARTSend
 800b576:	4979      	ldr	r1, [pc, #484]	; (800b75c <button+0x524>)
 800b578:	4879      	ldr	r0, [pc, #484]	; (800b760 <button+0x528>)
 800b57a:	f7f8 f9a9 	bl	80038d0 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800b57e:	4b74      	ldr	r3, [pc, #464]	; (800b750 <button+0x518>)
 800b580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b586:	d1c9      	bne.n	800b51c <button+0x2e4>
			}
			sprintf(data, "BV: %d %d\n", fx.svbV1, fx.svbV2);
 800b588:	4b72      	ldr	r3, [pc, #456]	; (800b754 <button+0x51c>)
 800b58a:	689a      	ldr	r2, [r3, #8]
 800b58c:	4b71      	ldr	r3, [pc, #452]	; (800b754 <button+0x51c>)
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	4974      	ldr	r1, [pc, #464]	; (800b764 <button+0x52c>)
 800b592:	4872      	ldr	r0, [pc, #456]	; (800b75c <button+0x524>)
 800b594:	f012 f9cc 	bl	801d930 <siprintf>
			UARTSend
 800b598:	4970      	ldr	r1, [pc, #448]	; (800b75c <button+0x524>)
 800b59a:	4871      	ldr	r0, [pc, #452]	; (800b760 <button+0x528>)
 800b59c:	f7f8 f998 	bl	80038d0 <UARTPrintString>
			exled1 = 0;
 800b5a0:	4a71      	ldr	r2, [pc, #452]	; (800b768 <button+0x530>)
 800b5a2:	7853      	ldrb	r3, [r2, #1]
 800b5a4:	f36f 0341 	bfc	r3, #1, #1
 800b5a8:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800b5aa:	bf00      	nop
 800b5ac:	4b68      	ldr	r3, [pc, #416]	; (800b750 <button+0x518>)
 800b5ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5b4:	d0fa      	beq.n	800b5ac <button+0x374>
			break;
 800b5b6:	f000 bc99 	b.w	800beec <button+0xcb4>
		case 2:
			exled2 = 1;
 800b5ba:	4a6b      	ldr	r2, [pc, #428]	; (800b768 <button+0x530>)
 800b5bc:	7853      	ldrb	r3, [r2, #1]
 800b5be:	f043 0301 	orr.w	r3, r3, #1
 800b5c2:	7053      	strb	r3, [r2, #1]
			pulse = 1000;
 800b5c4:	4b60      	ldr	r3, [pc, #384]	; (800b748 <button+0x510>)
 800b5c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5ca:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_BallH, 300, 2800);
 800b5cc:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800b5d0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b5d4:	4865      	ldr	r0, [pc, #404]	; (800b76c <button+0x534>)
 800b5d6:	f7fd f870 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800b5da:	e030      	b.n	800b63e <button+0x406>
				SERVO_getPulse();
 800b5dc:	f000 ffbe 	bl	800c55c <SERVO_getPulse>
				svBallhp(pulse)
 800b5e0:	4b59      	ldr	r3, [pc, #356]	; (800b748 <button+0x510>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4861      	ldr	r0, [pc, #388]	; (800b76c <button+0x534>)
 800b5e8:	f7fd f81e 	bl	8008628 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800b5ec:	4b58      	ldr	r3, [pc, #352]	; (800b750 <button+0x518>)
 800b5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f4:	d109      	bne.n	800b60a <button+0x3d2>
					fx.svbH1 = pulse;
 800b5f6:	4b54      	ldr	r3, [pc, #336]	; (800b748 <button+0x510>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a56      	ldr	r2, [pc, #344]	; (800b754 <button+0x51c>)
 800b5fc:	6013      	str	r3, [r2, #0]
					while(ps4.button == TRIANGLE);
 800b5fe:	bf00      	nop
 800b600:	4b53      	ldr	r3, [pc, #332]	; (800b750 <button+0x518>)
 800b602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b608:	d0fa      	beq.n	800b600 <button+0x3c8>
				}
				if(ps4.button == SQUARE){
 800b60a:	4b51      	ldr	r3, [pc, #324]	; (800b750 <button+0x518>)
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b612:	d109      	bne.n	800b628 <button+0x3f0>
					fx.svbH2 = pulse;
 800b614:	4b4c      	ldr	r3, [pc, #304]	; (800b748 <button+0x510>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a4e      	ldr	r2, [pc, #312]	; (800b754 <button+0x51c>)
 800b61a:	6053      	str	r3, [r2, #4]
					while(ps4.button == SQUARE);
 800b61c:	bf00      	nop
 800b61e:	4b4c      	ldr	r3, [pc, #304]	; (800b750 <button+0x518>)
 800b620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b626:	d0fa      	beq.n	800b61e <button+0x3e6>
				}
				sprintf(data, "pulse: %d\n", pulse);
 800b628:	4b47      	ldr	r3, [pc, #284]	; (800b748 <button+0x510>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	461a      	mov	r2, r3
 800b62e:	494a      	ldr	r1, [pc, #296]	; (800b758 <button+0x520>)
 800b630:	484a      	ldr	r0, [pc, #296]	; (800b75c <button+0x524>)
 800b632:	f012 f97d 	bl	801d930 <siprintf>
				UARTSend
 800b636:	4949      	ldr	r1, [pc, #292]	; (800b75c <button+0x524>)
 800b638:	4849      	ldr	r0, [pc, #292]	; (800b760 <button+0x528>)
 800b63a:	f7f8 f949 	bl	80038d0 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800b63e:	4b44      	ldr	r3, [pc, #272]	; (800b750 <button+0x518>)
 800b640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b646:	d1c9      	bne.n	800b5dc <button+0x3a4>
			}
			sprintf(data, "BH: %d %d\n", fx.svbH1, fx.svbH2);
 800b648:	4b42      	ldr	r3, [pc, #264]	; (800b754 <button+0x51c>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	4b41      	ldr	r3, [pc, #260]	; (800b754 <button+0x51c>)
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	4947      	ldr	r1, [pc, #284]	; (800b770 <button+0x538>)
 800b652:	4842      	ldr	r0, [pc, #264]	; (800b75c <button+0x524>)
 800b654:	f012 f96c 	bl	801d930 <siprintf>
			UARTSend
 800b658:	4940      	ldr	r1, [pc, #256]	; (800b75c <button+0x524>)
 800b65a:	4841      	ldr	r0, [pc, #260]	; (800b760 <button+0x528>)
 800b65c:	f7f8 f938 	bl	80038d0 <UARTPrintString>
			exled2 = 0;
 800b660:	4a41      	ldr	r2, [pc, #260]	; (800b768 <button+0x530>)
 800b662:	7853      	ldrb	r3, [r2, #1]
 800b664:	f36f 0300 	bfc	r3, #0, #1
 800b668:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800b66a:	bf00      	nop
 800b66c:	4b38      	ldr	r3, [pc, #224]	; (800b750 <button+0x518>)
 800b66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b674:	d0fa      	beq.n	800b66c <button+0x434>
			break;
 800b676:	f000 bc39 	b.w	800beec <button+0xcb4>
		case 3:
			pulse = 1000;
 800b67a:	4b33      	ldr	r3, [pc, #204]	; (800b748 <button+0x510>)
 800b67c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b680:	601a      	str	r2, [r3, #0]
			exled3 = 1;
 800b682:	4a3c      	ldr	r2, [pc, #240]	; (800b774 <button+0x53c>)
 800b684:	7813      	ldrb	r3, [r2, #0]
 800b686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68a:	7013      	strb	r3, [r2, #0]
			ServoInitPulseLimit(&SERVO_LagoriF1, 300, 2800);
 800b68c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800b690:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b694:	4838      	ldr	r0, [pc, #224]	; (800b778 <button+0x540>)
 800b696:	f7fd f810 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800b69a:	e09a      	b.n	800b7d2 <button+0x59a>
				SERVO_getPulse();
 800b69c:	f000 ff5e 	bl	800c55c <SERVO_getPulse>
				svLGF1(pulse)
 800b6a0:	4b29      	ldr	r3, [pc, #164]	; (800b748 <button+0x510>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4619      	mov	r1, r3
 800b6a6:	4834      	ldr	r0, [pc, #208]	; (800b778 <button+0x540>)
 800b6a8:	f7fc ffbe 	bl	8008628 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800b6ac:	4b28      	ldr	r3, [pc, #160]	; (800b750 <button+0x518>)
 800b6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b4:	d109      	bne.n	800b6ca <button+0x492>
					fx.svlgf1 = pulse;
 800b6b6:	4b24      	ldr	r3, [pc, #144]	; (800b748 <button+0x510>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a26      	ldr	r2, [pc, #152]	; (800b754 <button+0x51c>)
 800b6bc:	6113      	str	r3, [r2, #16]
					while(ps4.button == TRIANGLE);
 800b6be:	bf00      	nop
 800b6c0:	4b23      	ldr	r3, [pc, #140]	; (800b750 <button+0x518>)
 800b6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c8:	d0fa      	beq.n	800b6c0 <button+0x488>
				}
				if(ps4.button == SQUARE){
 800b6ca:	4b21      	ldr	r3, [pc, #132]	; (800b750 <button+0x518>)
 800b6cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6d2:	d109      	bne.n	800b6e8 <button+0x4b0>
					fx.svlgf2 = pulse;
 800b6d4:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <button+0x510>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a1e      	ldr	r2, [pc, #120]	; (800b754 <button+0x51c>)
 800b6da:	6153      	str	r3, [r2, #20]
					while(ps4.button == SQUARE);
 800b6dc:	bf00      	nop
 800b6de:	4b1c      	ldr	r3, [pc, #112]	; (800b750 <button+0x518>)
 800b6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6e6:	d0fa      	beq.n	800b6de <button+0x4a6>
				}
				if(ps4.button == CROSS){
 800b6e8:	4b19      	ldr	r3, [pc, #100]	; (800b750 <button+0x518>)
 800b6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6f0:	d109      	bne.n	800b706 <button+0x4ce>
					fx.svlgf3 = pulse;
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <button+0x510>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a17      	ldr	r2, [pc, #92]	; (800b754 <button+0x51c>)
 800b6f8:	6193      	str	r3, [r2, #24]
					while(ps4.button == CROSS);
 800b6fa:	bf00      	nop
 800b6fc:	4b14      	ldr	r3, [pc, #80]	; (800b750 <button+0x518>)
 800b6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b704:	d0fa      	beq.n	800b6fc <button+0x4c4>
				}
				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_y) >= 0.5)
 800b706:	4b12      	ldr	r3, [pc, #72]	; (800b750 <button+0x518>)
 800b708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b70e:	d139      	bne.n	800b784 <button+0x54c>
 800b710:	4b0f      	ldr	r3, [pc, #60]	; (800b750 <button+0x518>)
 800b712:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800b716:	eef0 7ae7 	vabs.f32	s15, s15
 800b71a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b71e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b726:	db2d      	blt.n	800b784 <button+0x54c>
					LFPW(ps4.joyL_y * -600)
 800b728:	4b09      	ldr	r3, [pc, #36]	; (800b750 <button+0x518>)
 800b72a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800b72e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800b77c <button+0x544>
 800b732:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b736:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b73a:	ee17 1a90 	vmov	r1, s15
 800b73e:	4810      	ldr	r0, [pc, #64]	; (800b780 <button+0x548>)
 800b740:	f7f5 fe1e 	bl	8001380 <WriteBDC>
 800b744:	e03a      	b.n	800b7bc <button+0x584>
 800b746:	bf00      	nop
 800b748:	20009840 	.word	0x20009840
 800b74c:	20009738 	.word	0x20009738
 800b750:	2000a0c8 	.word	0x2000a0c8
 800b754:	2000a144 	.word	0x2000a144
 800b758:	0802241c 	.word	0x0802241c
 800b75c:	20006948 	.word	0x20006948
 800b760:	200067e4 	.word	0x200067e4
 800b764:	08022428 	.word	0x08022428
 800b768:	40020c14 	.word	0x40020c14
 800b76c:	20009924 	.word	0x20009924
 800b770:	08022434 	.word	0x08022434
 800b774:	40020014 	.word	0x40020014
 800b778:	20009974 	.word	0x20009974
 800b77c:	44160000 	.word	0x44160000
 800b780:	20007b24 	.word	0x20007b24
				else if(fabs(ps4.joyR_x) >= 0.5)
 800b784:	4bae      	ldr	r3, [pc, #696]	; (800ba40 <button+0x808>)
 800b786:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800b78a:	eef0 7ae7 	vabs.f32	s15, s15
 800b78e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b792:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79a:	db0f      	blt.n	800b7bc <button+0x584>
					LGPW(ps4.joyL_x * 600)
 800b79c:	4ba8      	ldr	r3, [pc, #672]	; (800ba40 <button+0x808>)
 800b79e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800b7a2:	eef1 7a67 	vneg.f32	s15, s15
 800b7a6:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 800ba44 <button+0x80c>
 800b7aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b7b2:	ee17 1a90 	vmov	r1, s15
 800b7b6:	48a4      	ldr	r0, [pc, #656]	; (800ba48 <button+0x810>)
 800b7b8:	f7f5 fde2 	bl	8001380 <WriteBDC>
				sprintf(data, "pulse: %d\n", pulse);
 800b7bc:	4ba3      	ldr	r3, [pc, #652]	; (800ba4c <button+0x814>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	49a3      	ldr	r1, [pc, #652]	; (800ba50 <button+0x818>)
 800b7c4:	48a3      	ldr	r0, [pc, #652]	; (800ba54 <button+0x81c>)
 800b7c6:	f012 f8b3 	bl	801d930 <siprintf>
				UARTSend
 800b7ca:	49a2      	ldr	r1, [pc, #648]	; (800ba54 <button+0x81c>)
 800b7cc:	48a2      	ldr	r0, [pc, #648]	; (800ba58 <button+0x820>)
 800b7ce:	f7f8 f87f 	bl	80038d0 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800b7d2:	4b9b      	ldr	r3, [pc, #620]	; (800ba40 <button+0x808>)
 800b7d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7da:	f47f af5f 	bne.w	800b69c <button+0x464>
			}
			sprintf(data, "LF1: %d %d %d\n", fx.svlgf1, fx.svlgf2, fx.svlgf3);
 800b7de:	4b9f      	ldr	r3, [pc, #636]	; (800ba5c <button+0x824>)
 800b7e0:	691a      	ldr	r2, [r3, #16]
 800b7e2:	4b9e      	ldr	r3, [pc, #632]	; (800ba5c <button+0x824>)
 800b7e4:	6959      	ldr	r1, [r3, #20]
 800b7e6:	4b9d      	ldr	r3, [pc, #628]	; (800ba5c <button+0x824>)
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	499c      	ldr	r1, [pc, #624]	; (800ba60 <button+0x828>)
 800b7f0:	4898      	ldr	r0, [pc, #608]	; (800ba54 <button+0x81c>)
 800b7f2:	f012 f89d 	bl	801d930 <siprintf>
			UARTSend
 800b7f6:	4997      	ldr	r1, [pc, #604]	; (800ba54 <button+0x81c>)
 800b7f8:	4897      	ldr	r0, [pc, #604]	; (800ba58 <button+0x820>)
 800b7fa:	f7f8 f869 	bl	80038d0 <UARTPrintString>
			exled3 = 0;
 800b7fe:	4a99      	ldr	r2, [pc, #612]	; (800ba64 <button+0x82c>)
 800b800:	7813      	ldrb	r3, [r2, #0]
 800b802:	f36f 13c7 	bfc	r3, #7, #1
 800b806:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800b808:	bf00      	nop
 800b80a:	4b8d      	ldr	r3, [pc, #564]	; (800ba40 <button+0x808>)
 800b80c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b812:	d0fa      	beq.n	800b80a <button+0x5d2>
			break;
 800b814:	e36a      	b.n	800beec <button+0xcb4>
		case 4:
			exled4 = 1;
 800b816:	4a93      	ldr	r2, [pc, #588]	; (800ba64 <button+0x82c>)
 800b818:	7813      	ldrb	r3, [r2, #0]
 800b81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81e:	7013      	strb	r3, [r2, #0]
			pulse = 1000;
 800b820:	4b8a      	ldr	r3, [pc, #552]	; (800ba4c <button+0x814>)
 800b822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b826:	601a      	str	r2, [r3, #0]
			ServoInitPulseLimit(&SERVO_LagoriF2, 300, 2800);
 800b828:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800b82c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b830:	488d      	ldr	r0, [pc, #564]	; (800ba68 <button+0x830>)
 800b832:	f7fc ff42 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800b836:	e07b      	b.n	800b930 <button+0x6f8>
				SERVO_getPulse();
 800b838:	f000 fe90 	bl	800c55c <SERVO_getPulse>
				svLGF2(pulse)
 800b83c:	4b83      	ldr	r3, [pc, #524]	; (800ba4c <button+0x814>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4619      	mov	r1, r3
 800b842:	4889      	ldr	r0, [pc, #548]	; (800ba68 <button+0x830>)
 800b844:	f7fc fef0 	bl	8008628 <ServoSetPulse>
				if(ps4.button == TRIANGLE){
 800b848:	4b7d      	ldr	r3, [pc, #500]	; (800ba40 <button+0x808>)
 800b84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b84c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b850:	d109      	bne.n	800b866 <button+0x62e>
					fx.svlgf21 = pulse;
 800b852:	4b7e      	ldr	r3, [pc, #504]	; (800ba4c <button+0x814>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a81      	ldr	r2, [pc, #516]	; (800ba5c <button+0x824>)
 800b858:	61d3      	str	r3, [r2, #28]
					while(ps4.button == TRIANGLE);
 800b85a:	bf00      	nop
 800b85c:	4b78      	ldr	r3, [pc, #480]	; (800ba40 <button+0x808>)
 800b85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b864:	d0fa      	beq.n	800b85c <button+0x624>
				}
				if(ps4.button == SQUARE){
 800b866:	4b76      	ldr	r3, [pc, #472]	; (800ba40 <button+0x808>)
 800b868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b86e:	d109      	bne.n	800b884 <button+0x64c>
					fx.svlgf22 = pulse;
 800b870:	4b76      	ldr	r3, [pc, #472]	; (800ba4c <button+0x814>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a79      	ldr	r2, [pc, #484]	; (800ba5c <button+0x824>)
 800b876:	6213      	str	r3, [r2, #32]
					while(ps4.button == SQUARE);
 800b878:	bf00      	nop
 800b87a:	4b71      	ldr	r3, [pc, #452]	; (800ba40 <button+0x808>)
 800b87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b87e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b882:	d0fa      	beq.n	800b87a <button+0x642>
				}
				if(ps4.button == CROSS){
 800b884:	4b6e      	ldr	r3, [pc, #440]	; (800ba40 <button+0x808>)
 800b886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b88c:	d109      	bne.n	800b8a2 <button+0x66a>
					fx.svlgf23 = pulse;
 800b88e:	4b6f      	ldr	r3, [pc, #444]	; (800ba4c <button+0x814>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a72      	ldr	r2, [pc, #456]	; (800ba5c <button+0x824>)
 800b894:	6253      	str	r3, [r2, #36]	; 0x24
					while(ps4.button == CROSS);
 800b896:	bf00      	nop
 800b898:	4b69      	ldr	r3, [pc, #420]	; (800ba40 <button+0x808>)
 800b89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8a0:	d0fa      	beq.n	800b898 <button+0x660>
				}
				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_y) >= 0.5)
 800b8a2:	4b67      	ldr	r3, [pc, #412]	; (800ba40 <button+0x808>)
 800b8a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8aa:	d11a      	bne.n	800b8e2 <button+0x6aa>
 800b8ac:	4b64      	ldr	r3, [pc, #400]	; (800ba40 <button+0x808>)
 800b8ae:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800b8b2:	eef0 7ae7 	vabs.f32	s15, s15
 800b8b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b8ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c2:	db0e      	blt.n	800b8e2 <button+0x6aa>
					LFPW(ps4.joyL_y * -600)
 800b8c4:	4b5e      	ldr	r3, [pc, #376]	; (800ba40 <button+0x808>)
 800b8c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800b8ca:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ba44 <button+0x80c>
 800b8ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8d6:	ee17 1a90 	vmov	r1, s15
 800b8da:	4864      	ldr	r0, [pc, #400]	; (800ba6c <button+0x834>)
 800b8dc:	f7f5 fd50 	bl	8001380 <WriteBDC>
 800b8e0:	e01b      	b.n	800b91a <button+0x6e2>
				else if(fabs(ps4.joyL_x) >= 0.5)
 800b8e2:	4b57      	ldr	r3, [pc, #348]	; (800ba40 <button+0x808>)
 800b8e4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800b8e8:	eef0 7ae7 	vabs.f32	s15, s15
 800b8ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b8f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f8:	db0f      	blt.n	800b91a <button+0x6e2>
					LGPW(ps4.joyL_x * 600)
 800b8fa:	4b51      	ldr	r3, [pc, #324]	; (800ba40 <button+0x808>)
 800b8fc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800b900:	eef1 7a67 	vneg.f32	s15, s15
 800b904:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800ba44 <button+0x80c>
 800b908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b90c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b910:	ee17 1a90 	vmov	r1, s15
 800b914:	484c      	ldr	r0, [pc, #304]	; (800ba48 <button+0x810>)
 800b916:	f7f5 fd33 	bl	8001380 <WriteBDC>
				sprintf(data, "pulse: %d\n", pulse);
 800b91a:	4b4c      	ldr	r3, [pc, #304]	; (800ba4c <button+0x814>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	494b      	ldr	r1, [pc, #300]	; (800ba50 <button+0x818>)
 800b922:	484c      	ldr	r0, [pc, #304]	; (800ba54 <button+0x81c>)
 800b924:	f012 f804 	bl	801d930 <siprintf>
				UARTSend
 800b928:	494a      	ldr	r1, [pc, #296]	; (800ba54 <button+0x81c>)
 800b92a:	484b      	ldr	r0, [pc, #300]	; (800ba58 <button+0x820>)
 800b92c:	f7f7 ffd0 	bl	80038d0 <UARTPrintString>
			while(ps4.button != CIRCLE){
 800b930:	4b43      	ldr	r3, [pc, #268]	; (800ba40 <button+0x808>)
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b938:	f47f af7e 	bne.w	800b838 <button+0x600>
			}
			sprintf(data, "LF2: %d %d %d\n", fx.svlgf21, fx.svlgf22, fx.svlgf23);
 800b93c:	4b47      	ldr	r3, [pc, #284]	; (800ba5c <button+0x824>)
 800b93e:	69da      	ldr	r2, [r3, #28]
 800b940:	4b46      	ldr	r3, [pc, #280]	; (800ba5c <button+0x824>)
 800b942:	6a19      	ldr	r1, [r3, #32]
 800b944:	4b45      	ldr	r3, [pc, #276]	; (800ba5c <button+0x824>)
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	9300      	str	r3, [sp, #0]
 800b94a:	460b      	mov	r3, r1
 800b94c:	4948      	ldr	r1, [pc, #288]	; (800ba70 <button+0x838>)
 800b94e:	4841      	ldr	r0, [pc, #260]	; (800ba54 <button+0x81c>)
 800b950:	f011 ffee 	bl	801d930 <siprintf>
			UARTSend
 800b954:	493f      	ldr	r1, [pc, #252]	; (800ba54 <button+0x81c>)
 800b956:	4840      	ldr	r0, [pc, #256]	; (800ba58 <button+0x820>)
 800b958:	f7f7 ffba 	bl	80038d0 <UARTPrintString>
			exled4 = 1;
 800b95c:	4a41      	ldr	r2, [pc, #260]	; (800ba64 <button+0x82c>)
 800b95e:	7813      	ldrb	r3, [r2, #0]
 800b960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b964:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800b966:	bf00      	nop
 800b968:	4b35      	ldr	r3, [pc, #212]	; (800ba40 <button+0x808>)
 800b96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b96c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b970:	d0fa      	beq.n	800b968 <button+0x730>
			break;
 800b972:	e2bb      	b.n	800beec <button+0xcb4>
		case 5:
			exled5 = 1;
 800b974:	4a3b      	ldr	r2, [pc, #236]	; (800ba64 <button+0x82c>)
 800b976:	7813      	ldrb	r3, [r2, #0]
 800b978:	f043 0320 	orr.w	r3, r3, #32
 800b97c:	7013      	strb	r3, [r2, #0]
			while(ps4.button != CIRCLE){
 800b97e:	e02e      	b.n	800b9de <button+0x7a6>
				sprintf(data, "kfx=%.3f, kfy=%.3f, x=%.3f, y=%.3f\n", x_kfo, y_kfo, laser_dist_x, laser_dist_y);
 800b980:	4b3c      	ldr	r3, [pc, #240]	; (800ba74 <button+0x83c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4618      	mov	r0, r3
 800b986:	f7f4 fddf 	bl	8000548 <__aeabi_f2d>
 800b98a:	4682      	mov	sl, r0
 800b98c:	468b      	mov	fp, r1
 800b98e:	4b3a      	ldr	r3, [pc, #232]	; (800ba78 <button+0x840>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4618      	mov	r0, r3
 800b994:	f7f4 fdd8 	bl	8000548 <__aeabi_f2d>
 800b998:	4604      	mov	r4, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4b37      	ldr	r3, [pc, #220]	; (800ba7c <button+0x844>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f4 fdd1 	bl	8000548 <__aeabi_f2d>
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	4689      	mov	r9, r1
 800b9aa:	4b35      	ldr	r3, [pc, #212]	; (800ba80 <button+0x848>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f4 fdca 	bl	8000548 <__aeabi_f2d>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b9c0:	e9cd 4500 	strd	r4, r5, [sp]
 800b9c4:	4652      	mov	r2, sl
 800b9c6:	465b      	mov	r3, fp
 800b9c8:	492e      	ldr	r1, [pc, #184]	; (800ba84 <button+0x84c>)
 800b9ca:	4822      	ldr	r0, [pc, #136]	; (800ba54 <button+0x81c>)
 800b9cc:	f011 ffb0 	bl	801d930 <siprintf>
				UARTSend
 800b9d0:	4920      	ldr	r1, [pc, #128]	; (800ba54 <button+0x81c>)
 800b9d2:	4821      	ldr	r0, [pc, #132]	; (800ba58 <button+0x820>)
 800b9d4:	f7f7 ff7c 	bl	80038d0 <UARTPrintString>
				Await(50);
 800b9d8:	2032      	movs	r0, #50	; 0x32
 800b9da:	f001 fd6b 	bl	800d4b4 <Await>
			while(ps4.button != CIRCLE){
 800b9de:	4b18      	ldr	r3, [pc, #96]	; (800ba40 <button+0x808>)
 800b9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9e6:	d1cb      	bne.n	800b980 <button+0x748>
			}
			exled5 = 0;
 800b9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ba64 <button+0x82c>)
 800b9ea:	7813      	ldrb	r3, [r2, #0]
 800b9ec:	f36f 1345 	bfc	r3, #5, #1
 800b9f0:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800b9f2:	bf00      	nop
 800b9f4:	4b12      	ldr	r3, [pc, #72]	; (800ba40 <button+0x808>)
 800b9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9fc:	d0fa      	beq.n	800b9f4 <button+0x7bc>
			break;
 800b9fe:	e275      	b.n	800beec <button+0xcb4>
		case 6:
			exled1 = 1;
 800ba00:	4a21      	ldr	r2, [pc, #132]	; (800ba88 <button+0x850>)
 800ba02:	7853      	ldrb	r3, [r2, #1]
 800ba04:	f043 0302 	orr.w	r3, r3, #2
 800ba08:	7053      	strb	r3, [r2, #1]
			exled2 = 1;
 800ba0a:	4a1f      	ldr	r2, [pc, #124]	; (800ba88 <button+0x850>)
 800ba0c:	7853      	ldrb	r3, [r2, #1]
 800ba0e:	f043 0301 	orr.w	r3, r3, #1
 800ba12:	7053      	strb	r3, [r2, #1]
			pulseV = 1000;
 800ba14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba18:	60bb      	str	r3, [r7, #8]
			pulseH = 1000;
 800ba1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ba1e:	60fb      	str	r3, [r7, #12]
			ServoInitPulseLimit(&SERVO_BallV, 300, 2800);
 800ba20:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800ba24:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ba28:	4818      	ldr	r0, [pc, #96]	; (800ba8c <button+0x854>)
 800ba2a:	f7fc fe46 	bl	80086ba <ServoInitPulseLimit>
			ServoInitPulseLimit(&SERVO_BallH, 300, 2800);
 800ba2e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800ba32:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ba36:	4816      	ldr	r0, [pc, #88]	; (800ba90 <button+0x858>)
 800ba38:	f7fc fe3f 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800ba3c:	e0e4      	b.n	800bc08 <button+0x9d0>
 800ba3e:	bf00      	nop
 800ba40:	2000a0c8 	.word	0x2000a0c8
 800ba44:	44160000 	.word	0x44160000
 800ba48:	2000a5d4 	.word	0x2000a5d4
 800ba4c:	20009840 	.word	0x20009840
 800ba50:	0802241c 	.word	0x0802241c
 800ba54:	20006948 	.word	0x20006948
 800ba58:	200067e4 	.word	0x200067e4
 800ba5c:	2000a144 	.word	0x2000a144
 800ba60:	08022440 	.word	0x08022440
 800ba64:	40020014 	.word	0x40020014
 800ba68:	2000a5f8 	.word	0x2000a5f8
 800ba6c:	20007b24 	.word	0x20007b24
 800ba70:	08022450 	.word	0x08022450
 800ba74:	20007700 	.word	0x20007700
 800ba78:	20007190 	.word	0x20007190
 800ba7c:	2000a368 	.word	0x2000a368
 800ba80:	20007774 	.word	0x20007774
 800ba84:	08022460 	.word	0x08022460
 800ba88:	40020c14 	.word	0x40020c14
 800ba8c:	20009738 	.word	0x20009738
 800ba90:	20009924 	.word	0x20009924
				if(ps4.button == L1 && ps4.joyR_y >= 0.75)			pulseV += 25;
 800ba94:	4ba3      	ldr	r3, [pc, #652]	; (800bd24 <button+0xaec>)
 800ba96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba9c:	d10d      	bne.n	800baba <button+0x882>
 800ba9e:	4ba1      	ldr	r3, [pc, #644]	; (800bd24 <button+0xaec>)
 800baa0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800baa4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800baa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab0:	db03      	blt.n	800baba <button+0x882>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	3319      	adds	r3, #25
 800bab6:	60bb      	str	r3, [r7, #8]
 800bab8:	e02d      	b.n	800bb16 <button+0x8de>
				else if(ps4.button == L1 && ps4.joyR_y <= -0.75)	pulseV -= 25;
 800baba:	4b9a      	ldr	r3, [pc, #616]	; (800bd24 <button+0xaec>)
 800babc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800babe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bac2:	d10d      	bne.n	800bae0 <button+0x8a8>
 800bac4:	4b97      	ldr	r3, [pc, #604]	; (800bd24 <button+0xaec>)
 800bac6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800baca:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800bace:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad6:	d803      	bhi.n	800bae0 <button+0x8a8>
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	3b19      	subs	r3, #25
 800badc:	60bb      	str	r3, [r7, #8]
 800bade:	e01a      	b.n	800bb16 <button+0x8de>
				else if(ps4.joyR_y >= 0.75)							pulseH += 25;
 800bae0:	4b90      	ldr	r3, [pc, #576]	; (800bd24 <button+0xaec>)
 800bae2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bae6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800baea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf2:	db03      	blt.n	800bafc <button+0x8c4>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3319      	adds	r3, #25
 800baf8:	60fb      	str	r3, [r7, #12]
 800bafa:	e00c      	b.n	800bb16 <button+0x8de>
				else if(ps4.joyR_y <= -0.75)						pulseH -= 25;
 800bafc:	4b89      	ldr	r3, [pc, #548]	; (800bd24 <button+0xaec>)
 800bafe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bb02:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800bb06:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0e:	d802      	bhi.n	800bb16 <button+0x8de>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	3b19      	subs	r3, #25
 800bb14:	60fb      	str	r3, [r7, #12]

				if(ps4.button == TRIANGLE){
 800bb16:	4b83      	ldr	r3, [pc, #524]	; (800bd24 <button+0xaec>)
 800bb18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb1e:	d10b      	bne.n	800bb38 <button+0x900>
					fx.svbV1 = pulseV;
 800bb20:	4a81      	ldr	r2, [pc, #516]	; (800bd28 <button+0xaf0>)
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	6093      	str	r3, [r2, #8]
					fx.svbH1 = pulseH;
 800bb26:	4a80      	ldr	r2, [pc, #512]	; (800bd28 <button+0xaf0>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6013      	str	r3, [r2, #0]
					while(ps4.button == TRIANGLE);
 800bb2c:	bf00      	nop
 800bb2e:	4b7d      	ldr	r3, [pc, #500]	; (800bd24 <button+0xaec>)
 800bb30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb36:	d0fa      	beq.n	800bb2e <button+0x8f6>
				}
				if(ps4.button == SQUARE){
 800bb38:	4b7a      	ldr	r3, [pc, #488]	; (800bd24 <button+0xaec>)
 800bb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb40:	d10b      	bne.n	800bb5a <button+0x922>
					fx.svbV2 = pulseV;
 800bb42:	4a79      	ldr	r2, [pc, #484]	; (800bd28 <button+0xaf0>)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	60d3      	str	r3, [r2, #12]
					fx.svbH2 = pulseH;
 800bb48:	4a77      	ldr	r2, [pc, #476]	; (800bd28 <button+0xaf0>)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6053      	str	r3, [r2, #4]
					while(ps4.button == SQUARE);
 800bb4e:	bf00      	nop
 800bb50:	4b74      	ldr	r3, [pc, #464]	; (800bd24 <button+0xaec>)
 800bb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb58:	d0fa      	beq.n	800bb50 <button+0x918>
				}
				if(ps4.button == CROSS){
 800bb5a:	4b72      	ldr	r3, [pc, #456]	; (800bd24 <button+0xaec>)
 800bb5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb62:	d108      	bne.n	800bb76 <button+0x93e>
					fx.svbV1 = pulseV;
 800bb64:	4a70      	ldr	r2, [pc, #448]	; (800bd28 <button+0xaf0>)
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	6093      	str	r3, [r2, #8]
					while(ps4.button == CROSS);
 800bb6a:	bf00      	nop
 800bb6c:	4b6d      	ldr	r3, [pc, #436]	; (800bd24 <button+0xaec>)
 800bb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb74:	d0fa      	beq.n	800bb6c <button+0x934>
				}
				if(ps4.button == R1){
 800bb76:	4b6b      	ldr	r3, [pc, #428]	; (800bd24 <button+0xaec>)
 800bb78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb7e:	d136      	bne.n	800bbee <button+0x9b6>
					while(ps4.button == R1);
 800bb80:	bf00      	nop
 800bb82:	4b68      	ldr	r3, [pc, #416]	; (800bd24 <button+0xaec>)
 800bb84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb8a:	d0fa      	beq.n	800bb82 <button+0x94a>
					led3 = !led3;
 800bb8c:	4b67      	ldr	r3, [pc, #412]	; (800bd2c <button+0xaf4>)
 800bb8e:	785b      	ldrb	r3, [r3, #1]
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	4a66      	ldr	r2, [pc, #408]	; (800bd2c <button+0xaf4>)
 800bb94:	43db      	mvns	r3, r3
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	09db      	lsrs	r3, r3, #7
 800bb9a:	b2d9      	uxtb	r1, r3
 800bb9c:	7853      	ldrb	r3, [r2, #1]
 800bb9e:	f361 13c7 	bfi	r3, r1, #7, #1
 800bba2:	7053      	strb	r3, [r2, #1]
					if(!fx.cyapp)
 800bba4:	4b60      	ldr	r3, [pc, #384]	; (800bd28 <button+0xaf0>)
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d105      	bne.n	800bbc0 <button+0x988>
						BgripON
 800bbb4:	4a5d      	ldr	r2, [pc, #372]	; (800bd2c <button+0xaf4>)
 800bbb6:	7853      	ldrb	r3, [r2, #1]
 800bbb8:	f043 0301 	orr.w	r3, r3, #1
 800bbbc:	7053      	strb	r3, [r2, #1]
 800bbbe:	e004      	b.n	800bbca <button+0x992>
					else
						BgripOFF
 800bbc0:	4a5a      	ldr	r2, [pc, #360]	; (800bd2c <button+0xaf4>)
 800bbc2:	7853      	ldrb	r3, [r2, #1]
 800bbc4:	f36f 0300 	bfc	r3, #0, #1
 800bbc8:	7053      	strb	r3, [r2, #1]
						fx.cyapp = !fx.cyapp;
 800bbca:	4b57      	ldr	r3, [pc, #348]	; (800bd28 <button+0xaf0>)
 800bbcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbd0:	f003 0302 	and.w	r3, r3, #2
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bf0c      	ite	eq
 800bbda:	2301      	moveq	r3, #1
 800bbdc:	2300      	movne	r3, #0
 800bbde:	b2d9      	uxtb	r1, r3
 800bbe0:	4a51      	ldr	r2, [pc, #324]	; (800bd28 <button+0xaf0>)
 800bbe2:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800bbe6:	f361 0341 	bfi	r3, r1, #1, #1
 800bbea:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
				}
				svBallhp(pulseH)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	484f      	ldr	r0, [pc, #316]	; (800bd30 <button+0xaf8>)
 800bbf4:	f7fc fd18 	bl	8008628 <ServoSetPulse>
				svBallvp(pulseV)
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	484d      	ldr	r0, [pc, #308]	; (800bd34 <button+0xafc>)
 800bbfe:	f7fc fd13 	bl	8008628 <ServoSetPulse>
				Await(150);
 800bc02:	2096      	movs	r0, #150	; 0x96
 800bc04:	f001 fc56 	bl	800d4b4 <Await>
			while(ps4.button != CIRCLE){
 800bc08:	4b46      	ldr	r3, [pc, #280]	; (800bd24 <button+0xaec>)
 800bc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc10:	f47f af40 	bne.w	800ba94 <button+0x85c>
			}
			sprintf(data, "BV: %d %d,  BH: %d, %d\n", fx.svbV1, fx.svbV2, fx.svbH1, fx.svbH2);
 800bc14:	4b44      	ldr	r3, [pc, #272]	; (800bd28 <button+0xaf0>)
 800bc16:	6899      	ldr	r1, [r3, #8]
 800bc18:	4b43      	ldr	r3, [pc, #268]	; (800bd28 <button+0xaf0>)
 800bc1a:	68d8      	ldr	r0, [r3, #12]
 800bc1c:	4b42      	ldr	r3, [pc, #264]	; (800bd28 <button+0xaf0>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a41      	ldr	r2, [pc, #260]	; (800bd28 <button+0xaf0>)
 800bc22:	6852      	ldr	r2, [r2, #4]
 800bc24:	9201      	str	r2, [sp, #4]
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	4603      	mov	r3, r0
 800bc2a:	460a      	mov	r2, r1
 800bc2c:	4942      	ldr	r1, [pc, #264]	; (800bd38 <button+0xb00>)
 800bc2e:	4843      	ldr	r0, [pc, #268]	; (800bd3c <button+0xb04>)
 800bc30:	f011 fe7e 	bl	801d930 <siprintf>
			UARTSend
 800bc34:	4941      	ldr	r1, [pc, #260]	; (800bd3c <button+0xb04>)
 800bc36:	4842      	ldr	r0, [pc, #264]	; (800bd40 <button+0xb08>)
 800bc38:	f7f7 fe4a 	bl	80038d0 <UARTPrintString>
			Await(20);
 800bc3c:	2014      	movs	r0, #20
 800bc3e:	f001 fc39 	bl	800d4b4 <Await>
			sprintf(data, "%d, %d\n", enqpwLG, enqpwLlf);
 800bc42:	4b40      	ldr	r3, [pc, #256]	; (800bd44 <button+0xb0c>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4b40      	ldr	r3, [pc, #256]	; (800bd48 <button+0xb10>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	4940      	ldr	r1, [pc, #256]	; (800bd4c <button+0xb14>)
 800bc4c:	483b      	ldr	r0, [pc, #236]	; (800bd3c <button+0xb04>)
 800bc4e:	f011 fe6f 	bl	801d930 <siprintf>
			UARTSend
 800bc52:	493a      	ldr	r1, [pc, #232]	; (800bd3c <button+0xb04>)
 800bc54:	483a      	ldr	r0, [pc, #232]	; (800bd40 <button+0xb08>)
 800bc56:	f7f7 fe3b 	bl	80038d0 <UARTPrintString>
			exled1 = 0;
 800bc5a:	4a3d      	ldr	r2, [pc, #244]	; (800bd50 <button+0xb18>)
 800bc5c:	7853      	ldrb	r3, [r2, #1]
 800bc5e:	f36f 0341 	bfc	r3, #1, #1
 800bc62:	7053      	strb	r3, [r2, #1]
			exled2 = 0;
 800bc64:	4a3a      	ldr	r2, [pc, #232]	; (800bd50 <button+0xb18>)
 800bc66:	7853      	ldrb	r3, [r2, #1]
 800bc68:	f36f 0300 	bfc	r3, #0, #1
 800bc6c:	7053      	strb	r3, [r2, #1]
			while(ps4.button == CIRCLE);
 800bc6e:	bf00      	nop
 800bc70:	4b2c      	ldr	r3, [pc, #176]	; (800bd24 <button+0xaec>)
 800bc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc78:	d0fa      	beq.n	800bc70 <button+0xa38>
			break;
 800bc7a:	e137      	b.n	800beec <button+0xcb4>
		case 7:
			exled3 = 1;
 800bc7c:	4a35      	ldr	r2, [pc, #212]	; (800bd54 <button+0xb1c>)
 800bc7e:	7813      	ldrb	r3, [r2, #0]
 800bc80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc84:	7013      	strb	r3, [r2, #0]
			exled4 = 1;
 800bc86:	4a33      	ldr	r2, [pc, #204]	; (800bd54 <button+0xb1c>)
 800bc88:	7813      	ldrb	r3, [r2, #0]
 800bc8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc8e:	7013      	strb	r3, [r2, #0]
			pulseF1 = 1000;
 800bc90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc94:	607b      	str	r3, [r7, #4]
			pulseF2 = 1000;
 800bc96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc9a:	603b      	str	r3, [r7, #0]
			ServoInitPulseLimit(&SERVO_LagoriF1, 300, 2800);
 800bc9c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800bca0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bca4:	482c      	ldr	r0, [pc, #176]	; (800bd58 <button+0xb20>)
 800bca6:	f7fc fd08 	bl	80086ba <ServoInitPulseLimit>
			ServoInitPulseLimit(&SERVO_LagoriF2, 300, 2800);
 800bcaa:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800bcae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bcb2:	482a      	ldr	r0, [pc, #168]	; (800bd5c <button+0xb24>)
 800bcb4:	f7fc fd01 	bl	80086ba <ServoInitPulseLimit>
			while(ps4.button != CIRCLE){
 800bcb8:	e0db      	b.n	800be72 <button+0xc3a>
				if(ps4.button == L1 && ps4.joyR_y >= 0.75)		pulseF2 += 25;
 800bcba:	4b1a      	ldr	r3, [pc, #104]	; (800bd24 <button+0xaec>)
 800bcbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcc2:	d10d      	bne.n	800bce0 <button+0xaa8>
 800bcc4:	4b17      	ldr	r3, [pc, #92]	; (800bd24 <button+0xaec>)
 800bcc6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bcca:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800bcce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd6:	db03      	blt.n	800bce0 <button+0xaa8>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	3319      	adds	r3, #25
 800bcdc:	603b      	str	r3, [r7, #0]
 800bcde:	e04c      	b.n	800bd7a <button+0xb42>
				else if(ps4.button == L1 && ps4.joyR_y <= -0.75)	pulseF2 -= 25;
 800bce0:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <button+0xaec>)
 800bce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bce8:	d10d      	bne.n	800bd06 <button+0xace>
 800bcea:	4b0e      	ldr	r3, [pc, #56]	; (800bd24 <button+0xaec>)
 800bcec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bcf0:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800bcf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	d803      	bhi.n	800bd06 <button+0xace>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	3b19      	subs	r3, #25
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	e039      	b.n	800bd7a <button+0xb42>
				else if(ps4.joyR_y >= 0.75)								pulseF1 += 25;
 800bd06:	4b07      	ldr	r3, [pc, #28]	; (800bd24 <button+0xaec>)
 800bd08:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bd0c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800bd10:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd18:	db22      	blt.n	800bd60 <button+0xb28>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	3319      	adds	r3, #25
 800bd1e:	607b      	str	r3, [r7, #4]
 800bd20:	e02b      	b.n	800bd7a <button+0xb42>
 800bd22:	bf00      	nop
 800bd24:	2000a0c8 	.word	0x2000a0c8
 800bd28:	2000a144 	.word	0x2000a144
 800bd2c:	40020814 	.word	0x40020814
 800bd30:	20009924 	.word	0x20009924
 800bd34:	20009738 	.word	0x20009738
 800bd38:	08022484 	.word	0x08022484
 800bd3c:	20006948 	.word	0x20006948
 800bd40:	200067e4 	.word	0x200067e4
 800bd44:	200099fc 	.word	0x200099fc
 800bd48:	20007b78 	.word	0x20007b78
 800bd4c:	0802249c 	.word	0x0802249c
 800bd50:	40020c14 	.word	0x40020c14
 800bd54:	40020014 	.word	0x40020014
 800bd58:	20009974 	.word	0x20009974
 800bd5c:	2000a5f8 	.word	0x2000a5f8
				else if(ps4.joyR_y <= -0.75)						pulseF1 -= 25;
 800bd60:	4b66      	ldr	r3, [pc, #408]	; (800befc <button+0xcc4>)
 800bd62:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800bd66:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800bd6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	d802      	bhi.n	800bd7a <button+0xb42>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3b19      	subs	r3, #25
 800bd78:	607b      	str	r3, [r7, #4]

				if(ps4.button == TRIANGLE){
 800bd7a:	4b60      	ldr	r3, [pc, #384]	; (800befc <button+0xcc4>)
 800bd7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd82:	d10b      	bne.n	800bd9c <button+0xb64>
					fx.svlgf1 = pulseF1;
 800bd84:	4a5e      	ldr	r2, [pc, #376]	; (800bf00 <button+0xcc8>)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6113      	str	r3, [r2, #16]
					fx.svlgf21 = pulseF2;
 800bd8a:	4a5d      	ldr	r2, [pc, #372]	; (800bf00 <button+0xcc8>)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	61d3      	str	r3, [r2, #28]
					while(ps4.button == TRIANGLE);
 800bd90:	bf00      	nop
 800bd92:	4b5a      	ldr	r3, [pc, #360]	; (800befc <button+0xcc4>)
 800bd94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd9a:	d0fa      	beq.n	800bd92 <button+0xb5a>
				}
				if(ps4.button == SQUARE){
 800bd9c:	4b57      	ldr	r3, [pc, #348]	; (800befc <button+0xcc4>)
 800bd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bda4:	d10b      	bne.n	800bdbe <button+0xb86>
					fx.svlgf2 = pulseF1;
 800bda6:	4a56      	ldr	r2, [pc, #344]	; (800bf00 <button+0xcc8>)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6153      	str	r3, [r2, #20]
					fx.svlgf22 = pulseF2;
 800bdac:	4a54      	ldr	r2, [pc, #336]	; (800bf00 <button+0xcc8>)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	6213      	str	r3, [r2, #32]
					while(ps4.button == SQUARE);
 800bdb2:	bf00      	nop
 800bdb4:	4b51      	ldr	r3, [pc, #324]	; (800befc <button+0xcc4>)
 800bdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdbc:	d0fa      	beq.n	800bdb4 <button+0xb7c>
				}
				if(ps4.button == CROSS){
 800bdbe:	4b4f      	ldr	r3, [pc, #316]	; (800befc <button+0xcc4>)
 800bdc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdc6:	d10b      	bne.n	800bde0 <button+0xba8>
					fx.svlgf3 = pulseF1;
 800bdc8:	4a4d      	ldr	r2, [pc, #308]	; (800bf00 <button+0xcc8>)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6193      	str	r3, [r2, #24]
					fx.svlgf23 = pulseF2;
 800bdce:	4a4c      	ldr	r2, [pc, #304]	; (800bf00 <button+0xcc8>)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	6253      	str	r3, [r2, #36]	; 0x24
					while(ps4.button == CROSS);
 800bdd4:	bf00      	nop
 800bdd6:	4b49      	ldr	r3, [pc, #292]	; (800befc <button+0xcc4>)
 800bdd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdde:	d0fa      	beq.n	800bdd6 <button+0xb9e>
				}

				//power window (direction)
				if(ps4.button == L1 && fabs(ps4.joyL_x) >= 0.5)
 800bde0:	4b46      	ldr	r3, [pc, #280]	; (800befc <button+0xcc4>)
 800bde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bde8:	d11a      	bne.n	800be20 <button+0xbe8>
 800bdea:	4b44      	ldr	r3, [pc, #272]	; (800befc <button+0xcc4>)
 800bdec:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800bdf0:	eef0 7ae7 	vabs.f32	s15, s15
 800bdf4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bdf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be00:	db0e      	blt.n	800be20 <button+0xbe8>
					LGPW(ps4.joyL_x * -6000)
 800be02:	4b3e      	ldr	r3, [pc, #248]	; (800befc <button+0xcc4>)
 800be04:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800be08:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800bf04 <button+0xccc>
 800be0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be14:	ee17 1a90 	vmov	r1, s15
 800be18:	483b      	ldr	r0, [pc, #236]	; (800bf08 <button+0xcd0>)
 800be1a:	f7f5 fab1 	bl	8001380 <WriteBDC>
 800be1e:	e01b      	b.n	800be58 <button+0xc20>
				else if(fabs(ps4.joyL_y) >= 0.5)
 800be20:	4b36      	ldr	r3, [pc, #216]	; (800befc <button+0xcc4>)
 800be22:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800be26:	eef0 7ae7 	vabs.f32	s15, s15
 800be2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800be2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be36:	db0f      	blt.n	800be58 <button+0xc20>
					LFPW(ps4.joyL_y * 6000)
 800be38:	4b30      	ldr	r3, [pc, #192]	; (800befc <button+0xcc4>)
 800be3a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800be3e:	eef1 7a67 	vneg.f32	s15, s15
 800be42:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800bf04 <button+0xccc>
 800be46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be4e:	ee17 1a90 	vmov	r1, s15
 800be52:	482e      	ldr	r0, [pc, #184]	; (800bf0c <button+0xcd4>)
 800be54:	f7f5 fa94 	bl	8001380 <WriteBDC>

				svLGF1(pulseF1)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4619      	mov	r1, r3
 800be5c:	482c      	ldr	r0, [pc, #176]	; (800bf10 <button+0xcd8>)
 800be5e:	f7fc fbe3 	bl	8008628 <ServoSetPulse>
				svLGF2(pulseF2)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	4619      	mov	r1, r3
 800be66:	482b      	ldr	r0, [pc, #172]	; (800bf14 <button+0xcdc>)
 800be68:	f7fc fbde 	bl	8008628 <ServoSetPulse>
				Await(150);
 800be6c:	2096      	movs	r0, #150	; 0x96
 800be6e:	f001 fb21 	bl	800d4b4 <Await>
			while(ps4.button != CIRCLE){
 800be72:	4b22      	ldr	r3, [pc, #136]	; (800befc <button+0xcc4>)
 800be74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be7a:	f47f af1e 	bne.w	800bcba <button+0xa82>
			}
			sprintf(data, "LF1: %d %d %d\n", fx.svlgf1, fx.svlgf2, fx.svlgf3);
 800be7e:	4b20      	ldr	r3, [pc, #128]	; (800bf00 <button+0xcc8>)
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <button+0xcc8>)
 800be84:	6959      	ldr	r1, [r3, #20]
 800be86:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <button+0xcc8>)
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	460b      	mov	r3, r1
 800be8e:	4922      	ldr	r1, [pc, #136]	; (800bf18 <button+0xce0>)
 800be90:	4822      	ldr	r0, [pc, #136]	; (800bf1c <button+0xce4>)
 800be92:	f011 fd4d 	bl	801d930 <siprintf>
			UARTSend
 800be96:	4921      	ldr	r1, [pc, #132]	; (800bf1c <button+0xce4>)
 800be98:	4821      	ldr	r0, [pc, #132]	; (800bf20 <button+0xce8>)
 800be9a:	f7f7 fd19 	bl	80038d0 <UARTPrintString>
			Await(50);
 800be9e:	2032      	movs	r0, #50	; 0x32
 800bea0:	f001 fb08 	bl	800d4b4 <Await>
			sprintf(data, "LF2: %d %d %d\n", fx.svlgf21, fx.svlgf22, fx.svlgf23);
 800bea4:	4b16      	ldr	r3, [pc, #88]	; (800bf00 <button+0xcc8>)
 800bea6:	69da      	ldr	r2, [r3, #28]
 800bea8:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <button+0xcc8>)
 800beaa:	6a19      	ldr	r1, [r3, #32]
 800beac:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <button+0xcc8>)
 800beae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	460b      	mov	r3, r1
 800beb4:	491b      	ldr	r1, [pc, #108]	; (800bf24 <button+0xcec>)
 800beb6:	4819      	ldr	r0, [pc, #100]	; (800bf1c <button+0xce4>)
 800beb8:	f011 fd3a 	bl	801d930 <siprintf>
			UARTSend
 800bebc:	4917      	ldr	r1, [pc, #92]	; (800bf1c <button+0xce4>)
 800bebe:	4818      	ldr	r0, [pc, #96]	; (800bf20 <button+0xce8>)
 800bec0:	f7f7 fd06 	bl	80038d0 <UARTPrintString>
			Await(50);
 800bec4:	2032      	movs	r0, #50	; 0x32
 800bec6:	f001 faf5 	bl	800d4b4 <Await>
			exled3 = 0;
 800beca:	4a17      	ldr	r2, [pc, #92]	; (800bf28 <button+0xcf0>)
 800becc:	7813      	ldrb	r3, [r2, #0]
 800bece:	f36f 13c7 	bfc	r3, #7, #1
 800bed2:	7013      	strb	r3, [r2, #0]
			exled4 = 0;
 800bed4:	4a14      	ldr	r2, [pc, #80]	; (800bf28 <button+0xcf0>)
 800bed6:	7813      	ldrb	r3, [r2, #0]
 800bed8:	f36f 1386 	bfc	r3, #6, #1
 800bedc:	7013      	strb	r3, [r2, #0]
			while(ps4.button == CIRCLE);
 800bede:	bf00      	nop
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <button+0xcc4>)
 800bee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bee8:	d0fa      	beq.n	800bee0 <button+0xca8>
			break;
 800beea:	bf00      	nop
		}
		press = 0;
 800beec:	4b0f      	ldr	r3, [pc, #60]	; (800bf2c <button+0xcf4>)
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]
	}
}
 800bef2:	bf00      	nop
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800befc:	2000a0c8 	.word	0x2000a0c8
 800bf00:	2000a144 	.word	0x2000a144
 800bf04:	45bb8000 	.word	0x45bb8000
 800bf08:	2000a5d4 	.word	0x2000a5d4
 800bf0c:	20007b24 	.word	0x20007b24
 800bf10:	20009974 	.word	0x20009974
 800bf14:	2000a5f8 	.word	0x2000a5f8
 800bf18:	08022440 	.word	0x08022440
 800bf1c:	20006948 	.word	0x20006948
 800bf20:	200067e4 	.word	0x200067e4
 800bf24:	08022450 	.word	0x08022450
 800bf28:	40020014 	.word	0x40020014
 800bf2c:	20009d34 	.word	0x20009d34

0800bf30 <limit_sw>:

void limit_sw(void){
 800bf30:	b580      	push	{r7, lr}
 800bf32:	af00      	add	r7, sp, #0
	if(!(lsLGl))
 800bf34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bf38:	4836      	ldr	r0, [pc, #216]	; (800c014 <limit_sw+0xe4>)
 800bf3a:	f008 fa33 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d005      	beq.n	800bf50 <limit_sw+0x20>
		exled1 = 1;
 800bf44:	4a34      	ldr	r2, [pc, #208]	; (800c018 <limit_sw+0xe8>)
 800bf46:	7853      	ldrb	r3, [r2, #1]
 800bf48:	f043 0302 	orr.w	r3, r3, #2
 800bf4c:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
		exled4 = 0;
		exled5 = 0;
		exled6 = 0;
	}
}
 800bf4e:	e05e      	b.n	800c00e <limit_sw+0xde>
	else if(!(lsLGr))
 800bf50:	2108      	movs	r1, #8
 800bf52:	4832      	ldr	r0, [pc, #200]	; (800c01c <limit_sw+0xec>)
 800bf54:	f008 fa26 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d005      	beq.n	800bf6a <limit_sw+0x3a>
		exled2 = 1;
 800bf5e:	4a2e      	ldr	r2, [pc, #184]	; (800c018 <limit_sw+0xe8>)
 800bf60:	7853      	ldrb	r3, [r2, #1]
 800bf62:	f043 0301 	orr.w	r3, r3, #1
 800bf66:	7053      	strb	r3, [r2, #1]
}
 800bf68:	e051      	b.n	800c00e <limit_sw+0xde>
	else if(!(lsl1))
 800bf6a:	2110      	movs	r1, #16
 800bf6c:	482b      	ldr	r0, [pc, #172]	; (800c01c <limit_sw+0xec>)
 800bf6e:	f008 fa19 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d005      	beq.n	800bf84 <limit_sw+0x54>
		exled3 = 1;
 800bf78:	4a29      	ldr	r2, [pc, #164]	; (800c020 <limit_sw+0xf0>)
 800bf7a:	7813      	ldrb	r3, [r2, #0]
 800bf7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf80:	7013      	strb	r3, [r2, #0]
}
 800bf82:	e044      	b.n	800c00e <limit_sw+0xde>
	else if(!(lsl2))
 800bf84:	2180      	movs	r1, #128	; 0x80
 800bf86:	4825      	ldr	r0, [pc, #148]	; (800c01c <limit_sw+0xec>)
 800bf88:	f008 fa0c 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d005      	beq.n	800bf9e <limit_sw+0x6e>
		exled4 = 1;
 800bf92:	4a23      	ldr	r2, [pc, #140]	; (800c020 <limit_sw+0xf0>)
 800bf94:	7813      	ldrb	r3, [r2, #0]
 800bf96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf9a:	7013      	strb	r3, [r2, #0]
}
 800bf9c:	e037      	b.n	800c00e <limit_sw+0xde>
	else if(!(lsr1))
 800bf9e:	2120      	movs	r1, #32
 800bfa0:	4820      	ldr	r0, [pc, #128]	; (800c024 <limit_sw+0xf4>)
 800bfa2:	f008 f9ff 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d005      	beq.n	800bfb8 <limit_sw+0x88>
		exled5 = 1;
 800bfac:	4a1c      	ldr	r2, [pc, #112]	; (800c020 <limit_sw+0xf0>)
 800bfae:	7813      	ldrb	r3, [r2, #0]
 800bfb0:	f043 0320 	orr.w	r3, r3, #32
 800bfb4:	7013      	strb	r3, [r2, #0]
}
 800bfb6:	e02a      	b.n	800c00e <limit_sw+0xde>
	else if(!(lsr2))
 800bfb8:	2140      	movs	r1, #64	; 0x40
 800bfba:	481a      	ldr	r0, [pc, #104]	; (800c024 <limit_sw+0xf4>)
 800bfbc:	f008 f9f2 	bl	80143a4 <HAL_GPIO_ReadPin>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d005      	beq.n	800bfd2 <limit_sw+0xa2>
		exled6 = 1;
 800bfc6:	4a16      	ldr	r2, [pc, #88]	; (800c020 <limit_sw+0xf0>)
 800bfc8:	7813      	ldrb	r3, [r2, #0]
 800bfca:	f043 0310 	orr.w	r3, r3, #16
 800bfce:	7013      	strb	r3, [r2, #0]
}
 800bfd0:	e01d      	b.n	800c00e <limit_sw+0xde>
		exled1 = 0;
 800bfd2:	4a11      	ldr	r2, [pc, #68]	; (800c018 <limit_sw+0xe8>)
 800bfd4:	7853      	ldrb	r3, [r2, #1]
 800bfd6:	f36f 0341 	bfc	r3, #1, #1
 800bfda:	7053      	strb	r3, [r2, #1]
		exled2 = 0;
 800bfdc:	4a0e      	ldr	r2, [pc, #56]	; (800c018 <limit_sw+0xe8>)
 800bfde:	7853      	ldrb	r3, [r2, #1]
 800bfe0:	f36f 0300 	bfc	r3, #0, #1
 800bfe4:	7053      	strb	r3, [r2, #1]
		exled3 = 0;
 800bfe6:	4a0e      	ldr	r2, [pc, #56]	; (800c020 <limit_sw+0xf0>)
 800bfe8:	7813      	ldrb	r3, [r2, #0]
 800bfea:	f36f 13c7 	bfc	r3, #7, #1
 800bfee:	7013      	strb	r3, [r2, #0]
		exled4 = 0;
 800bff0:	4a0b      	ldr	r2, [pc, #44]	; (800c020 <limit_sw+0xf0>)
 800bff2:	7813      	ldrb	r3, [r2, #0]
 800bff4:	f36f 1386 	bfc	r3, #6, #1
 800bff8:	7013      	strb	r3, [r2, #0]
		exled5 = 0;
 800bffa:	4a09      	ldr	r2, [pc, #36]	; (800c020 <limit_sw+0xf0>)
 800bffc:	7813      	ldrb	r3, [r2, #0]
 800bffe:	f36f 1345 	bfc	r3, #5, #1
 800c002:	7013      	strb	r3, [r2, #0]
		exled6 = 0;
 800c004:	4a06      	ldr	r2, [pc, #24]	; (800c020 <limit_sw+0xf0>)
 800c006:	7813      	ldrb	r3, [r2, #0]
 800c008:	f36f 1304 	bfc	r3, #4, #1
 800c00c:	7013      	strb	r3, [r2, #0]
}
 800c00e:	bf00      	nop
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	40020000 	.word	0x40020000
 800c018:	40020c14 	.word	0x40020c14
 800c01c:	40020c00 	.word	0x40020c00
 800c020:	40020014 	.word	0x40020014
 800c024:	40020400 	.word	0x40020400

0800c028 <functest>:
		exled5 = 0;
		exled6 = 0;
	}
}

void functest(void){
 800c028:	b580      	push	{r7, lr}
 800c02a:	af00      	add	r7, sp, #0
	//NAVI
	if(ps4.button == R1)
 800c02c:	4bb4      	ldr	r3, [pc, #720]	; (800c300 <functest+0x2d8>)
 800c02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c034:	d103      	bne.n	800c03e <functest+0x16>
		MODN.speed = 5.0;
 800c036:	4bb3      	ldr	r3, [pc, #716]	; (800c304 <functest+0x2dc>)
 800c038:	4ab3      	ldr	r2, [pc, #716]	; (800c308 <functest+0x2e0>)
 800c03a:	61da      	str	r2, [r3, #28]
 800c03c:	e00c      	b.n	800c058 <functest+0x30>
	else if(ps4.button == L1)
 800c03e:	4bb0      	ldr	r3, [pc, #704]	; (800c300 <functest+0x2d8>)
 800c040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c046:	d104      	bne.n	800c052 <functest+0x2a>
		MODN.speed = 2.0;
 800c048:	4bae      	ldr	r3, [pc, #696]	; (800c304 <functest+0x2dc>)
 800c04a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c04e:	61da      	str	r2, [r3, #28]
 800c050:	e002      	b.n	800c058 <functest+0x30>
	else
		MODN.speed = 3.5;
 800c052:	4bac      	ldr	r3, [pc, #688]	; (800c304 <functest+0x2dc>)
 800c054:	4aad      	ldr	r2, [pc, #692]	; (800c30c <functest+0x2e4>)
 800c056:	61da      	str	r2, [r3, #28]
	realMODN(&ps4, &rns);
 800c058:	49ad      	ldr	r1, [pc, #692]	; (800c310 <functest+0x2e8>)
 800c05a:	48a9      	ldr	r0, [pc, #676]	; (800c300 <functest+0x2d8>)
 800c05c:	f7f9 fa7c 	bl	8005558 <realMODN>

	//power window (direction)
	if(ps4.button == L1_LEFT && LGclose)
 800c060:	4ba7      	ldr	r3, [pc, #668]	; (800c300 <functest+0x2d8>)
 800c062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c064:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c068:	d10d      	bne.n	800c086 <functest+0x5e>
 800c06a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c06e:	48a9      	ldr	r0, [pc, #676]	; (800c314 <functest+0x2ec>)
 800c070:	f008 f998 	bl	80143a4 <HAL_GPIO_ReadPin>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d105      	bne.n	800c086 <functest+0x5e>
		LGPW(-6000)
 800c07a:	f241 7170 	movw	r1, #6000	; 0x1770
 800c07e:	48a6      	ldr	r0, [pc, #664]	; (800c318 <functest+0x2f0>)
 800c080:	f7f5 f97e 	bl	8001380 <WriteBDC>
 800c084:	e0bb      	b.n	800c1fe <functest+0x1d6>
	else if(ps4.button == L1_RIGHT && LGopen)
 800c086:	4b9e      	ldr	r3, [pc, #632]	; (800c300 <functest+0x2d8>)
 800c088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08a:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800c08e:	d10c      	bne.n	800c0aa <functest+0x82>
 800c090:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c094:	489f      	ldr	r0, [pc, #636]	; (800c314 <functest+0x2ec>)
 800c096:	f008 f985 	bl	80143a4 <HAL_GPIO_ReadPin>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d104      	bne.n	800c0aa <functest+0x82>
		LGPW(6000)
 800c0a0:	499e      	ldr	r1, [pc, #632]	; (800c31c <functest+0x2f4>)
 800c0a2:	489d      	ldr	r0, [pc, #628]	; (800c318 <functest+0x2f0>)
 800c0a4:	f7f5 f96c 	bl	8001380 <WriteBDC>
 800c0a8:	e0a9      	b.n	800c1fe <functest+0x1d6>
	else if(ps4.button == L1 && fabs(ps4.joyR_y) >= 0.5)
 800c0aa:	4b95      	ldr	r3, [pc, #596]	; (800c300 <functest+0x2d8>)
 800c0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0b2:	d11c      	bne.n	800c0ee <functest+0xc6>
 800c0b4:	4b92      	ldr	r3, [pc, #584]	; (800c300 <functest+0x2d8>)
 800c0b6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c0ba:	eef0 7ae7 	vabs.f32	s15, s15
 800c0be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ca:	db10      	blt.n	800c0ee <functest+0xc6>
		LGPW(ps4.joyR_y * 6000)
 800c0cc:	4b8c      	ldr	r3, [pc, #560]	; (800c300 <functest+0x2d8>)
 800c0ce:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c0d2:	eef1 7a67 	vneg.f32	s15, s15
 800c0d6:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800c320 <functest+0x2f8>
 800c0da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0e2:	ee17 1a90 	vmov	r1, s15
 800c0e6:	488c      	ldr	r0, [pc, #560]	; (800c318 <functest+0x2f0>)
 800c0e8:	f7f5 f94a 	bl	8001380 <WriteBDC>
 800c0ec:	e087      	b.n	800c1fe <functest+0x1d6>
	else if(ps4.joyR_y >= 0.5)
 800c0ee:	4b84      	ldr	r3, [pc, #528]	; (800c300 <functest+0x2d8>)
 800c0f0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c0f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c0f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c100:	db10      	blt.n	800c124 <functest+0xfc>
		LFPW(ps4.joyR_y * 7500)
 800c102:	4b7f      	ldr	r3, [pc, #508]	; (800c300 <functest+0x2d8>)
 800c104:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c108:	eef1 7a67 	vneg.f32	s15, s15
 800c10c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800c324 <functest+0x2fc>
 800c110:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c118:	ee17 1a90 	vmov	r1, s15
 800c11c:	4882      	ldr	r0, [pc, #520]	; (800c328 <functest+0x300>)
 800c11e:	f7f5 f92f 	bl	8001380 <WriteBDC>
 800c122:	e06c      	b.n	800c1fe <functest+0x1d6>
	else if(ps4.joyR_y <= -0.5)
 800c124:	4b76      	ldr	r3, [pc, #472]	; (800c300 <functest+0x2d8>)
 800c126:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c12a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800c12e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c136:	d810      	bhi.n	800c15a <functest+0x132>
		LFPW(ps4.joyR_y * 6000)
 800c138:	4b71      	ldr	r3, [pc, #452]	; (800c300 <functest+0x2d8>)
 800c13a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c13e:	eef1 7a67 	vneg.f32	s15, s15
 800c142:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800c320 <functest+0x2f8>
 800c146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c14a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c14e:	ee17 1a90 	vmov	r1, s15
 800c152:	4875      	ldr	r0, [pc, #468]	; (800c328 <functest+0x300>)
 800c154:	f7f5 f914 	bl	8001380 <WriteBDC>
 800c158:	e051      	b.n	800c1fe <functest+0x1d6>
	else if(ps4.button == L1_CIRCLE){
 800c15a:	4b69      	ldr	r3, [pc, #420]	; (800c300 <functest+0x2d8>)
 800c15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c15e:	f5b3 5f10 	cmp.w	r3, #9216	; 0x2400
 800c162:	d12c      	bne.n	800c1be <functest+0x196>
		if(lsLGl && lsLGr){
 800c164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c168:	4870      	ldr	r0, [pc, #448]	; (800c32c <functest+0x304>)
 800c16a:	f008 f91b 	bl	80143a4 <HAL_GPIO_ReadPin>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d119      	bne.n	800c1a8 <functest+0x180>
 800c174:	2108      	movs	r1, #8
 800c176:	486e      	ldr	r0, [pc, #440]	; (800c330 <functest+0x308>)
 800c178:	f008 f914 	bl	80143a4 <HAL_GPIO_ReadPin>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d112      	bne.n	800c1a8 <functest+0x180>
			Await(33);
 800c182:	2021      	movs	r0, #33	; 0x21
 800c184:	f001 f996 	bl	800d4b4 <Await>
			LGPW(0)
 800c188:	2100      	movs	r1, #0
 800c18a:	4863      	ldr	r0, [pc, #396]	; (800c318 <functest+0x2f0>)
 800c18c:	f7f5 f8f8 	bl	8001380 <WriteBDC>
			sprintf(data, "pwenq, %d\n", enqpwLG);
 800c190:	4b68      	ldr	r3, [pc, #416]	; (800c334 <functest+0x30c>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	461a      	mov	r2, r3
 800c196:	4968      	ldr	r1, [pc, #416]	; (800c338 <functest+0x310>)
 800c198:	4868      	ldr	r0, [pc, #416]	; (800c33c <functest+0x314>)
 800c19a:	f011 fbc9 	bl	801d930 <siprintf>
			UARTSend
 800c19e:	4967      	ldr	r1, [pc, #412]	; (800c33c <functest+0x314>)
 800c1a0:	4867      	ldr	r0, [pc, #412]	; (800c340 <functest+0x318>)
 800c1a2:	f7f7 fb95 	bl	80038d0 <UARTPrintString>
 800c1a6:	e02a      	b.n	800c1fe <functest+0x1d6>
		}
		else
			LGPW(enqpwLG - pulse)
 800c1a8:	4b62      	ldr	r3, [pc, #392]	; (800c334 <functest+0x30c>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	425a      	negs	r2, r3
 800c1ae:	4b65      	ldr	r3, [pc, #404]	; (800c344 <functest+0x31c>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	4858      	ldr	r0, [pc, #352]	; (800c318 <functest+0x2f0>)
 800c1b8:	f7f5 f8e2 	bl	8001380 <WriteBDC>
 800c1bc:	e01f      	b.n	800c1fe <functest+0x1d6>
	}
	else if(ps4.button == L1_CROSS)
 800c1be:	4b50      	ldr	r3, [pc, #320]	; (800c300 <functest+0x2d8>)
 800c1c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c2:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800c1c6:	d10a      	bne.n	800c1de <functest+0x1b6>
		LFPW(enqpwLlf -pulse)
 800c1c8:	4b5f      	ldr	r3, [pc, #380]	; (800c348 <functest+0x320>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	425a      	negs	r2, r3
 800c1ce:	4b5d      	ldr	r3, [pc, #372]	; (800c344 <functest+0x31c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4854      	ldr	r0, [pc, #336]	; (800c328 <functest+0x300>)
 800c1d8:	f7f5 f8d2 	bl	8001380 <WriteBDC>
 800c1dc:	e00f      	b.n	800c1fe <functest+0x1d6>
	else{
		LFPW(0)
 800c1de:	2100      	movs	r1, #0
 800c1e0:	4851      	ldr	r0, [pc, #324]	; (800c328 <functest+0x300>)
 800c1e2:	f7f5 f8cd 	bl	8001380 <WriteBDC>
		LGPW(0)
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	484b      	ldr	r0, [pc, #300]	; (800c318 <functest+0x2f0>)
 800c1ea:	f7f5 f8c9 	bl	8001380 <WriteBDC>
		n = 8;
 800c1ee:	4b57      	ldr	r3, [pc, #348]	; (800c34c <functest+0x324>)
 800c1f0:	2208      	movs	r2, #8
 800c1f2:	601a      	str	r2, [r3, #0]
		enq();
 800c1f4:	f000 fc68 	bl	800cac8 <enq>
		Await(200);
 800c1f8:	20c8      	movs	r0, #200	; 0xc8
 800c1fa:	f001 f95b 	bl	800d4b4 <Await>
	}

	if(ps4.button == SHARE){
 800c1fe:	4b40      	ldr	r3, [pc, #256]	; (800c300 <functest+0x2d8>)
 800c200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c202:	2b01      	cmp	r3, #1
 800c204:	d105      	bne.n	800c212 <functest+0x1ea>
		QEIReset(QEI1);
 800c206:	2001      	movs	r0, #1
 800c208:	f7f5 fde0 	bl	8001dcc <QEIReset>
		QEIReset(QEI4);
 800c20c:	2004      	movs	r0, #4
 800c20e:	f7f5 fddd 	bl	8001dcc <QEIReset>
	}

	//test SERVO at ball gripper
	if(ps4.button == UP){
 800c212:	4b3b      	ldr	r3, [pc, #236]	; (800c300 <functest+0x2d8>)
 800c214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c216:	2b10      	cmp	r3, #16
 800c218:	d136      	bne.n	800c288 <functest+0x260>
		while(ps4.button == UP);
 800c21a:	bf00      	nop
 800c21c:	4b38      	ldr	r3, [pc, #224]	; (800c300 <functest+0x2d8>)
 800c21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c220:	2b10      	cmp	r3, #16
 800c222:	d0fb      	beq.n	800c21c <functest+0x1f4>
		led3 = !led3;
 800c224:	4b4a      	ldr	r3, [pc, #296]	; (800c350 <functest+0x328>)
 800c226:	785b      	ldrb	r3, [r3, #1]
 800c228:	b25b      	sxtb	r3, r3
 800c22a:	4a49      	ldr	r2, [pc, #292]	; (800c350 <functest+0x328>)
 800c22c:	43db      	mvns	r3, r3
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	09db      	lsrs	r3, r3, #7
 800c232:	b2d9      	uxtb	r1, r3
 800c234:	7853      	ldrb	r3, [r2, #1]
 800c236:	f361 13c7 	bfi	r3, r1, #7, #1
 800c23a:	7053      	strb	r3, [r2, #1]
		if(!fx.svapp){
 800c23c:	4b45      	ldr	r3, [pc, #276]	; (800c354 <functest+0x32c>)
 800c23e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c242:	f003 0301 	and.w	r3, r3, #1
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d105      	bne.n	800c258 <functest+0x230>
			svBRup
 800c24c:	f44f 7116 	mov.w	r1, #600	; 0x258
 800c250:	4841      	ldr	r0, [pc, #260]	; (800c358 <functest+0x330>)
 800c252:	f7fc f9e9 	bl	8008628 <ServoSetPulse>
 800c256:	e004      	b.n	800c262 <functest+0x23a>
		}
		else{
			svBRdown
 800c258:	f640 218c 	movw	r1, #2700	; 0xa8c
 800c25c:	483e      	ldr	r0, [pc, #248]	; (800c358 <functest+0x330>)
 800c25e:	f7fc f9e3 	bl	8008628 <ServoSetPulse>
		}
		fx.svapp = !fx.svapp;
 800c262:	4b3c      	ldr	r3, [pc, #240]	; (800c354 <functest+0x32c>)
 800c264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bf0c      	ite	eq
 800c272:	2301      	moveq	r3, #1
 800c274:	2300      	movne	r3, #0
 800c276:	b2d9      	uxtb	r1, r3
 800c278:	4a36      	ldr	r2, [pc, #216]	; (800c354 <functest+0x32c>)
 800c27a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c27e:	f361 0300 	bfi	r3, r1, #0, #1
 800c282:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c286:	e0be      	b.n	800c406 <functest+0x3de>
	}
	else if(ps4.button == LEFT){
 800c288:	4b1d      	ldr	r3, [pc, #116]	; (800c300 <functest+0x2d8>)
 800c28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c28c:	2b80      	cmp	r3, #128	; 0x80
 800c28e:	d167      	bne.n	800c360 <functest+0x338>
		while(ps4.button == LEFT);
 800c290:	bf00      	nop
 800c292:	4b1b      	ldr	r3, [pc, #108]	; (800c300 <functest+0x2d8>)
 800c294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c296:	2b80      	cmp	r3, #128	; 0x80
 800c298:	d0fb      	beq.n	800c292 <functest+0x26a>
		led3 = !led3;
 800c29a:	4b2d      	ldr	r3, [pc, #180]	; (800c350 <functest+0x328>)
 800c29c:	785b      	ldrb	r3, [r3, #1]
 800c29e:	b25b      	sxtb	r3, r3
 800c2a0:	4a2b      	ldr	r2, [pc, #172]	; (800c350 <functest+0x328>)
 800c2a2:	43db      	mvns	r3, r3
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	09db      	lsrs	r3, r3, #7
 800c2a8:	b2d9      	uxtb	r1, r3
 800c2aa:	7853      	ldrb	r3, [r2, #1]
 800c2ac:	f361 13c7 	bfi	r3, r1, #7, #1
 800c2b0:	7053      	strb	r3, [r2, #1]
		if(!fx.svapp){
 800c2b2:	4b28      	ldr	r3, [pc, #160]	; (800c354 <functest+0x32c>)
 800c2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d105      	bne.n	800c2ce <functest+0x2a6>
			svBRA
 800c2c2:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800c2c6:	4825      	ldr	r0, [pc, #148]	; (800c35c <functest+0x334>)
 800c2c8:	f7fc f9ae 	bl	8008628 <ServoSetPulse>
 800c2cc:	e004      	b.n	800c2d8 <functest+0x2b0>
		}
		else{
			svBRB
 800c2ce:	f44f 7132 	mov.w	r1, #712	; 0x2c8
 800c2d2:	4822      	ldr	r0, [pc, #136]	; (800c35c <functest+0x334>)
 800c2d4:	f7fc f9a8 	bl	8008628 <ServoSetPulse>
		}
		fx.svapp = !fx.svapp;
 800c2d8:	4b1e      	ldr	r3, [pc, #120]	; (800c354 <functest+0x32c>)
 800c2da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2301      	moveq	r3, #1
 800c2ea:	2300      	movne	r3, #0
 800c2ec:	b2d9      	uxtb	r1, r3
 800c2ee:	4a19      	ldr	r2, [pc, #100]	; (800c354 <functest+0x32c>)
 800c2f0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c2f4:	f361 0300 	bfi	r3, r1, #0, #1
 800c2f8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800c2fc:	e083      	b.n	800c406 <functest+0x3de>
 800c2fe:	bf00      	nop
 800c300:	2000a0c8 	.word	0x2000a0c8
 800c304:	20007540 	.word	0x20007540
 800c308:	40a00000 	.word	0x40a00000
 800c30c:	40600000 	.word	0x40600000
 800c310:	200091e8 	.word	0x200091e8
 800c314:	40021000 	.word	0x40021000
 800c318:	2000a5d4 	.word	0x2000a5d4
 800c31c:	ffffe890 	.word	0xffffe890
 800c320:	45bb8000 	.word	0x45bb8000
 800c324:	45ea6000 	.word	0x45ea6000
 800c328:	20007b24 	.word	0x20007b24
 800c32c:	40020000 	.word	0x40020000
 800c330:	40020c00 	.word	0x40020c00
 800c334:	200099fc 	.word	0x200099fc
 800c338:	08022210 	.word	0x08022210
 800c33c:	20006948 	.word	0x20006948
 800c340:	200067e4 	.word	0x200067e4
 800c344:	20009840 	.word	0x20009840
 800c348:	20007b78 	.word	0x20007b78
 800c34c:	20007508 	.word	0x20007508
 800c350:	40020814 	.word	0x40020814
 800c354:	2000a144 	.word	0x2000a144
 800c358:	20009738 	.word	0x20009738
 800c35c:	20009924 	.word	0x20009924
	}

	//test flipping servo
	else if(ps4.button == DOWN){
 800c360:	4b78      	ldr	r3, [pc, #480]	; (800c544 <functest+0x51c>)
 800c362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c364:	2b40      	cmp	r3, #64	; 0x40
 800c366:	d14e      	bne.n	800c406 <functest+0x3de>
		svNoFlip
 800c368:	f240 3139 	movw	r1, #825	; 0x339
 800c36c:	4876      	ldr	r0, [pc, #472]	; (800c548 <functest+0x520>)
 800c36e:	f7fc f95b 	bl	8008628 <ServoSetPulse>
 800c372:	f240 713a 	movw	r1, #1850	; 0x73a
 800c376:	4875      	ldr	r0, [pc, #468]	; (800c54c <functest+0x524>)
 800c378:	f7fc f956 	bl	8008628 <ServoSetPulse>
		while(ps4.button == DOWN);
 800c37c:	bf00      	nop
 800c37e:	4b71      	ldr	r3, [pc, #452]	; (800c544 <functest+0x51c>)
 800c380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c382:	2b40      	cmp	r3, #64	; 0x40
 800c384:	d0fb      	beq.n	800c37e <functest+0x356>
		if(ps4.button == L1_DOWN){
 800c386:	4b6f      	ldr	r3, [pc, #444]	; (800c544 <functest+0x51c>)
 800c388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38a:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800c38e:	d13a      	bne.n	800c406 <functest+0x3de>
			led3 = !led3;
 800c390:	4b6f      	ldr	r3, [pc, #444]	; (800c550 <functest+0x528>)
 800c392:	785b      	ldrb	r3, [r3, #1]
 800c394:	b25b      	sxtb	r3, r3
 800c396:	4a6e      	ldr	r2, [pc, #440]	; (800c550 <functest+0x528>)
 800c398:	43db      	mvns	r3, r3
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	09db      	lsrs	r3, r3, #7
 800c39e:	b2d9      	uxtb	r1, r3
 800c3a0:	7853      	ldrb	r3, [r2, #1]
 800c3a2:	f361 13c7 	bfi	r3, r1, #7, #1
 800c3a6:	7053      	strb	r3, [r2, #1]
			if(!fx.svapp){
 800c3a8:	4b6a      	ldr	r3, [pc, #424]	; (800c554 <functest+0x52c>)
 800c3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d10a      	bne.n	800c3ce <functest+0x3a6>
				svCloseFlip
 800c3b8:	f240 7121 	movw	r1, #1825	; 0x721
 800c3bc:	4862      	ldr	r0, [pc, #392]	; (800c548 <functest+0x520>)
 800c3be:	f7fc f933 	bl	8008628 <ServoSetPulse>
 800c3c2:	f240 316b 	movw	r1, #875	; 0x36b
 800c3c6:	4861      	ldr	r0, [pc, #388]	; (800c54c <functest+0x524>)
 800c3c8:	f7fc f92e 	bl	8008628 <ServoSetPulse>
 800c3cc:	e009      	b.n	800c3e2 <functest+0x3ba>
			}
			else{
				svFlip
 800c3ce:	f240 1145 	movw	r1, #325	; 0x145
 800c3d2:	485d      	ldr	r0, [pc, #372]	; (800c548 <functest+0x520>)
 800c3d4:	f7fc f928 	bl	8008628 <ServoSetPulse>
 800c3d8:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800c3dc:	485b      	ldr	r0, [pc, #364]	; (800c54c <functest+0x524>)
 800c3de:	f7fc f923 	bl	8008628 <ServoSetPulse>
			}
			fx.svapp = !fx.svapp;
 800c3e2:	4b5c      	ldr	r3, [pc, #368]	; (800c554 <functest+0x52c>)
 800c3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	bf0c      	ite	eq
 800c3f2:	2301      	moveq	r3, #1
 800c3f4:	2300      	movne	r3, #0
 800c3f6:	b2d9      	uxtb	r1, r3
 800c3f8:	4a56      	ldr	r2, [pc, #344]	; (800c554 <functest+0x52c>)
 800c3fa:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c3fe:	f361 0300 	bfi	r3, r1, #0, #1
 800c402:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		}
	}


	//test ball cylinder
	if(ps4.button == TRIANGLE){
 800c406:	4b4f      	ldr	r3, [pc, #316]	; (800c544 <functest+0x51c>)
 800c408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c40e:	d136      	bne.n	800c47e <functest+0x456>
		while(ps4.button == TRIANGLE);
 800c410:	bf00      	nop
 800c412:	4b4c      	ldr	r3, [pc, #304]	; (800c544 <functest+0x51c>)
 800c414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c41a:	d0fa      	beq.n	800c412 <functest+0x3ea>
		led3 = !led3;
 800c41c:	4b4c      	ldr	r3, [pc, #304]	; (800c550 <functest+0x528>)
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	b25b      	sxtb	r3, r3
 800c422:	4a4b      	ldr	r2, [pc, #300]	; (800c550 <functest+0x528>)
 800c424:	43db      	mvns	r3, r3
 800c426:	b2db      	uxtb	r3, r3
 800c428:	09db      	lsrs	r3, r3, #7
 800c42a:	b2d9      	uxtb	r1, r3
 800c42c:	7853      	ldrb	r3, [r2, #1]
 800c42e:	f361 13c7 	bfi	r3, r1, #7, #1
 800c432:	7053      	strb	r3, [r2, #1]
		if(!fx.cyapp)
 800c434:	4b47      	ldr	r3, [pc, #284]	; (800c554 <functest+0x52c>)
 800c436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b00      	cmp	r3, #0
 800c442:	d105      	bne.n	800c450 <functest+0x428>
			BgripON
 800c444:	4a42      	ldr	r2, [pc, #264]	; (800c550 <functest+0x528>)
 800c446:	7853      	ldrb	r3, [r2, #1]
 800c448:	f043 0301 	orr.w	r3, r3, #1
 800c44c:	7053      	strb	r3, [r2, #1]
 800c44e:	e004      	b.n	800c45a <functest+0x432>
		else
			BgripOFF
 800c450:	4a3f      	ldr	r2, [pc, #252]	; (800c550 <functest+0x528>)
 800c452:	7853      	ldrb	r3, [r2, #1]
 800c454:	f36f 0300 	bfc	r3, #0, #1
 800c458:	7053      	strb	r3, [r2, #1]
		fx.cyapp = !fx.cyapp;
 800c45a:	4b3e      	ldr	r3, [pc, #248]	; (800c554 <functest+0x52c>)
 800c45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c460:	f003 0302 	and.w	r3, r3, #2
 800c464:	b2db      	uxtb	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	bf0c      	ite	eq
 800c46a:	2301      	moveq	r3, #1
 800c46c:	2300      	movne	r3, #0
 800c46e:	b2d9      	uxtb	r1, r3
 800c470:	4a38      	ldr	r2, [pc, #224]	; (800c554 <functest+0x52c>)
 800c472:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800c476:	f361 0341 	bfi	r3, r1, #1, #1
 800c47a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}

	//bldc up/down
	if(ps4.button == CIRCLE){
 800c47e:	4b31      	ldr	r3, [pc, #196]	; (800c544 <functest+0x51c>)
 800c480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c486:	d131      	bne.n	800c4ec <functest+0x4c4>
		while(ps4.button == CIRCLE);
 800c488:	bf00      	nop
 800c48a:	4b2e      	ldr	r3, [pc, #184]	; (800c544 <functest+0x51c>)
 800c48c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c492:	d0fa      	beq.n	800c48a <functest+0x462>
		led3 = !led3;
 800c494:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <functest+0x528>)
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	b25b      	sxtb	r3, r3
 800c49a:	4a2d      	ldr	r2, [pc, #180]	; (800c550 <functest+0x528>)
 800c49c:	43db      	mvns	r3, r3
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	09db      	lsrs	r3, r3, #7
 800c4a2:	b2d9      	uxtb	r1, r3
 800c4a4:	7853      	ldrb	r3, [r2, #1]
 800c4a6:	f361 13c7 	bfi	r3, r1, #7, #1
 800c4aa:	7053      	strb	r3, [r2, #1]
//		pulse = pulse + 5000;
		lagori.bldclayer ++;
 800c4ac:	4b2a      	ldr	r3, [pc, #168]	; (800c558 <functest+0x530>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	f003 0307 	and.w	r3, r3, #7
 800c4bc:	b2d9      	uxtb	r1, r3
 800c4be:	4a26      	ldr	r2, [pc, #152]	; (800c558 <functest+0x530>)
 800c4c0:	7813      	ldrb	r3, [r2, #0]
 800c4c2:	f361 0384 	bfi	r3, r1, #2, #3
 800c4c6:	7013      	strb	r3, [r2, #0]
		lagori.bldclapp = 1;
 800c4c8:	4a23      	ldr	r2, [pc, #140]	; (800c558 <functest+0x530>)
 800c4ca:	7813      	ldrb	r3, [r2, #0]
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	7013      	strb	r3, [r2, #0]
		if(lagori.bldclayer > 5)
 800c4d2:	4b21      	ldr	r3, [pc, #132]	; (800c558 <functest+0x530>)
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b05      	cmp	r3, #5
 800c4de:	d905      	bls.n	800c4ec <functest+0x4c4>
			lagori.bldclayer = 5;
 800c4e0:	4a1d      	ldr	r2, [pc, #116]	; (800c558 <functest+0x530>)
 800c4e2:	7813      	ldrb	r3, [r2, #0]
 800c4e4:	2105      	movs	r1, #5
 800c4e6:	f361 0384 	bfi	r3, r1, #2, #3
 800c4ea:	7013      	strb	r3, [r2, #0]

	}
	if(ps4.button == CROSS){
 800c4ec:	4b15      	ldr	r3, [pc, #84]	; (800c544 <functest+0x51c>)
 800c4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4f4:	d124      	bne.n	800c540 <functest+0x518>
		while(ps4.button == CIRCLE);
 800c4f6:	bf00      	nop
 800c4f8:	4b12      	ldr	r3, [pc, #72]	; (800c544 <functest+0x51c>)
 800c4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c500:	d0fa      	beq.n	800c4f8 <functest+0x4d0>
		led3 = !led3;
 800c502:	4b13      	ldr	r3, [pc, #76]	; (800c550 <functest+0x528>)
 800c504:	785b      	ldrb	r3, [r3, #1]
 800c506:	b25b      	sxtb	r3, r3
 800c508:	4a11      	ldr	r2, [pc, #68]	; (800c550 <functest+0x528>)
 800c50a:	43db      	mvns	r3, r3
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	09db      	lsrs	r3, r3, #7
 800c510:	b2d9      	uxtb	r1, r3
 800c512:	7853      	ldrb	r3, [r2, #1]
 800c514:	f361 13c7 	bfi	r3, r1, #7, #1
 800c518:	7053      	strb	r3, [r2, #1]
//		pulse = pulse - 5000;
		lagori.bldclayer --;
 800c51a:	4b0f      	ldr	r3, [pc, #60]	; (800c558 <functest+0x530>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800c522:	b2db      	uxtb	r3, r3
 800c524:	3307      	adds	r3, #7
 800c526:	f003 0307 	and.w	r3, r3, #7
 800c52a:	b2d9      	uxtb	r1, r3
 800c52c:	4a0a      	ldr	r2, [pc, #40]	; (800c558 <functest+0x530>)
 800c52e:	7813      	ldrb	r3, [r2, #0]
 800c530:	f361 0384 	bfi	r3, r1, #2, #3
 800c534:	7013      	strb	r3, [r2, #0]
		lagori.bldclapp = 1;
 800c536:	4a08      	ldr	r2, [pc, #32]	; (800c558 <functest+0x530>)
 800c538:	7813      	ldrb	r3, [r2, #0]
 800c53a:	f043 0301 	orr.w	r3, r3, #1
 800c53e:	7013      	strb	r3, [r2, #0]
		if(lagori.bldclayer < 0)
			lagori.bldclayer = 0;

	}
}
 800c540:	bf00      	nop
 800c542:	bd80      	pop	{r7, pc}
 800c544:	2000a0c8 	.word	0x2000a0c8
 800c548:	20009974 	.word	0x20009974
 800c54c:	2000a5f8 	.word	0x2000a5f8
 800c550:	40020814 	.word	0x40020814
 800c554:	2000a144 	.word	0x2000a144
 800c558:	20009844 	.word	0x20009844

0800c55c <SERVO_getPulse>:

void SERVO_getPulse(void){
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
	if(ps4.joyR_y >= 0.75){
 800c560:	4b11      	ldr	r3, [pc, #68]	; (800c5a8 <SERVO_getPulse+0x4c>)
 800c562:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c566:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800c56a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c572:	db04      	blt.n	800c57e <SERVO_getPulse+0x22>
		pulse += 25;
 800c574:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <SERVO_getPulse+0x50>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3319      	adds	r3, #25
 800c57a:	4a0c      	ldr	r2, [pc, #48]	; (800c5ac <SERVO_getPulse+0x50>)
 800c57c:	6013      	str	r3, [r2, #0]
	}
	if(ps4.joyR_y <= -0.75){
 800c57e:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <SERVO_getPulse+0x4c>)
 800c580:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c584:	eebe 7a08 	vmov.f32	s14, #232	; 0xbf400000 -0.750
 800c588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c590:	d804      	bhi.n	800c59c <SERVO_getPulse+0x40>
		pulse -= 25;
 800c592:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <SERVO_getPulse+0x50>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	3b19      	subs	r3, #25
 800c598:	4a04      	ldr	r2, [pc, #16]	; (800c5ac <SERVO_getPulse+0x50>)
 800c59a:	6013      	str	r3, [r2, #0]
	}
	Await(100);
 800c59c:	2064      	movs	r0, #100	; 0x64
 800c59e:	f000 ff89 	bl	800d4b4 <Await>
}
 800c5a2:	bf00      	nop
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	2000a0c8 	.word	0x2000a0c8
 800c5ac:	20009840 	.word	0x20009840

0800c5b0 <KFilterAdjust>:

void KFilterAdjust(void){
 800c5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5b4:	b08c      	sub	sp, #48	; 0x30
 800c5b6:	af08      	add	r7, sp, #32
	static float avg_x = 0, avg_y = 0;
	static float kf[2][3]={{7.27, 16.03, 0.15}, {7.5, 12.01, 2.0}};
	static int arr_x = 0, arr_y = 0, num = 0, n = 0;
	while(ps4.button == TRIANGLE){
 800c5b8:	e089      	b.n	800c6ce <KFilterAdjust+0x11e>
		avg_x = (avg_x * n + adc.ADC_value[0]) / (n + 1);
 800c5ba:	4b50      	ldr	r3, [pc, #320]	; (800c6fc <KFilterAdjust+0x14c>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	ee07 3a90 	vmov	s15, r3
 800c5c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5c6:	4b4e      	ldr	r3, [pc, #312]	; (800c700 <KFilterAdjust+0x150>)
 800c5c8:	edd3 7a00 	vldr	s15, [r3]
 800c5cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5d0:	4b4c      	ldr	r3, [pc, #304]	; (800c704 <KFilterAdjust+0x154>)
 800c5d2:	899b      	ldrh	r3, [r3, #12]
 800c5d4:	ee07 3a90 	vmov	s15, r3
 800c5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5dc:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c5e0:	4b46      	ldr	r3, [pc, #280]	; (800c6fc <KFilterAdjust+0x14c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c5ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5f2:	4b43      	ldr	r3, [pc, #268]	; (800c700 <KFilterAdjust+0x150>)
 800c5f4:	edc3 7a00 	vstr	s15, [r3]
		avg_y = (avg_y * n + adc.ADC_value[1]) / (n + 1);
 800c5f8:	4b40      	ldr	r3, [pc, #256]	; (800c6fc <KFilterAdjust+0x14c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	ee07 3a90 	vmov	s15, r3
 800c600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c604:	4b40      	ldr	r3, [pc, #256]	; (800c708 <KFilterAdjust+0x158>)
 800c606:	edd3 7a00 	vldr	s15, [r3]
 800c60a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c60e:	4b3d      	ldr	r3, [pc, #244]	; (800c704 <KFilterAdjust+0x154>)
 800c610:	89db      	ldrh	r3, [r3, #14]
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c61a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800c61e:	4b37      	ldr	r3, [pc, #220]	; (800c6fc <KFilterAdjust+0x14c>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	ee07 3a90 	vmov	s15, r3
 800c628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c62c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c630:	4b35      	ldr	r3, [pc, #212]	; (800c708 <KFilterAdjust+0x158>)
 800c632:	edc3 7a00 	vstr	s15, [r3]
		sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n", avg_x, x_kfo, avg_y, y_kfo, y_kfoav);
 800c636:	4b32      	ldr	r3, [pc, #200]	; (800c700 <KFilterAdjust+0x150>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f3 ff84 	bl	8000548 <__aeabi_f2d>
 800c640:	e9c7 0100 	strd	r0, r1, [r7]
 800c644:	4b31      	ldr	r3, [pc, #196]	; (800c70c <KFilterAdjust+0x15c>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7f3 ff7d 	bl	8000548 <__aeabi_f2d>
 800c64e:	4604      	mov	r4, r0
 800c650:	460d      	mov	r5, r1
 800c652:	4b2d      	ldr	r3, [pc, #180]	; (800c708 <KFilterAdjust+0x158>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f7f3 ff76 	bl	8000548 <__aeabi_f2d>
 800c65c:	4680      	mov	r8, r0
 800c65e:	4689      	mov	r9, r1
 800c660:	4b2b      	ldr	r3, [pc, #172]	; (800c710 <KFilterAdjust+0x160>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4618      	mov	r0, r3
 800c666:	f7f3 ff6f 	bl	8000548 <__aeabi_f2d>
 800c66a:	4682      	mov	sl, r0
 800c66c:	468b      	mov	fp, r1
 800c66e:	4b29      	ldr	r3, [pc, #164]	; (800c714 <KFilterAdjust+0x164>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4618      	mov	r0, r3
 800c674:	f7f3 ff68 	bl	8000548 <__aeabi_f2d>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c680:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c684:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c688:	e9cd 4500 	strd	r4, r5, [sp]
 800c68c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c690:	4921      	ldr	r1, [pc, #132]	; (800c718 <KFilterAdjust+0x168>)
 800c692:	4822      	ldr	r0, [pc, #136]	; (800c71c <KFilterAdjust+0x16c>)
 800c694:	f011 f94c 	bl	801d930 <siprintf>
//		sprintf(data, "%d, %.3f, %.3f\n", adc.ADC_value[0], x_kfo, avg_x);
		UARTSend
 800c698:	4920      	ldr	r1, [pc, #128]	; (800c71c <KFilterAdjust+0x16c>)
 800c69a:	4821      	ldr	r0, [pc, #132]	; (800c720 <KFilterAdjust+0x170>)
 800c69c:	f7f7 f918 	bl	80038d0 <UARTPrintString>
		led2 = !led2;
 800c6a0:	4b20      	ldr	r3, [pc, #128]	; (800c724 <KFilterAdjust+0x174>)
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	4a1e      	ldr	r2, [pc, #120]	; (800c724 <KFilterAdjust+0x174>)
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	bf0c      	ite	eq
 800c6b0:	2301      	moveq	r3, #1
 800c6b2:	2300      	movne	r3, #0
 800c6b4:	b2d9      	uxtb	r1, r3
 800c6b6:	7853      	ldrb	r3, [r2, #1]
 800c6b8:	f361 1386 	bfi	r3, r1, #6, #1
 800c6bc:	7053      	strb	r3, [r2, #1]
		Await(20);
 800c6be:	2014      	movs	r0, #20
 800c6c0:	f000 fef8 	bl	800d4b4 <Await>
		n++;
 800c6c4:	4b0d      	ldr	r3, [pc, #52]	; (800c6fc <KFilterAdjust+0x14c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	4a0c      	ldr	r2, [pc, #48]	; (800c6fc <KFilterAdjust+0x14c>)
 800c6cc:	6013      	str	r3, [r2, #0]
	while(ps4.button == TRIANGLE){
 800c6ce:	4b16      	ldr	r3, [pc, #88]	; (800c728 <KFilterAdjust+0x178>)
 800c6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6d6:	f43f af70 	beq.w	800c5ba <KFilterAdjust+0xa>
	}
	if(ps4.button == SQUARE){
 800c6da:	4b13      	ldr	r3, [pc, #76]	; (800c728 <KFilterAdjust+0x178>)
 800c6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6e2:	d14e      	bne.n	800c782 <KFilterAdjust+0x1d2>
		while(ps4.button == SQUARE);
 800c6e4:	bf00      	nop
 800c6e6:	4b10      	ldr	r3, [pc, #64]	; (800c728 <KFilterAdjust+0x178>)
 800c6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6ee:	d0fa      	beq.n	800c6e6 <KFilterAdjust+0x136>
		for(int i = 0; i < 2; i++){
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	e03a      	b.n	800c76c <KFilterAdjust+0x1bc>
			for(int j = 0; j < 3; j++){
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60bb      	str	r3, [r7, #8]
 800c6fa:	e031      	b.n	800c760 <KFilterAdjust+0x1b0>
 800c6fc:	20000838 	.word	0x20000838
 800c700:	2000083c 	.word	0x2000083c
 800c704:	20009684 	.word	0x20009684
 800c708:	20000840 	.word	0x20000840
 800c70c:	20007700 	.word	0x20007700
 800c710:	20007190 	.word	0x20007190
 800c714:	20007388 	.word	0x20007388
 800c718:	080224a4 	.word	0x080224a4
 800c71c:	20006948 	.word	0x20006948
 800c720:	200067e4 	.word	0x200067e4
 800c724:	40020814 	.word	0x40020814
 800c728:	2000a0c8 	.word	0x2000a0c8
				sprintf(data, "%.3f ", kf[i][j]);
 800c72c:	49ac      	ldr	r1, [pc, #688]	; (800c9e0 <KFilterAdjust+0x430>)
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	4613      	mov	r3, r2
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	4413      	add	r3, r2
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	4413      	add	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	440b      	add	r3, r1
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4618      	mov	r0, r3
 800c742:	f7f3 ff01 	bl	8000548 <__aeabi_f2d>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	49a6      	ldr	r1, [pc, #664]	; (800c9e4 <KFilterAdjust+0x434>)
 800c74c:	48a6      	ldr	r0, [pc, #664]	; (800c9e8 <KFilterAdjust+0x438>)
 800c74e:	f011 f8ef 	bl	801d930 <siprintf>
				UARTSend
 800c752:	49a5      	ldr	r1, [pc, #660]	; (800c9e8 <KFilterAdjust+0x438>)
 800c754:	48a5      	ldr	r0, [pc, #660]	; (800c9ec <KFilterAdjust+0x43c>)
 800c756:	f7f7 f8bb 	bl	80038d0 <UARTPrintString>
			for(int j = 0; j < 3; j++){
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	3301      	adds	r3, #1
 800c75e:	60bb      	str	r3, [r7, #8]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b02      	cmp	r3, #2
 800c764:	dde2      	ble.n	800c72c <KFilterAdjust+0x17c>
		for(int i = 0; i < 2; i++){
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2b01      	cmp	r3, #1
 800c770:	ddc1      	ble.n	800c6f6 <KFilterAdjust+0x146>
			}
		}
		sprintf(data, "kf\n");
 800c772:	499f      	ldr	r1, [pc, #636]	; (800c9f0 <KFilterAdjust+0x440>)
 800c774:	489c      	ldr	r0, [pc, #624]	; (800c9e8 <KFilterAdjust+0x438>)
 800c776:	f011 f8db 	bl	801d930 <siprintf>
		UARTSend
 800c77a:	499b      	ldr	r1, [pc, #620]	; (800c9e8 <KFilterAdjust+0x438>)
 800c77c:	489b      	ldr	r0, [pc, #620]	; (800c9ec <KFilterAdjust+0x43c>)
 800c77e:	f7f7 f8a7 	bl	80038d0 <UARTPrintString>
	}
	if(ps4.button == CIRCLE){
 800c782:	4b9c      	ldr	r3, [pc, #624]	; (800c9f4 <KFilterAdjust+0x444>)
 800c784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c78a:	d13d      	bne.n	800c808 <KFilterAdjust+0x258>
		while(ps4.button == CIRCLE);
 800c78c:	bf00      	nop
 800c78e:	4b99      	ldr	r3, [pc, #612]	; (800c9f4 <KFilterAdjust+0x444>)
 800c790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c796:	d0fa      	beq.n	800c78e <KFilterAdjust+0x1de>
		avg_x = 0;
 800c798:	4b97      	ldr	r3, [pc, #604]	; (800c9f8 <KFilterAdjust+0x448>)
 800c79a:	f04f 0200 	mov.w	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]
		avg_y = 0;
 800c7a0:	4b96      	ldr	r3, [pc, #600]	; (800c9fc <KFilterAdjust+0x44c>)
 800c7a2:	f04f 0200 	mov.w	r2, #0
 800c7a6:	601a      	str	r2, [r3, #0]
		n = 0;
 800c7a8:	4b95      	ldr	r3, [pc, #596]	; (800ca00 <KFilterAdjust+0x450>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
		KalmanFilterInit(1, &(adc.ADC_value[0]), &x_kfo, kf[0][0], kf[0][1], kf[0][2], &kf_adc_x);
 800c7ae:	4b8c      	ldr	r3, [pc, #560]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7b0:	edd3 7a00 	vldr	s15, [r3]
 800c7b4:	4b8a      	ldr	r3, [pc, #552]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7b6:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7ba:	4b89      	ldr	r3, [pc, #548]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7bc:	edd3 6a02 	vldr	s13, [r3, #8]
 800c7c0:	4b90      	ldr	r3, [pc, #576]	; (800ca04 <KFilterAdjust+0x454>)
 800c7c2:	eeb0 1a66 	vmov.f32	s2, s13
 800c7c6:	eef0 0a47 	vmov.f32	s1, s14
 800c7ca:	eeb0 0a67 	vmov.f32	s0, s15
 800c7ce:	4a8e      	ldr	r2, [pc, #568]	; (800ca08 <KFilterAdjust+0x458>)
 800c7d0:	498e      	ldr	r1, [pc, #568]	; (800ca0c <KFilterAdjust+0x45c>)
 800c7d2:	2001      	movs	r0, #1
 800c7d4:	f7f7 fbaa 	bl	8003f2c <KalmanFilterInit>
		KalmanFilterInit(1, &(adc.ADC_value[1]), &y_kfo, kf[1][0], kf[1][1], kf[1][2], &kf_adc_y);
 800c7d8:	4b81      	ldr	r3, [pc, #516]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7da:	edd3 7a03 	vldr	s15, [r3, #12]
 800c7de:	4b80      	ldr	r3, [pc, #512]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7e0:	ed93 7a04 	vldr	s14, [r3, #16]
 800c7e4:	4b7e      	ldr	r3, [pc, #504]	; (800c9e0 <KFilterAdjust+0x430>)
 800c7e6:	edd3 6a05 	vldr	s13, [r3, #20]
 800c7ea:	4b89      	ldr	r3, [pc, #548]	; (800ca10 <KFilterAdjust+0x460>)
 800c7ec:	eeb0 1a66 	vmov.f32	s2, s13
 800c7f0:	eef0 0a47 	vmov.f32	s1, s14
 800c7f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c7f8:	4a86      	ldr	r2, [pc, #536]	; (800ca14 <KFilterAdjust+0x464>)
 800c7fa:	4987      	ldr	r1, [pc, #540]	; (800ca18 <KFilterAdjust+0x468>)
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	f7f7 fb95 	bl	8003f2c <KalmanFilterInit>
		Await(50);
 800c802:	2032      	movs	r0, #50	; 0x32
 800c804:	f000 fe56 	bl	800d4b4 <Await>
	}
	if(ps4.button == CROSS){
 800c808:	4b7a      	ldr	r3, [pc, #488]	; (800c9f4 <KFilterAdjust+0x444>)
 800c80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c80c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c810:	d15d      	bne.n	800c8ce <KFilterAdjust+0x31e>
		while(ps4.button == CROSS){}
 800c812:	bf00      	nop
 800c814:	4b77      	ldr	r3, [pc, #476]	; (800c9f4 <KFilterAdjust+0x444>)
 800c816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c81c:	d0fa      	beq.n	800c814 <KFilterAdjust+0x264>
		kf[arr_y][arr_x] = kf[arr_y][arr_x] + num * 0.01;
 800c81e:	4b7f      	ldr	r3, [pc, #508]	; (800ca1c <KFilterAdjust+0x46c>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	4b7f      	ldr	r3, [pc, #508]	; (800ca20 <KFilterAdjust+0x470>)
 800c824:	6819      	ldr	r1, [r3, #0]
 800c826:	486e      	ldr	r0, [pc, #440]	; (800c9e0 <KFilterAdjust+0x430>)
 800c828:	4613      	mov	r3, r2
 800c82a:	005b      	lsls	r3, r3, #1
 800c82c:	4413      	add	r3, r2
 800c82e:	440b      	add	r3, r1
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4403      	add	r3, r0
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4618      	mov	r0, r3
 800c838:	f7f3 fe86 	bl	8000548 <__aeabi_f2d>
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	4b78      	ldr	r3, [pc, #480]	; (800ca24 <KFilterAdjust+0x474>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4618      	mov	r0, r3
 800c846:	f7f3 fe6d 	bl	8000524 <__aeabi_i2d>
 800c84a:	a363      	add	r3, pc, #396	; (adr r3, 800c9d8 <KFilterAdjust+0x428>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fed2 	bl	80005f8 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4620      	mov	r0, r4
 800c85a:	4629      	mov	r1, r5
 800c85c:	f7f3 fd16 	bl	800028c <__adddf3>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	496d      	ldr	r1, [pc, #436]	; (800ca1c <KFilterAdjust+0x46c>)
 800c866:	680c      	ldr	r4, [r1, #0]
 800c868:	496d      	ldr	r1, [pc, #436]	; (800ca20 <KFilterAdjust+0x470>)
 800c86a:	680d      	ldr	r5, [r1, #0]
 800c86c:	4610      	mov	r0, r2
 800c86e:	4619      	mov	r1, r3
 800c870:	f7f4 f9ba 	bl	8000be8 <__aeabi_d2f>
 800c874:	4602      	mov	r2, r0
 800c876:	495a      	ldr	r1, [pc, #360]	; (800c9e0 <KFilterAdjust+0x430>)
 800c878:	4623      	mov	r3, r4
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	4423      	add	r3, r4
 800c87e:	442b      	add	r3, r5
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	601a      	str	r2, [r3, #0]
		sprintf(data, "y = %d, x = %d, kf = %f\n", arr_y, arr_x, kf[arr_y][arr_x]);
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <KFilterAdjust+0x46c>)
 800c888:	681c      	ldr	r4, [r3, #0]
 800c88a:	4b65      	ldr	r3, [pc, #404]	; (800ca20 <KFilterAdjust+0x470>)
 800c88c:	681d      	ldr	r5, [r3, #0]
 800c88e:	4b63      	ldr	r3, [pc, #396]	; (800ca1c <KFilterAdjust+0x46c>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	4b63      	ldr	r3, [pc, #396]	; (800ca20 <KFilterAdjust+0x470>)
 800c894:	6819      	ldr	r1, [r3, #0]
 800c896:	4852      	ldr	r0, [pc, #328]	; (800c9e0 <KFilterAdjust+0x430>)
 800c898:	4613      	mov	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	4413      	add	r3, r2
 800c89e:	440b      	add	r3, r1
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4403      	add	r3, r0
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7f3 fe4e 	bl	8000548 <__aeabi_f2d>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	e9cd 2300 	strd	r2, r3, [sp]
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	495b      	ldr	r1, [pc, #364]	; (800ca28 <KFilterAdjust+0x478>)
 800c8ba:	484b      	ldr	r0, [pc, #300]	; (800c9e8 <KFilterAdjust+0x438>)
 800c8bc:	f011 f838 	bl	801d930 <siprintf>
		UARTSend
 800c8c0:	4949      	ldr	r1, [pc, #292]	; (800c9e8 <KFilterAdjust+0x438>)
 800c8c2:	484a      	ldr	r0, [pc, #296]	; (800c9ec <KFilterAdjust+0x43c>)
 800c8c4:	f7f7 f804 	bl	80038d0 <UARTPrintString>
		num = 0;
 800c8c8:	4b56      	ldr	r3, [pc, #344]	; (800ca24 <KFilterAdjust+0x474>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]
	}
	if(ps4.button == UP){
 800c8ce:	4b49      	ldr	r3, [pc, #292]	; (800c9f4 <KFilterAdjust+0x444>)
 800c8d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8d2:	2b10      	cmp	r3, #16
 800c8d4:	d11b      	bne.n	800c90e <KFilterAdjust+0x35e>
		while(ps4.button == UP){}
 800c8d6:	bf00      	nop
 800c8d8:	4b46      	ldr	r3, [pc, #280]	; (800c9f4 <KFilterAdjust+0x444>)
 800c8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8dc:	2b10      	cmp	r3, #16
 800c8de:	d0fb      	beq.n	800c8d8 <KFilterAdjust+0x328>
		arr_y ++;
 800c8e0:	4b4e      	ldr	r3, [pc, #312]	; (800ca1c <KFilterAdjust+0x46c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	4a4d      	ldr	r2, [pc, #308]	; (800ca1c <KFilterAdjust+0x46c>)
 800c8e8:	6013      	str	r3, [r2, #0]
		if(arr_y > 1)	arr_y = 0;
 800c8ea:	4b4c      	ldr	r3, [pc, #304]	; (800ca1c <KFilterAdjust+0x46c>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	dd02      	ble.n	800c8f8 <KFilterAdjust+0x348>
 800c8f2:	4b4a      	ldr	r3, [pc, #296]	; (800ca1c <KFilterAdjust+0x46c>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]
		sprintf(data, "y = %d\n", arr_y);
 800c8f8:	4b48      	ldr	r3, [pc, #288]	; (800ca1c <KFilterAdjust+0x46c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	494b      	ldr	r1, [pc, #300]	; (800ca2c <KFilterAdjust+0x47c>)
 800c900:	4839      	ldr	r0, [pc, #228]	; (800c9e8 <KFilterAdjust+0x438>)
 800c902:	f011 f815 	bl	801d930 <siprintf>
		UARTSend
 800c906:	4938      	ldr	r1, [pc, #224]	; (800c9e8 <KFilterAdjust+0x438>)
 800c908:	4838      	ldr	r0, [pc, #224]	; (800c9ec <KFilterAdjust+0x43c>)
 800c90a:	f7f6 ffe1 	bl	80038d0 <UARTPrintString>
	}
	if(ps4.button == RIGHT){
 800c90e:	4b39      	ldr	r3, [pc, #228]	; (800c9f4 <KFilterAdjust+0x444>)
 800c910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c912:	2b20      	cmp	r3, #32
 800c914:	d11b      	bne.n	800c94e <KFilterAdjust+0x39e>
		while(ps4.button == RIGHT){}
 800c916:	bf00      	nop
 800c918:	4b36      	ldr	r3, [pc, #216]	; (800c9f4 <KFilterAdjust+0x444>)
 800c91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91c:	2b20      	cmp	r3, #32
 800c91e:	d0fb      	beq.n	800c918 <KFilterAdjust+0x368>
		arr_x ++;
 800c920:	4b3f      	ldr	r3, [pc, #252]	; (800ca20 <KFilterAdjust+0x470>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	3301      	adds	r3, #1
 800c926:	4a3e      	ldr	r2, [pc, #248]	; (800ca20 <KFilterAdjust+0x470>)
 800c928:	6013      	str	r3, [r2, #0]
		if(arr_x > 2)	arr_x = 0;
 800c92a:	4b3d      	ldr	r3, [pc, #244]	; (800ca20 <KFilterAdjust+0x470>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	dd02      	ble.n	800c938 <KFilterAdjust+0x388>
 800c932:	4b3b      	ldr	r3, [pc, #236]	; (800ca20 <KFilterAdjust+0x470>)
 800c934:	2200      	movs	r2, #0
 800c936:	601a      	str	r2, [r3, #0]
		sprintf(data, "x = %d\n", arr_x);
 800c938:	4b39      	ldr	r3, [pc, #228]	; (800ca20 <KFilterAdjust+0x470>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	461a      	mov	r2, r3
 800c93e:	493c      	ldr	r1, [pc, #240]	; (800ca30 <KFilterAdjust+0x480>)
 800c940:	4829      	ldr	r0, [pc, #164]	; (800c9e8 <KFilterAdjust+0x438>)
 800c942:	f010 fff5 	bl	801d930 <siprintf>
		UARTSend
 800c946:	4928      	ldr	r1, [pc, #160]	; (800c9e8 <KFilterAdjust+0x438>)
 800c948:	4828      	ldr	r0, [pc, #160]	; (800c9ec <KFilterAdjust+0x43c>)
 800c94a:	f7f6 ffc1 	bl	80038d0 <UARTPrintString>
	}
	if(ps4.button == L1){
 800c94e:	4b29      	ldr	r3, [pc, #164]	; (800c9f4 <KFilterAdjust+0x444>)
 800c950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c956:	d10a      	bne.n	800c96e <KFilterAdjust+0x3be>
		while(ps4.button == L1){}
 800c958:	bf00      	nop
 800c95a:	4b26      	ldr	r3, [pc, #152]	; (800c9f4 <KFilterAdjust+0x444>)
 800c95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c95e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c962:	d0fa      	beq.n	800c95a <KFilterAdjust+0x3aa>
		num --;
 800c964:	4b2f      	ldr	r3, [pc, #188]	; (800ca24 <KFilterAdjust+0x474>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3b01      	subs	r3, #1
 800c96a:	4a2e      	ldr	r2, [pc, #184]	; (800ca24 <KFilterAdjust+0x474>)
 800c96c:	6013      	str	r3, [r2, #0]
	}
	if(ps4.button == R1){
 800c96e:	4b21      	ldr	r3, [pc, #132]	; (800c9f4 <KFilterAdjust+0x444>)
 800c970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c976:	d10a      	bne.n	800c98e <KFilterAdjust+0x3de>
		while(ps4.button == R1){}
 800c978:	bf00      	nop
 800c97a:	4b1e      	ldr	r3, [pc, #120]	; (800c9f4 <KFilterAdjust+0x444>)
 800c97c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c97e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c982:	d0fa      	beq.n	800c97a <KFilterAdjust+0x3ca>
		num ++;
 800c984:	4b27      	ldr	r3, [pc, #156]	; (800ca24 <KFilterAdjust+0x474>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3301      	adds	r3, #1
 800c98a:	4a26      	ldr	r2, [pc, #152]	; (800ca24 <KFilterAdjust+0x474>)
 800c98c:	6013      	str	r3, [r2, #0]
	}
	if(ps4.joyR_y > 0.5){
 800c98e:	4b19      	ldr	r3, [pc, #100]	; (800c9f4 <KFilterAdjust+0x444>)
 800c990:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800c994:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	dd53      	ble.n	800ca4a <KFilterAdjust+0x49a>
		num ++;
 800c9a2:	4b20      	ldr	r3, [pc, #128]	; (800ca24 <KFilterAdjust+0x474>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	4a1e      	ldr	r2, [pc, #120]	; (800ca24 <KFilterAdjust+0x474>)
 800c9aa:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800c9ac:	4b1d      	ldr	r3, [pc, #116]	; (800ca24 <KFilterAdjust+0x474>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	ee07 3a90 	vmov	s15, r3
 800c9b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ca34 <KFilterAdjust+0x484>
 800c9bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c9c0:	ee16 0a90 	vmov	r0, s13
 800c9c4:	f7f3 fdc0 	bl	8000548 <__aeabi_f2d>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	491a      	ldr	r1, [pc, #104]	; (800ca38 <KFilterAdjust+0x488>)
 800c9ce:	4806      	ldr	r0, [pc, #24]	; (800c9e8 <KFilterAdjust+0x438>)
 800c9d0:	f010 ffae 	bl	801d930 <siprintf>
 800c9d4:	e032      	b.n	800ca3c <KFilterAdjust+0x48c>
 800c9d6:	bf00      	nop
 800c9d8:	47ae147b 	.word	0x47ae147b
 800c9dc:	3f847ae1 	.word	0x3f847ae1
 800c9e0:	20000520 	.word	0x20000520
 800c9e4:	080224c4 	.word	0x080224c4
 800c9e8:	20006948 	.word	0x20006948
 800c9ec:	200067e4 	.word	0x200067e4
 800c9f0:	080224cc 	.word	0x080224cc
 800c9f4:	2000a0c8 	.word	0x2000a0c8
 800c9f8:	2000083c 	.word	0x2000083c
 800c9fc:	20000840 	.word	0x20000840
 800ca00:	20000838 	.word	0x20000838
 800ca04:	200070ec 	.word	0x200070ec
 800ca08:	20007700 	.word	0x20007700
 800ca0c:	20009690 	.word	0x20009690
 800ca10:	2000994c 	.word	0x2000994c
 800ca14:	20007190 	.word	0x20007190
 800ca18:	20009692 	.word	0x20009692
 800ca1c:	20000844 	.word	0x20000844
 800ca20:	20000848 	.word	0x20000848
 800ca24:	2000084c 	.word	0x2000084c
 800ca28:	080224d0 	.word	0x080224d0
 800ca2c:	080224ec 	.word	0x080224ec
 800ca30:	080224f4 	.word	0x080224f4
 800ca34:	42480000 	.word	0x42480000
 800ca38:	080224fc 	.word	0x080224fc
		UARTSend
 800ca3c:	491b      	ldr	r1, [pc, #108]	; (800caac <KFilterAdjust+0x4fc>)
 800ca3e:	481c      	ldr	r0, [pc, #112]	; (800cab0 <KFilterAdjust+0x500>)
 800ca40:	f7f6 ff46 	bl	80038d0 <UARTPrintString>
		Await(100);
 800ca44:	2064      	movs	r0, #100	; 0x64
 800ca46:	f000 fd35 	bl	800d4b4 <Await>
	}
	if(ps4.joyR_y < -0.5){
 800ca4a:	4b1a      	ldr	r3, [pc, #104]	; (800cab4 <KFilterAdjust+0x504>)
 800ca4c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800ca50:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800ca54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca5c:	d400      	bmi.n	800ca60 <KFilterAdjust+0x4b0>
		num --;
		sprintf(data, "num = %.3f\n", (float)num/50);
		UARTSend
		Await(100);
	}
}
 800ca5e:	e01f      	b.n	800caa0 <KFilterAdjust+0x4f0>
		num --;
 800ca60:	4b15      	ldr	r3, [pc, #84]	; (800cab8 <KFilterAdjust+0x508>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	3b01      	subs	r3, #1
 800ca66:	4a14      	ldr	r2, [pc, #80]	; (800cab8 <KFilterAdjust+0x508>)
 800ca68:	6013      	str	r3, [r2, #0]
		sprintf(data, "num = %.3f\n", (float)num/50);
 800ca6a:	4b13      	ldr	r3, [pc, #76]	; (800cab8 <KFilterAdjust+0x508>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca76:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800cabc <KFilterAdjust+0x50c>
 800ca7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ca7e:	ee16 0a90 	vmov	r0, s13
 800ca82:	f7f3 fd61 	bl	8000548 <__aeabi_f2d>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	490d      	ldr	r1, [pc, #52]	; (800cac0 <KFilterAdjust+0x510>)
 800ca8c:	4807      	ldr	r0, [pc, #28]	; (800caac <KFilterAdjust+0x4fc>)
 800ca8e:	f010 ff4f 	bl	801d930 <siprintf>
		UARTSend
 800ca92:	4906      	ldr	r1, [pc, #24]	; (800caac <KFilterAdjust+0x4fc>)
 800ca94:	4806      	ldr	r0, [pc, #24]	; (800cab0 <KFilterAdjust+0x500>)
 800ca96:	f7f6 ff1b 	bl	80038d0 <UARTPrintString>
		Await(100);
 800ca9a:	2064      	movs	r0, #100	; 0x64
 800ca9c:	f000 fd0a 	bl	800d4b4 <Await>
}
 800caa0:	bf00      	nop
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caaa:	bf00      	nop
 800caac:	20006948 	.word	0x20006948
 800cab0:	200067e4 	.word	0x200067e4
 800cab4:	2000a0c8 	.word	0x2000a0c8
 800cab8:	2000084c 	.word	0x2000084c
 800cabc:	42480000 	.word	0x42480000
 800cac0:	080224fc 	.word	0x080224fc
 800cac4:	00000000 	.word	0x00000000

0800cac8 <enq>:

void enq (void){
 800cac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cacc:	b088      	sub	sp, #32
 800cace:	af06      	add	r7, sp, #24
	switch(n){
 800cad0:	4bab      	ldr	r3, [pc, #684]	; (800cd80 <enq+0x2b8>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	2b09      	cmp	r3, #9
 800cad8:	f200 84be 	bhi.w	800d458 <enq+0x990>
 800cadc:	a201      	add	r2, pc, #4	; (adr r2, 800cae4 <enq+0x1c>)
 800cade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae2:	bf00      	nop
 800cae4:	0800cb0d 	.word	0x0800cb0d
 800cae8:	0800cd65 	.word	0x0800cd65
 800caec:	0800d459 	.word	0x0800d459
 800caf0:	0800cf43 	.word	0x0800cf43
 800caf4:	0800d459 	.word	0x0800d459
 800caf8:	0800d2f7 	.word	0x0800d2f7
 800cafc:	0800d459 	.word	0x0800d459
 800cb00:	0800d3a5 	.word	0x0800d3a5
 800cb04:	0800d459 	.word	0x0800d459
 800cb08:	0800d3d1 	.word	0x0800d3d1
	case 1:
		sprintf(data, "short press SQUARE to set 12.5cm\n");
 800cb0c:	499d      	ldr	r1, [pc, #628]	; (800cd84 <enq+0x2bc>)
 800cb0e:	489e      	ldr	r0, [pc, #632]	; (800cd88 <enq+0x2c0>)
 800cb10:	f010 ff0e 	bl	801d930 <siprintf>
		UARTSend
 800cb14:	499c      	ldr	r1, [pc, #624]	; (800cd88 <enq+0x2c0>)
 800cb16:	489d      	ldr	r0, [pc, #628]	; (800cd8c <enq+0x2c4>)
 800cb18:	f7f6 feda 	bl	80038d0 <UARTPrintString>
		Await(50);
 800cb1c:	2032      	movs	r0, #50	; 0x32
 800cb1e:	f000 fcc9 	bl	800d4b4 <Await>
		sprintf(data, "or long press SQUARE (>2s) to set 15cm\n");
 800cb22:	499b      	ldr	r1, [pc, #620]	; (800cd90 <enq+0x2c8>)
 800cb24:	4898      	ldr	r0, [pc, #608]	; (800cd88 <enq+0x2c0>)
 800cb26:	f010 ff03 	bl	801d930 <siprintf>
		UARTSend
 800cb2a:	4997      	ldr	r1, [pc, #604]	; (800cd88 <enq+0x2c0>)
 800cb2c:	4897      	ldr	r0, [pc, #604]	; (800cd8c <enq+0x2c4>)
 800cb2e:	f7f6 fecf 	bl	80038d0 <UARTPrintString>
		Await(50);
 800cb32:	2032      	movs	r0, #50	; 0x32
 800cb34:	f000 fcbe 	bl	800d4b4 <Await>
		while(ps4.button != SQUARE);
 800cb38:	bf00      	nop
 800cb3a:	4b96      	ldr	r3, [pc, #600]	; (800cd94 <enq+0x2cc>)
 800cb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb42:	d1fa      	bne.n	800cb3a <enq+0x72>
		uint32_t tick = HAL_GetTick();
 800cb44:	f004 feb6 	bl	80118b4 <HAL_GetTick>
 800cb48:	6078      	str	r0, [r7, #4]
		while(ps4.button == SQUARE){
 800cb4a:	e01d      	b.n	800cb88 <enq+0xc0>
			sprintf(data, "time: %.3f\n", (float)(HAL_GetTick() - tick) / 1000);
 800cb4c:	f004 feb2 	bl	80118b4 <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800cd98 <enq+0x2d0>
 800cb62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cb66:	ee16 0a90 	vmov	r0, s13
 800cb6a:	f7f3 fced 	bl	8000548 <__aeabi_f2d>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	498a      	ldr	r1, [pc, #552]	; (800cd9c <enq+0x2d4>)
 800cb74:	4884      	ldr	r0, [pc, #528]	; (800cd88 <enq+0x2c0>)
 800cb76:	f010 fedb 	bl	801d930 <siprintf>
			UARTSend
 800cb7a:	4983      	ldr	r1, [pc, #524]	; (800cd88 <enq+0x2c0>)
 800cb7c:	4883      	ldr	r0, [pc, #524]	; (800cd8c <enq+0x2c4>)
 800cb7e:	f7f6 fea7 	bl	80038d0 <UARTPrintString>
			Await(250);
 800cb82:	20fa      	movs	r0, #250	; 0xfa
 800cb84:	f000 fc96 	bl	800d4b4 <Await>
		while(ps4.button == SQUARE){
 800cb88:	4b82      	ldr	r3, [pc, #520]	; (800cd94 <enq+0x2cc>)
 800cb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb90:	d0dc      	beq.n	800cb4c <enq+0x84>
		}
		diameter = (HAL_GetTick() - tick > 2000)? 0.150: 0.125;
 800cb92:	f004 fe8f 	bl	80118b4 <HAL_GetTick>
 800cb96:	4602      	mov	r2, r0
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800cba0:	d901      	bls.n	800cba6 <enq+0xde>
 800cba2:	4b7f      	ldr	r3, [pc, #508]	; (800cda0 <enq+0x2d8>)
 800cba4:	e001      	b.n	800cbaa <enq+0xe2>
 800cba6:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 800cbaa:	4a7e      	ldr	r2, [pc, #504]	; (800cda4 <enq+0x2dc>)
 800cbac:	6013      	str	r3, [r2, #0]
		sprintf(data, "diameter = %f\n", diameter);
 800cbae:	4b7d      	ldr	r3, [pc, #500]	; (800cda4 <enq+0x2dc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f3 fcc8 	bl	8000548 <__aeabi_f2d>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	497a      	ldr	r1, [pc, #488]	; (800cda8 <enq+0x2e0>)
 800cbbe:	4872      	ldr	r0, [pc, #456]	; (800cd88 <enq+0x2c0>)
 800cbc0:	f010 feb6 	bl	801d930 <siprintf>
		UARTSend
 800cbc4:	4970      	ldr	r1, [pc, #448]	; (800cd88 <enq+0x2c0>)
 800cbc6:	4871      	ldr	r0, [pc, #452]	; (800cd8c <enq+0x2c4>)
 800cbc8:	f7f6 fe82 	bl	80038d0 <UARTPrintString>
		Await(20);
 800cbcc:	2014      	movs	r0, #20
 800cbce:	f000 fc71 	bl	800d4b4 <Await>
		sprintf(data, "2s later start get pulse\n");
 800cbd2:	4976      	ldr	r1, [pc, #472]	; (800cdac <enq+0x2e4>)
 800cbd4:	486c      	ldr	r0, [pc, #432]	; (800cd88 <enq+0x2c0>)
 800cbd6:	f010 feab 	bl	801d930 <siprintf>
		UARTSend
 800cbda:	496b      	ldr	r1, [pc, #428]	; (800cd88 <enq+0x2c0>)
 800cbdc:	486b      	ldr	r0, [pc, #428]	; (800cd8c <enq+0x2c4>)
 800cbde:	f7f6 fe77 	bl	80038d0 <UARTPrintString>
		Await(20);
 800cbe2:	2014      	movs	r0, #20
 800cbe4:	f000 fc66 	bl	800d4b4 <Await>
		RNSSet(&rns, RNS_F_KCD_PTD, 1.0, diameter * 3.142 / 1.0);
 800cbe8:	4b6e      	ldr	r3, [pc, #440]	; (800cda4 <enq+0x2dc>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f3 fcab 	bl	8000548 <__aeabi_f2d>
 800cbf2:	a35f      	add	r3, pc, #380	; (adr r3, 800cd70 <enq+0x2a8>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 fcfe 	bl	80005f8 <__aeabi_dmul>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	e9cd 2300 	strd	r2, r3, [sp]
 800cc04:	f04f 0200 	mov.w	r2, #0
 800cc08:	4b69      	ldr	r3, [pc, #420]	; (800cdb0 <enq+0x2e8>)
 800cc0a:	211f      	movs	r1, #31
 800cc0c:	4869      	ldr	r0, [pc, #420]	; (800cdb4 <enq+0x2ec>)
 800cc0e:	f7f9 ffa9 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_KCD_PTD, 1.0, diameter * 3.142 / 1.0);
 800cc12:	4b64      	ldr	r3, [pc, #400]	; (800cda4 <enq+0x2dc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7f3 fc96 	bl	8000548 <__aeabi_f2d>
 800cc1c:	a354      	add	r3, pc, #336	; (adr r3, 800cd70 <enq+0x2a8>)
 800cc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc22:	f7f3 fce9 	bl	80005f8 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	e9cd 2300 	strd	r2, r3, [sp]
 800cc2e:	f04f 0200 	mov.w	r2, #0
 800cc32:	4b5f      	ldr	r3, [pc, #380]	; (800cdb0 <enq+0x2e8>)
 800cc34:	2120      	movs	r1, #32
 800cc36:	485f      	ldr	r0, [pc, #380]	; (800cdb4 <enq+0x2ec>)
 800cc38:	f7f9 ff94 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / 1.0 , 19999.0);
 800cc3c:	a34e      	add	r3, pc, #312	; (adr r3, 800cd78 <enq+0x2b0>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc46:	f04f 0200 	mov.w	r2, #0
 800cc4a:	4b59      	ldr	r3, [pc, #356]	; (800cdb0 <enq+0x2e8>)
 800cc4c:	e9cd 2300 	strd	r2, r3, [sp]
 800cc50:	f04f 0200 	mov.w	r2, #0
 800cc54:	4b56      	ldr	r3, [pc, #344]	; (800cdb0 <enq+0x2e8>)
 800cc56:	212b      	movs	r1, #43	; 0x2b
 800cc58:	4856      	ldr	r0, [pc, #344]	; (800cdb4 <enq+0x2ec>)
 800cc5a:	f7f9 ff83 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800cc5e:	a346      	add	r3, pc, #280	; (adr r3, 800cd78 <enq+0x2b0>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc68:	f04f 0200 	mov.w	r2, #0
 800cc6c:	4b50      	ldr	r3, [pc, #320]	; (800cdb0 <enq+0x2e8>)
 800cc6e:	e9cd 2300 	strd	r2, r3, [sp]
 800cc72:	f04f 0200 	mov.w	r2, #0
 800cc76:	4b4e      	ldr	r3, [pc, #312]	; (800cdb0 <enq+0x2e8>)
 800cc78:	212c      	movs	r1, #44	; 0x2c
 800cc7a:	484e      	ldr	r0, [pc, #312]	; (800cdb4 <enq+0x2ec>)
 800cc7c:	f7f9 ff72 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800cc80:	a33d      	add	r3, pc, #244	; (adr r3, 800cd78 <enq+0x2b0>)
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	4b48      	ldr	r3, [pc, #288]	; (800cdb0 <enq+0x2e8>)
 800cc90:	e9cd 2300 	strd	r2, r3, [sp]
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	4b45      	ldr	r3, [pc, #276]	; (800cdb0 <enq+0x2e8>)
 800cc9a:	212d      	movs	r1, #45	; 0x2d
 800cc9c:	4845      	ldr	r0, [pc, #276]	; (800cdb4 <enq+0x2ec>)
 800cc9e:	f7f9 ff61 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / 1.0, 19999.0);
 800cca2:	a335      	add	r3, pc, #212	; (adr r3, 800cd78 <enq+0x2b0>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccac:	f04f 0200 	mov.w	r2, #0
 800ccb0:	4b3f      	ldr	r3, [pc, #252]	; (800cdb0 <enq+0x2e8>)
 800ccb2:	e9cd 2300 	strd	r2, r3, [sp]
 800ccb6:	f04f 0200 	mov.w	r2, #0
 800ccba:	4b3d      	ldr	r3, [pc, #244]	; (800cdb0 <enq+0x2e8>)
 800ccbc:	212e      	movs	r1, #46	; 0x2e
 800ccbe:	483d      	ldr	r0, [pc, #244]	; (800cdb4 <enq+0x2ec>)
 800ccc0:	f7f9 ff50 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_F_LEFT_VEL_PID,  1.5, 1.0, 0.0);
 800ccc4:	f04f 0200 	mov.w	r2, #0
 800ccc8:	f04f 0300 	mov.w	r3, #0
 800cccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccd0:	f04f 0200 	mov.w	r2, #0
 800ccd4:	4b36      	ldr	r3, [pc, #216]	; (800cdb0 <enq+0x2e8>)
 800ccd6:	e9cd 2300 	strd	r2, r3, [sp]
 800ccda:	f04f 0200 	mov.w	r2, #0
 800ccde:	4b36      	ldr	r3, [pc, #216]	; (800cdb8 <enq+0x2f0>)
 800cce0:	212f      	movs	r1, #47	; 0x2f
 800cce2:	4834      	ldr	r0, [pc, #208]	; (800cdb4 <enq+0x2ec>)
 800cce4:	f7f9 ff3e 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_PID, 1.5, 1.0, 0.0);
 800cce8:	f04f 0200 	mov.w	r2, #0
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ccf4:	f04f 0200 	mov.w	r2, #0
 800ccf8:	4b2d      	ldr	r3, [pc, #180]	; (800cdb0 <enq+0x2e8>)
 800ccfa:	e9cd 2300 	strd	r2, r3, [sp]
 800ccfe:	f04f 0200 	mov.w	r2, #0
 800cd02:	4b2d      	ldr	r3, [pc, #180]	; (800cdb8 <enq+0x2f0>)
 800cd04:	2130      	movs	r1, #48	; 0x30
 800cd06:	482b      	ldr	r0, [pc, #172]	; (800cdb4 <enq+0x2ec>)
 800cd08:	f7f9 ff2c 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_PID,  1.5, 1.0, 0.0);
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	f04f 0300 	mov.w	r3, #0
 800cd14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd18:	f04f 0200 	mov.w	r2, #0
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <enq+0x2e8>)
 800cd1e:	e9cd 2300 	strd	r2, r3, [sp]
 800cd22:	f04f 0200 	mov.w	r2, #0
 800cd26:	4b24      	ldr	r3, [pc, #144]	; (800cdb8 <enq+0x2f0>)
 800cd28:	2131      	movs	r1, #49	; 0x31
 800cd2a:	4822      	ldr	r0, [pc, #136]	; (800cdb4 <enq+0x2ec>)
 800cd2c:	f7f9 ff1a 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_PID,  1.5, 1.0, 0.0);
 800cd30:	f04f 0200 	mov.w	r2, #0
 800cd34:	f04f 0300 	mov.w	r3, #0
 800cd38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	4b1b      	ldr	r3, [pc, #108]	; (800cdb0 <enq+0x2e8>)
 800cd42:	e9cd 2300 	strd	r2, r3, [sp]
 800cd46:	f04f 0200 	mov.w	r2, #0
 800cd4a:	4b1b      	ldr	r3, [pc, #108]	; (800cdb8 <enq+0x2f0>)
 800cd4c:	2132      	movs	r1, #50	; 0x32
 800cd4e:	4819      	ldr	r0, [pc, #100]	; (800cdb4 <enq+0x2ec>)
 800cd50:	f7f9 ff08 	bl	8006b64 <RNSSet>
		Await(2000);
 800cd54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800cd58:	f000 fbac 	bl	800d4b4 <Await>
		n = 2;
 800cd5c:	4b08      	ldr	r3, [pc, #32]	; (800cd80 <enq+0x2b8>)
 800cd5e:	2202      	movs	r2, #2
 800cd60:	601a      	str	r2, [r3, #0]
		break;
 800cd62:	e379      	b.n	800d458 <enq+0x990>

	case 2:
		RNSSet(&rns, RNS_RESET_POS);
 800cd64:	2114      	movs	r1, #20
 800cd66:	4813      	ldr	r0, [pc, #76]	; (800cdb4 <enq+0x2ec>)
 800cd68:	f7f9 fefc 	bl	8006b64 <RNSSet>
		while(ps4.button != SQUARE){
 800cd6c:	e069      	b.n	800ce42 <enq+0x37a>
 800cd6e:	bf00      	nop
 800cd70:	e5604189 	.word	0xe5604189
 800cd74:	400922d0 	.word	0x400922d0
 800cd78:	00000000 	.word	0x00000000
 800cd7c:	40d387c0 	.word	0x40d387c0
 800cd80:	20007508 	.word	0x20007508
 800cd84:	08022508 	.word	0x08022508
 800cd88:	20006948 	.word	0x20006948
 800cd8c:	200067e4 	.word	0x200067e4
 800cd90:	0802252c 	.word	0x0802252c
 800cd94:	2000a0c8 	.word	0x2000a0c8
 800cd98:	447a0000 	.word	0x447a0000
 800cd9c:	08022554 	.word	0x08022554
 800cda0:	3e19999a 	.word	0x3e19999a
 800cda4:	200079f8 	.word	0x200079f8
 800cda8:	08022560 	.word	0x08022560
 800cdac:	08022570 	.word	0x08022570
 800cdb0:	3ff00000 	.word	0x3ff00000
 800cdb4:	200091e8 	.word	0x200091e8
 800cdb8:	3ff80000 	.word	0x3ff80000
			RNSEnquire(RNS_POS_BOTH, &rns);
 800cdbc:	4966      	ldr	r1, [pc, #408]	; (800cf58 <enq+0x490>)
 800cdbe:	2056      	movs	r0, #86	; 0x56
 800cdc0:	f7fa f83c 	bl	8006e3c <RNSEnquire>
			pa = rns.enq.enq_buffer[0].data;
 800cdc4:	4b64      	ldr	r3, [pc, #400]	; (800cf58 <enq+0x490>)
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc8:	4a64      	ldr	r2, [pc, #400]	; (800cf5c <enq+0x494>)
 800cdca:	6013      	str	r3, [r2, #0]
			pb = rns.enq.enq_buffer[1].data;
 800cdcc:	4b62      	ldr	r3, [pc, #392]	; (800cf58 <enq+0x490>)
 800cdce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd0:	4a63      	ldr	r2, [pc, #396]	; (800cf60 <enq+0x498>)
 800cdd2:	6013      	str	r3, [r2, #0]
			pc = rns.enq.enq_buffer[2].data;
 800cdd4:	4b60      	ldr	r3, [pc, #384]	; (800cf58 <enq+0x490>)
 800cdd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdd8:	4a62      	ldr	r2, [pc, #392]	; (800cf64 <enq+0x49c>)
 800cdda:	6013      	str	r3, [r2, #0]
			pd = rns.enq.enq_buffer[3].data;
 800cddc:	4b5e      	ldr	r3, [pc, #376]	; (800cf58 <enq+0x490>)
 800cdde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cde0:	4a61      	ldr	r2, [pc, #388]	; (800cf68 <enq+0x4a0>)
 800cde2:	6013      	str	r3, [r2, #0]
			sprintf(data, "pulse: %.3f, %.3f, %.3f, %.3f\n", pa, pb, pc, pd);
 800cde4:	4b5d      	ldr	r3, [pc, #372]	; (800cf5c <enq+0x494>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f3 fbad 	bl	8000548 <__aeabi_f2d>
 800cdee:	4682      	mov	sl, r0
 800cdf0:	468b      	mov	fp, r1
 800cdf2:	4b5b      	ldr	r3, [pc, #364]	; (800cf60 <enq+0x498>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f3 fba6 	bl	8000548 <__aeabi_f2d>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	460d      	mov	r5, r1
 800ce00:	4b58      	ldr	r3, [pc, #352]	; (800cf64 <enq+0x49c>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f3 fb9f 	bl	8000548 <__aeabi_f2d>
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	4689      	mov	r9, r1
 800ce0e:	4b56      	ldr	r3, [pc, #344]	; (800cf68 <enq+0x4a0>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f3 fb98 	bl	8000548 <__aeabi_f2d>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce20:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ce24:	e9cd 4500 	strd	r4, r5, [sp]
 800ce28:	4652      	mov	r2, sl
 800ce2a:	465b      	mov	r3, fp
 800ce2c:	494f      	ldr	r1, [pc, #316]	; (800cf6c <enq+0x4a4>)
 800ce2e:	4850      	ldr	r0, [pc, #320]	; (800cf70 <enq+0x4a8>)
 800ce30:	f010 fd7e 	bl	801d930 <siprintf>
			UARTSend
 800ce34:	494e      	ldr	r1, [pc, #312]	; (800cf70 <enq+0x4a8>)
 800ce36:	484f      	ldr	r0, [pc, #316]	; (800cf74 <enq+0x4ac>)
 800ce38:	f7f6 fd4a 	bl	80038d0 <UARTPrintString>
			Await(20);
 800ce3c:	2014      	movs	r0, #20
 800ce3e:	f000 fb39 	bl	800d4b4 <Await>
		while(ps4.button != SQUARE){
 800ce42:	4b4d      	ldr	r3, [pc, #308]	; (800cf78 <enq+0x4b0>)
 800ce44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce4a:	d1b7      	bne.n	800cdbc <enq+0x2f4>
		}
		while(ps4.button == SQUARE);
 800ce4c:	bf00      	nop
 800ce4e:	4b4a      	ldr	r3, [pc, #296]	; (800cf78 <enq+0x4b0>)
 800ce50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce56:	d0fa      	beq.n	800ce4e <enq+0x386>
		RNSSet(&rns, RNS_F_KCD_PTD, pa / pb, diameter * 31.4159 / pa);
 800ce58:	4b40      	ldr	r3, [pc, #256]	; (800cf5c <enq+0x494>)
 800ce5a:	ed93 7a00 	vldr	s14, [r3]
 800ce5e:	4b40      	ldr	r3, [pc, #256]	; (800cf60 <enq+0x498>)
 800ce60:	edd3 7a00 	vldr	s15, [r3]
 800ce64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce68:	ee16 0a90 	vmov	r0, s13
 800ce6c:	f7f3 fb6c 	bl	8000548 <__aeabi_f2d>
 800ce70:	4604      	mov	r4, r0
 800ce72:	460d      	mov	r5, r1
 800ce74:	4b41      	ldr	r3, [pc, #260]	; (800cf7c <enq+0x4b4>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7f3 fb65 	bl	8000548 <__aeabi_f2d>
 800ce7e:	a334      	add	r3, pc, #208	; (adr r3, 800cf50 <enq+0x488>)
 800ce80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce84:	f7f3 fbb8 	bl	80005f8 <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4690      	mov	r8, r2
 800ce8e:	4699      	mov	r9, r3
 800ce90:	4b32      	ldr	r3, [pc, #200]	; (800cf5c <enq+0x494>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7f3 fb57 	bl	8000548 <__aeabi_f2d>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4640      	mov	r0, r8
 800cea0:	4649      	mov	r1, r9
 800cea2:	f7f3 fcd3 	bl	800084c <__aeabi_ddiv>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	e9cd 2300 	strd	r2, r3, [sp]
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	211f      	movs	r1, #31
 800ceb4:	4828      	ldr	r0, [pc, #160]	; (800cf58 <enq+0x490>)
 800ceb6:	f7f9 fe55 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_KCD_PTD, pc / pd, diameter * 31.4159 / pc);
 800ceba:	4b2a      	ldr	r3, [pc, #168]	; (800cf64 <enq+0x49c>)
 800cebc:	ed93 7a00 	vldr	s14, [r3]
 800cec0:	4b29      	ldr	r3, [pc, #164]	; (800cf68 <enq+0x4a0>)
 800cec2:	edd3 7a00 	vldr	s15, [r3]
 800cec6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ceca:	ee16 0a90 	vmov	r0, s13
 800cece:	f7f3 fb3b 	bl	8000548 <__aeabi_f2d>
 800ced2:	4604      	mov	r4, r0
 800ced4:	460d      	mov	r5, r1
 800ced6:	4b29      	ldr	r3, [pc, #164]	; (800cf7c <enq+0x4b4>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7f3 fb34 	bl	8000548 <__aeabi_f2d>
 800cee0:	a31b      	add	r3, pc, #108	; (adr r3, 800cf50 <enq+0x488>)
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f3 fb87 	bl	80005f8 <__aeabi_dmul>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4690      	mov	r8, r2
 800cef0:	4699      	mov	r9, r3
 800cef2:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <enq+0x49c>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f3 fb26 	bl	8000548 <__aeabi_f2d>
 800cefc:	4602      	mov	r2, r0
 800cefe:	460b      	mov	r3, r1
 800cf00:	4640      	mov	r0, r8
 800cf02:	4649      	mov	r1, r9
 800cf04:	f7f3 fca2 	bl	800084c <__aeabi_ddiv>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	e9cd 2300 	strd	r2, r3, [sp]
 800cf10:	4622      	mov	r2, r4
 800cf12:	462b      	mov	r3, r5
 800cf14:	2120      	movs	r1, #32
 800cf16:	4810      	ldr	r0, [pc, #64]	; (800cf58 <enq+0x490>)
 800cf18:	f7f9 fe24 	bl	8006b64 <RNSSet>
		Await(600);
 800cf1c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800cf20:	f000 fac8 	bl	800d4b4 <Await>
		sprintf(data, "kcd & ptd set, press SQUARE to get the max velocity\n");
 800cf24:	4916      	ldr	r1, [pc, #88]	; (800cf80 <enq+0x4b8>)
 800cf26:	4812      	ldr	r0, [pc, #72]	; (800cf70 <enq+0x4a8>)
 800cf28:	f010 fd02 	bl	801d930 <siprintf>
		UARTSend
 800cf2c:	4910      	ldr	r1, [pc, #64]	; (800cf70 <enq+0x4a8>)
 800cf2e:	4811      	ldr	r0, [pc, #68]	; (800cf74 <enq+0x4ac>)
 800cf30:	f7f6 fcce 	bl	80038d0 <UARTPrintString>
		Await(20);
 800cf34:	2014      	movs	r0, #20
 800cf36:	f000 fabd 	bl	800d4b4 <Await>
		n = 3;
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <enq+0x4bc>)
 800cf3c:	2203      	movs	r2, #3
 800cf3e:	601a      	str	r2, [r3, #0]
		break;
 800cf40:	e28a      	b.n	800d458 <enq+0x990>

	case 4:
		RNSSet(&rns, RNS_RESET_POS);
 800cf42:	2114      	movs	r1, #20
 800cf44:	4804      	ldr	r0, [pc, #16]	; (800cf58 <enq+0x490>)
 800cf46:	f7f9 fe0d 	bl	8006b64 <RNSSet>
		while(ps4.button != SQUARE){
 800cf4a:	e09c      	b.n	800d086 <enq+0x5be>
 800cf4c:	f3af 8000 	nop.w
 800cf50:	6c22680a 	.word	0x6c22680a
 800cf54:	403f6a78 	.word	0x403f6a78
 800cf58:	200091e8 	.word	0x200091e8
 800cf5c:	2000a490 	.word	0x2000a490
 800cf60:	2000925c 	.word	0x2000925c
 800cf64:	20009e98 	.word	0x20009e98
 800cf68:	2000947c 	.word	0x2000947c
 800cf6c:	0802258c 	.word	0x0802258c
 800cf70:	20006948 	.word	0x20006948
 800cf74:	200067e4 	.word	0x200067e4
 800cf78:	2000a0c8 	.word	0x2000a0c8
 800cf7c:	200079f8 	.word	0x200079f8
 800cf80:	080225ac 	.word	0x080225ac
 800cf84:	20007508 	.word	0x20007508
			RNSEnquire(RNS_VEL_BOTH, &rns);
 800cf88:	49b1      	ldr	r1, [pc, #708]	; (800d250 <enq+0x788>)
 800cf8a:	2057      	movs	r0, #87	; 0x57
 800cf8c:	f7f9 ff56 	bl	8006e3c <RNSEnquire>
			a = rns.enq.enq_buffer[0].data;
 800cf90:	4baf      	ldr	r3, [pc, #700]	; (800d250 <enq+0x788>)
 800cf92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf94:	4aaf      	ldr	r2, [pc, #700]	; (800d254 <enq+0x78c>)
 800cf96:	6013      	str	r3, [r2, #0]
			b = rns.enq.enq_buffer[1].data;
 800cf98:	4bad      	ldr	r3, [pc, #692]	; (800d250 <enq+0x788>)
 800cf9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9c:	4aae      	ldr	r2, [pc, #696]	; (800d258 <enq+0x790>)
 800cf9e:	6013      	str	r3, [r2, #0]
			c = rns.enq.enq_buffer[2].data;
 800cfa0:	4bab      	ldr	r3, [pc, #684]	; (800d250 <enq+0x788>)
 800cfa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfa4:	4aad      	ldr	r2, [pc, #692]	; (800d25c <enq+0x794>)
 800cfa6:	6013      	str	r3, [r2, #0]
			d = rns.enq.enq_buffer[3].data;
 800cfa8:	4ba9      	ldr	r3, [pc, #676]	; (800d250 <enq+0x788>)
 800cfaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfac:	4aac      	ldr	r2, [pc, #688]	; (800d260 <enq+0x798>)
 800cfae:	6013      	str	r3, [r2, #0]
			if(a > v1)		v1 = a;
 800cfb0:	4ba8      	ldr	r3, [pc, #672]	; (800d254 <enq+0x78c>)
 800cfb2:	ed93 7a00 	vldr	s14, [r3]
 800cfb6:	4bab      	ldr	r3, [pc, #684]	; (800d264 <enq+0x79c>)
 800cfb8:	edd3 7a00 	vldr	s15, [r3]
 800cfbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc4:	dd03      	ble.n	800cfce <enq+0x506>
 800cfc6:	4ba3      	ldr	r3, [pc, #652]	; (800d254 <enq+0x78c>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4aa6      	ldr	r2, [pc, #664]	; (800d264 <enq+0x79c>)
 800cfcc:	6013      	str	r3, [r2, #0]
			if(b > v2)		v2 = b;
 800cfce:	4ba2      	ldr	r3, [pc, #648]	; (800d258 <enq+0x790>)
 800cfd0:	ed93 7a00 	vldr	s14, [r3]
 800cfd4:	4ba4      	ldr	r3, [pc, #656]	; (800d268 <enq+0x7a0>)
 800cfd6:	edd3 7a00 	vldr	s15, [r3]
 800cfda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	dd03      	ble.n	800cfec <enq+0x524>
 800cfe4:	4b9c      	ldr	r3, [pc, #624]	; (800d258 <enq+0x790>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a9f      	ldr	r2, [pc, #636]	; (800d268 <enq+0x7a0>)
 800cfea:	6013      	str	r3, [r2, #0]
			if(c > v3)		v3 = c;
 800cfec:	4b9b      	ldr	r3, [pc, #620]	; (800d25c <enq+0x794>)
 800cfee:	ed93 7a00 	vldr	s14, [r3]
 800cff2:	4b9e      	ldr	r3, [pc, #632]	; (800d26c <enq+0x7a4>)
 800cff4:	edd3 7a00 	vldr	s15, [r3]
 800cff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d000:	dd03      	ble.n	800d00a <enq+0x542>
 800d002:	4b96      	ldr	r3, [pc, #600]	; (800d25c <enq+0x794>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a99      	ldr	r2, [pc, #612]	; (800d26c <enq+0x7a4>)
 800d008:	6013      	str	r3, [r2, #0]
			if(d > v4)		v4 = d;
 800d00a:	4b95      	ldr	r3, [pc, #596]	; (800d260 <enq+0x798>)
 800d00c:	ed93 7a00 	vldr	s14, [r3]
 800d010:	4b97      	ldr	r3, [pc, #604]	; (800d270 <enq+0x7a8>)
 800d012:	edd3 7a00 	vldr	s15, [r3]
 800d016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d01e:	dd03      	ble.n	800d028 <enq+0x560>
 800d020:	4b8f      	ldr	r3, [pc, #572]	; (800d260 <enq+0x798>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a92      	ldr	r2, [pc, #584]	; (800d270 <enq+0x7a8>)
 800d026:	6013      	str	r3, [r2, #0]
			sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", v1, v2, v3, v4);
 800d028:	4b8e      	ldr	r3, [pc, #568]	; (800d264 <enq+0x79c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7f3 fa8b 	bl	8000548 <__aeabi_f2d>
 800d032:	4682      	mov	sl, r0
 800d034:	468b      	mov	fp, r1
 800d036:	4b8c      	ldr	r3, [pc, #560]	; (800d268 <enq+0x7a0>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7f3 fa84 	bl	8000548 <__aeabi_f2d>
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	4b89      	ldr	r3, [pc, #548]	; (800d26c <enq+0x7a4>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4618      	mov	r0, r3
 800d04a:	f7f3 fa7d 	bl	8000548 <__aeabi_f2d>
 800d04e:	4680      	mov	r8, r0
 800d050:	4689      	mov	r9, r1
 800d052:	4b87      	ldr	r3, [pc, #540]	; (800d270 <enq+0x7a8>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	4618      	mov	r0, r3
 800d058:	f7f3 fa76 	bl	8000548 <__aeabi_f2d>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d064:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d068:	e9cd 4500 	strd	r4, r5, [sp]
 800d06c:	4652      	mov	r2, sl
 800d06e:	465b      	mov	r3, fp
 800d070:	4980      	ldr	r1, [pc, #512]	; (800d274 <enq+0x7ac>)
 800d072:	4881      	ldr	r0, [pc, #516]	; (800d278 <enq+0x7b0>)
 800d074:	f010 fc5c 	bl	801d930 <siprintf>
			UARTSend
 800d078:	497f      	ldr	r1, [pc, #508]	; (800d278 <enq+0x7b0>)
 800d07a:	4880      	ldr	r0, [pc, #512]	; (800d27c <enq+0x7b4>)
 800d07c:	f7f6 fc28 	bl	80038d0 <UARTPrintString>
			Await(20);
 800d080:	2014      	movs	r0, #20
 800d082:	f000 fa17 	bl	800d4b4 <Await>
		while(ps4.button != SQUARE){
 800d086:	4b7e      	ldr	r3, [pc, #504]	; (800d280 <enq+0x7b8>)
 800d088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d08e:	f47f af7b 	bne.w	800cf88 <enq+0x4c0>
		}
		while(ps4.button == SQUARE);
 800d092:	bf00      	nop
 800d094:	4b7a      	ldr	r3, [pc, #488]	; (800d280 <enq+0x7b8>)
 800d096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d09c:	d0fa      	beq.n	800d094 <enq+0x5cc>
		RNSSet(&rns, RNS_F_LEFT_VEL_SATEU, 1.0, 1.0 / v1, 19999.0);
 800d09e:	4b71      	ldr	r3, [pc, #452]	; (800d264 <enq+0x79c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7f3 fa50 	bl	8000548 <__aeabi_f2d>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	460b      	mov	r3, r1
 800d0ac:	f04f 0000 	mov.w	r0, #0
 800d0b0:	4974      	ldr	r1, [pc, #464]	; (800d284 <enq+0x7bc>)
 800d0b2:	f7f3 fbcb 	bl	800084c <__aeabi_ddiv>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	4610      	mov	r0, r2
 800d0bc:	4619      	mov	r1, r3
 800d0be:	a362      	add	r3, pc, #392	; (adr r3, 800d248 <enq+0x780>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0c8:	e9cd 0100 	strd	r0, r1, [sp]
 800d0cc:	f04f 0200 	mov.w	r2, #0
 800d0d0:	4b6c      	ldr	r3, [pc, #432]	; (800d284 <enq+0x7bc>)
 800d0d2:	212b      	movs	r1, #43	; 0x2b
 800d0d4:	485e      	ldr	r0, [pc, #376]	; (800d250 <enq+0x788>)
 800d0d6:	f7f9 fd45 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_F_RIGHT_VEL_SATEU, 1.0, 1.0 / v2, 19999.0);
 800d0da:	4b63      	ldr	r3, [pc, #396]	; (800d268 <enq+0x7a0>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7f3 fa32 	bl	8000548 <__aeabi_f2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	f04f 0000 	mov.w	r0, #0
 800d0ec:	4965      	ldr	r1, [pc, #404]	; (800d284 <enq+0x7bc>)
 800d0ee:	f7f3 fbad 	bl	800084c <__aeabi_ddiv>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	a353      	add	r3, pc, #332	; (adr r3, 800d248 <enq+0x780>)
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d104:	e9cd 0100 	strd	r0, r1, [sp]
 800d108:	f04f 0200 	mov.w	r2, #0
 800d10c:	4b5d      	ldr	r3, [pc, #372]	; (800d284 <enq+0x7bc>)
 800d10e:	212c      	movs	r1, #44	; 0x2c
 800d110:	484f      	ldr	r0, [pc, #316]	; (800d250 <enq+0x788>)
 800d112:	f7f9 fd27 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_LEFT_VEL_SATEU, 1.0, 1.0 / v3, 19999.0);
 800d116:	4b55      	ldr	r3, [pc, #340]	; (800d26c <enq+0x7a4>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f3 fa14 	bl	8000548 <__aeabi_f2d>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	f04f 0000 	mov.w	r0, #0
 800d128:	4956      	ldr	r1, [pc, #344]	; (800d284 <enq+0x7bc>)
 800d12a:	f7f3 fb8f 	bl	800084c <__aeabi_ddiv>
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4610      	mov	r0, r2
 800d134:	4619      	mov	r1, r3
 800d136:	a344      	add	r3, pc, #272	; (adr r3, 800d248 <enq+0x780>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d140:	e9cd 0100 	strd	r0, r1, [sp]
 800d144:	f04f 0200 	mov.w	r2, #0
 800d148:	4b4e      	ldr	r3, [pc, #312]	; (800d284 <enq+0x7bc>)
 800d14a:	212d      	movs	r1, #45	; 0x2d
 800d14c:	4840      	ldr	r0, [pc, #256]	; (800d250 <enq+0x788>)
 800d14e:	f7f9 fd09 	bl	8006b64 <RNSSet>
		RNSSet(&rns, RNS_B_RIGHT_VEL_SATEU, 1.0, 1.0 / v4, 19999.0);
 800d152:	4b47      	ldr	r3, [pc, #284]	; (800d270 <enq+0x7a8>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f7f3 f9f6 	bl	8000548 <__aeabi_f2d>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	f04f 0000 	mov.w	r0, #0
 800d164:	4947      	ldr	r1, [pc, #284]	; (800d284 <enq+0x7bc>)
 800d166:	f7f3 fb71 	bl	800084c <__aeabi_ddiv>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4610      	mov	r0, r2
 800d170:	4619      	mov	r1, r3
 800d172:	a335      	add	r3, pc, #212	; (adr r3, 800d248 <enq+0x780>)
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d17c:	e9cd 0100 	strd	r0, r1, [sp]
 800d180:	f04f 0200 	mov.w	r2, #0
 800d184:	4b3f      	ldr	r3, [pc, #252]	; (800d284 <enq+0x7bc>)
 800d186:	212e      	movs	r1, #46	; 0x2e
 800d188:	4831      	ldr	r0, [pc, #196]	; (800d250 <enq+0x788>)
 800d18a:	f7f9 fceb 	bl	8006b64 <RNSSet>
		Await(600);
 800d18e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d192:	f000 f98f 	bl	800d4b4 <Await>
		sprintf(data, "max velocity set complete\n");
 800d196:	493c      	ldr	r1, [pc, #240]	; (800d288 <enq+0x7c0>)
 800d198:	4837      	ldr	r0, [pc, #220]	; (800d278 <enq+0x7b0>)
 800d19a:	f010 fbc9 	bl	801d930 <siprintf>
		UARTSend
 800d19e:	4936      	ldr	r1, [pc, #216]	; (800d278 <enq+0x7b0>)
 800d1a0:	4836      	ldr	r0, [pc, #216]	; (800d27c <enq+0x7b4>)
 800d1a2:	f7f6 fb95 	bl	80038d0 <UARTPrintString>
		Await(20);
 800d1a6:	2014      	movs	r0, #20
 800d1a8:	f000 f984 	bl	800d4b4 <Await>
		sprintf(data, "diameter = %f\n", diameter);
 800d1ac:	4b37      	ldr	r3, [pc, #220]	; (800d28c <enq+0x7c4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7f3 f9c9 	bl	8000548 <__aeabi_f2d>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4935      	ldr	r1, [pc, #212]	; (800d290 <enq+0x7c8>)
 800d1bc:	482e      	ldr	r0, [pc, #184]	; (800d278 <enq+0x7b0>)
 800d1be:	f010 fbb7 	bl	801d930 <siprintf>
		UARTSend
 800d1c2:	492d      	ldr	r1, [pc, #180]	; (800d278 <enq+0x7b0>)
 800d1c4:	482d      	ldr	r0, [pc, #180]	; (800d27c <enq+0x7b4>)
 800d1c6:	f7f6 fb83 	bl	80038d0 <UARTPrintString>
		Await(20);
 800d1ca:	2014      	movs	r0, #20
 800d1cc:	f000 f972 	bl	800d4b4 <Await>
		sprintf(data, "pulse: %.3f, %.3f, %.3f, %.3f\n", pa, pb, pc, pd);
 800d1d0:	4b30      	ldr	r3, [pc, #192]	; (800d294 <enq+0x7cc>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f7f3 f9b7 	bl	8000548 <__aeabi_f2d>
 800d1da:	4682      	mov	sl, r0
 800d1dc:	468b      	mov	fp, r1
 800d1de:	4b2e      	ldr	r3, [pc, #184]	; (800d298 <enq+0x7d0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f3 f9b0 	bl	8000548 <__aeabi_f2d>
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	4b2b      	ldr	r3, [pc, #172]	; (800d29c <enq+0x7d4>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f3 f9a9 	bl	8000548 <__aeabi_f2d>
 800d1f6:	4680      	mov	r8, r0
 800d1f8:	4689      	mov	r9, r1
 800d1fa:	4b29      	ldr	r3, [pc, #164]	; (800d2a0 <enq+0x7d8>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f3 f9a2 	bl	8000548 <__aeabi_f2d>
 800d204:	4602      	mov	r2, r0
 800d206:	460b      	mov	r3, r1
 800d208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d20c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d210:	e9cd 4500 	strd	r4, r5, [sp]
 800d214:	4652      	mov	r2, sl
 800d216:	465b      	mov	r3, fp
 800d218:	4922      	ldr	r1, [pc, #136]	; (800d2a4 <enq+0x7dc>)
 800d21a:	4817      	ldr	r0, [pc, #92]	; (800d278 <enq+0x7b0>)
 800d21c:	f010 fb88 	bl	801d930 <siprintf>
		UARTSend
 800d220:	4915      	ldr	r1, [pc, #84]	; (800d278 <enq+0x7b0>)
 800d222:	4816      	ldr	r0, [pc, #88]	; (800d27c <enq+0x7b4>)
 800d224:	f7f6 fb54 	bl	80038d0 <UARTPrintString>
		Await(20);
 800d228:	2014      	movs	r0, #20
 800d22a:	f000 f943 	bl	800d4b4 <Await>
		sprintf(data, "max velocity: %.3f, %.3f, %.3f, %.3f\n", v1, v2, v3, v4);
 800d22e:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <enq+0x79c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4618      	mov	r0, r3
 800d234:	f7f3 f988 	bl	8000548 <__aeabi_f2d>
 800d238:	4682      	mov	sl, r0
 800d23a:	468b      	mov	fp, r1
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <enq+0x7a0>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	e032      	b.n	800d2a8 <enq+0x7e0>
 800d242:	bf00      	nop
 800d244:	f3af 8000 	nop.w
 800d248:	00000000 	.word	0x00000000
 800d24c:	40d387c0 	.word	0x40d387c0
 800d250:	200091e8 	.word	0x200091e8
 800d254:	2000a0c4 	.word	0x2000a0c4
 800d258:	2000732c 	.word	0x2000732c
 800d25c:	200096a4 	.word	0x200096a4
 800d260:	20009918 	.word	0x20009918
 800d264:	20007708 	.word	0x20007708
 800d268:	20009778 	.word	0x20009778
 800d26c:	20007a00 	.word	0x20007a00
 800d270:	2000a6a8 	.word	0x2000a6a8
 800d274:	080225e4 	.word	0x080225e4
 800d278:	20006948 	.word	0x20006948
 800d27c:	200067e4 	.word	0x200067e4
 800d280:	2000a0c8 	.word	0x2000a0c8
 800d284:	3ff00000 	.word	0x3ff00000
 800d288:	080225fc 	.word	0x080225fc
 800d28c:	200079f8 	.word	0x200079f8
 800d290:	08022560 	.word	0x08022560
 800d294:	2000a490 	.word	0x2000a490
 800d298:	2000925c 	.word	0x2000925c
 800d29c:	20009e98 	.word	0x20009e98
 800d2a0:	2000947c 	.word	0x2000947c
 800d2a4:	0802258c 	.word	0x0802258c
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7f3 f94d 	bl	8000548 <__aeabi_f2d>
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	4b6c      	ldr	r3, [pc, #432]	; (800d464 <enq+0x99c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f3 f946 	bl	8000548 <__aeabi_f2d>
 800d2bc:	4680      	mov	r8, r0
 800d2be:	4689      	mov	r9, r1
 800d2c0:	4b69      	ldr	r3, [pc, #420]	; (800d468 <enq+0x9a0>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7f3 f93f 	bl	8000548 <__aeabi_f2d>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d2d6:	e9cd 4500 	strd	r4, r5, [sp]
 800d2da:	4652      	mov	r2, sl
 800d2dc:	465b      	mov	r3, fp
 800d2de:	4963      	ldr	r1, [pc, #396]	; (800d46c <enq+0x9a4>)
 800d2e0:	4863      	ldr	r0, [pc, #396]	; (800d470 <enq+0x9a8>)
 800d2e2:	f010 fb25 	bl	801d930 <siprintf>
		UARTSend
 800d2e6:	4962      	ldr	r1, [pc, #392]	; (800d470 <enq+0x9a8>)
 800d2e8:	4862      	ldr	r0, [pc, #392]	; (800d474 <enq+0x9ac>)
 800d2ea:	f7f6 faf1 	bl	80038d0 <UARTPrintString>
		n = 0;
 800d2ee:	4b62      	ldr	r3, [pc, #392]	; (800d478 <enq+0x9b0>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
		break;
 800d2f4:	e0b0      	b.n	800d458 <enq+0x990>
//		xpos = rns.enq.enq_buffer[0].data;
//		ypos = rns.enq.enq_buffer[1].data;
//		break;

	case 6:
		RNSSet(&rns, RNS_RESET_POS);
 800d2f6:	2114      	movs	r1, #20
 800d2f8:	4860      	ldr	r0, [pc, #384]	; (800d47c <enq+0x9b4>)
 800d2fa:	f7f9 fc33 	bl	8006b64 <RNSSet>
		while(ps4.button != SQUARE){
 800d2fe:	e042      	b.n	800d386 <enq+0x8be>
			RNSEnquire(RNS_COORDINATE_X_Y_Z_Zrad, &rns);
 800d300:	495e      	ldr	r1, [pc, #376]	; (800d47c <enq+0x9b4>)
 800d302:	205f      	movs	r0, #95	; 0x5f
 800d304:	f7f9 fd9a 	bl	8006e3c <RNSEnquire>
			xpos = rns.enq.enq_buffer[0].data;
 800d308:	4b5c      	ldr	r3, [pc, #368]	; (800d47c <enq+0x9b4>)
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	4a5c      	ldr	r2, [pc, #368]	; (800d480 <enq+0x9b8>)
 800d30e:	6013      	str	r3, [r2, #0]
			ypos = rns.enq.enq_buffer[1].data;
 800d310:	4b5a      	ldr	r3, [pc, #360]	; (800d47c <enq+0x9b4>)
 800d312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d314:	4a5b      	ldr	r2, [pc, #364]	; (800d484 <enq+0x9bc>)
 800d316:	6013      	str	r3, [r2, #0]
			z = rns.enq.enq_buffer[2].data;
 800d318:	4b58      	ldr	r3, [pc, #352]	; (800d47c <enq+0x9b4>)
 800d31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d31c:	4a5a      	ldr	r2, [pc, #360]	; (800d488 <enq+0x9c0>)
 800d31e:	6013      	str	r3, [r2, #0]
			zrad = rns.enq.enq_buffer[3].data;
 800d320:	4b56      	ldr	r3, [pc, #344]	; (800d47c <enq+0x9b4>)
 800d322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d324:	4a59      	ldr	r2, [pc, #356]	; (800d48c <enq+0x9c4>)
 800d326:	6013      	str	r3, [r2, #0]
			sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", xpos, ypos, z, zrad);
 800d328:	4b55      	ldr	r3, [pc, #340]	; (800d480 <enq+0x9b8>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7f3 f90b 	bl	8000548 <__aeabi_f2d>
 800d332:	4682      	mov	sl, r0
 800d334:	468b      	mov	fp, r1
 800d336:	4b53      	ldr	r3, [pc, #332]	; (800d484 <enq+0x9bc>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7f3 f904 	bl	8000548 <__aeabi_f2d>
 800d340:	4604      	mov	r4, r0
 800d342:	460d      	mov	r5, r1
 800d344:	4b50      	ldr	r3, [pc, #320]	; (800d488 <enq+0x9c0>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f3 f8fd 	bl	8000548 <__aeabi_f2d>
 800d34e:	4680      	mov	r8, r0
 800d350:	4689      	mov	r9, r1
 800d352:	4b4e      	ldr	r3, [pc, #312]	; (800d48c <enq+0x9c4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4618      	mov	r0, r3
 800d358:	f7f3 f8f6 	bl	8000548 <__aeabi_f2d>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d364:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d368:	e9cd 4500 	strd	r4, r5, [sp]
 800d36c:	4652      	mov	r2, sl
 800d36e:	465b      	mov	r3, fp
 800d370:	4947      	ldr	r1, [pc, #284]	; (800d490 <enq+0x9c8>)
 800d372:	483f      	ldr	r0, [pc, #252]	; (800d470 <enq+0x9a8>)
 800d374:	f010 fadc 	bl	801d930 <siprintf>
			UARTSend
 800d378:	493d      	ldr	r1, [pc, #244]	; (800d470 <enq+0x9a8>)
 800d37a:	483e      	ldr	r0, [pc, #248]	; (800d474 <enq+0x9ac>)
 800d37c:	f7f6 faa8 	bl	80038d0 <UARTPrintString>
			Await(20);
 800d380:	2014      	movs	r0, #20
 800d382:	f000 f897 	bl	800d4b4 <Await>
		while(ps4.button != SQUARE){
 800d386:	4b43      	ldr	r3, [pc, #268]	; (800d494 <enq+0x9cc>)
 800d388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d38a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d38e:	d1b7      	bne.n	800d300 <enq+0x838>
		}
		while(ps4.button == SQUARE);
 800d390:	bf00      	nop
 800d392:	4b40      	ldr	r3, [pc, #256]	; (800d494 <enq+0x9cc>)
 800d394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d39a:	d0fa      	beq.n	800d392 <enq+0x8ca>
		n = 0;
 800d39c:	4b36      	ldr	r3, [pc, #216]	; (800d478 <enq+0x9b0>)
 800d39e:	2200      	movs	r2, #0
 800d3a0:	601a      	str	r2, [r3, #0]
		break;
 800d3a2:	e059      	b.n	800d458 <enq+0x990>

	case 8:
		sprintf(data, "%d, %d\n", enqpwLG, enqpwLlf);
 800d3a4:	4b3c      	ldr	r3, [pc, #240]	; (800d498 <enq+0x9d0>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	4b3c      	ldr	r3, [pc, #240]	; (800d49c <enq+0x9d4>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	493c      	ldr	r1, [pc, #240]	; (800d4a0 <enq+0x9d8>)
 800d3ae:	4830      	ldr	r0, [pc, #192]	; (800d470 <enq+0x9a8>)
 800d3b0:	f010 fabe 	bl	801d930 <siprintf>
		UARTSend
 800d3b4:	492e      	ldr	r1, [pc, #184]	; (800d470 <enq+0x9a8>)
 800d3b6:	482f      	ldr	r0, [pc, #188]	; (800d474 <enq+0x9ac>)
 800d3b8:	f7f6 fa8a 	bl	80038d0 <UARTPrintString>
		while(ps4.button == SQUARE);
 800d3bc:	bf00      	nop
 800d3be:	4b35      	ldr	r3, [pc, #212]	; (800d494 <enq+0x9cc>)
 800d3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3c6:	d0fa      	beq.n	800d3be <enq+0x8f6>
		n = 0;
 800d3c8:	4b2b      	ldr	r3, [pc, #172]	; (800d478 <enq+0x9b0>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
		break;
 800d3ce:	e043      	b.n	800d458 <enq+0x990>

	case 10:
		RNSEnquire(RNS_VEL_BOTH, &rns);
 800d3d0:	492a      	ldr	r1, [pc, #168]	; (800d47c <enq+0x9b4>)
 800d3d2:	2057      	movs	r0, #87	; 0x57
 800d3d4:	f7f9 fd32 	bl	8006e3c <RNSEnquire>
		a = rns.enq.enq_buffer[0].data;
 800d3d8:	4b28      	ldr	r3, [pc, #160]	; (800d47c <enq+0x9b4>)
 800d3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3dc:	4a31      	ldr	r2, [pc, #196]	; (800d4a4 <enq+0x9dc>)
 800d3de:	6013      	str	r3, [r2, #0]
		b = rns.enq.enq_buffer[1].data;
 800d3e0:	4b26      	ldr	r3, [pc, #152]	; (800d47c <enq+0x9b4>)
 800d3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3e4:	4a30      	ldr	r2, [pc, #192]	; (800d4a8 <enq+0x9e0>)
 800d3e6:	6013      	str	r3, [r2, #0]
		c = rns.enq.enq_buffer[2].data;
 800d3e8:	4b24      	ldr	r3, [pc, #144]	; (800d47c <enq+0x9b4>)
 800d3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ec:	4a2f      	ldr	r2, [pc, #188]	; (800d4ac <enq+0x9e4>)
 800d3ee:	6013      	str	r3, [r2, #0]
		d = rns.enq.enq_buffer[3].data;
 800d3f0:	4b22      	ldr	r3, [pc, #136]	; (800d47c <enq+0x9b4>)
 800d3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3f4:	4a2e      	ldr	r2, [pc, #184]	; (800d4b0 <enq+0x9e8>)
 800d3f6:	6013      	str	r3, [r2, #0]
		sprintf(data, "%.3f, %.3f, %.3f, %.3f\n", a, b, c, d);
 800d3f8:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <enq+0x9dc>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7f3 f8a3 	bl	8000548 <__aeabi_f2d>
 800d402:	4682      	mov	sl, r0
 800d404:	468b      	mov	fp, r1
 800d406:	4b28      	ldr	r3, [pc, #160]	; (800d4a8 <enq+0x9e0>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7f3 f89c 	bl	8000548 <__aeabi_f2d>
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	4b25      	ldr	r3, [pc, #148]	; (800d4ac <enq+0x9e4>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7f3 f895 	bl	8000548 <__aeabi_f2d>
 800d41e:	4680      	mov	r8, r0
 800d420:	4689      	mov	r9, r1
 800d422:	4b23      	ldr	r3, [pc, #140]	; (800d4b0 <enq+0x9e8>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4618      	mov	r0, r3
 800d428:	f7f3 f88e 	bl	8000548 <__aeabi_f2d>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d434:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d438:	e9cd 4500 	strd	r4, r5, [sp]
 800d43c:	4652      	mov	r2, sl
 800d43e:	465b      	mov	r3, fp
 800d440:	4913      	ldr	r1, [pc, #76]	; (800d490 <enq+0x9c8>)
 800d442:	480b      	ldr	r0, [pc, #44]	; (800d470 <enq+0x9a8>)
 800d444:	f010 fa74 	bl	801d930 <siprintf>
		UARTSend
 800d448:	4909      	ldr	r1, [pc, #36]	; (800d470 <enq+0x9a8>)
 800d44a:	480a      	ldr	r0, [pc, #40]	; (800d474 <enq+0x9ac>)
 800d44c:	f7f6 fa40 	bl	80038d0 <UARTPrintString>
		n = 0;
 800d450:	4b09      	ldr	r3, [pc, #36]	; (800d478 <enq+0x9b0>)
 800d452:	2200      	movs	r2, #0
 800d454:	601a      	str	r2, [r3, #0]
		break;
 800d456:	bf00      	nop
	}
}
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d462:	bf00      	nop
 800d464:	20007a00 	.word	0x20007a00
 800d468:	2000a6a8 	.word	0x2000a6a8
 800d46c:	08022618 	.word	0x08022618
 800d470:	20006948 	.word	0x20006948
 800d474:	200067e4 	.word	0x200067e4
 800d478:	20007508 	.word	0x20007508
 800d47c:	200091e8 	.word	0x200091e8
 800d480:	20007330 	.word	0x20007330
 800d484:	20009e68 	.word	0x20009e68
 800d488:	200091e4 	.word	0x200091e4
 800d48c:	20007094 	.word	0x20007094
 800d490:	080225e4 	.word	0x080225e4
 800d494:	2000a0c8 	.word	0x2000a0c8
 800d498:	200099fc 	.word	0x200099fc
 800d49c:	20007b78 	.word	0x20007b78
 800d4a0:	0802249c 	.word	0x0802249c
 800d4a4:	2000a0c4 	.word	0x2000a0c4
 800d4a8:	2000732c 	.word	0x2000732c
 800d4ac:	200096a4 	.word	0x200096a4
 800d4b0:	20009918 	.word	0x20009918

0800d4b4 <Await>:

void Await(uint32_t ticks){
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	counter = 0;
 800d4bc:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <Await+0x2c>)
 800d4be:	2200      	movs	r2, #0
 800d4c0:	601a      	str	r2, [r3, #0]
	while(counter < ticks);
 800d4c2:	bf00      	nop
 800d4c4:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <Await+0x2c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d8f9      	bhi.n	800d4c4 <Await+0x10>
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	200097a0 	.word	0x200097a0

0800d4e4 <DMA1_Stream0_IRQHandler>:
//#include "adapter.h"

/*I2C*/

void DMA1_Stream0_IRQHandler(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
 800d4e8:	4802      	ldr	r0, [pc, #8]	; (800d4f4 <DMA1_Stream0_IRQHandler+0x10>)
 800d4ea:	f005 ff5b 	bl	80133a4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_uart5_rx);

}
 800d4ee:	bf00      	nop
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	2000a064 	.word	0x2000a064

0800d4f8 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hdma_usart3_rx);
	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
 800d4fc:	4802      	ldr	r0, [pc, #8]	; (800d508 <DMA1_Stream3_IRQHandler+0x10>)
 800d4fe:	f005 ff51 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d502:	bf00      	nop
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20007114 	.word	0x20007114

0800d50c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800d510:	4802      	ldr	r0, [pc, #8]	; (800d51c <DMA1_Stream2_IRQHandler+0x10>)
 800d512:	f005 ff47 	bl	80133a4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hi2c2_rx_dma);
//	HAL_DMA_IRQHandler(&hi2c3_rx_dma);
}
 800d516:	bf00      	nop
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	200064d8 	.word	0x200064d8

0800d520 <DMA1_Stream1_IRQHandler>:

/*UART*/
void DMA1_Stream1_IRQHandler(void)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800d524:	4802      	ldr	r0, [pc, #8]	; (800d530 <DMA1_Stream1_IRQHandler+0x10>)
 800d526:	f005 ff3d 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d52a:	bf00      	nop
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	2000661c 	.word	0x2000661c

0800d534 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800d538:	4802      	ldr	r0, [pc, #8]	; (800d544 <DMA1_Stream4_IRQHandler+0x10>)
 800d53a:	f005 ff33 	bl	80133a4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_usart3_tx);
//	HAL_DMA_IRQHandler(&hi2c3_tx_dma);
}
 800d53e:	bf00      	nop
 800d540:	bd80      	pop	{r7, pc}
 800d542:	bf00      	nop
 800d544:	20006c90 	.word	0x20006c90

0800d548 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_rx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800d54c:	4802      	ldr	r0, [pc, #8]	; (800d558 <DMA1_Stream5_IRQHandler+0x10>)
 800d54e:	f005 ff29 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d552:	bf00      	nop
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20006538 	.word	0x20006538

0800d55c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0

//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800d560:	4802      	ldr	r0, [pc, #8]	; (800d56c <DMA1_Stream6_IRQHandler+0x10>)
 800d562:	f005 ff1f 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d566:	bf00      	nop
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20006824 	.word	0x20006824

0800d570 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void){
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
//	HAL_DMA_IRQHandler(&hi2c1_tx_dma);
//	HAL_DMA_IRQHandler(&hi2c2_tx_dma);
	HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800d574:	4802      	ldr	r0, [pc, #8]	; (800d580 <DMA1_Stream7_IRQHandler+0x10>)
 800d576:	f005 ff15 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d57a:	bf00      	nop
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20006cf0 	.word	0x20006cf0

0800d584 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 800d584:	b480      	push	{r7}
 800d586:	af00      	add	r7, sp, #0

}
 800d588:	bf00      	nop
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
	...

0800d594 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc3);
 800d598:	4802      	ldr	r0, [pc, #8]	; (800d5a4 <DMA2_Stream1_IRQHandler+0x10>)
 800d59a:	f005 ff03 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d59e:	bf00      	nop
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	20006d98 	.word	0x20006d98

0800d5a8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
	KalmanFilter(&kf_adc_x);
 800d5ac:	480b      	ldr	r0, [pc, #44]	; (800d5dc <DMA2_Stream2_IRQHandler+0x34>)
 800d5ae:	f7f6 fd73 	bl	8004098 <KalmanFilter>
	KalmanFilter(&kf_adc_y);
 800d5b2:	480b      	ldr	r0, [pc, #44]	; (800d5e0 <DMA2_Stream2_IRQHandler+0x38>)
 800d5b4:	f7f6 fd70 	bl	8004098 <KalmanFilter>
	Moving_Average_Filter (&move_aveX);
 800d5b8:	480a      	ldr	r0, [pc, #40]	; (800d5e4 <DMA2_Stream2_IRQHandler+0x3c>)
 800d5ba:	f7f8 fab9 	bl	8005b30 <Moving_Average_Filter>
	Moving_Average_Filter (&move_aveY);
 800d5be:	480a      	ldr	r0, [pc, #40]	; (800d5e8 <DMA2_Stream2_IRQHandler+0x40>)
 800d5c0:	f7f8 fab6 	bl	8005b30 <Moving_Average_Filter>
	Laser(&X_laser);
 800d5c4:	4809      	ldr	r0, [pc, #36]	; (800d5ec <DMA2_Stream2_IRQHandler+0x44>)
 800d5c6:	f7f6 fdd5 	bl	8004174 <Laser>
	Laser(&Y_laser);
 800d5ca:	4809      	ldr	r0, [pc, #36]	; (800d5f0 <DMA2_Stream2_IRQHandler+0x48>)
 800d5cc:	f7f6 fdd2 	bl	8004174 <Laser>
	HAL_DMA_IRQHandler(&hdma_adc1);
 800d5d0:	4808      	ldr	r0, [pc, #32]	; (800d5f4 <DMA2_Stream2_IRQHandler+0x4c>)
 800d5d2:	f005 fee7 	bl	80133a4 <HAL_DMA_IRQHandler>
//	HAL_DMA_IRQHandler(&hdma_spi1_rx);
}
 800d5d6:	bf00      	nop
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200070ec 	.word	0x200070ec
 800d5e0:	2000994c 	.word	0x2000994c
 800d5e4:	200093e0 	.word	0x200093e0
 800d5e8:	2000a37c 	.word	0x2000a37c
 800d5ec:	200098b4 	.word	0x200098b4
 800d5f0:	200099b8 	.word	0x200099b8
 800d5f4:	20006e88 	.word	0x20006e88

0800d5f8 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_adc2);
 800d5fc:	4802      	ldr	r0, [pc, #8]	; (800d608 <DMA2_Stream3_IRQHandler+0x10>)
 800d5fe:	f005 fed1 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d602:	bf00      	nop
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	20006ee8 	.word	0x20006ee8

0800d60c <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800d610:	4802      	ldr	r0, [pc, #8]	; (800d61c <DMA2_Stream5_IRQHandler+0x10>)
 800d612:	f005 fec7 	bl	80133a4 <HAL_DMA_IRQHandler>
}
 800d616:	bf00      	nop
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000a404 	.word	0x2000a404

0800d620 <NMI_Handler>:
int _counter = 0;
/**
 * * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800d620:	b480      	push	{r7}
 800d622:	af00      	add	r7, sp, #0

}
 800d624:	bf00      	nop
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800d62e:	b480      	push	{r7}
 800d630:	af00      	add	r7, sp, #0

}
 800d632:	bf00      	nop
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr

0800d63c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800d63c:	b480      	push	{r7}
 800d63e:	af00      	add	r7, sp, #0

	while(1){
 800d640:	e7fe      	b.n	800d640 <MemManage_Handler+0x4>

0800d642 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800d642:	b480      	push	{r7}
 800d644:	af00      	add	r7, sp, #0

}
 800d646:	bf00      	nop
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0

}
 800d654:	bf00      	nop
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800d65e:	b480      	push	{r7}
 800d660:	af00      	add	r7, sp, #0

}
 800d662:	bf00      	nop
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <TIM1_UP_TIM10_IRQHandler>:
//
//}


void TIM1_UP_TIM10_IRQHandler(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	af00      	add	r7, sp, #0
#ifdef USED_QEI1
	if (htim1.Instance -> CR1 == 129)
 800d670:	4b12      	ldr	r3, [pc, #72]	; (800d6bc <TIM1_UP_TIM10_IRQHandler+0x50>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b81      	cmp	r3, #129	; 0x81
 800d678:	d109      	bne.n	800d68e <TIM1_UP_TIM10_IRQHandler+0x22>
	{
		BIOS_QEI1.signbit += 1;
 800d67a:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800d67c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d680:	b29b      	uxth	r3, r3
 800d682:	3301      	adds	r3, #1
 800d684:	b29b      	uxth	r3, r3
 800d686:	b21a      	sxth	r2, r3
 800d688:	4b0d      	ldr	r3, [pc, #52]	; (800d6c0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800d68a:	805a      	strh	r2, [r3, #2]
 800d68c:	e00d      	b.n	800d6aa <TIM1_UP_TIM10_IRQHandler+0x3e>
	}
	else if (htim1.Instance ->CR1 == 145)
 800d68e:	4b0b      	ldr	r3, [pc, #44]	; (800d6bc <TIM1_UP_TIM10_IRQHandler+0x50>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	2b91      	cmp	r3, #145	; 0x91
 800d696:	d108      	bne.n	800d6aa <TIM1_UP_TIM10_IRQHandler+0x3e>
	{
		BIOS_QEI1.signbit -= 1;
 800d698:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800d69a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	b21a      	sxth	r2, r3
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <TIM1_UP_TIM10_IRQHandler+0x54>)
 800d6a8:	805a      	strh	r2, [r3, #2]
	}
	htim1.Instance -> SR = 0;
 800d6aa:	4b04      	ldr	r3, [pc, #16]	; (800d6bc <TIM1_UP_TIM10_IRQHandler+0x50>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	611a      	str	r2, [r3, #16]
	QEIDelay(200);
 800d6b2:	20c8      	movs	r0, #200	; 0xc8
 800d6b4:	f7f4 fd0a 	bl	80020cc <QEIDelay>
#else
	HAL_TIM_IRQHandler(&htim1);
#endif
//	HAL_TIM_IRQHandler(&htim10);
	return;
 800d6b8:	bf00      	nop
}
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	200069ec 	.word	0x200069ec
 800d6c0:	20006f4c 	.word	0x20006f4c

0800d6c4 <TIM4_IRQHandler>:



void TIM4_IRQHandler(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	af00      	add	r7, sp, #0

#ifdef USED_QEI4
	if (htim4.Instance -> CR1 == 129)
 800d6c8:	4b12      	ldr	r3, [pc, #72]	; (800d714 <TIM4_IRQHandler+0x50>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b81      	cmp	r3, #129	; 0x81
 800d6d0:	d109      	bne.n	800d6e6 <TIM4_IRQHandler+0x22>
	{
		BIOS_QEI4.signbit += 1;
 800d6d2:	4b11      	ldr	r3, [pc, #68]	; (800d718 <TIM4_IRQHandler+0x54>)
 800d6d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	3301      	adds	r3, #1
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	b21a      	sxth	r2, r3
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <TIM4_IRQHandler+0x54>)
 800d6e2:	805a      	strh	r2, [r3, #2]
 800d6e4:	e00d      	b.n	800d702 <TIM4_IRQHandler+0x3e>
	}
	else if (htim4.Instance ->CR1 == 145)
 800d6e6:	4b0b      	ldr	r3, [pc, #44]	; (800d714 <TIM4_IRQHandler+0x50>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2b91      	cmp	r3, #145	; 0x91
 800d6ee:	d108      	bne.n	800d702 <TIM4_IRQHandler+0x3e>
	{
		BIOS_QEI4.signbit -= 1;
 800d6f0:	4b09      	ldr	r3, [pc, #36]	; (800d718 <TIM4_IRQHandler+0x54>)
 800d6f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	3b01      	subs	r3, #1
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	b21a      	sxth	r2, r3
 800d6fe:	4b06      	ldr	r3, [pc, #24]	; (800d718 <TIM4_IRQHandler+0x54>)
 800d700:	805a      	strh	r2, [r3, #2]
	}
	htim4.Instance -> SR = 0;
 800d702:	4b04      	ldr	r3, [pc, #16]	; (800d714 <TIM4_IRQHandler+0x50>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2200      	movs	r2, #0
 800d708:	611a      	str	r2, [r3, #16]
	QEIDelay(100);
 800d70a:	2064      	movs	r0, #100	; 0x64
 800d70c:	f7f4 fcde 	bl	80020cc <QEIDelay>
	HAL_TIM_IRQHandler(&htim4);

	return;
#endif

}
 800d710:	bf00      	nop
 800d712:	bd80      	pop	{r7, pc}
 800d714:	200065dc 	.word	0x200065dc
 800d718:	20006f70 	.word	0x20006f70

0800d71c <TIM8_UP_TIM13_IRQHandler>:



void TIM8_UP_TIM13_IRQHandler(void)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	af00      	add	r7, sp, #0
		BIOS_QEI6.signbit -= 1;
	}
	htim8.Instance -> SR = 0;
	QEIDelay(200);
#else
	HAL_TIM_IRQHandler(&htim8);
 800d720:	4803      	ldr	r0, [pc, #12]	; (800d730 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800d722:	f009 fe27 	bl	8017374 <HAL_TIM_IRQHandler>
#endif
	HAL_TIM_IRQHandler(&htim13);
 800d726:	4803      	ldr	r0, [pc, #12]	; (800d734 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800d728:	f009 fe24 	bl	8017374 <HAL_TIM_IRQHandler>
	return;
 800d72c:	bf00      	nop
}
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	2000659c 	.word	0x2000659c
 800d734:	20006884 	.word	0x20006884

0800d738 <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim2);
 800d73c:	4802      	ldr	r0, [pc, #8]	; (800d748 <TIM2_IRQHandler+0x10>)
 800d73e:	f009 fe19 	bl	8017374 <HAL_TIM_IRQHandler>
}
 800d742:	bf00      	nop
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20006af0 	.word	0x20006af0

0800d74c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d75c:	d109      	bne.n	800d772 <HAL_TIM_PeriodElapsedCallback+0x26>
		HAL_IncTick();
 800d75e:	f004 f895 	bl	801188c <HAL_IncTick>
		//		MUXUpdate(&MUX);
		SHIFTREGShift(&SR);
 800d762:	4806      	ldr	r0, [pc, #24]	; (800d77c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800d764:	f7f4 fd7d 	bl	8002262 <SHIFTREGShift>
		counter ++;
 800d768:	4b05      	ldr	r3, [pc, #20]	; (800d780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	4a04      	ldr	r2, [pc, #16]	; (800d780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d770:	6013      	str	r3, [r2, #0]
	}
}
 800d772:	bf00      	nop
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20009608 	.word	0x20009608
 800d780:	200097a0 	.word	0x200097a0

0800d784 <HAL_I2C_MasterRxCpltCallback>:


//Callback for I2C RXBuffer
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
	if(hi2c == ps4.hi2cps4){
 800d78c:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800d78e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d790:	687a      	ldr	r2, [r7, #4]
 800d792:	429a      	cmp	r2, r3
 800d794:	d102      	bne.n	800d79c <HAL_I2C_MasterRxCpltCallback+0x18>
		PSxConnectDMA(&ps4);
 800d796:	4803      	ldr	r0, [pc, #12]	; (800d7a4 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800d798:	f7f8 fbb1 	bl	8005efe <PSxConnectDMA>
	}
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	2000a0c8 	.word	0x2000a0c8

0800d7a8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void){
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	af00      	add	r7, sp, #0
	HAL_I2C_EV_IRQHandler(&hi2c1);
 800d7ac:	4802      	ldr	r0, [pc, #8]	; (800d7b8 <I2C1_EV_IRQHandler+0x10>)
 800d7ae:	f007 f8b5 	bl	801491c <HAL_I2C_EV_IRQHandler>

}
 800d7b2:	bf00      	nop
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20007630 	.word	0x20007630

0800d7bc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void){
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
	HAL_I2C_ER_IRQHandler(&hi2c1);
 800d7c0:	480a      	ldr	r0, [pc, #40]	; (800d7ec <I2C1_ER_IRQHandler+0x30>)
 800d7c2:	f007 fa18 	bl	8014bf6 <HAL_I2C_ER_IRQHandler>
	HAL_DMA_DeInit(&hi2c1_rx_dma);
 800d7c6:	480a      	ldr	r0, [pc, #40]	; (800d7f0 <I2C1_ER_IRQHandler+0x34>)
 800d7c8:	f005 fd14 	bl	80131f4 <HAL_DMA_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800d7cc:	4807      	ldr	r0, [pc, #28]	; (800d7ec <I2C1_ER_IRQHandler+0x30>)
 800d7ce:	f006 ff5f 	bl	8014690 <HAL_I2C_DeInit>

	I2CX_DMA_RX_Init(&hi2c1, &hi2c1_rx_dma, main_board_1, CLOCK_SPEED_400KHz);
 800d7d2:	4b08      	ldr	r3, [pc, #32]	; (800d7f4 <I2C1_ER_IRQHandler+0x38>)
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	4906      	ldr	r1, [pc, #24]	; (800d7f0 <I2C1_ER_IRQHandler+0x34>)
 800d7d8:	4804      	ldr	r0, [pc, #16]	; (800d7ec <I2C1_ER_IRQHandler+0x30>)
 800d7da:	f7f6 fa2f 	bl	8003c3c <I2CX_DMA_RX_Init>
//
//
//
	PSxInitDMA(&ps4, &hi2c1);
 800d7de:	4903      	ldr	r1, [pc, #12]	; (800d7ec <I2C1_ER_IRQHandler+0x30>)
 800d7e0:	4805      	ldr	r0, [pc, #20]	; (800d7f8 <I2C1_ER_IRQHandler+0x3c>)
 800d7e2:	f7f8 fb9f 	bl	8005f24 <PSxInitDMA>

}
 800d7e6:	bf00      	nop
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20007630 	.word	0x20007630
 800d7f0:	2000a064 	.word	0x2000a064
 800d7f4:	00061a80 	.word	0x00061a80
 800d7f8:	2000a0c8 	.word	0x2000a0c8

0800d7fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b08c      	sub	sp, #48	; 0x30
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 800d80c:	2200      	movs	r2, #0
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	201c      	movs	r0, #28
 800d812:	f005 fbfb 	bl	801300c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800d816:	201c      	movs	r0, #28
 800d818:	f005 fc14 	bl	8013044 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800d81c:	2300      	movs	r3, #0
 800d81e:	60fb      	str	r3, [r7, #12]
 800d820:	4b20      	ldr	r3, [pc, #128]	; (800d8a4 <HAL_InitTick+0xa8>)
 800d822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d824:	4a1f      	ldr	r2, [pc, #124]	; (800d8a4 <HAL_InitTick+0xa8>)
 800d826:	f043 0301 	orr.w	r3, r3, #1
 800d82a:	6413      	str	r3, [r2, #64]	; 0x40
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <HAL_InitTick+0xa8>)
 800d82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d838:	f107 0210 	add.w	r2, r7, #16
 800d83c:	f107 0314 	add.w	r3, r7, #20
 800d840:	4611      	mov	r1, r2
 800d842:	4618      	mov	r0, r3
 800d844:	f009 faa0 	bl	8016d88 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800d848:	f009 fa76 	bl	8016d38 <HAL_RCC_GetPCLK1Freq>
 800d84c:	4603      	mov	r3, r0
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	4a14      	ldr	r2, [pc, #80]	; (800d8a8 <HAL_InitTick+0xac>)
 800d856:	fba2 2303 	umull	r2, r3, r2, r3
 800d85a:	0c9b      	lsrs	r3, r3, #18
 800d85c:	3b01      	subs	r3, #1
 800d85e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800d860:	4b12      	ldr	r3, [pc, #72]	; (800d8ac <HAL_InitTick+0xb0>)
 800d862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d866:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800d868:	4b10      	ldr	r3, [pc, #64]	; (800d8ac <HAL_InitTick+0xb0>)
 800d86a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d86e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800d870:	4a0e      	ldr	r2, [pc, #56]	; (800d8ac <HAL_InitTick+0xb0>)
 800d872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d874:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800d876:	4b0d      	ldr	r3, [pc, #52]	; (800d8ac <HAL_InitTick+0xb0>)
 800d878:	2200      	movs	r2, #0
 800d87a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d87c:	4b0b      	ldr	r3, [pc, #44]	; (800d8ac <HAL_InitTick+0xb0>)
 800d87e:	2200      	movs	r2, #0
 800d880:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800d882:	480a      	ldr	r0, [pc, #40]	; (800d8ac <HAL_InitTick+0xb0>)
 800d884:	f009 fbd0 	bl	8017028 <HAL_TIM_Base_Init>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d104      	bne.n	800d898 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800d88e:	4807      	ldr	r0, [pc, #28]	; (800d8ac <HAL_InitTick+0xb0>)
 800d890:	f009 fc19 	bl	80170c6 <HAL_TIM_Base_Start_IT>
 800d894:	4603      	mov	r3, r0
 800d896:	e000      	b.n	800d89a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800d898:	2301      	movs	r3, #1
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3730      	adds	r7, #48	; 0x30
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop
 800d8a4:	40023800 	.word	0x40023800
 800d8a8:	431bde83 	.word	0x431bde83
 800d8ac:	20006af0 	.word	0x20006af0

0800d8b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
	return 1;
 800d8b4:	2301      	movs	r3, #1
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <_kill>:

int _kill(int pid, int sig)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800d8ca:	f00f f807 	bl	801c8dc <__errno>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2216      	movs	r2, #22
 800d8d2:	601a      	str	r2, [r3, #0]
	return -1;
 800d8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_exit>:

void _exit (int status)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800d8e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff ffe7 	bl	800d8c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 800d8f2:	e7fe      	b.n	800d8f2 <_exit+0x12>

0800d8f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d900:	2300      	movs	r3, #0
 800d902:	617b      	str	r3, [r7, #20]
 800d904:	e00a      	b.n	800d91c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800d906:	f3af 8000 	nop.w
 800d90a:	4601      	mov	r1, r0
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	60ba      	str	r2, [r7, #8]
 800d912:	b2ca      	uxtb	r2, r1
 800d914:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	3301      	adds	r3, #1
 800d91a:	617b      	str	r3, [r7, #20]
 800d91c:	697a      	ldr	r2, [r7, #20]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	429a      	cmp	r2, r3
 800d922:	dbf0      	blt.n	800d906 <_read+0x12>
	}

return len;
 800d924:	687b      	ldr	r3, [r7, #4]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3718      	adds	r7, #24
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b086      	sub	sp, #24
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]
 800d93e:	e009      	b.n	800d954 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	60ba      	str	r2, [r7, #8]
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	4618      	mov	r0, r3
 800d94a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	3301      	adds	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
 800d954:	697a      	ldr	r2, [r7, #20]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	429a      	cmp	r2, r3
 800d95a:	dbf1      	blt.n	800d940 <_write+0x12>
	}
	return len;
 800d95c:	687b      	ldr	r3, [r7, #4]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}

0800d966 <_close>:

int _close(int file)
{
 800d966:	b480      	push	{r7}
 800d968:	b083      	sub	sp, #12
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
	return -1;
 800d96e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d972:	4618      	mov	r0, r3
 800d974:	370c      	adds	r7, #12
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d97e:	b480      	push	{r7}
 800d980:	b083      	sub	sp, #12
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
 800d986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d98e:	605a      	str	r2, [r3, #4]
	return 0;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <_isatty>:

int _isatty(int file)
{
 800d99e:	b480      	push	{r7}
 800d9a0:	b083      	sub	sp, #12
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
	return 1;
 800d9a6:	2301      	movs	r3, #1
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	370c      	adds	r7, #12
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr

0800d9b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b085      	sub	sp, #20
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
	return 0;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
	...

0800d9d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d9d8:	4a14      	ldr	r2, [pc, #80]	; (800da2c <_sbrk+0x5c>)
 800d9da:	4b15      	ldr	r3, [pc, #84]	; (800da30 <_sbrk+0x60>)
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d9e4:	4b13      	ldr	r3, [pc, #76]	; (800da34 <_sbrk+0x64>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d102      	bne.n	800d9f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d9ec:	4b11      	ldr	r3, [pc, #68]	; (800da34 <_sbrk+0x64>)
 800d9ee:	4a12      	ldr	r2, [pc, #72]	; (800da38 <_sbrk+0x68>)
 800d9f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d9f2:	4b10      	ldr	r3, [pc, #64]	; (800da34 <_sbrk+0x64>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d207      	bcs.n	800da10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800da00:	f00e ff6c 	bl	801c8dc <__errno>
 800da04:	4603      	mov	r3, r0
 800da06:	220c      	movs	r2, #12
 800da08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da0e:	e009      	b.n	800da24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800da10:	4b08      	ldr	r3, [pc, #32]	; (800da34 <_sbrk+0x64>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800da16:	4b07      	ldr	r3, [pc, #28]	; (800da34 <_sbrk+0x64>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	4a05      	ldr	r2, [pc, #20]	; (800da34 <_sbrk+0x64>)
 800da20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800da22:	68fb      	ldr	r3, [r7, #12]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3718      	adds	r7, #24
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	20020000 	.word	0x20020000
 800da30:	00000400 	.word	0x00000400
 800da34:	20000850 	.word	0x20000850
 800da38:	2000a7e8 	.word	0x2000a7e8

0800da3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800da3c:	b480      	push	{r7}
 800da3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800da40:	4b08      	ldr	r3, [pc, #32]	; (800da64 <SystemInit+0x28>)
 800da42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da46:	4a07      	ldr	r2, [pc, #28]	; (800da64 <SystemInit+0x28>)
 800da48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <SystemInit+0x28>)
 800da52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800da56:	609a      	str	r2, [r3, #8]
#endif
}
 800da58:	bf00      	nop
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	e000ed00 	.word	0xe000ed00

0800da68 <tunePending>:
		tuneWriteSuccess += numInt[i];
		tuneWriteSuccess += numFloat[i];
	}
}

void tunePending(void){
 800da68:	b580      	push	{r7, lr}
 800da6a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(tuneUart, (uint8_t *)&tuneCommand, 1);
 800da6c:	4b04      	ldr	r3, [pc, #16]	; (800da80 <tunePending+0x18>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	2201      	movs	r2, #1
 800da72:	4904      	ldr	r1, [pc, #16]	; (800da84 <tunePending+0x1c>)
 800da74:	4618      	mov	r0, r3
 800da76:	f00a fc13 	bl	80182a0 <HAL_UART_Receive_DMA>
}
 800da7a:	bf00      	nop
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	2000a480 	.word	0x2000a480
 800da84:	20009481 	.word	0x20009481

0800da88 <tuneInit>:

void tuneInit(TUNE_PAGE page){
 800da88:	b580      	push	{r7, lr}
 800da8a:	b0a0      	sub	sp, #128	; 0x80
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	71fb      	strb	r3, [r7, #7]
	//[NUM_INT_TUNE][NUM_FLOAT_TUNE]
	//[0x52][0x01][strlen][str...][*curValue...][min ...][max ...][0x31][0x40] format of INT
	//[0x14][0x01][strlen][str...][*curValue...][minF...][maxF...][0x20][0x00] format of FLOAT


	uint8_t numVar[2] = {numInt[page], numFloat[page]};
 800da92:	79fb      	ldrb	r3, [r7, #7]
 800da94:	4a91      	ldr	r2, [pc, #580]	; (800dcdc <tuneInit+0x254>)
 800da96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	4a8f      	ldr	r2, [pc, #572]	; (800dce0 <tuneInit+0x258>)
 800daa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71

	HAL_UART_Transmit(tuneUart, numVar, 2, 10);
 800daae:	4b8d      	ldr	r3, [pc, #564]	; (800dce4 <tuneInit+0x25c>)
 800dab0:	6818      	ldr	r0, [r3, #0]
 800dab2:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800dab6:	230a      	movs	r3, #10
 800dab8:	2202      	movs	r2, #2
 800daba:	f00a fb02 	bl	80180c2 <HAL_UART_Transmit>
	uint8_t sendBuf[100];
	for(int i=0; i<numInt[page]; i++){
 800dabe:	2300      	movs	r3, #0
 800dac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dac2:	e079      	b.n	800dbb8 <tuneInit+0x130>
		sendBuf[0] = 0x52;	// '4'
 800dac4:	2352      	movs	r3, #82	; 0x52
 800dac6:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;	//Start of Header
 800dac8:	2301      	movs	r3, #1
 800daca:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(intList[page][i].varName);
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	4a86      	ldr	r2, [pc, #536]	; (800dce8 <tuneInit+0x260>)
 800dad0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dad4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dad6:	011b      	lsls	r3, r3, #4
 800dad8:	4413      	add	r3, r2
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7f2 fb77 	bl	80001d0 <strlen>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		sendBuf[2] = strLen;
 800dae8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800daec:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 1+1+1+strLen+4+4+4+1+1;
 800daee:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800daf2:	3311      	adds	r3, #17
 800daf4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

		sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;		//Unit seperator, '(';
 800daf8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dafc:	3b02      	subs	r3, #2
 800dafe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800db02:	4413      	add	r3, r2
 800db04:	2231      	movs	r2, #49	; 0x31
 800db06:	f803 2c74 	strb.w	r2, [r3, #-116]
 800db0a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800db0e:	3b01      	subs	r3, #1
 800db10:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800db14:	4413      	add	r3, r2
 800db16:	2240      	movs	r2, #64	; 0x40
 800db18:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], intList[page][i].varName, strLen);
 800db1c:	79fb      	ldrb	r3, [r7, #7]
 800db1e:	4a72      	ldr	r2, [pc, #456]	; (800dce8 <tuneInit+0x260>)
 800db20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db26:	011b      	lsls	r3, r3, #4
 800db28:	4413      	add	r3, r2
 800db2a:	6819      	ldr	r1, [r3, #0]
 800db2c:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800db30:	f107 030c 	add.w	r3, r7, #12
 800db34:	3303      	adds	r3, #3
 800db36:	4618      	mov	r0, r3
 800db38:	f00e ff0a 	bl	801c950 <memcpy>
		memcpy(&sendBuf[3+strLen], intList[page][i].ptr, 4);
 800db3c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800db40:	3303      	adds	r3, #3
 800db42:	f107 020c 	add.w	r2, r7, #12
 800db46:	4413      	add	r3, r2
 800db48:	79fa      	ldrb	r2, [r7, #7]
 800db4a:	4967      	ldr	r1, [pc, #412]	; (800dce8 <tuneInit+0x260>)
 800db4c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800db50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800db52:	0112      	lsls	r2, r2, #4
 800db54:	440a      	add	r2, r1
 800db56:	6852      	ldr	r2, [r2, #4]
 800db58:	6812      	ldr	r2, [r2, #0]
 800db5a:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &intList[page][i].min, 4);
 800db5c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800db60:	3307      	adds	r3, #7
 800db62:	f107 020c 	add.w	r2, r7, #12
 800db66:	4413      	add	r3, r2
 800db68:	79fa      	ldrb	r2, [r7, #7]
 800db6a:	495f      	ldr	r1, [pc, #380]	; (800dce8 <tuneInit+0x260>)
 800db6c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800db70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800db72:	0112      	lsls	r2, r2, #4
 800db74:	440a      	add	r2, r1
 800db76:	3208      	adds	r2, #8
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &intList[page][i].max, 4);
 800db7c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800db80:	330b      	adds	r3, #11
 800db82:	f107 020c 	add.w	r2, r7, #12
 800db86:	4413      	add	r3, r2
 800db88:	79fa      	ldrb	r2, [r7, #7]
 800db8a:	4957      	ldr	r1, [pc, #348]	; (800dce8 <tuneInit+0x260>)
 800db8c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800db90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800db92:	0112      	lsls	r2, r2, #4
 800db94:	440a      	add	r2, r1
 800db96:	320c      	adds	r2, #12
 800db98:	6812      	ldr	r2, [r2, #0]
 800db9a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 1000);
 800db9c:	4b51      	ldr	r3, [pc, #324]	; (800dce4 <tuneInit+0x25c>)
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	f107 010c 	add.w	r1, r7, #12
 800dbaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dbae:	f00a fa88 	bl	80180c2 <HAL_UART_Transmit>
	for(int i=0; i<numInt[page]; i++){
 800dbb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	4a48      	ldr	r2, [pc, #288]	; (800dcdc <tuneInit+0x254>)
 800dbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	f6ff af7e 	blt.w	800dac4 <tuneInit+0x3c>
	}

	for(int i=0; i<numFloat[page]; i++){
 800dbc8:	2300      	movs	r3, #0
 800dbca:	67bb      	str	r3, [r7, #120]	; 0x78
 800dbcc:	e078      	b.n	800dcc0 <tuneInit+0x238>
		sendBuf[0] = 0x14;
 800dbce:	2314      	movs	r3, #20
 800dbd0:	733b      	strb	r3, [r7, #12]
		sendBuf[1] = 0x01;
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	737b      	strb	r3, [r7, #13]
		uint8_t strLen = strlen(floatList[page][i].varName);
 800dbd6:	79fb      	ldrb	r3, [r7, #7]
 800dbd8:	4a44      	ldr	r2, [pc, #272]	; (800dcec <tuneInit+0x264>)
 800dbda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dbde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dbe0:	011b      	lsls	r3, r3, #4
 800dbe2:	4413      	add	r3, r2
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7f2 faf2 	bl	80001d0 <strlen>
 800dbec:	4603      	mov	r3, r0
 800dbee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		sendBuf[2] = strLen;
 800dbf2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dbf6:	73bb      	strb	r3, [r7, #14]
		uint8_t len = 3+strLen+4+4+4+1+1;
 800dbf8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dbfc:	3311      	adds	r3, #17
 800dbfe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800dc02:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc06:	3b02      	subs	r3, #2
 800dc08:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800dc0c:	4413      	add	r3, r2
 800dc0e:	2220      	movs	r2, #32
 800dc10:	f803 2c74 	strb.w	r2, [r3, #-116]
 800dc14:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800dc1e:	4413      	add	r3, r2
 800dc20:	2200      	movs	r2, #0
 800dc22:	f803 2c74 	strb.w	r2, [r3, #-116]
		memcpy(&sendBuf[3], floatList[page][i].varName, strLen);
 800dc26:	79fb      	ldrb	r3, [r7, #7]
 800dc28:	4a30      	ldr	r2, [pc, #192]	; (800dcec <tuneInit+0x264>)
 800dc2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800dc2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc30:	011b      	lsls	r3, r3, #4
 800dc32:	4413      	add	r3, r2
 800dc34:	6819      	ldr	r1, [r3, #0]
 800dc36:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800dc3a:	f107 030c 	add.w	r3, r7, #12
 800dc3e:	3303      	adds	r3, #3
 800dc40:	4618      	mov	r0, r3
 800dc42:	f00e fe85 	bl	801c950 <memcpy>
		memcpy(&sendBuf[3+strLen], floatList[page][i].ptr, 4);
 800dc46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc4a:	3303      	adds	r3, #3
 800dc4c:	f107 020c 	add.w	r2, r7, #12
 800dc50:	4413      	add	r3, r2
 800dc52:	79fa      	ldrb	r2, [r7, #7]
 800dc54:	4925      	ldr	r1, [pc, #148]	; (800dcec <tuneInit+0x264>)
 800dc56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800dc5a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc5c:	0112      	lsls	r2, r2, #4
 800dc5e:	440a      	add	r2, r1
 800dc60:	6852      	ldr	r2, [r2, #4]
 800dc62:	6812      	ldr	r2, [r2, #0]
 800dc64:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+4], &floatList[page][i].min, 4);
 800dc66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc6a:	3307      	adds	r3, #7
 800dc6c:	f107 020c 	add.w	r2, r7, #12
 800dc70:	4413      	add	r3, r2
 800dc72:	79fa      	ldrb	r2, [r7, #7]
 800dc74:	491d      	ldr	r1, [pc, #116]	; (800dcec <tuneInit+0x264>)
 800dc76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800dc7a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc7c:	0112      	lsls	r2, r2, #4
 800dc7e:	440a      	add	r2, r1
 800dc80:	3208      	adds	r2, #8
 800dc82:	6812      	ldr	r2, [r2, #0]
 800dc84:	601a      	str	r2, [r3, #0]
		memcpy(&sendBuf[3+strLen+8], &floatList[page][i].max, 4);
 800dc86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800dc8a:	330b      	adds	r3, #11
 800dc8c:	f107 020c 	add.w	r2, r7, #12
 800dc90:	4413      	add	r3, r2
 800dc92:	79fa      	ldrb	r2, [r7, #7]
 800dc94:	4915      	ldr	r1, [pc, #84]	; (800dcec <tuneInit+0x264>)
 800dc96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800dc9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dc9c:	0112      	lsls	r2, r2, #4
 800dc9e:	440a      	add	r2, r1
 800dca0:	320c      	adds	r2, #12
 800dca2:	6812      	ldr	r2, [r2, #0]
 800dca4:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800dca6:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <tuneInit+0x25c>)
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	f107 010c 	add.w	r1, r7, #12
 800dcb4:	2364      	movs	r3, #100	; 0x64
 800dcb6:	f00a fa04 	bl	80180c2 <HAL_UART_Transmit>
	for(int i=0; i<numFloat[page]; i++){
 800dcba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	4a07      	ldr	r2, [pc, #28]	; (800dce0 <tuneInit+0x258>)
 800dcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcca:	429a      	cmp	r2, r3
 800dccc:	f6ff af7f 	blt.w	800dbce <tuneInit+0x146>
	}
	tunePending();
 800dcd0:	f7ff feca 	bl	800da68 <tunePending>
}
 800dcd4:	bf00      	nop
 800dcd6:	3780      	adds	r7, #128	; 0x80
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	2000053c 	.word	0x2000053c
 800dce0:	20000550 	.word	0x20000550
 800dce4:	2000a480 	.word	0x2000a480
 800dce8:	20000564 	.word	0x20000564
 800dcec:	20000578 	.word	0x20000578

0800dcf0 <tuneUpdate>:

void tuneUpdate(TUNE_PAGE page){
 800dcf0:	b5b0      	push	{r4, r5, r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][*curValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][*curValue...][0x20][0x00] format of FLOAT

	for(int i=0; i<numInt[page]; i++){
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	623b      	str	r3, [r7, #32]
 800dcfe:	e053      	b.n	800dda8 <tuneUpdate+0xb8>
 800dd00:	466b      	mov	r3, sp
 800dd02:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 800dd04:	2309      	movs	r3, #9
 800dd06:	613b      	str	r3, [r7, #16]
		uint8_t sendBuf[len];
 800dd08:	693c      	ldr	r4, [r7, #16]
 800dd0a:	1e63      	subs	r3, r4, #1
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	4623      	mov	r3, r4
 800dd10:	4618      	mov	r0, r3
 800dd12:	f04f 0100 	mov.w	r1, #0
 800dd16:	f04f 0200 	mov.w	r2, #0
 800dd1a:	f04f 0300 	mov.w	r3, #0
 800dd1e:	00cb      	lsls	r3, r1, #3
 800dd20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dd24:	00c2      	lsls	r2, r0, #3
 800dd26:	4623      	mov	r3, r4
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f04f 0100 	mov.w	r1, #0
 800dd2e:	f04f 0200 	mov.w	r2, #0
 800dd32:	f04f 0300 	mov.w	r3, #0
 800dd36:	00cb      	lsls	r3, r1, #3
 800dd38:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dd3c:	00c2      	lsls	r2, r0, #3
 800dd3e:	4623      	mov	r3, r4
 800dd40:	3307      	adds	r3, #7
 800dd42:	08db      	lsrs	r3, r3, #3
 800dd44:	00db      	lsls	r3, r3, #3
 800dd46:	ebad 0d03 	sub.w	sp, sp, r3
 800dd4a:	466b      	mov	r3, sp
 800dd4c:	3300      	adds	r3, #0
 800dd4e:	60bb      	str	r3, [r7, #8]
		sendBuf[0] = 0x52; sendBuf[1] = 0x01; sendBuf[len-2] = 0x31; sendBuf[len-1] = 0x40;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	2252      	movs	r2, #82	; 0x52
 800dd54:	701a      	strb	r2, [r3, #0]
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	705a      	strb	r2, [r3, #1]
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	3b02      	subs	r3, #2
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	2131      	movs	r1, #49	; 0x31
 800dd64:	54d1      	strb	r1, [r2, r3]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	2140      	movs	r1, #64	; 0x40
 800dd6e:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], intList[page][i].ptr, 4);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	3303      	adds	r3, #3
 800dd7c:	79fa      	ldrb	r2, [r7, #7]
 800dd7e:	4940      	ldr	r1, [pc, #256]	; (800de80 <tuneUpdate+0x190>)
 800dd80:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800dd84:	6a3a      	ldr	r2, [r7, #32]
 800dd86:	0112      	lsls	r2, r2, #4
 800dd88:	440a      	add	r2, r1
 800dd8a:	6852      	ldr	r2, [r2, #4]
 800dd8c:	6812      	ldr	r2, [r2, #0]
 800dd8e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800dd90:	4b3c      	ldr	r3, [pc, #240]	; (800de84 <tuneUpdate+0x194>)
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	b29a      	uxth	r2, r3
 800dd9a:	2364      	movs	r3, #100	; 0x64
 800dd9c:	f00a f991 	bl	80180c2 <HAL_UART_Transmit>
 800dda0:	46ad      	mov	sp, r5
	for(int i=0; i<numInt[page]; i++){
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	3301      	adds	r3, #1
 800dda6:	623b      	str	r3, [r7, #32]
 800dda8:	79fb      	ldrb	r3, [r7, #7]
 800ddaa:	4a37      	ldr	r2, [pc, #220]	; (800de88 <tuneUpdate+0x198>)
 800ddac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddb0:	6a3a      	ldr	r2, [r7, #32]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	dba4      	blt.n	800dd00 <tuneUpdate+0x10>
	}

	for(int i=0; i<numFloat[page]; i++){
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	627b      	str	r3, [r7, #36]	; 0x24
 800ddba:	e053      	b.n	800de64 <tuneUpdate+0x174>
 800ddbc:	466b      	mov	r3, sp
 800ddbe:	461d      	mov	r5, r3
		int len = 1+1+1+4+1+1;
 800ddc0:	2309      	movs	r3, #9
 800ddc2:	61fb      	str	r3, [r7, #28]
		uint8_t sendBuf[len];
 800ddc4:	69fc      	ldr	r4, [r7, #28]
 800ddc6:	1e63      	subs	r3, r4, #1
 800ddc8:	61bb      	str	r3, [r7, #24]
 800ddca:	4623      	mov	r3, r4
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f04f 0100 	mov.w	r1, #0
 800ddd2:	f04f 0200 	mov.w	r2, #0
 800ddd6:	f04f 0300 	mov.w	r3, #0
 800ddda:	00cb      	lsls	r3, r1, #3
 800dddc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dde0:	00c2      	lsls	r2, r0, #3
 800dde2:	4623      	mov	r3, r4
 800dde4:	4618      	mov	r0, r3
 800dde6:	f04f 0100 	mov.w	r1, #0
 800ddea:	f04f 0200 	mov.w	r2, #0
 800ddee:	f04f 0300 	mov.w	r3, #0
 800ddf2:	00cb      	lsls	r3, r1, #3
 800ddf4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ddf8:	00c2      	lsls	r2, r0, #3
 800ddfa:	4623      	mov	r3, r4
 800ddfc:	3307      	adds	r3, #7
 800ddfe:	08db      	lsrs	r3, r3, #3
 800de00:	00db      	lsls	r3, r3, #3
 800de02:	ebad 0d03 	sub.w	sp, sp, r3
 800de06:	466b      	mov	r3, sp
 800de08:	3300      	adds	r3, #0
 800de0a:	617b      	str	r3, [r7, #20]
		sendBuf[0] = 0x14; sendBuf[1] = 0x01; sendBuf[len-2] = 0x20; sendBuf[len-1] = 0x00;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2214      	movs	r2, #20
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	2201      	movs	r2, #1
 800de16:	705a      	strb	r2, [r3, #1]
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	3b02      	subs	r3, #2
 800de1c:	697a      	ldr	r2, [r7, #20]
 800de1e:	2120      	movs	r1, #32
 800de20:	54d1      	strb	r1, [r2, r3]
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	3b01      	subs	r3, #1
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	2100      	movs	r1, #0
 800de2a:	54d1      	strb	r1, [r2, r3]
		sendBuf[2] = i;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	709a      	strb	r2, [r3, #2]
		memcpy(&sendBuf[3], floatList[page][i].ptr, 4);
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	3303      	adds	r3, #3
 800de38:	79fa      	ldrb	r2, [r7, #7]
 800de3a:	4914      	ldr	r1, [pc, #80]	; (800de8c <tuneUpdate+0x19c>)
 800de3c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	0112      	lsls	r2, r2, #4
 800de44:	440a      	add	r2, r1
 800de46:	6852      	ldr	r2, [r2, #4]
 800de48:	6812      	ldr	r2, [r2, #0]
 800de4a:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(tuneUart, sendBuf, len, 100);
 800de4c:	4b0d      	ldr	r3, [pc, #52]	; (800de84 <tuneUpdate+0x194>)
 800de4e:	6818      	ldr	r0, [r3, #0]
 800de50:	6979      	ldr	r1, [r7, #20]
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	b29a      	uxth	r2, r3
 800de56:	2364      	movs	r3, #100	; 0x64
 800de58:	f00a f933 	bl	80180c2 <HAL_UART_Transmit>
 800de5c:	46ad      	mov	sp, r5
	for(int i=0; i<numFloat[page]; i++){
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	3301      	adds	r3, #1
 800de62:	627b      	str	r3, [r7, #36]	; 0x24
 800de64:	79fb      	ldrb	r3, [r7, #7]
 800de66:	4a0a      	ldr	r2, [pc, #40]	; (800de90 <tuneUpdate+0x1a0>)
 800de68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de6e:	429a      	cmp	r2, r3
 800de70:	dba4      	blt.n	800ddbc <tuneUpdate+0xcc>
	}

	tunePending();
 800de72:	f7ff fdf9 	bl	800da68 <tunePending>
}
 800de76:	bf00      	nop
 800de78:	3728      	adds	r7, #40	; 0x28
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bdb0      	pop	{r4, r5, r7, pc}
 800de7e:	bf00      	nop
 800de80:	20000564 	.word	0x20000564
 800de84:	2000a480 	.word	0x2000a480
 800de88:	2000053c 	.word	0x2000053c
 800de8c:	20000578 	.word	0x20000578
 800de90:	20000550 	.word	0x20000550

0800de94 <tuneEdit>:

void tuneEdit(TUNE_PAGE page, RNS_interface_t* rns){
 800de94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800de98:	b086      	sub	sp, #24
 800de9a:	af04      	add	r7, sp, #16
 800de9c:	4603      	mov	r3, r0
 800de9e:	6039      	str	r1, [r7, #0]
 800dea0:	71fb      	strb	r3, [r7, #7]
	//[0x52][0x01][index][editValue...][0x31][0x40] format of INT
	//[0x14][0x01][index][editValue...][0x20][0x00] format of FLOAT
	//[0x88][0x77] terminate, back to tune pending
	static uint8_t state = 0;

	switch(state){
 800dea2:	4b8f      	ldr	r3, [pc, #572]	; (800e0e0 <tuneEdit+0x24c>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	f200 8160 	bhi.w	800e16c <tuneEdit+0x2d8>
 800deac:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <tuneEdit+0x20>)
 800deae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb2:	bf00      	nop
 800deb4:	0800dec5 	.word	0x0800dec5
 800deb8:	0800dedb 	.word	0x0800dedb
 800debc:	0800df1f 	.word	0x0800df1f
 800dec0:	0800e0f9 	.word	0x0800e0f9
	case 0://When first received tuneCommand == 'e'
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800dec4:	4b87      	ldr	r3, [pc, #540]	; (800e0e4 <tuneEdit+0x250>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2201      	movs	r2, #1
 800deca:	4987      	ldr	r1, [pc, #540]	; (800e0e8 <tuneEdit+0x254>)
 800decc:	4618      	mov	r0, r3
 800dece:	f00a f9e7 	bl	80182a0 <HAL_UART_Receive_DMA>
		state = 1;
 800ded2:	4b83      	ldr	r3, [pc, #524]	; (800e0e0 <tuneEdit+0x24c>)
 800ded4:	2201      	movs	r2, #1
 800ded6:	701a      	strb	r2, [r3, #0]
		break;
 800ded8:	e148      	b.n	800e16c <tuneEdit+0x2d8>
	case 1:
		if(tuneHeader == 0x52 || tuneHeader == 0x14 || tuneHeader == 0x88){
 800deda:	4b83      	ldr	r3, [pc, #524]	; (800e0e8 <tuneEdit+0x254>)
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b52      	cmp	r3, #82	; 0x52
 800dee0:	d007      	beq.n	800def2 <tuneEdit+0x5e>
 800dee2:	4b81      	ldr	r3, [pc, #516]	; (800e0e8 <tuneEdit+0x254>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b14      	cmp	r3, #20
 800dee8:	d003      	beq.n	800def2 <tuneEdit+0x5e>
 800deea:	4b7f      	ldr	r3, [pc, #508]	; (800e0e8 <tuneEdit+0x254>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b88      	cmp	r3, #136	; 0x88
 800def0:	d10a      	bne.n	800df08 <tuneEdit+0x74>
			state = 2;
 800def2:	4b7b      	ldr	r3, [pc, #492]	; (800e0e0 <tuneEdit+0x24c>)
 800def4:	2202      	movs	r2, #2
 800def6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader1, 1);
 800def8:	4b7a      	ldr	r3, [pc, #488]	; (800e0e4 <tuneEdit+0x250>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2201      	movs	r2, #1
 800defe:	497b      	ldr	r1, [pc, #492]	; (800e0ec <tuneEdit+0x258>)
 800df00:	4618      	mov	r0, r3
 800df02:	f00a f9cd 	bl	80182a0 <HAL_UART_Receive_DMA>
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 800df06:	e131      	b.n	800e16c <tuneEdit+0x2d8>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800df08:	4b76      	ldr	r3, [pc, #472]	; (800e0e4 <tuneEdit+0x250>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2201      	movs	r2, #1
 800df0e:	4976      	ldr	r1, [pc, #472]	; (800e0e8 <tuneEdit+0x254>)
 800df10:	4618      	mov	r0, r3
 800df12:	f00a f9c5 	bl	80182a0 <HAL_UART_Receive_DMA>
			state = 1;
 800df16:	4b72      	ldr	r3, [pc, #456]	; (800e0e0 <tuneEdit+0x24c>)
 800df18:	2201      	movs	r2, #1
 800df1a:	701a      	strb	r2, [r3, #0]
		break;
 800df1c:	e126      	b.n	800e16c <tuneEdit+0x2d8>
	case 2:
		if(tuneHeader1 == 0x01){
 800df1e:	4b73      	ldr	r3, [pc, #460]	; (800e0ec <tuneEdit+0x258>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d10a      	bne.n	800df3c <tuneEdit+0xa8>
			HAL_UART_Receive_DMA(tuneUart, tuneBuffer, 7);
 800df26:	4b6f      	ldr	r3, [pc, #444]	; (800e0e4 <tuneEdit+0x250>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2207      	movs	r2, #7
 800df2c:	4970      	ldr	r1, [pc, #448]	; (800e0f0 <tuneEdit+0x25c>)
 800df2e:	4618      	mov	r0, r3
 800df30:	f00a f9b6 	bl	80182a0 <HAL_UART_Receive_DMA>
			state = 3;
 800df34:	4b6a      	ldr	r3, [pc, #424]	; (800e0e0 <tuneEdit+0x24c>)
 800df36:	2203      	movs	r2, #3
 800df38:	701a      	strb	r2, [r3, #0]
		}
		else{
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
			state = 1;
		}
		break;
 800df3a:	e117      	b.n	800e16c <tuneEdit+0x2d8>
		else if(tuneHeader1 == 0x77){
 800df3c:	4b6b      	ldr	r3, [pc, #428]	; (800e0ec <tuneEdit+0x258>)
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	2b77      	cmp	r3, #119	; 0x77
 800df42:	f040 80c1 	bne.w	800e0c8 <tuneEdit+0x234>
			if(page == 0){
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f040 80b7 	bne.w	800e0bc <tuneEdit+0x228>
				RNSSet(rns, RNS_F_LEFT_VEL_PID,  *(floatList[page][0].ptr), *(floatList[page][1].ptr), *(floatList[page][2].ptr));
 800df4e:	79fb      	ldrb	r3, [r7, #7]
 800df50:	4a68      	ldr	r2, [pc, #416]	; (800e0f4 <tuneEdit+0x260>)
 800df52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f2 faf4 	bl	8000548 <__aeabi_f2d>
 800df60:	4680      	mov	r8, r0
 800df62:	4689      	mov	r9, r1
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4a63      	ldr	r2, [pc, #396]	; (800e0f4 <tuneEdit+0x260>)
 800df68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df6c:	3310      	adds	r3, #16
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4618      	mov	r0, r3
 800df74:	f7f2 fae8 	bl	8000548 <__aeabi_f2d>
 800df78:	4604      	mov	r4, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	79fb      	ldrb	r3, [r7, #7]
 800df7e:	4a5d      	ldr	r2, [pc, #372]	; (800e0f4 <tuneEdit+0x260>)
 800df80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df84:	3320      	adds	r3, #32
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7f2 fadc 	bl	8000548 <__aeabi_f2d>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df98:	e9cd 4500 	strd	r4, r5, [sp]
 800df9c:	4642      	mov	r2, r8
 800df9e:	464b      	mov	r3, r9
 800dfa0:	212f      	movs	r1, #47	; 0x2f
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7f8 fdde 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_F_RIGHT_VEL_PID, *(floatList[page][3].ptr), *(floatList[page][4].ptr), *(floatList[page][5].ptr));
 800dfa8:	79fb      	ldrb	r3, [r7, #7]
 800dfaa:	4a52      	ldr	r2, [pc, #328]	; (800e0f4 <tuneEdit+0x260>)
 800dfac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfb0:	3330      	adds	r3, #48	; 0x30
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7f2 fac6 	bl	8000548 <__aeabi_f2d>
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	4689      	mov	r9, r1
 800dfc0:	79fb      	ldrb	r3, [r7, #7]
 800dfc2:	4a4c      	ldr	r2, [pc, #304]	; (800e0f4 <tuneEdit+0x260>)
 800dfc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfc8:	3340      	adds	r3, #64	; 0x40
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7f2 faba 	bl	8000548 <__aeabi_f2d>
 800dfd4:	4604      	mov	r4, r0
 800dfd6:	460d      	mov	r5, r1
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	4a46      	ldr	r2, [pc, #280]	; (800e0f4 <tuneEdit+0x260>)
 800dfdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfe0:	3350      	adds	r3, #80	; 0x50
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f2 faae 	bl	8000548 <__aeabi_f2d>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dff4:	e9cd 4500 	strd	r4, r5, [sp]
 800dff8:	4642      	mov	r2, r8
 800dffa:	464b      	mov	r3, r9
 800dffc:	2130      	movs	r1, #48	; 0x30
 800dffe:	6838      	ldr	r0, [r7, #0]
 800e000:	f7f8 fdb0 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_B_LEFT_VEL_PID,  *(floatList[page][6].ptr), *(floatList[page][7].ptr), *(floatList[page][8].ptr));
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	4a3b      	ldr	r2, [pc, #236]	; (800e0f4 <tuneEdit+0x260>)
 800e008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e00c:	3360      	adds	r3, #96	; 0x60
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4618      	mov	r0, r3
 800e014:	f7f2 fa98 	bl	8000548 <__aeabi_f2d>
 800e018:	4680      	mov	r8, r0
 800e01a:	4689      	mov	r9, r1
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	4a35      	ldr	r2, [pc, #212]	; (800e0f4 <tuneEdit+0x260>)
 800e020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e024:	3370      	adds	r3, #112	; 0x70
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f2 fa8c 	bl	8000548 <__aeabi_f2d>
 800e030:	4604      	mov	r4, r0
 800e032:	460d      	mov	r5, r1
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	4a2f      	ldr	r2, [pc, #188]	; (800e0f4 <tuneEdit+0x260>)
 800e038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e03c:	3380      	adds	r3, #128	; 0x80
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4618      	mov	r0, r3
 800e044:	f7f2 fa80 	bl	8000548 <__aeabi_f2d>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e050:	e9cd 4500 	strd	r4, r5, [sp]
 800e054:	4642      	mov	r2, r8
 800e056:	464b      	mov	r3, r9
 800e058:	2131      	movs	r1, #49	; 0x31
 800e05a:	6838      	ldr	r0, [r7, #0]
 800e05c:	f7f8 fd82 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_B_RIGHT_VEL_PID, *(floatList[page][9].ptr), *(floatList[page][10].ptr), *(floatList[page][11].ptr));
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	4a24      	ldr	r2, [pc, #144]	; (800e0f4 <tuneEdit+0x260>)
 800e064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e068:	3390      	adds	r3, #144	; 0x90
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f2 fa6a 	bl	8000548 <__aeabi_f2d>
 800e074:	4680      	mov	r8, r0
 800e076:	4689      	mov	r9, r1
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	4a1e      	ldr	r2, [pc, #120]	; (800e0f4 <tuneEdit+0x260>)
 800e07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e080:	33a0      	adds	r3, #160	; 0xa0
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4618      	mov	r0, r3
 800e088:	f7f2 fa5e 	bl	8000548 <__aeabi_f2d>
 800e08c:	4604      	mov	r4, r0
 800e08e:	460d      	mov	r5, r1
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	4a18      	ldr	r2, [pc, #96]	; (800e0f4 <tuneEdit+0x260>)
 800e094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e098:	33b0      	adds	r3, #176	; 0xb0
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f2 fa52 	bl	8000548 <__aeabi_f2d>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	460b      	mov	r3, r1
 800e0a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0ac:	e9cd 4500 	strd	r4, r5, [sp]
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	2132      	movs	r1, #50	; 0x32
 800e0b6:	6838      	ldr	r0, [r7, #0]
 800e0b8:	f7f8 fd54 	bl	8006b64 <RNSSet>
			tunePending();
 800e0bc:	f7ff fcd4 	bl	800da68 <tunePending>
			state = 0;
 800e0c0:	4b07      	ldr	r3, [pc, #28]	; (800e0e0 <tuneEdit+0x24c>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	701a      	strb	r2, [r3, #0]
		break;
 800e0c6:	e051      	b.n	800e16c <tuneEdit+0x2d8>
			HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800e0c8:	4b06      	ldr	r3, [pc, #24]	; (800e0e4 <tuneEdit+0x250>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	4906      	ldr	r1, [pc, #24]	; (800e0e8 <tuneEdit+0x254>)
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f00a f8e5 	bl	80182a0 <HAL_UART_Receive_DMA>
			state = 1;
 800e0d6:	4b02      	ldr	r3, [pc, #8]	; (800e0e0 <tuneEdit+0x24c>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	701a      	strb	r2, [r3, #0]
		break;
 800e0dc:	e046      	b.n	800e16c <tuneEdit+0x2d8>
 800e0de:	bf00      	nop
 800e0e0:	20000854 	.word	0x20000854
 800e0e4:	2000a480 	.word	0x2000a480
 800e0e8:	200096a0 	.word	0x200096a0
 800e0ec:	200099b4 	.word	0x200099b4
 800e0f0:	200073e4 	.word	0x200073e4
 800e0f4:	20000578 	.word	0x20000578
	case 3:
		if(tuneBuffer[5] == 0x31 && tuneBuffer[6] == 0x40){
 800e0f8:	4b1f      	ldr	r3, [pc, #124]	; (800e178 <tuneEdit+0x2e4>)
 800e0fa:	795b      	ldrb	r3, [r3, #5]
 800e0fc:	2b31      	cmp	r3, #49	; 0x31
 800e0fe:	d10f      	bne.n	800e120 <tuneEdit+0x28c>
 800e100:	4b1d      	ldr	r3, [pc, #116]	; (800e178 <tuneEdit+0x2e4>)
 800e102:	799b      	ldrb	r3, [r3, #6]
 800e104:	2b40      	cmp	r3, #64	; 0x40
 800e106:	d10b      	bne.n	800e120 <tuneEdit+0x28c>
			*((int *)(intList[page][tuneBuffer[0]].ptr)) = *((int *)&tuneBuffer[1]);
 800e108:	491c      	ldr	r1, [pc, #112]	; (800e17c <tuneEdit+0x2e8>)
 800e10a:	79fb      	ldrb	r3, [r7, #7]
 800e10c:	4a1c      	ldr	r2, [pc, #112]	; (800e180 <tuneEdit+0x2ec>)
 800e10e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e112:	4b19      	ldr	r3, [pc, #100]	; (800e178 <tuneEdit+0x2e4>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	011b      	lsls	r3, r3, #4
 800e118:	4413      	add	r3, r2
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	680a      	ldr	r2, [r1, #0]
 800e11e:	601a      	str	r2, [r3, #0]
		}

		if(tuneBuffer[5] == 0x20 && tuneBuffer[6] == 0x00){
 800e120:	4b15      	ldr	r3, [pc, #84]	; (800e178 <tuneEdit+0x2e4>)
 800e122:	795b      	ldrb	r3, [r3, #5]
 800e124:	2b20      	cmp	r3, #32
 800e126:	d10f      	bne.n	800e148 <tuneEdit+0x2b4>
 800e128:	4b13      	ldr	r3, [pc, #76]	; (800e178 <tuneEdit+0x2e4>)
 800e12a:	799b      	ldrb	r3, [r3, #6]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d10b      	bne.n	800e148 <tuneEdit+0x2b4>
			*(floatList[page][tuneBuffer[0]].ptr) = *((float *)&tuneBuffer[1]);
 800e130:	4912      	ldr	r1, [pc, #72]	; (800e17c <tuneEdit+0x2e8>)
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	4a13      	ldr	r2, [pc, #76]	; (800e184 <tuneEdit+0x2f0>)
 800e136:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e13a:	4b0f      	ldr	r3, [pc, #60]	; (800e178 <tuneEdit+0x2e4>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	011b      	lsls	r3, r3, #4
 800e140:	4413      	add	r3, r2
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	680a      	ldr	r2, [r1, #0]
 800e146:	601a      	str	r2, [r3, #0]
		}
		tuneBuffer[5] = tuneBuffer[6] = 0;
 800e148:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <tuneEdit+0x2e4>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	719a      	strb	r2, [r3, #6]
 800e14e:	4b0a      	ldr	r3, [pc, #40]	; (800e178 <tuneEdit+0x2e4>)
 800e150:	799a      	ldrb	r2, [r3, #6]
 800e152:	4b09      	ldr	r3, [pc, #36]	; (800e178 <tuneEdit+0x2e4>)
 800e154:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_DMA(tuneUart, &tuneHeader, 1);
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <tuneEdit+0x2f4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2201      	movs	r2, #1
 800e15c:	490b      	ldr	r1, [pc, #44]	; (800e18c <tuneEdit+0x2f8>)
 800e15e:	4618      	mov	r0, r3
 800e160:	f00a f89e 	bl	80182a0 <HAL_UART_Receive_DMA>
		state = 1;
 800e164:	4b0a      	ldr	r3, [pc, #40]	; (800e190 <tuneEdit+0x2fc>)
 800e166:	2201      	movs	r2, #1
 800e168:	701a      	strb	r2, [r3, #0]
		break;
 800e16a:	bf00      	nop
	}
}
 800e16c:	bf00      	nop
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e176:	bf00      	nop
 800e178:	200073e4 	.word	0x200073e4
 800e17c:	200073e5 	.word	0x200073e5
 800e180:	20000564 	.word	0x20000564
 800e184:	20000578 	.word	0x20000578
 800e188:	2000a480 	.word	0x2000a480
 800e18c:	200096a0 	.word	0x200096a0
 800e190:	20000854 	.word	0x20000854

0800e194 <tuneWriteInt>:

uint32_t tuneWriteInt(void){
 800e194:	b580      	push	{r7, lr}
 800e196:	b086      	sub	sp, #24
 800e198:	af00      	add	r7, sp, #0
	uint32_t success=0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800e19e:	f005 fbd9 	bl	8013954 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800e1a2:	4b2b      	ldr	r3, [pc, #172]	; (800e250 <tuneWriteInt+0xbc>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800e1a8:	4b29      	ldr	r3, [pc, #164]	; (800e250 <tuneWriteInt+0xbc>)
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_6;
 800e1ae:	4b28      	ldr	r3, [pc, #160]	; (800e250 <tuneWriteInt+0xbc>)
 800e1b0:	2206      	movs	r2, #6
 800e1b2:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 800e1b4:	4b26      	ldr	r3, [pc, #152]	; (800e250 <tuneWriteInt+0xbc>)
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800e1ba:	1d3b      	adds	r3, r7, #4
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4824      	ldr	r0, [pc, #144]	; (800e250 <tuneWriteInt+0xbc>)
 800e1c0:	f005 fd36 	bl	8013c30 <HAL_FLASHEx_Erase>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d003      	beq.n	800e1d2 <tuneWriteInt+0x3e>
	{
		return HAL_FLASH_GetError ();
 800e1ca:	f005 fbf5 	bl	80139b8 <HAL_FLASH_GetError>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	e039      	b.n	800e246 <tuneWriteInt+0xb2>
	}
	for(int i=0; i<tunePage; i++){
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	613b      	str	r3, [r7, #16]
 800e1d6:	e02d      	b.n	800e234 <tuneWriteInt+0xa0>
		uint32_t Address = intAddress[i];
 800e1d8:	4a1e      	ldr	r2, [pc, #120]	; (800e254 <tuneWriteInt+0xc0>)
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e0:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	60bb      	str	r3, [r7, #8]
 800e1e6:	e01b      	b.n	800e220 <tuneWriteInt+0x8c>
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, *((int *)(intList[i][j].ptr)))==HAL_OK){
 800e1e8:	4a1b      	ldr	r2, [pc, #108]	; (800e258 <tuneWriteInt+0xc4>)
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	011b      	lsls	r3, r3, #4
 800e1f4:	4413      	add	r3, r2
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e200:	68f9      	ldr	r1, [r7, #12]
 800e202:	2002      	movs	r0, #2
 800e204:	f005 fb52 	bl	80138ac <HAL_FLASH_Program>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d102      	bne.n	800e214 <tuneWriteInt+0x80>
				success ++;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	3301      	adds	r3, #1
 800e212:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3304      	adds	r3, #4
 800e218:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numInt[i]; j++){
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	3301      	adds	r3, #1
 800e21e:	60bb      	str	r3, [r7, #8]
 800e220:	4a0e      	ldr	r2, [pc, #56]	; (800e25c <tuneWriteInt+0xc8>)
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	dbdc      	blt.n	800e1e8 <tuneWriteInt+0x54>
	for(int i=0; i<tunePage; i++){
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	3301      	adds	r3, #1
 800e232:	613b      	str	r3, [r7, #16]
 800e234:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <tuneWriteInt+0xcc>)
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	461a      	mov	r2, r3
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	4293      	cmp	r3, r2
 800e23e:	dbcb      	blt.n	800e1d8 <tuneWriteInt+0x44>
		}
	}

	HAL_FLASH_Lock();
 800e240:	f005 fbaa 	bl	8013998 <HAL_FLASH_Lock>
	return success;
 800e244:	697b      	ldr	r3, [r7, #20]
}
 800e246:	4618      	mov	r0, r3
 800e248:	3718      	adds	r7, #24
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20000858 	.word	0x20000858
 800e254:	2000058c 	.word	0x2000058c
 800e258:	20000564 	.word	0x20000564
 800e25c:	2000053c 	.word	0x2000053c
 800e260:	20007324 	.word	0x20007324

0800e264 <tuneWriteFloat>:

uint32_t tuneWriteFloat(void){
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0

	uint32_t success=0;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	HAL_FLASH_Unlock();
 800e26e:	f005 fb71 	bl	8013954 <HAL_FLASH_Unlock>

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800e272:	4b2c      	ldr	r3, [pc, #176]	; (800e324 <tuneWriteFloat+0xc0>)
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800e278:	4b2a      	ldr	r3, [pc, #168]	; (800e324 <tuneWriteFloat+0xc0>)
 800e27a:	2202      	movs	r2, #2
 800e27c:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Sector        = FLASH_SECTOR_7;
 800e27e:	4b29      	ldr	r3, [pc, #164]	; (800e324 <tuneWriteFloat+0xc0>)
 800e280:	2207      	movs	r2, #7
 800e282:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors     = 1;
 800e284:	4b27      	ldr	r3, [pc, #156]	; (800e324 <tuneWriteFloat+0xc0>)
 800e286:	2201      	movs	r2, #1
 800e288:	60da      	str	r2, [r3, #12]
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800e28a:	1d3b      	adds	r3, r7, #4
 800e28c:	4619      	mov	r1, r3
 800e28e:	4825      	ldr	r0, [pc, #148]	; (800e324 <tuneWriteFloat+0xc0>)
 800e290:	f005 fcce 	bl	8013c30 <HAL_FLASHEx_Erase>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <tuneWriteFloat+0x3e>
	{
		return HAL_FLASH_GetError ();
 800e29a:	f005 fb8d 	bl	80139b8 <HAL_FLASH_GetError>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	e03b      	b.n	800e31a <tuneWriteFloat+0xb6>
	}
	for(int i=0; i<tunePage; i++){
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	e02f      	b.n	800e308 <tuneWriteFloat+0xa4>
		uint32_t Address = floatAddress[i];
 800e2a8:	4a1f      	ldr	r2, [pc, #124]	; (800e328 <tuneWriteFloat+0xc4>)
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2b0:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
 800e2b6:	e01d      	b.n	800e2f4 <tuneWriteFloat+0x90>
			uint32_t temp;
			memcpy(&temp, floatList[i][j].ptr, 4);
 800e2b8:	4a1c      	ldr	r2, [pc, #112]	; (800e32c <tuneWriteFloat+0xc8>)
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	011b      	lsls	r3, r3, #4
 800e2c4:	4413      	add	r3, r2
 800e2c6:	685b      	ldr	r3, [r3, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	603b      	str	r3, [r7, #0]
			if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, temp)==HAL_OK){
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	f04f 0300 	mov.w	r3, #0
 800e2d4:	68f9      	ldr	r1, [r7, #12]
 800e2d6:	2002      	movs	r0, #2
 800e2d8:	f005 fae8 	bl	80138ac <HAL_FLASH_Program>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d102      	bne.n	800e2e8 <tuneWriteFloat+0x84>
				success ++;
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	617b      	str	r3, [r7, #20]
			}
			Address += 4;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	3304      	adds	r3, #4
 800e2ec:	60fb      	str	r3, [r7, #12]
		for(int j=0; j<numFloat[i]; j++){
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	60bb      	str	r3, [r7, #8]
 800e2f4:	4a0e      	ldr	r2, [pc, #56]	; (800e330 <tuneWriteFloat+0xcc>)
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	dbda      	blt.n	800e2b8 <tuneWriteFloat+0x54>
	for(int i=0; i<tunePage; i++){
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	3301      	adds	r3, #1
 800e306:	613b      	str	r3, [r7, #16]
 800e308:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <tuneWriteFloat+0xd0>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	461a      	mov	r2, r3
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	4293      	cmp	r3, r2
 800e312:	dbc9      	blt.n	800e2a8 <tuneWriteFloat+0x44>
		}
	}
	HAL_FLASH_Lock();
 800e314:	f005 fb40 	bl	8013998 <HAL_FLASH_Lock>
	return success;
 800e318:	697b      	ldr	r3, [r7, #20]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	2000086c 	.word	0x2000086c
 800e328:	200005a0 	.word	0x200005a0
 800e32c:	20000578 	.word	0x20000578
 800e330:	20000550 	.word	0x20000550
 800e334:	20007324 	.word	0x20007324

0800e338 <tunePID>:
			Address += 4;
		}
	}
}

void tunePID(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns, float base_type){
 800e338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e33c:	b0d0      	sub	sp, #320	; 0x140
 800e33e:	af16      	add	r7, sp, #88	; 0x58
 800e340:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e342:	64b9      	str	r1, [r7, #72]	; 0x48
 800e344:	647a      	str	r2, [r7, #68]	; 0x44
 800e346:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float target_speed = 3.0, base = base_type;
 800e34a:	4bbd      	ldr	r3, [pc, #756]	; (800e640 <tunePID+0x308>)
 800e34c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e352:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	int arr_x = 0, arr_y = 0, buf = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e35c:	2300      	movs	r3, #0
 800e35e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e362:	2300      	movs	r3, #0
 800e364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	float PID[4][3]={{AP, AI, AD},
 800e368:	4bb6      	ldr	r3, [pc, #728]	; (800e644 <tunePID+0x30c>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	657b      	str	r3, [r7, #84]	; 0x54
 800e36e:	4bb6      	ldr	r3, [pc, #728]	; (800e648 <tunePID+0x310>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	65bb      	str	r3, [r7, #88]	; 0x58
 800e374:	4bb5      	ldr	r3, [pc, #724]	; (800e64c <tunePID+0x314>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e37a:	4bb5      	ldr	r3, [pc, #724]	; (800e650 <tunePID+0x318>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	663b      	str	r3, [r7, #96]	; 0x60
 800e380:	4bb4      	ldr	r3, [pc, #720]	; (800e654 <tunePID+0x31c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	667b      	str	r3, [r7, #100]	; 0x64
 800e386:	4bb4      	ldr	r3, [pc, #720]	; (800e658 <tunePID+0x320>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e38c:	4bb3      	ldr	r3, [pc, #716]	; (800e65c <tunePID+0x324>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e392:	4bb3      	ldr	r3, [pc, #716]	; (800e660 <tunePID+0x328>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	673b      	str	r3, [r7, #112]	; 0x70
 800e398:	4bb2      	ldr	r3, [pc, #712]	; (800e664 <tunePID+0x32c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	677b      	str	r3, [r7, #116]	; 0x74
 800e39e:	4bb2      	ldr	r3, [pc, #712]	; (800e668 <tunePID+0x330>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3a4:	4bb1      	ldr	r3, [pc, #708]	; (800e66c <tunePID+0x334>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e3aa:	4bb1      	ldr	r3, [pc, #708]	; (800e670 <tunePID+0x338>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			{BP, BI, BD},
			{CP, CI, CD},
			{DP, DI, DD}};

	while(tune.PID){
 800e3b2:	f000 bfb6 	b.w	800f322 <tunePID+0xfea>
		if(ps4->button == R1){		//adjust speed
 800e3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3be:	d11a      	bne.n	800e3f6 <tunePID+0xbe>
			while(ps4->button == R1);
 800e3c0:	bf00      	nop
 800e3c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3ca:	d0fa      	beq.n	800e3c2 <tunePID+0x8a>
			target_speed += 1.0;
 800e3cc:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e3d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e3d8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
			if(target_speed > 6.0)
 800e3dc:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e3e0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800e3e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ec:	dd23      	ble.n	800e436 <tunePID+0xfe>
				target_speed = 6.0;
 800e3ee:	4ba1      	ldr	r3, [pc, #644]	; (800e674 <tunePID+0x33c>)
 800e3f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e3f4:	e01f      	b.n	800e436 <tunePID+0xfe>
		}else if(ps4->button == L1){
 800e3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3fe:	d11a      	bne.n	800e436 <tunePID+0xfe>
			while(ps4->button == L1);
 800e400:	bf00      	nop
 800e402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e40a:	d0fa      	beq.n	800e402 <tunePID+0xca>
			target_speed -= 1.0;
 800e40c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e418:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4
			if(target_speed < 1.0)
 800e41c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e424:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	d503      	bpl.n	800e436 <tunePID+0xfe>
				target_speed = 1.0;
 800e42e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		}

		LegacyMODN(ps4, rns);
 800e436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e438:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e43a:	f7f6 fdad 	bl	8004f98 <LegacyMODN>

		if(ps4->button == UP){		//direction
 800e43e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e442:	2b10      	cmp	r3, #16
 800e444:	f040 8120 	bne.w	800e688 <tunePID+0x350>
			uint32_t tick = HAL_GetTick();
 800e448:	f003 fa34 	bl	80118b4 <HAL_GetTick>
 800e44c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
			float a, b, c, d;
			while(ps4->button == UP){
 800e450:	e0e4      	b.n	800e61c <tunePID+0x2e4>
				if(base == fwd_omni){
 800e452:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e456:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e45a:	eef4 7a47 	vcmp.f32	s15, s14
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	d15c      	bne.n	800e51e <tunePID+0x1e6>
					RNSVelocity(target_speed, target_speed, target_speed, target_speed, rns);
 800e464:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e466:	edd7 1a39 	vldr	s3, [r7, #228]	; 0xe4
 800e46a:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 800e46e:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 800e472:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 800e476:	f7f8 f9b9 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800e47a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e47c:	2057      	movs	r0, #87	; 0x57
 800e47e:	f7f8 fcdd 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800e482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					b = rns->enq.enq_buffer[1].data;
 800e48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e48e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					c = rns->enq.enq_buffer[2].data;
 800e492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					d = rns->enq.enq_buffer[3].data;
 800e49a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e49e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e4a2:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e4a6:	f7f2 f84f 	bl	8000548 <__aeabi_f2d>
 800e4aa:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800e4ae:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e4b2:	f7f2 f849 	bl	8000548 <__aeabi_f2d>
 800e4b6:	4604      	mov	r4, r0
 800e4b8:	460d      	mov	r5, r1
 800e4ba:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e4be:	f7f2 f843 	bl	8000548 <__aeabi_f2d>
 800e4c2:	4680      	mov	r8, r0
 800e4c4:	4689      	mov	r9, r1
 800e4c6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e4ca:	f7f2 f83d 	bl	8000548 <__aeabi_f2d>
 800e4ce:	4682      	mov	sl, r0
 800e4d0:	468b      	mov	fp, r1
 800e4d2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800e4d6:	f7f2 f837 	bl	8000548 <__aeabi_f2d>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e4e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e4e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e4ea:	e9cd 4500 	strd	r4, r5, [sp]
 800e4ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e4f2:	4961      	ldr	r1, [pc, #388]	; (800e678 <tunePID+0x340>)
 800e4f4:	4861      	ldr	r0, [pc, #388]	; (800e67c <tunePID+0x344>)
 800e4f6:	f00f fa1b 	bl	801d930 <siprintf>
							target_speed, a, b, c, d);
					if(HAL_GetTick()-tick >= 20){
 800e4fa:	f003 f9db 	bl	80118b4 <HAL_GetTick>
 800e4fe:	4602      	mov	r2, r0
 800e500:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e504:	1ad3      	subs	r3, r2, r3
 800e506:	2b13      	cmp	r3, #19
 800e508:	f240 8088 	bls.w	800e61c <tunePID+0x2e4>
						tick = HAL_GetTick();
 800e50c:	f003 f9d2 	bl	80118b4 <HAL_GetTick>
 800e510:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						UARTPrintString(huartx, data);
 800e514:	4959      	ldr	r1, [pc, #356]	; (800e67c <tunePID+0x344>)
 800e516:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e518:	f7f5 f9da 	bl	80038d0 <UARTPrintString>
 800e51c:	e07e      	b.n	800e61c <tunePID+0x2e4>
					}
				}
				else if(base == tri_omni){
 800e51e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e526:	eef4 7a47 	vcmp.f32	s15, s14
 800e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52e:	d175      	bne.n	800e61c <tunePID+0x2e4>
					RNSVelocity((target_speed * 0.866), (target_speed * 0.866), 0.0, 0.0, rns);
 800e530:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e534:	f7f2 f808 	bl	8000548 <__aeabi_f2d>
 800e538:	a33f      	add	r3, pc, #252	; (adr r3, 800e638 <tunePID+0x300>)
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f7f2 f85b 	bl	80005f8 <__aeabi_dmul>
 800e542:	4602      	mov	r2, r0
 800e544:	460b      	mov	r3, r1
 800e546:	4610      	mov	r0, r2
 800e548:	4619      	mov	r1, r3
 800e54a:	f7f2 fb4d 	bl	8000be8 <__aeabi_d2f>
 800e54e:	4604      	mov	r4, r0
 800e550:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e554:	f7f1 fff8 	bl	8000548 <__aeabi_f2d>
 800e558:	a337      	add	r3, pc, #220	; (adr r3, 800e638 <tunePID+0x300>)
 800e55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55e:	f7f2 f84b 	bl	80005f8 <__aeabi_dmul>
 800e562:	4602      	mov	r2, r0
 800e564:	460b      	mov	r3, r1
 800e566:	4610      	mov	r0, r2
 800e568:	4619      	mov	r1, r3
 800e56a:	f7f2 fb3d 	bl	8000be8 <__aeabi_d2f>
 800e56e:	4603      	mov	r3, r0
 800e570:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e572:	eddf 1a43 	vldr	s3, [pc, #268]	; 800e680 <tunePID+0x348>
 800e576:	ed9f 1a42 	vldr	s2, [pc, #264]	; 800e680 <tunePID+0x348>
 800e57a:	ee00 3a90 	vmov	s1, r3
 800e57e:	ee00 4a10 	vmov	s0, r4
 800e582:	f7f8 f933 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800e586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e588:	2057      	movs	r0, #87	; 0x57
 800e58a:	f7f8 fc57 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800e58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e592:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					b = rns->enq.enq_buffer[1].data;
 800e596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
					c = rns->enq.enq_buffer[2].data;
 800e59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800e5a6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e5aa:	f7f1 ffcd 	bl	8000548 <__aeabi_f2d>
 800e5ae:	a322      	add	r3, pc, #136	; (adr r3, 800e638 <tunePID+0x300>)
 800e5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b4:	f7f2 f820 	bl	80005f8 <__aeabi_dmul>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	4692      	mov	sl, r2
 800e5be:	469b      	mov	fp, r3
 800e5c0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800e5c4:	f7f1 ffc0 	bl	8000548 <__aeabi_f2d>
 800e5c8:	4604      	mov	r4, r0
 800e5ca:	460d      	mov	r5, r1
 800e5cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e5d0:	f7f1 ffba 	bl	8000548 <__aeabi_f2d>
 800e5d4:	4680      	mov	r8, r0
 800e5d6:	4689      	mov	r9, r1
 800e5d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800e5dc:	f7f1 ffb4 	bl	8000548 <__aeabi_f2d>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e5ec:	e9cd 4500 	strd	r4, r5, [sp]
 800e5f0:	4652      	mov	r2, sl
 800e5f2:	465b      	mov	r3, fp
 800e5f4:	4923      	ldr	r1, [pc, #140]	; (800e684 <tunePID+0x34c>)
 800e5f6:	4821      	ldr	r0, [pc, #132]	; (800e67c <tunePID+0x344>)
 800e5f8:	f00f f99a 	bl	801d930 <siprintf>
							(target_speed * 0.866), a, b, c);
					if(HAL_GetTick()-tick >= 20){
 800e5fc:	f003 f95a 	bl	80118b4 <HAL_GetTick>
 800e600:	4602      	mov	r2, r0
 800e602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	2b13      	cmp	r3, #19
 800e60a:	d907      	bls.n	800e61c <tunePID+0x2e4>
						tick = HAL_GetTick();
 800e60c:	f003 f952 	bl	80118b4 <HAL_GetTick>
 800e610:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
						UARTPrintString(huartx, data);
 800e614:	4919      	ldr	r1, [pc, #100]	; (800e67c <tunePID+0x344>)
 800e616:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e618:	f7f5 f95a 	bl	80038d0 <UARTPrintString>
			while(ps4->button == UP){
 800e61c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e620:	2b10      	cmp	r3, #16
 800e622:	f43f af16 	beq.w	800e452 <tunePID+0x11a>
					}
				}
			}
			RNSStop(rns);
 800e626:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e628:	f7f8 f890 	bl	800674c <RNSStop>
			memset(data, 0, 100);
 800e62c:	2264      	movs	r2, #100	; 0x64
 800e62e:	2100      	movs	r1, #0
 800e630:	4812      	ldr	r0, [pc, #72]	; (800e67c <tunePID+0x344>)
 800e632:	f00e f99b 	bl	801c96c <memset>
 800e636:	e35c      	b.n	800ecf2 <tunePID+0x9ba>
 800e638:	a1cac083 	.word	0xa1cac083
 800e63c:	3febb645 	.word	0x3febb645
 800e640:	40400000 	.word	0x40400000
 800e644:	2000a374 	.word	0x2000a374
 800e648:	20007770 	.word	0x20007770
 800e64c:	2000a36c 	.word	0x2000a36c
 800e650:	200079fc 	.word	0x200079fc
 800e654:	2000946c 	.word	0x2000946c
 800e658:	20007760 	.word	0x20007760
 800e65c:	20009704 	.word	0x20009704
 800e660:	200098b0 	.word	0x200098b0
 800e664:	20007058 	.word	0x20007058
 800e668:	20009ef8 	.word	0x20009ef8
 800e66c:	20007534 	.word	0x20007534
 800e670:	20009b24 	.word	0x20009b24
 800e674:	40c00000 	.word	0x40c00000
 800e678:	0802264c 	.word	0x0802264c
 800e67c:	20006948 	.word	0x20006948
 800e680:	00000000 	.word	0x00000000
 800e684:	0802266c 	.word	0x0802266c
		}else if(ps4->button == LEFT){
 800e688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e68c:	2b80      	cmp	r3, #128	; 0x80
 800e68e:	f040 80f3 	bne.w	800e878 <tunePID+0x540>
			uint32_t tick = HAL_GetTick();
 800e692:	f003 f90f 	bl	80118b4 <HAL_GetTick>
 800e696:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
			float a, b, c, d;
			while(ps4->button == LEFT){
 800e69a:	e0df      	b.n	800e85c <tunePID+0x524>
				if(base == fwd_omni){
 800e69c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e6a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e6a4:	eef4 7a47 	vcmp.f32	s15, s14
 800e6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ac:	d16d      	bne.n	800e78a <tunePID+0x452>
					RNSVelocity(-target_speed, target_speed, target_speed, -target_speed, rns);
 800e6ae:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e6b2:	eeb1 7a67 	vneg.f32	s14, s15
 800e6b6:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e6ba:	eef1 7a67 	vneg.f32	s15, s15
 800e6be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e6c0:	eef0 1a67 	vmov.f32	s3, s15
 800e6c4:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 800e6c8:	edd7 0a39 	vldr	s1, [r7, #228]	; 0xe4
 800e6cc:	eeb0 0a47 	vmov.f32	s0, s14
 800e6d0:	f7f8 f88c 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800e6d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6d6:	2057      	movs	r0, #87	; 0x57
 800e6d8:	f7f8 fbb0 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800e6dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					b = rns->enq.enq_buffer[1].data;
 800e6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					c = rns->enq.enq_buffer[2].data;
 800e6ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					d = rns->enq.enq_buffer[3].data;
 800e6f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e6fc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e700:	f7f1 ff22 	bl	8000548 <__aeabi_f2d>
 800e704:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							target_speed, -a, b, c, -d);
 800e708:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800e70c:	eef1 7a67 	vneg.f32	s15, s15
 800e710:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e714:	4618      	mov	r0, r3
 800e716:	f7f1 ff17 	bl	8000548 <__aeabi_f2d>
 800e71a:	4604      	mov	r4, r0
 800e71c:	460d      	mov	r5, r1
 800e71e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e722:	f7f1 ff11 	bl	8000548 <__aeabi_f2d>
 800e726:	4680      	mov	r8, r0
 800e728:	4689      	mov	r9, r1
 800e72a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800e72e:	f7f1 ff0b 	bl	8000548 <__aeabi_f2d>
 800e732:	4682      	mov	sl, r0
 800e734:	468b      	mov	fp, r1
							target_speed, -a, b, c, -d);
 800e736:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800e73a:	eef1 7a67 	vneg.f32	s15, s15
 800e73e:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e742:	4618      	mov	r0, r3
 800e744:	f7f1 ff00 	bl	8000548 <__aeabi_f2d>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e750:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e754:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e758:	e9cd 4500 	strd	r4, r5, [sp]
 800e75c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e760:	4990      	ldr	r1, [pc, #576]	; (800e9a4 <tunePID+0x66c>)
 800e762:	4891      	ldr	r0, [pc, #580]	; (800e9a8 <tunePID+0x670>)
 800e764:	f00f f8e4 	bl	801d930 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 800e768:	f003 f8a4 	bl	80118b4 <HAL_GetTick>
 800e76c:	4602      	mov	r2, r0
 800e76e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e772:	1ad3      	subs	r3, r2, r3
 800e774:	2b13      	cmp	r3, #19
 800e776:	d971      	bls.n	800e85c <tunePID+0x524>
						tick = HAL_GetTick();
 800e778:	f003 f89c 	bl	80118b4 <HAL_GetTick>
 800e77c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						UARTPrintString(huartx, data);
 800e780:	4989      	ldr	r1, [pc, #548]	; (800e9a8 <tunePID+0x670>)
 800e782:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e784:	f7f5 f8a4 	bl	80038d0 <UARTPrintString>
 800e788:	e068      	b.n	800e85c <tunePID+0x524>
					}
				}
				else if(base == tri_omni){
 800e78a:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e78e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e792:	eef4 7a47 	vcmp.f32	s15, s14
 800e796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79a:	d15f      	bne.n	800e85c <tunePID+0x524>
					RNSVelocity((-0.5 * target_speed), (0.5 * target_speed), target_speed, 0.0, rns);
 800e79c:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e7a0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e7a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e7a8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e7ac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e7b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e7b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e7b6:	eddf 1a7d 	vldr	s3, [pc, #500]	; 800e9ac <tunePID+0x674>
 800e7ba:	ed97 1a39 	vldr	s2, [r7, #228]	; 0xe4
 800e7be:	eef0 0a67 	vmov.f32	s1, s15
 800e7c2:	eeb0 0a47 	vmov.f32	s0, s14
 800e7c6:	f7f8 f811 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800e7ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7cc:	2057      	movs	r0, #87	; 0x57
 800e7ce:	f7f8 fb35 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800e7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					b = rns->enq.enq_buffer[1].data;
 800e7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					c = rns->enq.enq_buffer[2].data;
 800e7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800e7ea:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e7ee:	f7f1 feab 	bl	8000548 <__aeabi_f2d>
 800e7f2:	4682      	mov	sl, r0
 800e7f4:	468b      	mov	fp, r1
 800e7f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800e7fa:	f7f1 fea5 	bl	8000548 <__aeabi_f2d>
 800e7fe:	4604      	mov	r4, r0
 800e800:	460d      	mov	r5, r1
 800e802:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800e806:	f7f1 fe9f 	bl	8000548 <__aeabi_f2d>
 800e80a:	4680      	mov	r8, r0
 800e80c:	4689      	mov	r9, r1
							target_speed, a, b, -c);
 800e80e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800e812:	eef1 7a67 	vneg.f32	s15, s15
 800e816:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7f1 fe94 	bl	8000548 <__aeabi_f2d>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e828:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e82c:	e9cd 4500 	strd	r4, r5, [sp]
 800e830:	4652      	mov	r2, sl
 800e832:	465b      	mov	r3, fp
 800e834:	495e      	ldr	r1, [pc, #376]	; (800e9b0 <tunePID+0x678>)
 800e836:	485c      	ldr	r0, [pc, #368]	; (800e9a8 <tunePID+0x670>)
 800e838:	f00f f87a 	bl	801d930 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 800e83c:	f003 f83a 	bl	80118b4 <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e846:	1ad3      	subs	r3, r2, r3
 800e848:	2b13      	cmp	r3, #19
 800e84a:	d907      	bls.n	800e85c <tunePID+0x524>
						tick = HAL_GetTick();
 800e84c:	f003 f832 	bl	80118b4 <HAL_GetTick>
 800e850:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
						UARTPrintString(huartx, data);
 800e854:	4954      	ldr	r1, [pc, #336]	; (800e9a8 <tunePID+0x670>)
 800e856:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e858:	f7f5 f83a 	bl	80038d0 <UARTPrintString>
			while(ps4->button == LEFT){
 800e85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e860:	2b80      	cmp	r3, #128	; 0x80
 800e862:	f43f af1b 	beq.w	800e69c <tunePID+0x364>
					}
				}
			}
			RNSStop(rns);
 800e866:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e868:	f7f7 ff70 	bl	800674c <RNSStop>
			memset(data, 0, 100);
 800e86c:	2264      	movs	r2, #100	; 0x64
 800e86e:	2100      	movs	r1, #0
 800e870:	484d      	ldr	r0, [pc, #308]	; (800e9a8 <tunePID+0x670>)
 800e872:	f00e f87b 	bl	801c96c <memset>
 800e876:	e23c      	b.n	800ecf2 <tunePID+0x9ba>
		}else if(ps4->button == DOWN){
 800e878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e87c:	2b40      	cmp	r3, #64	; 0x40
 800e87e:	f040 8130 	bne.w	800eae2 <tunePID+0x7aa>
			uint32_t tick = HAL_GetTick();
 800e882:	f003 f817 	bl	80118b4 <HAL_GetTick>
 800e886:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
			float a, b, c, d;
			while(ps4->button == DOWN){
 800e88a:	e11c      	b.n	800eac6 <tunePID+0x78e>
				if(base == fwd_omni){
 800e88c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e890:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e894:	eef4 7a47 	vcmp.f32	s15, s14
 800e898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89c:	f040 808a 	bne.w	800e9b4 <tunePID+0x67c>
					RNSVelocity(-target_speed, -target_speed, -target_speed, -target_speed, rns);
 800e8a0:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e8a4:	eeb1 7a67 	vneg.f32	s14, s15
 800e8a8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e8ac:	eef1 6a67 	vneg.f32	s13, s15
 800e8b0:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e8b4:	eeb1 6a67 	vneg.f32	s12, s15
 800e8b8:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800e8bc:	eef1 7a67 	vneg.f32	s15, s15
 800e8c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e8c2:	eef0 1a67 	vmov.f32	s3, s15
 800e8c6:	eeb0 1a46 	vmov.f32	s2, s12
 800e8ca:	eef0 0a66 	vmov.f32	s1, s13
 800e8ce:	eeb0 0a47 	vmov.f32	s0, s14
 800e8d2:	f7f7 ff8b 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800e8d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8d8:	2057      	movs	r0, #87	; 0x57
 800e8da:	f7f8 faaf 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800e8de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					b = rns->enq.enq_buffer[1].data;
 800e8e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					c = rns->enq.enq_buffer[2].data;
 800e8ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					d = rns->enq.enq_buffer[3].data;
 800e8f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e8fe:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e902:	f7f1 fe21 	bl	8000548 <__aeabi_f2d>
 800e906:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
							target_speed, -a, -b, -c, -d);
 800e90a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800e90e:	eef1 7a67 	vneg.f32	s15, s15
 800e912:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e916:	4618      	mov	r0, r3
 800e918:	f7f1 fe16 	bl	8000548 <__aeabi_f2d>
 800e91c:	4604      	mov	r4, r0
 800e91e:	460d      	mov	r5, r1
							target_speed, -a, -b, -c, -d);
 800e920:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800e924:	eef1 7a67 	vneg.f32	s15, s15
 800e928:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7f1 fe0b 	bl	8000548 <__aeabi_f2d>
 800e932:	4680      	mov	r8, r0
 800e934:	4689      	mov	r9, r1
							target_speed, -a, -b, -c, -d);
 800e936:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800e93a:	eef1 7a67 	vneg.f32	s15, s15
 800e93e:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e942:	4618      	mov	r0, r3
 800e944:	f7f1 fe00 	bl	8000548 <__aeabi_f2d>
 800e948:	4682      	mov	sl, r0
 800e94a:	468b      	mov	fp, r1
							target_speed, -a, -b, -c, -d);
 800e94c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800e950:	eef1 7a67 	vneg.f32	s15, s15
 800e954:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800e958:	4618      	mov	r0, r3
 800e95a:	f7f1 fdf5 	bl	8000548 <__aeabi_f2d>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e966:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e96a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e96e:	e9cd 4500 	strd	r4, r5, [sp]
 800e972:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e976:	490b      	ldr	r1, [pc, #44]	; (800e9a4 <tunePID+0x66c>)
 800e978:	480b      	ldr	r0, [pc, #44]	; (800e9a8 <tunePID+0x670>)
 800e97a:	f00e ffd9 	bl	801d930 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 800e97e:	f002 ff99 	bl	80118b4 <HAL_GetTick>
 800e982:	4602      	mov	r2, r0
 800e984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	2b13      	cmp	r3, #19
 800e98c:	f240 809b 	bls.w	800eac6 <tunePID+0x78e>
						tick = HAL_GetTick();
 800e990:	f002 ff90 	bl	80118b4 <HAL_GetTick>
 800e994:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						UARTPrintString(huartx, data);
 800e998:	4903      	ldr	r1, [pc, #12]	; (800e9a8 <tunePID+0x670>)
 800e99a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e99c:	f7f4 ff98 	bl	80038d0 <UARTPrintString>
 800e9a0:	e091      	b.n	800eac6 <tunePID+0x78e>
 800e9a2:	bf00      	nop
 800e9a4:	0802264c 	.word	0x0802264c
 800e9a8:	20006948 	.word	0x20006948
 800e9ac:	00000000 	.word	0x00000000
 800e9b0:	0802266c 	.word	0x0802266c
					}
				}
				else if(base == tri_omni){
 800e9b4:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800e9b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e9bc:	eef4 7a47 	vcmp.f32	s15, s14
 800e9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c4:	d17f      	bne.n	800eac6 <tunePID+0x78e>
					RNSVelocity((-0.866 * target_speed), (-0.866 * target_speed), 0.0, 0.0, rns);
 800e9c6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e9ca:	f7f1 fdbd 	bl	8000548 <__aeabi_f2d>
 800e9ce:	a38b      	add	r3, pc, #556	; (adr r3, 800ebfc <tunePID+0x8c4>)
 800e9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d4:	f7f1 fe10 	bl	80005f8 <__aeabi_dmul>
 800e9d8:	4602      	mov	r2, r0
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4619      	mov	r1, r3
 800e9e0:	f7f2 f902 	bl	8000be8 <__aeabi_d2f>
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800e9ea:	f7f1 fdad 	bl	8000548 <__aeabi_f2d>
 800e9ee:	a383      	add	r3, pc, #524	; (adr r3, 800ebfc <tunePID+0x8c4>)
 800e9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f4:	f7f1 fe00 	bl	80005f8 <__aeabi_dmul>
 800e9f8:	4602      	mov	r2, r0
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	4619      	mov	r1, r3
 800ea00:	f7f2 f8f2 	bl	8000be8 <__aeabi_d2f>
 800ea04:	4603      	mov	r3, r0
 800ea06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea08:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800ec04 <tunePID+0x8cc>
 800ea0c:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 800ec04 <tunePID+0x8cc>
 800ea10:	ee00 3a90 	vmov	s1, r3
 800ea14:	ee00 4a10 	vmov	s0, r4
 800ea18:	f7f7 fee8 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800ea1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ea1e:	2057      	movs	r0, #87	; 0x57
 800ea20:	f7f8 fa0c 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800ea24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
					b = rns->enq.enq_buffer[1].data;
 800ea2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					c = rns->enq.enq_buffer[2].data;
 800ea34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ea3c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800ea40:	f7f1 fd82 	bl	8000548 <__aeabi_f2d>
 800ea44:	a368      	add	r3, pc, #416	; (adr r3, 800ebe8 <tunePID+0x8b0>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f1 fdd5 	bl	80005f8 <__aeabi_dmul>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4692      	mov	sl, r2
 800ea54:	469b      	mov	fp, r3
							(0.866 * target_speed), -a, -b, c);
 800ea56:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ea5a:	eef1 7a67 	vneg.f32	s15, s15
 800ea5e:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7f1 fd70 	bl	8000548 <__aeabi_f2d>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	460d      	mov	r5, r1
							(0.866 * target_speed), -a, -b, c);
 800ea6c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800ea70:	eef1 7a67 	vneg.f32	s15, s15
 800ea74:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f1 fd65 	bl	8000548 <__aeabi_f2d>
 800ea7e:	4680      	mov	r8, r0
 800ea80:	4689      	mov	r9, r1
 800ea82:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800ea86:	f7f1 fd5f 	bl	8000548 <__aeabi_f2d>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ea96:	e9cd 4500 	strd	r4, r5, [sp]
 800ea9a:	4652      	mov	r2, sl
 800ea9c:	465b      	mov	r3, fp
 800ea9e:	4954      	ldr	r1, [pc, #336]	; (800ebf0 <tunePID+0x8b8>)
 800eaa0:	4854      	ldr	r0, [pc, #336]	; (800ebf4 <tunePID+0x8bc>)
 800eaa2:	f00e ff45 	bl	801d930 <siprintf>
					if(HAL_GetTick()-tick >= 20){
 800eaa6:	f002 ff05 	bl	80118b4 <HAL_GetTick>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	2b13      	cmp	r3, #19
 800eab4:	d907      	bls.n	800eac6 <tunePID+0x78e>
						tick = HAL_GetTick();
 800eab6:	f002 fefd 	bl	80118b4 <HAL_GetTick>
 800eaba:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
						UARTPrintString(huartx, data);
 800eabe:	494d      	ldr	r1, [pc, #308]	; (800ebf4 <tunePID+0x8bc>)
 800eac0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eac2:	f7f4 ff05 	bl	80038d0 <UARTPrintString>
			while(ps4->button == DOWN){
 800eac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaca:	2b40      	cmp	r3, #64	; 0x40
 800eacc:	f43f aede 	beq.w	800e88c <tunePID+0x554>
					}
				}
			}
			RNSStop(rns);
 800ead0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ead2:	f7f7 fe3b 	bl	800674c <RNSStop>
			memset(data, 0, 100);
 800ead6:	2264      	movs	r2, #100	; 0x64
 800ead8:	2100      	movs	r1, #0
 800eada:	4846      	ldr	r0, [pc, #280]	; (800ebf4 <tunePID+0x8bc>)
 800eadc:	f00d ff46 	bl	801c96c <memset>
 800eae0:	e107      	b.n	800ecf2 <tunePID+0x9ba>
		}else if(ps4->button == RIGHT){
 800eae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eae6:	2b20      	cmp	r3, #32
 800eae8:	f040 8103 	bne.w	800ecf2 <tunePID+0x9ba>
			uint32_t tick = HAL_GetTick();
 800eaec:	f002 fee2 	bl	80118b4 <HAL_GetTick>
 800eaf0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
			float a, b, c, d;
			while(ps4->button == RIGHT){
 800eaf4:	e0f0      	b.n	800ecd8 <tunePID+0x9a0>
				if(base == fwd_omni){
 800eaf6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800eafa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800eafe:	eef4 7a47 	vcmp.f32	s15, s14
 800eb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb06:	d17f      	bne.n	800ec08 <tunePID+0x8d0>
					RNSVelocity(target_speed, -target_speed, -target_speed, target_speed, rns);
 800eb08:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800eb0c:	eeb1 7a67 	vneg.f32	s14, s15
 800eb10:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800eb14:	eef1 7a67 	vneg.f32	s15, s15
 800eb18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb1a:	edd7 1a39 	vldr	s3, [r7, #228]	; 0xe4
 800eb1e:	eeb0 1a67 	vmov.f32	s2, s15
 800eb22:	eef0 0a47 	vmov.f32	s1, s14
 800eb26:	ed97 0a39 	vldr	s0, [r7, #228]	; 0xe4
 800eb2a:	f7f7 fe5f 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800eb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb30:	2057      	movs	r0, #87	; 0x57
 800eb32:	f7f8 f983 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800eb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					b = rns->enq.enq_buffer[1].data;
 800eb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					c = rns->enq.enq_buffer[2].data;
 800eb46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					d = rns->enq.enq_buffer[3].data;
 800eb4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800eb56:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800eb5a:	f7f1 fcf5 	bl	8000548 <__aeabi_f2d>
 800eb5e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800eb62:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800eb66:	f7f1 fcef 	bl	8000548 <__aeabi_f2d>
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	460d      	mov	r5, r1
							target_speed, a, -b, -c, d);
 800eb6e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800eb72:	eef1 7a67 	vneg.f32	s15, s15
 800eb76:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f7f1 fce4 	bl	8000548 <__aeabi_f2d>
 800eb80:	4680      	mov	r8, r0
 800eb82:	4689      	mov	r9, r1
							target_speed, a, -b, -c, d);
 800eb84:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800eb88:	eef1 7a67 	vneg.f32	s15, s15
 800eb8c:	ee17 3a90 	vmov	r3, s15
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, %.3f\n",
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7f1 fcd9 	bl	8000548 <__aeabi_f2d>
 800eb96:	4682      	mov	sl, r0
 800eb98:	468b      	mov	fp, r1
 800eb9a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800eb9e:	f7f1 fcd3 	bl	8000548 <__aeabi_f2d>
 800eba2:	4602      	mov	r2, r0
 800eba4:	460b      	mov	r3, r1
 800eba6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ebaa:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800ebae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ebb2:	e9cd 4500 	strd	r4, r5, [sp]
 800ebb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ebba:	490f      	ldr	r1, [pc, #60]	; (800ebf8 <tunePID+0x8c0>)
 800ebbc:	480d      	ldr	r0, [pc, #52]	; (800ebf4 <tunePID+0x8bc>)
 800ebbe:	f00e feb7 	bl	801d930 <siprintf>
					if(HAL_GetTick() - tick >= 20){
 800ebc2:	f002 fe77 	bl	80118b4 <HAL_GetTick>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	2b13      	cmp	r3, #19
 800ebd0:	f240 8082 	bls.w	800ecd8 <tunePID+0x9a0>
						tick = HAL_GetTick();
 800ebd4:	f002 fe6e 	bl	80118b4 <HAL_GetTick>
 800ebd8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
						UARTPrintString(huartx, data);
 800ebdc:	4905      	ldr	r1, [pc, #20]	; (800ebf4 <tunePID+0x8bc>)
 800ebde:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ebe0:	f7f4 fe76 	bl	80038d0 <UARTPrintString>
 800ebe4:	e078      	b.n	800ecd8 <tunePID+0x9a0>
 800ebe6:	bf00      	nop
 800ebe8:	a1cac083 	.word	0xa1cac083
 800ebec:	3febb645 	.word	0x3febb645
 800ebf0:	0802266c 	.word	0x0802266c
 800ebf4:	20006948 	.word	0x20006948
 800ebf8:	0802264c 	.word	0x0802264c
 800ebfc:	a1cac083 	.word	0xa1cac083
 800ec00:	bfebb645 	.word	0xbfebb645
 800ec04:	00000000 	.word	0x00000000
					}
				}
				else if(base == tri_omni){
 800ec08:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800ec0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ec10:	eef4 7a47 	vcmp.f32	s15, s14
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	d15e      	bne.n	800ecd8 <tunePID+0x9a0>
					RNSVelocity((0.5 * target_speed), (-0.5 * target_speed), -target_speed, 0.0, rns);
 800ec1a:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ec1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ec22:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec26:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ec2a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800ec2e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ec32:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800ec36:	eef1 7a67 	vneg.f32	s15, s15
 800ec3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ec3c:	ed5f 1a0f 	vldr	s3, [pc, #-60]	; 800ec04 <tunePID+0x8cc>
 800ec40:	eeb0 1a67 	vmov.f32	s2, s15
 800ec44:	eef0 0a66 	vmov.f32	s1, s13
 800ec48:	eeb0 0a47 	vmov.f32	s0, s14
 800ec4c:	f7f7 fdce 	bl	80067ec <RNSVelocity>
					RNSEnquire(RNS_VEL_BOTH, rns);
 800ec50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec52:	2057      	movs	r0, #87	; 0x57
 800ec54:	f7f8 f8f2 	bl	8006e3c <RNSEnquire>
					a = rns->enq.enq_buffer[0].data;
 800ec58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
					b = rns->enq.enq_buffer[1].data;
 800ec60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					c = rns->enq.enq_buffer[2].data;
 800ec68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
					sprintf(data, "%.3f, %.3f, %.3f, %.3f, 0.000\n",
 800ec70:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 800ec74:	f7f1 fc68 	bl	8000548 <__aeabi_f2d>
 800ec78:	4682      	mov	sl, r0
 800ec7a:	468b      	mov	fp, r1
 800ec7c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800ec80:	f7f1 fc62 	bl	8000548 <__aeabi_f2d>
 800ec84:	4604      	mov	r4, r0
 800ec86:	460d      	mov	r5, r1
 800ec88:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800ec8c:	f7f1 fc5c 	bl	8000548 <__aeabi_f2d>
 800ec90:	4680      	mov	r8, r0
 800ec92:	4689      	mov	r9, r1
 800ec94:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800ec98:	f7f1 fc56 	bl	8000548 <__aeabi_f2d>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	460b      	mov	r3, r1
 800eca0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eca4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800eca8:	e9cd 4500 	strd	r4, r5, [sp]
 800ecac:	4652      	mov	r2, sl
 800ecae:	465b      	mov	r3, fp
 800ecb0:	4930      	ldr	r1, [pc, #192]	; (800ed74 <tunePID+0xa3c>)
 800ecb2:	4831      	ldr	r0, [pc, #196]	; (800ed78 <tunePID+0xa40>)
 800ecb4:	f00e fe3c 	bl	801d930 <siprintf>
							target_speed, a, b, c);
					if(HAL_GetTick()-tick >= 20){
 800ecb8:	f002 fdfc 	bl	80118b4 <HAL_GetTick>
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2b13      	cmp	r3, #19
 800ecc6:	d907      	bls.n	800ecd8 <tunePID+0x9a0>
						tick = HAL_GetTick();
 800ecc8:	f002 fdf4 	bl	80118b4 <HAL_GetTick>
 800eccc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
						UARTPrintString(huartx, data);
 800ecd0:	4929      	ldr	r1, [pc, #164]	; (800ed78 <tunePID+0xa40>)
 800ecd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ecd4:	f7f4 fdfc 	bl	80038d0 <UARTPrintString>
			while(ps4->button == RIGHT){
 800ecd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecdc:	2b20      	cmp	r3, #32
 800ecde:	f43f af0a 	beq.w	800eaf6 <tunePID+0x7be>
					}
				}
			}
			RNSStop(rns);
 800ece2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ece4:	f7f7 fd32 	bl	800674c <RNSStop>
			memset(data, 0, 100);
 800ece8:	2264      	movs	r2, #100	; 0x64
 800ecea:	2100      	movs	r1, #0
 800ecec:	4822      	ldr	r0, [pc, #136]	; (800ed78 <tunePID+0xa40>)
 800ecee:	f00d fe3d 	bl	801c96c <memset>
		}

		if(ps4->button == CROSS){	//stop NAVI + plot graph
 800ecf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecfa:	d112      	bne.n	800ed22 <tunePID+0x9ea>
			while(ps4->button == CROSS);
 800ecfc:	bf00      	nop
 800ecfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed06:	d0fa      	beq.n	800ecfe <tunePID+0x9c6>
			RNSStop(rns);
 800ed08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed0a:	f7f7 fd1f 	bl	800674c <RNSStop>
			uint8_t terminatePlot = 0x15;
 800ed0e:	2315      	movs	r3, #21
 800ed10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			HAL_UART_Transmit(huartx, &terminatePlot, 1, 1);
 800ed14:	f107 0153 	add.w	r1, r7, #83	; 0x53
 800ed18:	2301      	movs	r3, #1
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed1e:	f009 f9d0 	bl	80180c2 <HAL_UART_Transmit>
		}

		if(ps4->button == TRIANGLE){	//TRI omni wheel
 800ed22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed2a:	d109      	bne.n	800ed40 <tunePID+0xa08>
			while(ps4->button == TRIANGLE);
 800ed2c:	bf00      	nop
 800ed2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed36:	d0fa      	beq.n	800ed2e <tunePID+0x9f6>
			base = tri_omni;
 800ed38:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ed3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}
		if(ps4->button == SQUARE){	//FOUR omni wheel
 800ed40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed48:	d109      	bne.n	800ed5e <tunePID+0xa26>
			while(ps4->button == SQUARE);
 800ed4a:	bf00      	nop
 800ed4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed54:	d0fa      	beq.n	800ed4c <tunePID+0xa14>
			base = fwd_omni;
 800ed56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}
		if(ps4->button == SHARE){	//update PID
 800ed5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	f040 82dd 	bne.w	800f322 <tunePID+0xfea>
			while(ps4->button == SHARE);
 800ed68:	bf00      	nop
 800ed6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d0fb      	beq.n	800ed6a <tunePID+0xa32>
			while(ps4->button != SHARE){
 800ed72:	e2d1      	b.n	800f318 <tunePID+0xfe0>
 800ed74:	0802266c 	.word	0x0802266c
 800ed78:	20006948 	.word	0x20006948
				if(ps4->button == SQUARE){	//print
 800ed7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed84:	f040 8091 	bne.w	800eeaa <tunePID+0xb72>
					while(ps4->button == SQUARE);
 800ed88:	bf00      	nop
 800ed8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed92:	d0fa      	beq.n	800ed8a <tunePID+0xa52>
					sprintf(data, "%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n%.3f, %.3f, %.3f\n"
 800ed94:	4bba      	ldr	r3, [pc, #744]	; (800f080 <tunePID+0xd48>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7f1 fbd5 	bl	8000548 <__aeabi_f2d>
 800ed9e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 800eda2:	4bb8      	ldr	r3, [pc, #736]	; (800f084 <tunePID+0xd4c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7f1 fbce 	bl	8000548 <__aeabi_f2d>
 800edac:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800edb0:	4bb5      	ldr	r3, [pc, #724]	; (800f088 <tunePID+0xd50>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7f1 fbc7 	bl	8000548 <__aeabi_f2d>
 800edba:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800edbe:	4bb3      	ldr	r3, [pc, #716]	; (800f08c <tunePID+0xd54>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7f1 fbc0 	bl	8000548 <__aeabi_f2d>
 800edc8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800edcc:	4bb0      	ldr	r3, [pc, #704]	; (800f090 <tunePID+0xd58>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7f1 fbb9 	bl	8000548 <__aeabi_f2d>
 800edd6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800edda:	4bae      	ldr	r3, [pc, #696]	; (800f094 <tunePID+0xd5c>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4618      	mov	r0, r3
 800ede0:	f7f1 fbb2 	bl	8000548 <__aeabi_f2d>
 800ede4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800ede8:	4bab      	ldr	r3, [pc, #684]	; (800f098 <tunePID+0xd60>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	f7f1 fbab 	bl	8000548 <__aeabi_f2d>
 800edf2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800edf6:	4ba9      	ldr	r3, [pc, #676]	; (800f09c <tunePID+0xd64>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7f1 fba4 	bl	8000548 <__aeabi_f2d>
 800ee00:	e9c7 0100 	strd	r0, r1, [r7]
 800ee04:	4ba6      	ldr	r3, [pc, #664]	; (800f0a0 <tunePID+0xd68>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f1 fb9d 	bl	8000548 <__aeabi_f2d>
 800ee0e:	4682      	mov	sl, r0
 800ee10:	468b      	mov	fp, r1
 800ee12:	4ba4      	ldr	r3, [pc, #656]	; (800f0a4 <tunePID+0xd6c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7f1 fb96 	bl	8000548 <__aeabi_f2d>
 800ee1c:	4680      	mov	r8, r0
 800ee1e:	4689      	mov	r9, r1
 800ee20:	4ba1      	ldr	r3, [pc, #644]	; (800f0a8 <tunePID+0xd70>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7f1 fb8f 	bl	8000548 <__aeabi_f2d>
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	460d      	mov	r5, r1
 800ee2e:	4b9f      	ldr	r3, [pc, #636]	; (800f0ac <tunePID+0xd74>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7f1 fb88 	bl	8000548 <__aeabi_f2d>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ee40:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800ee44:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ee48:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 800ee4c:	ed97 7b00 	vldr	d7, [r7]
 800ee50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ee54:	ed97 7b02 	vldr	d7, [r7, #8]
 800ee58:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee5c:	ed97 7b04 	vldr	d7, [r7, #16]
 800ee60:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ee64:	ed97 7b06 	vldr	d7, [r7, #24]
 800ee68:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee6c:	ed97 7b08 	vldr	d7, [r7, #32]
 800ee70:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ee74:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800ee78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee7c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800ee80:	ed8d 7b00 	vstr	d7, [sp]
 800ee84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ee88:	4989      	ldr	r1, [pc, #548]	; (800f0b0 <tunePID+0xd78>)
 800ee8a:	488a      	ldr	r0, [pc, #552]	; (800f0b4 <tunePID+0xd7c>)
 800ee8c:	f00e fd50 	bl	801d930 <siprintf>
							, AP, AI, AD, BP, BI, BD, CP, CI, CD, DP, DI, DD);
					HAL_Delay(50);
 800ee90:	2032      	movs	r0, #50	; 0x32
 800ee92:	f002 fd1b 	bl	80118cc <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 800ee96:	4887      	ldr	r0, [pc, #540]	; (800f0b4 <tunePID+0xd7c>)
 800ee98:	f7f1 f99a 	bl	80001d0 <strlen>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	2332      	movs	r3, #50	; 0x32
 800eea2:	4984      	ldr	r1, [pc, #528]	; (800f0b4 <tunePID+0xd7c>)
 800eea4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eea6:	f009 f90c 	bl	80180c2 <HAL_UART_Transmit>
				}
				if(ps4->button == UP){
 800eeaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeae:	2b10      	cmp	r3, #16
 800eeb0:	d11c      	bne.n	800eeec <tunePID+0xbb4>
					while(ps4->button == UP);
 800eeb2:	bf00      	nop
 800eeb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeb8:	2b10      	cmp	r3, #16
 800eeba:	d0fb      	beq.n	800eeb4 <tunePID+0xb7c>
					arr_y ++;
 800eebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eec0:	3301      	adds	r3, #1
 800eec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					if(arr_y > 3)	arr_y = 3;
 800eec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	dd02      	ble.n	800eed4 <tunePID+0xb9c>
 800eece:	2303      	movs	r3, #3
 800eed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					sprintf(data, "arr y = %d\n", arr_y + 1);
 800eed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eed8:	3301      	adds	r3, #1
 800eeda:	461a      	mov	r2, r3
 800eedc:	4976      	ldr	r1, [pc, #472]	; (800f0b8 <tunePID+0xd80>)
 800eede:	4875      	ldr	r0, [pc, #468]	; (800f0b4 <tunePID+0xd7c>)
 800eee0:	f00e fd26 	bl	801d930 <siprintf>
					UARTPrintString(huartx, data);
 800eee4:	4973      	ldr	r1, [pc, #460]	; (800f0b4 <tunePID+0xd7c>)
 800eee6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800eee8:	f7f4 fcf2 	bl	80038d0 <UARTPrintString>
				}
				if(ps4->button == DOWN){
 800eeec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eef0:	2b40      	cmp	r3, #64	; 0x40
 800eef2:	d11c      	bne.n	800ef2e <tunePID+0xbf6>
					while(ps4->button == DOWN);
 800eef4:	bf00      	nop
 800eef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eefa:	2b40      	cmp	r3, #64	; 0x40
 800eefc:	d0fb      	beq.n	800eef6 <tunePID+0xbbe>
					arr_y --;
 800eefe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef02:	3b01      	subs	r3, #1
 800ef04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					if(arr_y < 0)	arr_y = 0;
 800ef08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	da02      	bge.n	800ef16 <tunePID+0xbde>
 800ef10:	2300      	movs	r3, #0
 800ef12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
					sprintf(data, "arr y = %d\n", arr_y + 1);
 800ef16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	4966      	ldr	r1, [pc, #408]	; (800f0b8 <tunePID+0xd80>)
 800ef20:	4864      	ldr	r0, [pc, #400]	; (800f0b4 <tunePID+0xd7c>)
 800ef22:	f00e fd05 	bl	801d930 <siprintf>
					UARTPrintString(huartx, data);
 800ef26:	4963      	ldr	r1, [pc, #396]	; (800f0b4 <tunePID+0xd7c>)
 800ef28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ef2a:	f7f4 fcd1 	bl	80038d0 <UARTPrintString>
				}
				if(ps4->button == RIGHT){
 800ef2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef32:	2b20      	cmp	r3, #32
 800ef34:	d11c      	bne.n	800ef70 <tunePID+0xc38>
					while(ps4->button == RIGHT);
 800ef36:	bf00      	nop
 800ef38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef3c:	2b20      	cmp	r3, #32
 800ef3e:	d0fb      	beq.n	800ef38 <tunePID+0xc00>
					arr_x ++;
 800ef40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef44:	3301      	adds	r3, #1
 800ef46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					if(arr_x > 2)	arr_x = 2;
 800ef4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	dd02      	ble.n	800ef58 <tunePID+0xc20>
 800ef52:	2302      	movs	r3, #2
 800ef54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					sprintf(data, "arr x = %d\n", arr_x + 1);
 800ef58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	461a      	mov	r2, r3
 800ef60:	4956      	ldr	r1, [pc, #344]	; (800f0bc <tunePID+0xd84>)
 800ef62:	4854      	ldr	r0, [pc, #336]	; (800f0b4 <tunePID+0xd7c>)
 800ef64:	f00e fce4 	bl	801d930 <siprintf>
					UARTPrintString(huartx, data);
 800ef68:	4952      	ldr	r1, [pc, #328]	; (800f0b4 <tunePID+0xd7c>)
 800ef6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ef6c:	f7f4 fcb0 	bl	80038d0 <UARTPrintString>
				}
				if(ps4->button == LEFT){
 800ef70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef74:	2b80      	cmp	r3, #128	; 0x80
 800ef76:	d11c      	bne.n	800efb2 <tunePID+0xc7a>
					while(ps4->button == LEFT);
 800ef78:	bf00      	nop
 800ef7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef7e:	2b80      	cmp	r3, #128	; 0x80
 800ef80:	d0fb      	beq.n	800ef7a <tunePID+0xc42>
					arr_x --;
 800ef82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef86:	3b01      	subs	r3, #1
 800ef88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					if(arr_x < 0)	arr_x = 0;
 800ef8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	da02      	bge.n	800ef9a <tunePID+0xc62>
 800ef94:	2300      	movs	r3, #0
 800ef96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
					sprintf(data, "arr x = %d\n", arr_x + 1);
 800ef9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef9e:	3301      	adds	r3, #1
 800efa0:	461a      	mov	r2, r3
 800efa2:	4946      	ldr	r1, [pc, #280]	; (800f0bc <tunePID+0xd84>)
 800efa4:	4843      	ldr	r0, [pc, #268]	; (800f0b4 <tunePID+0xd7c>)
 800efa6:	f00e fcc3 	bl	801d930 <siprintf>
					UARTPrintString(huartx, data);
 800efaa:	4942      	ldr	r1, [pc, #264]	; (800f0b4 <tunePID+0xd7c>)
 800efac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800efae:	f7f4 fc8f 	bl	80038d0 <UARTPrintString>
				}
				if(ps4->button == L1){
 800efb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efba:	d10a      	bne.n	800efd2 <tunePID+0xc9a>
					while(ps4->button == L1);
 800efbc:	bf00      	nop
 800efbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efc6:	d0fa      	beq.n	800efbe <tunePID+0xc86>
					buf --;
 800efc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800efcc:	3b01      	subs	r3, #1
 800efce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}
				if(ps4->button == R1){
 800efd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efda:	d10a      	bne.n	800eff2 <tunePID+0xcba>
					while(ps4->button == R1);
 800efdc:	bf00      	nop
 800efde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800efe6:	d0fa      	beq.n	800efde <tunePID+0xca6>
					buf ++;
 800efe8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800efec:	3301      	adds	r3, #1
 800efee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				}
				if(ps4->button == CIRCLE){
 800eff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800effa:	f040 8110 	bne.w	800f21e <tunePID+0xee6>
					while(ps4->button == CIRCLE);
 800effe:	bf00      	nop
 800f000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f008:	d0fa      	beq.n	800f000 <tunePID+0xcc8>
					if(arr_x == 0)
 800f00a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d15d      	bne.n	800f0ce <tunePID+0xd96>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.2;
 800f012:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f016:	4613      	mov	r3, r2
 800f018:	005b      	lsls	r3, r3, #1
 800f01a:	4413      	add	r3, r2
 800f01c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f020:	4413      	add	r3, r2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f028:	4413      	add	r3, r2
 800f02a:	3b94      	subs	r3, #148	; 0x94
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7f1 fa8a 	bl	8000548 <__aeabi_f2d>
 800f034:	4604      	mov	r4, r0
 800f036:	460d      	mov	r5, r1
 800f038:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800f03c:	f7f1 fa72 	bl	8000524 <__aeabi_i2d>
 800f040:	a30d      	add	r3, pc, #52	; (adr r3, 800f078 <tunePID+0xd40>)
 800f042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f046:	f7f1 fad7 	bl	80005f8 <__aeabi_dmul>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	4620      	mov	r0, r4
 800f050:	4629      	mov	r1, r5
 800f052:	f7f1 f91b 	bl	800028c <__adddf3>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4610      	mov	r0, r2
 800f05c:	4619      	mov	r1, r3
 800f05e:	f7f1 fdc3 	bl	8000be8 <__aeabi_d2f>
 800f062:	4601      	mov	r1, r0
 800f064:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f068:	4613      	mov	r3, r2
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	4413      	add	r3, r2
 800f06e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f072:	4413      	add	r3, r2
 800f074:	e024      	b.n	800f0c0 <tunePID+0xd88>
 800f076:	bf00      	nop
 800f078:	9999999a 	.word	0x9999999a
 800f07c:	3fc99999 	.word	0x3fc99999
 800f080:	2000a374 	.word	0x2000a374
 800f084:	20007770 	.word	0x20007770
 800f088:	2000a36c 	.word	0x2000a36c
 800f08c:	200079fc 	.word	0x200079fc
 800f090:	2000946c 	.word	0x2000946c
 800f094:	20007760 	.word	0x20007760
 800f098:	20009704 	.word	0x20009704
 800f09c:	200098b0 	.word	0x200098b0
 800f0a0:	20007058 	.word	0x20007058
 800f0a4:	20009ef8 	.word	0x20009ef8
 800f0a8:	20007534 	.word	0x20007534
 800f0ac:	20009b24 	.word	0x20009b24
 800f0b0:	0802268c 	.word	0x0802268c
 800f0b4:	20006948 	.word	0x20006948
 800f0b8:	080226d4 	.word	0x080226d4
 800f0bc:	080226e0 	.word	0x080226e0
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f0c6:	4413      	add	r3, r2
 800f0c8:	3b94      	subs	r3, #148	; 0x94
 800f0ca:	6019      	str	r1, [r3, #0]
 800f0cc:	e076      	b.n	800f1bc <tunePID+0xe84>
					else if(arr_x == 1)
 800f0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d137      	bne.n	800f146 <tunePID+0xe0e>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.2;
 800f0d6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f0da:	4613      	mov	r3, r2
 800f0dc:	005b      	lsls	r3, r3, #1
 800f0de:	4413      	add	r3, r2
 800f0e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f0e4:	4413      	add	r3, r2
 800f0e6:	009b      	lsls	r3, r3, #2
 800f0e8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f0ec:	4413      	add	r3, r2
 800f0ee:	3b94      	subs	r3, #148	; 0x94
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7f1 fa28 	bl	8000548 <__aeabi_f2d>
 800f0f8:	4604      	mov	r4, r0
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800f100:	f7f1 fa10 	bl	8000524 <__aeabi_i2d>
 800f104:	a391      	add	r3, pc, #580	; (adr r3, 800f34c <tunePID+0x1014>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	f7f1 fa75 	bl	80005f8 <__aeabi_dmul>
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	4620      	mov	r0, r4
 800f114:	4629      	mov	r1, r5
 800f116:	f7f1 f8b9 	bl	800028c <__adddf3>
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	4610      	mov	r0, r2
 800f120:	4619      	mov	r1, r3
 800f122:	f7f1 fd61 	bl	8000be8 <__aeabi_d2f>
 800f126:	4601      	mov	r1, r0
 800f128:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f136:	4413      	add	r3, r2
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f13e:	4413      	add	r3, r2
 800f140:	3b94      	subs	r3, #148	; 0x94
 800f142:	6019      	str	r1, [r3, #0]
 800f144:	e03a      	b.n	800f1bc <tunePID+0xe84>
					else if(arr_x == 2)
 800f146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d136      	bne.n	800f1bc <tunePID+0xe84>
						PID[arr_y][arr_x] = PID[arr_y][arr_x] + buf * 0.005;
 800f14e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f152:	4613      	mov	r3, r2
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	4413      	add	r3, r2
 800f158:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f15c:	4413      	add	r3, r2
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f164:	4413      	add	r3, r2
 800f166:	3b94      	subs	r3, #148	; 0x94
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f1 f9ec 	bl	8000548 <__aeabi_f2d>
 800f170:	4604      	mov	r4, r0
 800f172:	460d      	mov	r5, r1
 800f174:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800f178:	f7f1 f9d4 	bl	8000524 <__aeabi_i2d>
 800f17c:	a375      	add	r3, pc, #468	; (adr r3, 800f354 <tunePID+0x101c>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	f7f1 fa39 	bl	80005f8 <__aeabi_dmul>
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	4620      	mov	r0, r4
 800f18c:	4629      	mov	r1, r5
 800f18e:	f7f1 f87d 	bl	800028c <__adddf3>
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	4610      	mov	r0, r2
 800f198:	4619      	mov	r1, r3
 800f19a:	f7f1 fd25 	bl	8000be8 <__aeabi_d2f>
 800f19e:	4601      	mov	r1, r0
 800f1a0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f1a4:	4613      	mov	r3, r2
 800f1a6:	005b      	lsls	r3, r3, #1
 800f1a8:	4413      	add	r3, r2
 800f1aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f1ae:	4413      	add	r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f1b6:	4413      	add	r3, r2
 800f1b8:	3b94      	subs	r3, #148	; 0x94
 800f1ba:	6019      	str	r1, [r3, #0]
					sprintf(data, "pid[%d][%d] = %.3f, buf = %d\n", arr_y + 1, arr_x + 1, PID[arr_y][arr_x], buf);
 800f1bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f1c0:	1c5c      	adds	r4, r3, #1
 800f1c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f1c6:	1c5d      	adds	r5, r3, #1
 800f1c8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	4413      	add	r3, r2
 800f1d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f1d6:	4413      	add	r3, r2
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 800f1de:	4413      	add	r3, r2
 800f1e0:	3b94      	subs	r3, #148	; 0x94
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7f1 f9af 	bl	8000548 <__aeabi_f2d>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800f1f2:	9102      	str	r1, [sp, #8]
 800f1f4:	e9cd 2300 	strd	r2, r3, [sp]
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	4950      	ldr	r1, [pc, #320]	; (800f340 <tunePID+0x1008>)
 800f1fe:	4851      	ldr	r0, [pc, #324]	; (800f344 <tunePID+0x100c>)
 800f200:	f00e fb96 	bl	801d930 <siprintf>
					HAL_Delay(50);
 800f204:	2032      	movs	r0, #50	; 0x32
 800f206:	f002 fb61 	bl	80118cc <HAL_Delay>
					HAL_UART_Transmit(huartx, (uint8_t*)&data, strlen(data), 50);
 800f20a:	484e      	ldr	r0, [pc, #312]	; (800f344 <tunePID+0x100c>)
 800f20c:	f7f0 ffe0 	bl	80001d0 <strlen>
 800f210:	4603      	mov	r3, r0
 800f212:	b29a      	uxth	r2, r3
 800f214:	2332      	movs	r3, #50	; 0x32
 800f216:	494b      	ldr	r1, [pc, #300]	; (800f344 <tunePID+0x100c>)
 800f218:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f21a:	f008 ff52 	bl	80180c2 <HAL_UART_Transmit>

				}
				if(ps4->button == TRIANGLE){
 800f21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f226:	d177      	bne.n	800f318 <tunePID+0xfe0>
					while(ps4->button == TRIANGLE);
 800f228:	bf00      	nop
 800f22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f22e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f232:	d0fa      	beq.n	800f22a <tunePID+0xef2>
					RNSSet(rns, RNS_F_LEFT_VEL_PID,  PID[0][0],  PID[0][1],  PID[0][2]);
 800f234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f236:	4618      	mov	r0, r3
 800f238:	f7f1 f986 	bl	8000548 <__aeabi_f2d>
 800f23c:	4680      	mov	r8, r0
 800f23e:	4689      	mov	r9, r1
 800f240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f242:	4618      	mov	r0, r3
 800f244:	f7f1 f980 	bl	8000548 <__aeabi_f2d>
 800f248:	4604      	mov	r4, r0
 800f24a:	460d      	mov	r5, r1
 800f24c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f24e:	4618      	mov	r0, r3
 800f250:	f7f1 f97a 	bl	8000548 <__aeabi_f2d>
 800f254:	4602      	mov	r2, r0
 800f256:	460b      	mov	r3, r1
 800f258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f25c:	e9cd 4500 	strd	r4, r5, [sp]
 800f260:	4642      	mov	r2, r8
 800f262:	464b      	mov	r3, r9
 800f264:	212f      	movs	r1, #47	; 0x2f
 800f266:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f268:	f7f7 fc7c 	bl	8006b64 <RNSSet>
					RNSSet(rns, RNS_F_RIGHT_VEL_PID,  PID[1][0],  PID[1][1],  PID[1][2]);
 800f26c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f26e:	4618      	mov	r0, r3
 800f270:	f7f1 f96a 	bl	8000548 <__aeabi_f2d>
 800f274:	4680      	mov	r8, r0
 800f276:	4689      	mov	r9, r1
 800f278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f1 f964 	bl	8000548 <__aeabi_f2d>
 800f280:	4604      	mov	r4, r0
 800f282:	460d      	mov	r5, r1
 800f284:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f286:	4618      	mov	r0, r3
 800f288:	f7f1 f95e 	bl	8000548 <__aeabi_f2d>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f294:	e9cd 4500 	strd	r4, r5, [sp]
 800f298:	4642      	mov	r2, r8
 800f29a:	464b      	mov	r3, r9
 800f29c:	2130      	movs	r1, #48	; 0x30
 800f29e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f2a0:	f7f7 fc60 	bl	8006b64 <RNSSet>
					RNSSet(rns, RNS_B_LEFT_VEL_PID,  PID[2][0],  PID[2][1],  PID[2][2]);
 800f2a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7f1 f94e 	bl	8000548 <__aeabi_f2d>
 800f2ac:	4680      	mov	r8, r0
 800f2ae:	4689      	mov	r9, r1
 800f2b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7f1 f948 	bl	8000548 <__aeabi_f2d>
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	460d      	mov	r5, r1
 800f2bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7f1 f942 	bl	8000548 <__aeabi_f2d>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2cc:	e9cd 4500 	strd	r4, r5, [sp]
 800f2d0:	4642      	mov	r2, r8
 800f2d2:	464b      	mov	r3, r9
 800f2d4:	2131      	movs	r1, #49	; 0x31
 800f2d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f2d8:	f7f7 fc44 	bl	8006b64 <RNSSet>
					RNSSet(rns, RNS_B_RIGHT_VEL_PID,  PID[3][0],  PID[3][1],  PID[3][2]);
 800f2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7f1 f932 	bl	8000548 <__aeabi_f2d>
 800f2e4:	4680      	mov	r8, r0
 800f2e6:	4689      	mov	r9, r1
 800f2e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7f1 f92c 	bl	8000548 <__aeabi_f2d>
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f1 f925 	bl	8000548 <__aeabi_f2d>
 800f2fe:	4602      	mov	r2, r0
 800f300:	460b      	mov	r3, r1
 800f302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f306:	e9cd 4500 	strd	r4, r5, [sp]
 800f30a:	4642      	mov	r2, r8
 800f30c:	464b      	mov	r3, r9
 800f30e:	2132      	movs	r1, #50	; 0x32
 800f310:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f312:	f7f7 fc27 	bl	8006b64 <RNSSet>
					break;
 800f316:	e004      	b.n	800f322 <tunePID+0xfea>
			while(ps4->button != SHARE){
 800f318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	f47f ad2d 	bne.w	800ed7c <tunePID+0xa44>
	while(tune.PID){
 800f322:	4b09      	ldr	r3, [pc, #36]	; (800f348 <tunePID+0x1010>)
 800f324:	791b      	ldrb	r3, [r3, #4]
 800f326:	f003 0301 	and.w	r3, r3, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	f47f a842 	bne.w	800e3b6 <tunePID+0x7e>
				}
			}
		}
	}
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	37e8      	adds	r7, #232	; 0xe8
 800f338:	46bd      	mov	sp, r7
 800f33a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f33e:	bf00      	nop
 800f340:	080226ec 	.word	0x080226ec
 800f344:	20006948 	.word	0x20006948
 800f348:	20007778 	.word	0x20007778
 800f34c:	9999999a 	.word	0x9999999a
 800f350:	3fc99999 	.word	0x3fc99999
 800f354:	47ae147b 	.word	0x47ae147b
 800f358:	3f747ae1 	.word	0x3f747ae1
 800f35c:	00000000 	.word	0x00000000

0800f360 <tunePPlan>:

void tunePPlan(UART_HandleTypeDef* huartx, PSxBT_t* ps4, RNS_interface_t* rns){
 800f360:	b580      	push	{r7, lr}
 800f362:	b08a      	sub	sp, #40	; 0x28
 800f364:	af06      	add	r7, sp, #24
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	607a      	str	r2, [r7, #4]
	static int pppath = 0, MODNflag = 0;
//	float padjust[1][7] = {{1.75, -0.050, 0.525, 45.00, 0.0, 0.0, 0.0}};
	ros_counter = 3;
 800f36c:	4ba0      	ldr	r3, [pc, #640]	; (800f5f0 <tunePPlan+0x290>)
 800f36e:	2203      	movs	r2, #3
 800f370:	601a      	str	r2, [r3, #0]
	while(tune.PP){
 800f372:	e2eb      	b.n	800f94c <tunePPlan+0x5ec>
		if(ps4->button == R1){		//choose path
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f37c:	d117      	bne.n	800f3ae <tunePPlan+0x4e>
			while(ps4->button == R1){}
 800f37e:	bf00      	nop
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f388:	d0fa      	beq.n	800f380 <tunePPlan+0x20>
			pppath ++;
 800f38a:	4b9a      	ldr	r3, [pc, #616]	; (800f5f4 <tunePPlan+0x294>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	4a98      	ldr	r2, [pc, #608]	; (800f5f4 <tunePPlan+0x294>)
 800f392:	6013      	str	r3, [r2, #0]
//			path_index ++;
			if(pppath > ros_counter + 1)
 800f394:	4b96      	ldr	r3, [pc, #600]	; (800f5f0 <tunePPlan+0x290>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	4b96      	ldr	r3, [pc, #600]	; (800f5f4 <tunePPlan+0x294>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	da1c      	bge.n	800f3dc <tunePPlan+0x7c>
				pppath = ros_counter + 1;
 800f3a2:	4b93      	ldr	r3, [pc, #588]	; (800f5f0 <tunePPlan+0x290>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	4a92      	ldr	r2, [pc, #584]	; (800f5f4 <tunePPlan+0x294>)
 800f3aa:	6013      	str	r3, [r2, #0]
 800f3ac:	e016      	b.n	800f3dc <tunePPlan+0x7c>
		}else if(ps4->button == L1){
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3b6:	d111      	bne.n	800f3dc <tunePPlan+0x7c>
			while(ps4->button == L1){}
 800f3b8:	bf00      	nop
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3c2:	d0fa      	beq.n	800f3ba <tunePPlan+0x5a>
//			pppath --;
			path_index --;
 800f3c4:	4b8c      	ldr	r3, [pc, #560]	; (800f5f8 <tunePPlan+0x298>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3b01      	subs	r3, #1
 800f3ca:	4a8b      	ldr	r2, [pc, #556]	; (800f5f8 <tunePPlan+0x298>)
 800f3cc:	6013      	str	r3, [r2, #0]
			if(pppath < 0)
 800f3ce:	4b89      	ldr	r3, [pc, #548]	; (800f5f4 <tunePPlan+0x294>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	da02      	bge.n	800f3dc <tunePPlan+0x7c>
				pppath = 0;
 800f3d6:	4b87      	ldr	r3, [pc, #540]	; (800f5f4 <tunePPlan+0x294>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]
		}

		if(ps4->button == OPTION)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3e4:	d107      	bne.n	800f3f6 <tunePPlan+0x96>
		{
			ROS_Read_Flash();
 800f3e6:	f7f8 f9ad 	bl	8007744 <ROS_Read_Flash>
			while(ps4->button == OPTION);
 800f3ea:	bf00      	nop
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3f4:	d0fa      	beq.n	800f3ec <tunePPlan+0x8c>
		}

		if(ps4->button == SQUARE)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fe:	d114      	bne.n	800f42a <tunePPlan+0xca>
		{
			MODNflag = 0;
 800f400:	4b7e      	ldr	r3, [pc, #504]	; (800f5fc <tunePPlan+0x29c>)
 800f402:	2200      	movs	r2, #0
 800f404:	601a      	str	r2, [r3, #0]
			while(ps4->button == SQUARE);
 800f406:	bf00      	nop
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f410:	d0fa      	beq.n	800f408 <tunePPlan+0xa8>
			if(test_point_num)
 800f412:	4b7b      	ldr	r3, [pc, #492]	; (800f600 <tunePPlan+0x2a0>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d007      	beq.n	800f42a <tunePPlan+0xca>
				RNSPPstart_PS(test_points, test_point_num, rns);
 800f41a:	4b7a      	ldr	r3, [pc, #488]	; (800f604 <tunePPlan+0x2a4>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a78      	ldr	r2, [pc, #480]	; (800f600 <tunePPlan+0x2a0>)
 800f420:	6811      	ldr	r1, [r2, #0]
 800f422:	687a      	ldr	r2, [r7, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	f7f7 fab6 	bl	8006996 <RNSPPstart_PS>
		}

		if(ros.ros_path_start){
 800f42a:	4b77      	ldr	r3, [pc, #476]	; (800f608 <tunePPlan+0x2a8>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	f003 0302 	and.w	r3, r3, #2
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d020      	beq.n	800f47a <tunePPlan+0x11a>
			MODNflag = 0;
 800f438:	4b70      	ldr	r3, [pc, #448]	; (800f5fc <tunePPlan+0x29c>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	601a      	str	r2, [r3, #0]
			ros.ros_path_start = 0;
 800f43e:	4a72      	ldr	r2, [pc, #456]	; (800f608 <tunePPlan+0x2a8>)
 800f440:	7813      	ldrb	r3, [r2, #0]
 800f442:	f36f 0341 	bfc	r3, #1, #1
 800f446:	7013      	strb	r3, [r2, #0]
			RNSPPstart_PS(PP_Points[path_index - 1], point_num[path_index - 1], rns);
 800f448:	4b70      	ldr	r3, [pc, #448]	; (800f60c <tunePPlan+0x2ac>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	4b6a      	ldr	r3, [pc, #424]	; (800f5f8 <tunePPlan+0x298>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f454:	3b01      	subs	r3, #1
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4413      	add	r3, r2
 800f45a:	6818      	ldr	r0, [r3, #0]
 800f45c:	4b6c      	ldr	r3, [pc, #432]	; (800f610 <tunePPlan+0x2b0>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	4b65      	ldr	r3, [pc, #404]	; (800f5f8 <tunePPlan+0x298>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f468:	3b01      	subs	r3, #1
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4413      	add	r3, r2
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	4619      	mov	r1, r3
 800f474:	f7f7 fa8f 	bl	8006996 <RNSPPstart_PS>
 800f478:	e029      	b.n	800f4ce <tunePPlan+0x16e>
		}
		else if(ros.ros_stop){
 800f47a:	4b63      	ldr	r3, [pc, #396]	; (800f608 <tunePPlan+0x2a8>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	f003 0301 	and.w	r3, r3, #1
 800f482:	b2db      	uxtb	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00b      	beq.n	800f4a0 <tunePPlan+0x140>
			MODNflag = 1;
 800f488:	4b5c      	ldr	r3, [pc, #368]	; (800f5fc <tunePPlan+0x29c>)
 800f48a:	2201      	movs	r2, #1
 800f48c:	601a      	str	r2, [r3, #0]
			ros.ros_stop = 0;
 800f48e:	4a5e      	ldr	r2, [pc, #376]	; (800f608 <tunePPlan+0x2a8>)
 800f490:	7813      	ldrb	r3, [r2, #0]
 800f492:	f36f 0300 	bfc	r3, #0, #1
 800f496:	7013      	strb	r3, [r2, #0]
			RNSStop(rns);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f7f7 f957 	bl	800674c <RNSStop>
 800f49e:	e016      	b.n	800f4ce <tunePPlan+0x16e>
			//
		}
		else if(ros.ros_test_start){
 800f4a0:	4b59      	ldr	r3, [pc, #356]	; (800f608 <tunePPlan+0x2a8>)
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00f      	beq.n	800f4ce <tunePPlan+0x16e>
			MODNflag = 0;
 800f4ae:	4b53      	ldr	r3, [pc, #332]	; (800f5fc <tunePPlan+0x29c>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	601a      	str	r2, [r3, #0]
			ros.ros_test_start = 0;
 800f4b4:	4a54      	ldr	r2, [pc, #336]	; (800f608 <tunePPlan+0x2a8>)
 800f4b6:	7813      	ldrb	r3, [r2, #0]
 800f4b8:	f36f 0382 	bfc	r3, #2, #1
 800f4bc:	7013      	strb	r3, [r2, #0]
			RNSPPstart_PS(test_points, test_point_num, rns);
 800f4be:	4b51      	ldr	r3, [pc, #324]	; (800f604 <tunePPlan+0x2a4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	4a4f      	ldr	r2, [pc, #316]	; (800f600 <tunePPlan+0x2a0>)
 800f4c4:	6811      	ldr	r1, [r2, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f7 fa64 	bl	8006996 <RNSPPstart_PS>
		}

		if(ps4->button == CIRCLE){		//run path plan
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4d6:	d16e      	bne.n	800f5b6 <tunePPlan+0x256>
			MODNflag = 0;
 800f4d8:	4b48      	ldr	r3, [pc, #288]	; (800f5fc <tunePPlan+0x29c>)
 800f4da:	2200      	movs	r2, #0
 800f4dc:	601a      	str	r2, [r3, #0]
			ros.ros_path_start = 1;
 800f4de:	4a4a      	ldr	r2, [pc, #296]	; (800f608 <tunePPlan+0x2a8>)
 800f4e0:	7813      	ldrb	r3, [r2, #0]
 800f4e2:	f043 0302 	orr.w	r3, r3, #2
 800f4e6:	7013      	strb	r3, [r2, #0]
			while(ps4->button == CIRCLE);
 800f4e8:	bf00      	nop
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4f2:	d0fa      	beq.n	800f4ea <tunePPlan+0x18a>
			switch (pppath){
 800f4f4:	4b3f      	ldr	r3, [pc, #252]	; (800f5f4 <tunePPlan+0x294>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d037      	beq.n	800f56c <tunePPlan+0x20c>
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	dc5b      	bgt.n	800f5b8 <tunePPlan+0x258>
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <tunePPlan+0x1aa>
 800f504:	2b01      	cmp	r3, #1
 800f506:	d004      	beq.n	800f512 <tunePPlan+0x1b2>
 800f508:	e056      	b.n	800f5b8 <tunePPlan+0x258>
			case 0:
				RNSStop(rns);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7f7 f91e 	bl	800674c <RNSStop>
				break;
 800f510:	e052      	b.n	800f5b8 <tunePPlan+0x258>
//			default:
//				RNSPPstart_PS(PP_Points[pppath], point_num[pppath], rns);
//				break;

			case 1:
				RNSSet(rns, RNS_RESET_POS);
 800f512:	2114      	movs	r1, #20
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7f7 fb25 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 800f51a:	2117      	movs	r1, #23
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7f7 fb21 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800f522:	f04f 0200 	mov.w	r2, #0
 800f526:	4b3b      	ldr	r3, [pc, #236]	; (800f614 <tunePPlan+0x2b4>)
 800f528:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f52c:	a32c      	add	r3, pc, #176	; (adr r3, 800f5e0 <tunePPlan+0x280>)
 800f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f532:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f536:	f04f 0200 	mov.w	r2, #0
 800f53a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f53e:	e9cd 2300 	strd	r2, r3, [sp]
 800f542:	a329      	add	r3, pc, #164	; (adr r3, 800f5e8 <tunePPlan+0x288>)
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	2145      	movs	r1, #69	; 0x45
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7f7 fb0a 	bl	8006b64 <RNSSet>
				registerPath(pathA, npA, point1, point2, point3);
 800f550:	4b31      	ldr	r3, [pc, #196]	; (800f618 <tunePPlan+0x2b8>)
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	4b31      	ldr	r3, [pc, #196]	; (800f61c <tunePPlan+0x2bc>)
 800f556:	4a32      	ldr	r2, [pc, #200]	; (800f620 <tunePPlan+0x2c0>)
 800f558:	2103      	movs	r1, #3
 800f55a:	4832      	ldr	r0, [pc, #200]	; (800f624 <tunePPlan+0x2c4>)
 800f55c:	f7f9 f92a 	bl	80087b4 <registerPath>
				RNSPPstart(pathA, npA, rns);
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	2103      	movs	r1, #3
 800f564:	482f      	ldr	r0, [pc, #188]	; (800f624 <tunePPlan+0x2c4>)
 800f566:	f7f7 f963 	bl	8006830 <RNSPPstart>
				break;
 800f56a:	e025      	b.n	800f5b8 <tunePPlan+0x258>
			case 2:
				RNSSet(rns, RNS_PPSetXYZerror, 0.1, 2.0, 0.05, 1.0);
 800f56c:	f04f 0200 	mov.w	r2, #0
 800f570:	4b28      	ldr	r3, [pc, #160]	; (800f614 <tunePPlan+0x2b4>)
 800f572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f576:	a31a      	add	r3, pc, #104	; (adr r3, 800f5e0 <tunePPlan+0x280>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f580:	f04f 0200 	mov.w	r2, #0
 800f584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f588:	e9cd 2300 	strd	r2, r3, [sp]
 800f58c:	a316      	add	r3, pc, #88	; (adr r3, 800f5e8 <tunePPlan+0x288>)
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	2145      	movs	r1, #69	; 0x45
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7f7 fae5 	bl	8006b64 <RNSSet>
				registerPath(pathB, npB, point5, point6, point7);
 800f59a:	4b23      	ldr	r3, [pc, #140]	; (800f628 <tunePPlan+0x2c8>)
 800f59c:	9300      	str	r3, [sp, #0]
 800f59e:	4b23      	ldr	r3, [pc, #140]	; (800f62c <tunePPlan+0x2cc>)
 800f5a0:	4a23      	ldr	r2, [pc, #140]	; (800f630 <tunePPlan+0x2d0>)
 800f5a2:	2103      	movs	r1, #3
 800f5a4:	4823      	ldr	r0, [pc, #140]	; (800f634 <tunePPlan+0x2d4>)
 800f5a6:	f7f9 f905 	bl	80087b4 <registerPath>
				RNSPPstart(pathB, npB, rns);
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	2103      	movs	r1, #3
 800f5ae:	4821      	ldr	r0, [pc, #132]	; (800f634 <tunePPlan+0x2d4>)
 800f5b0:	f7f7 f93e 	bl	8006830 <RNSPPstart>
				break;
 800f5b4:	e000      	b.n	800f5b8 <tunePPlan+0x258>
//				break;
//			default:
//				pppath = 0;
//				break;
			}
		}
 800f5b6:	bf00      	nop

		//LED indicator
		switch (pppath){
 800f5b8:	4b0e      	ldr	r3, [pc, #56]	; (800f5f4 <tunePPlan+0x294>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b05      	cmp	r3, #5
 800f5be:	f200 808c 	bhi.w	800f6da <tunePPlan+0x37a>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <tunePPlan+0x268>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f639 	.word	0x0800f639
 800f5cc:	0800f677 	.word	0x0800f677
 800f5d0:	0800f68d 	.word	0x0800f68d
 800f5d4:	0800f6a3 	.word	0x0800f6a3
 800f5d8:	0800f6b9 	.word	0x0800f6b9
 800f5dc:	0800f6cf 	.word	0x0800f6cf
 800f5e0:	9999999a 	.word	0x9999999a
 800f5e4:	3fa99999 	.word	0x3fa99999
 800f5e8:	9999999a 	.word	0x9999999a
 800f5ec:	3fb99999 	.word	0x3fb99999
 800f5f0:	20009604 	.word	0x20009604
 800f5f4:	20000880 	.word	0x20000880
 800f5f8:	20007538 	.word	0x20007538
 800f5fc:	20000884 	.word	0x20000884
 800f600:	20009484 	.word	0x20009484
 800f604:	20009e9c 	.word	0x20009e9c
 800f608:	2000a378 	.word	0x2000a378
 800f60c:	20009468 	.word	0x20009468
 800f610:	2000948c 	.word	0x2000948c
 800f614:	3ff00000 	.word	0x3ff00000
 800f618:	20009d04 	.word	0x20009d04
 800f61c:	20007514 	.word	0x20007514
 800f620:	20009b08 	.word	0x20009b08
 800f624:	20009b58 	.word	0x20009b58
 800f628:	2000705c 	.word	0x2000705c
 800f62c:	20007a08 	.word	0x20007a08
 800f630:	2000a5b8 	.word	0x2000a5b8
 800f634:	2000a64c 	.word	0x2000a64c
//		switch (path_index){
		case 0:
			GPIOD_OUT->bit8 = 1;
 800f638:	4a9c      	ldr	r2, [pc, #624]	; (800f8ac <tunePPlan+0x54c>)
 800f63a:	7853      	ldrb	r3, [r2, #1]
 800f63c:	f043 0301 	orr.w	r3, r3, #1
 800f640:	7053      	strb	r3, [r2, #1]
			GPIOD_OUT->bit9 = 0;
 800f642:	4a9a      	ldr	r2, [pc, #616]	; (800f8ac <tunePPlan+0x54c>)
 800f644:	7853      	ldrb	r3, [r2, #1]
 800f646:	f36f 0341 	bfc	r3, #1, #1
 800f64a:	7053      	strb	r3, [r2, #1]
			GPIOA_OUT->bit7 = 0;
 800f64c:	4a98      	ldr	r2, [pc, #608]	; (800f8b0 <tunePPlan+0x550>)
 800f64e:	7813      	ldrb	r3, [r2, #0]
 800f650:	f36f 13c7 	bfc	r3, #7, #1
 800f654:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit6 = 0;
 800f656:	4a96      	ldr	r2, [pc, #600]	; (800f8b0 <tunePPlan+0x550>)
 800f658:	7813      	ldrb	r3, [r2, #0]
 800f65a:	f36f 1386 	bfc	r3, #6, #1
 800f65e:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit5 = 0;
 800f660:	4a93      	ldr	r2, [pc, #588]	; (800f8b0 <tunePPlan+0x550>)
 800f662:	7813      	ldrb	r3, [r2, #0]
 800f664:	f36f 1345 	bfc	r3, #5, #1
 800f668:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 0;
 800f66a:	4a91      	ldr	r2, [pc, #580]	; (800f8b0 <tunePPlan+0x550>)
 800f66c:	7813      	ldrb	r3, [r2, #0]
 800f66e:	f36f 1304 	bfc	r3, #4, #1
 800f672:	7013      	strb	r3, [r2, #0]
			break;
 800f674:	e031      	b.n	800f6da <tunePPlan+0x37a>
		case 1:
			GPIOD_OUT->bit9 = 1;
 800f676:	4a8d      	ldr	r2, [pc, #564]	; (800f8ac <tunePPlan+0x54c>)
 800f678:	7853      	ldrb	r3, [r2, #1]
 800f67a:	f043 0302 	orr.w	r3, r3, #2
 800f67e:	7053      	strb	r3, [r2, #1]
			GPIOA_OUT->bit7 = 0;
 800f680:	4a8b      	ldr	r2, [pc, #556]	; (800f8b0 <tunePPlan+0x550>)
 800f682:	7813      	ldrb	r3, [r2, #0]
 800f684:	f36f 13c7 	bfc	r3, #7, #1
 800f688:	7013      	strb	r3, [r2, #0]
			break;
 800f68a:	e026      	b.n	800f6da <tunePPlan+0x37a>
		case 2:
			GPIOA_OUT->bit7 = 1;
 800f68c:	4a88      	ldr	r2, [pc, #544]	; (800f8b0 <tunePPlan+0x550>)
 800f68e:	7813      	ldrb	r3, [r2, #0]
 800f690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f694:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit6 = 0;
 800f696:	4a86      	ldr	r2, [pc, #536]	; (800f8b0 <tunePPlan+0x550>)
 800f698:	7813      	ldrb	r3, [r2, #0]
 800f69a:	f36f 1386 	bfc	r3, #6, #1
 800f69e:	7013      	strb	r3, [r2, #0]
			break;
 800f6a0:	e01b      	b.n	800f6da <tunePPlan+0x37a>
		case 3:
			GPIOA_OUT->bit6 = 1;
 800f6a2:	4a83      	ldr	r2, [pc, #524]	; (800f8b0 <tunePPlan+0x550>)
 800f6a4:	7813      	ldrb	r3, [r2, #0]
 800f6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6aa:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit5 = 0;
 800f6ac:	4a80      	ldr	r2, [pc, #512]	; (800f8b0 <tunePPlan+0x550>)
 800f6ae:	7813      	ldrb	r3, [r2, #0]
 800f6b0:	f36f 1345 	bfc	r3, #5, #1
 800f6b4:	7013      	strb	r3, [r2, #0]
			break;
 800f6b6:	e010      	b.n	800f6da <tunePPlan+0x37a>
		case 4:
			GPIOA_OUT->bit5 = 1;
 800f6b8:	4a7d      	ldr	r2, [pc, #500]	; (800f8b0 <tunePPlan+0x550>)
 800f6ba:	7813      	ldrb	r3, [r2, #0]
 800f6bc:	f043 0320 	orr.w	r3, r3, #32
 800f6c0:	7013      	strb	r3, [r2, #0]
			GPIOA_OUT->bit4 = 0;
 800f6c2:	4a7b      	ldr	r2, [pc, #492]	; (800f8b0 <tunePPlan+0x550>)
 800f6c4:	7813      	ldrb	r3, [r2, #0]
 800f6c6:	f36f 1304 	bfc	r3, #4, #1
 800f6ca:	7013      	strb	r3, [r2, #0]
			break;
 800f6cc:	e005      	b.n	800f6da <tunePPlan+0x37a>
		case 5:
			GPIOA_OUT->bit4 = 1;
 800f6ce:	4a78      	ldr	r2, [pc, #480]	; (800f8b0 <tunePPlan+0x550>)
 800f6d0:	7813      	ldrb	r3, [r2, #0]
 800f6d2:	f043 0310 	orr.w	r3, r3, #16
 800f6d6:	7013      	strb	r3, [r2, #0]
			break;
 800f6d8:	bf00      	nop
		}

		if(ps4->button == TRIANGLE && rns->RNS_data.common_instruction != RNS_BUSY){	//stickfance
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6e2:	f040 810d 	bne.w	800f900 <tunePPlan+0x5a0>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f6ec:	2b01      	cmp	r3, #1
 800f6ee:	f000 8107 	beq.w	800f900 <tunePPlan+0x5a0>
			while(ps4->button == TRIANGLE);
 800f6f2:	bf00      	nop
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6fc:	d0fa      	beq.n	800f6f4 <tunePPlan+0x394>
			if(pppath == 1){
 800f6fe:	4b6d      	ldr	r3, [pc, #436]	; (800f8b4 <tunePPlan+0x554>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d171      	bne.n	800f7ea <tunePPlan+0x48a>
				while (lim_sw1 == 1|| lim_sw2 == 1 || lim_sw3 == 1){
 800f706:	e05a      	b.n	800f7be <tunePPlan+0x45e>
					if(lim_sw1 == 1 && lim_sw2 == 1)
 800f708:	2110      	movs	r1, #16
 800f70a:	486b      	ldr	r0, [pc, #428]	; (800f8b8 <tunePPlan+0x558>)
 800f70c:	f004 fe4a 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f710:	4603      	mov	r3, r0
 800f712:	2b01      	cmp	r3, #1
 800f714:	d112      	bne.n	800f73c <tunePPlan+0x3dc>
 800f716:	2180      	movs	r1, #128	; 0x80
 800f718:	4867      	ldr	r0, [pc, #412]	; (800f8b8 <tunePPlan+0x558>)
 800f71a:	f004 fe43 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f71e:	4603      	mov	r3, r0
 800f720:	2b01      	cmp	r3, #1
 800f722:	d10b      	bne.n	800f73c <tunePPlan+0x3dc>
						RNSVelocity(1.75, 1.75, 0.0, 0.0, rns);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	eddf 1a65 	vldr	s3, [pc, #404]	; 800f8bc <tunePPlan+0x55c>
 800f72a:	ed9f 1a64 	vldr	s2, [pc, #400]	; 800f8bc <tunePPlan+0x55c>
 800f72e:	eef7 0a0c 	vmov.f32	s1, #124	; 0x3fe00000  1.750
 800f732:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 800f736:	f7f7 f859 	bl	80067ec <RNSVelocity>
 800f73a:	e037      	b.n	800f7ac <tunePPlan+0x44c>
					else if(lim_sw2 == 1)
 800f73c:	2180      	movs	r1, #128	; 0x80
 800f73e:	485e      	ldr	r0, [pc, #376]	; (800f8b8 <tunePPlan+0x558>)
 800f740:	f004 fe30 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f744:	4603      	mov	r3, r0
 800f746:	2b01      	cmp	r3, #1
 800f748:	d10b      	bne.n	800f762 <tunePPlan+0x402>
						RNSVelocity(1.50, 2.0, 0.0, 0.0, rns);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	eddf 1a5b 	vldr	s3, [pc, #364]	; 800f8bc <tunePPlan+0x55c>
 800f750:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800f8bc <tunePPlan+0x55c>
 800f754:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800f758:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800f75c:	f7f7 f846 	bl	80067ec <RNSVelocity>
 800f760:	e024      	b.n	800f7ac <tunePPlan+0x44c>
					else if(lim_sw1 == 1)
 800f762:	2110      	movs	r1, #16
 800f764:	4854      	ldr	r0, [pc, #336]	; (800f8b8 <tunePPlan+0x558>)
 800f766:	f004 fe1d 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f76a:	4603      	mov	r3, r0
 800f76c:	2b01      	cmp	r3, #1
 800f76e:	d10b      	bne.n	800f788 <tunePPlan+0x428>
						RNSVelocity(2.0, 1.5, 0.0, 0.0, rns);
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	eddf 1a52 	vldr	s3, [pc, #328]	; 800f8bc <tunePPlan+0x55c>
 800f776:	ed9f 1a51 	vldr	s2, [pc, #324]	; 800f8bc <tunePPlan+0x55c>
 800f77a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800f77e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f782:	f7f7 f833 	bl	80067ec <RNSVelocity>
 800f786:	e011      	b.n	800f7ac <tunePPlan+0x44c>
					else if(lim_sw3 == 1)
 800f788:	2120      	movs	r1, #32
 800f78a:	484d      	ldr	r0, [pc, #308]	; (800f8c0 <tunePPlan+0x560>)
 800f78c:	f004 fe0a 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f790:	4603      	mov	r3, r0
 800f792:	2b01      	cmp	r3, #1
 800f794:	d10a      	bne.n	800f7ac <tunePPlan+0x44c>
						RNSVelocity(2.0, 1.5, -1.50, 0.0, rns);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	eddf 1a48 	vldr	s3, [pc, #288]	; 800f8bc <tunePPlan+0x55c>
 800f79c:	eebf 1a08 	vmov.f32	s2, #248	; 0xbfc00000 -1.5
 800f7a0:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800f7a4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f7a8:	f7f7 f820 	bl	80067ec <RNSVelocity>
					if(ps4->button == CROSS){
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f7b4:	d103      	bne.n	800f7be <tunePPlan+0x45e>
						RNSStop(rns);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7f6 ffc8 	bl	800674c <RNSStop>
						break;
 800f7bc:	e097      	b.n	800f8ee <tunePPlan+0x58e>
				while (lim_sw1 == 1|| lim_sw2 == 1 || lim_sw3 == 1){
 800f7be:	2110      	movs	r1, #16
 800f7c0:	483d      	ldr	r0, [pc, #244]	; (800f8b8 <tunePPlan+0x558>)
 800f7c2:	f004 fdef 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b01      	cmp	r3, #1
 800f7ca:	d09d      	beq.n	800f708 <tunePPlan+0x3a8>
 800f7cc:	2180      	movs	r1, #128	; 0x80
 800f7ce:	483a      	ldr	r0, [pc, #232]	; (800f8b8 <tunePPlan+0x558>)
 800f7d0:	f004 fde8 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d096      	beq.n	800f708 <tunePPlan+0x3a8>
 800f7da:	2120      	movs	r1, #32
 800f7dc:	4838      	ldr	r0, [pc, #224]	; (800f8c0 <tunePPlan+0x560>)
 800f7de:	f004 fde1 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d08f      	beq.n	800f708 <tunePPlan+0x3a8>
 800f7e8:	e081      	b.n	800f8ee <tunePPlan+0x58e>
					}
				}
			}
			else if(pppath == 3){
 800f7ea:	4b32      	ldr	r3, [pc, #200]	; (800f8b4 <tunePPlan+0x554>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b03      	cmp	r3, #3
 800f7f0:	d17d      	bne.n	800f8ee <tunePPlan+0x58e>
				while (lim_sw2 == 1|| lim_sw3 == 1 || lim_sw4 == 1){
 800f7f2:	e067      	b.n	800f8c4 <tunePPlan+0x564>
					if(lim_sw3 == 1 && lim_sw4 == 1)
 800f7f4:	2120      	movs	r1, #32
 800f7f6:	4832      	ldr	r0, [pc, #200]	; (800f8c0 <tunePPlan+0x560>)
 800f7f8:	f004 fdd4 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d112      	bne.n	800f828 <tunePPlan+0x4c8>
 800f802:	2140      	movs	r1, #64	; 0x40
 800f804:	482e      	ldr	r0, [pc, #184]	; (800f8c0 <tunePPlan+0x560>)
 800f806:	f004 fdcd 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d10b      	bne.n	800f828 <tunePPlan+0x4c8>
						RNSVelocity(0.0, -1.75, 1.75, 0.0, rns);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	eddf 1a2a 	vldr	s3, [pc, #168]	; 800f8bc <tunePPlan+0x55c>
 800f816:	eeb7 1a0c 	vmov.f32	s2, #124	; 0x3fe00000  1.750
 800f81a:	eeff 0a0c 	vmov.f32	s1, #252	; 0xbfe00000 -1.750
 800f81e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800f8bc <tunePPlan+0x55c>
 800f822:	f7f6 ffe3 	bl	80067ec <RNSVelocity>
 800f826:	e037      	b.n	800f898 <tunePPlan+0x538>
					else if(lim_sw3 == 1)
 800f828:	2120      	movs	r1, #32
 800f82a:	4825      	ldr	r0, [pc, #148]	; (800f8c0 <tunePPlan+0x560>)
 800f82c:	f004 fdba 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f830:	4603      	mov	r3, r0
 800f832:	2b01      	cmp	r3, #1
 800f834:	d10b      	bne.n	800f84e <tunePPlan+0x4ee>
						RNSVelocity(0.0, -2.0, 1.50, 0.0, rns);
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	eddf 1a20 	vldr	s3, [pc, #128]	; 800f8bc <tunePPlan+0x55c>
 800f83c:	eeb7 1a08 	vmov.f32	s2, #120	; 0x3fc00000  1.5
 800f840:	eef8 0a00 	vmov.f32	s1, #128	; 0xc0000000 -2.0
 800f844:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800f8bc <tunePPlan+0x55c>
 800f848:	f7f6 ffd0 	bl	80067ec <RNSVelocity>
 800f84c:	e024      	b.n	800f898 <tunePPlan+0x538>
					else if(lim_sw4 == 1)
 800f84e:	2140      	movs	r1, #64	; 0x40
 800f850:	481b      	ldr	r0, [pc, #108]	; (800f8c0 <tunePPlan+0x560>)
 800f852:	f004 fda7 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f856:	4603      	mov	r3, r0
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d10b      	bne.n	800f874 <tunePPlan+0x514>
						RNSVelocity(0.0, -1.5, 2.0, 0.0, rns);
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	eddf 1a17 	vldr	s3, [pc, #92]	; 800f8bc <tunePPlan+0x55c>
 800f862:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800f866:	eeff 0a08 	vmov.f32	s1, #248	; 0xbfc00000 -1.5
 800f86a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800f8bc <tunePPlan+0x55c>
 800f86e:	f7f6 ffbd 	bl	80067ec <RNSVelocity>
 800f872:	e011      	b.n	800f898 <tunePPlan+0x538>
					else if(lim_sw2 == 1)
 800f874:	2180      	movs	r1, #128	; 0x80
 800f876:	4810      	ldr	r0, [pc, #64]	; (800f8b8 <tunePPlan+0x558>)
 800f878:	f004 fd94 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b01      	cmp	r3, #1
 800f880:	d10a      	bne.n	800f898 <tunePPlan+0x538>
						RNSVelocity(1.75, -1.25, 1.75, 0.0, rns);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	eddf 1a0d 	vldr	s3, [pc, #52]	; 800f8bc <tunePPlan+0x55c>
 800f888:	eeb7 1a0c 	vmov.f32	s2, #124	; 0x3fe00000  1.750
 800f88c:	eeff 0a04 	vmov.f32	s1, #244	; 0xbfa00000 -1.250
 800f890:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 800f894:	f7f6 ffaa 	bl	80067ec <RNSVelocity>
					if(ps4->button == CROSS){
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8a0:	d110      	bne.n	800f8c4 <tunePPlan+0x564>
						RNSStop(rns);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7f6 ff52 	bl	800674c <RNSStop>
						break;
 800f8a8:	e021      	b.n	800f8ee <tunePPlan+0x58e>
 800f8aa:	bf00      	nop
 800f8ac:	40020c14 	.word	0x40020c14
 800f8b0:	40020014 	.word	0x40020014
 800f8b4:	20000880 	.word	0x20000880
 800f8b8:	40020c00 	.word	0x40020c00
 800f8bc:	00000000 	.word	0x00000000
 800f8c0:	40020400 	.word	0x40020400
				while (lim_sw2 == 1|| lim_sw3 == 1 || lim_sw4 == 1){
 800f8c4:	2180      	movs	r1, #128	; 0x80
 800f8c6:	4828      	ldr	r0, [pc, #160]	; (800f968 <tunePPlan+0x608>)
 800f8c8:	f004 fd6c 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d090      	beq.n	800f7f4 <tunePPlan+0x494>
 800f8d2:	2120      	movs	r1, #32
 800f8d4:	4825      	ldr	r0, [pc, #148]	; (800f96c <tunePPlan+0x60c>)
 800f8d6:	f004 fd65 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d089      	beq.n	800f7f4 <tunePPlan+0x494>
 800f8e0:	2140      	movs	r1, #64	; 0x40
 800f8e2:	4822      	ldr	r0, [pc, #136]	; (800f96c <tunePPlan+0x60c>)
 800f8e4:	f004 fd5e 	bl	80143a4 <HAL_GPIO_ReadPin>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b01      	cmp	r3, #1
 800f8ec:	d082      	beq.n	800f7f4 <tunePPlan+0x494>
					}
				}
			}
			RNSStop(rns);
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f7f6 ff2c 	bl	800674c <RNSStop>
			while(ps4->button == CROSS);
 800f8f4:	bf00      	nop
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8fe:	d0fa      	beq.n	800f8f6 <tunePPlan+0x596>
		}

		if(ps4->button == CROSS){	//stop + manual NAVI mode
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f908:	d118      	bne.n	800f93c <tunePPlan+0x5dc>
			while(ps4->button == CROSS);
 800f90a:	bf00      	nop
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f914:	d0fa      	beq.n	800f90c <tunePPlan+0x5ac>
			if(ps4->button == L1_CROSS){
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f91a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f91e:	d107      	bne.n	800f930 <tunePPlan+0x5d0>
				RNSSet(rns, RNS_RESET_POS);
 800f920:	2114      	movs	r1, #20
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7f7 f91e 	bl	8006b64 <RNSSet>
				RNSSet(rns, RNS_PP_Reset);
 800f928:	2117      	movs	r1, #23
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7f7 f91a 	bl	8006b64 <RNSSet>
			}
			MODNflag = 1;
 800f930:	4b0f      	ldr	r3, [pc, #60]	; (800f970 <tunePPlan+0x610>)
 800f932:	2201      	movs	r2, #1
 800f934:	601a      	str	r2, [r3, #0]
			RNSStop(rns);
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7f6 ff08 	bl	800674c <RNSStop>
		}

		if(MODNflag)
 800f93c:	4b0c      	ldr	r3, [pc, #48]	; (800f970 <tunePPlan+0x610>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d003      	beq.n	800f94c <tunePPlan+0x5ec>
			realMODN(ps4, rns);
 800f944:	6879      	ldr	r1, [r7, #4]
 800f946:	68b8      	ldr	r0, [r7, #8]
 800f948:	f7f5 fe06 	bl	8005558 <realMODN>
	while(tune.PP){
 800f94c:	4b09      	ldr	r3, [pc, #36]	; (800f974 <tunePPlan+0x614>)
 800f94e:	791b      	ldrb	r3, [r3, #4]
 800f950:	f003 0301 	and.w	r3, r3, #1
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	f47f ad0c 	bne.w	800f374 <tunePPlan+0x14>
	}
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	3710      	adds	r7, #16
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	40020c00 	.word	0x40020c00
 800f96c:	40020400 	.word	0x40020400
 800f970:	20000884 	.word	0x20000884
 800f974:	20007778 	.word	0x20007778

0800f978 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 800f978:	b580      	push	{r7, lr}
 800f97a:	b088      	sub	sp, #32
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
	if (!len) {
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b00      	cmp	r3, #0
 800f986:	f001 8437 	beq.w	80111f8 <bldc_interface_process_packet+0x1880>
		return;
	}

	if (forward_func) {
 800f98a:	4bcd      	ldr	r3, [pc, #820]	; (800fcc0 <bldc_interface_process_packet+0x348>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d006      	beq.n	800f9a0 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 800f992:	4bcb      	ldr	r3, [pc, #812]	; (800fcc0 <bldc_interface_process_packet+0x348>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	6839      	ldr	r1, [r7, #0]
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	4798      	blx	r3
		return;
 800f99c:	f001 bc43 	b.w	8011226 <bldc_interface_process_packet+0x18ae>
	}

	int32_t ind = 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	60fb      	str	r3, [r7, #12]
	uint32_t mask = 0;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	617b      	str	r3, [r7, #20]
	uint32_t hahaha = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	61fb      	str	r3, [r7, #28]
	int i = 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	61bb      	str	r3, [r7, #24]
	unsigned char id = data[0];
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	74fb      	strb	r3, [r7, #19]
	data++;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	607b      	str	r3, [r7, #4]
	len--;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	603b      	str	r3, [r7, #0]

	switch (id) {
 800f9c2:	7cfb      	ldrb	r3, [r7, #19]
 800f9c4:	2b32      	cmp	r3, #50	; 0x32
 800f9c6:	f201 8419 	bhi.w	80111fc <bldc_interface_process_packet+0x1884>
 800f9ca:	a201      	add	r2, pc, #4	; (adr r2, 800f9d0 <bldc_interface_process_packet+0x58>)
 800f9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d0:	0800fa9d 	.word	0x0800fa9d
 800f9d4:	080111fd 	.word	0x080111fd
 800f9d8:	080111fd 	.word	0x080111fd
 800f9dc:	080111fd 	.word	0x080111fd
 800f9e0:	0800fae7 	.word	0x0800fae7
 800f9e4:	080111fd 	.word	0x080111fd
 800f9e8:	080111fd 	.word	0x080111fd
 800f9ec:	080111fd 	.word	0x080111fd
 800f9f0:	080111fd 	.word	0x080111fd
 800f9f4:	080111fd 	.word	0x080111fd
 800f9f8:	080111fd 	.word	0x080111fd
 800f9fc:	080111fd 	.word	0x080111fd
 800fa00:	080111fd 	.word	0x080111fd
 800fa04:	080111d9 	.word	0x080111d9
 800fa08:	08010161 	.word	0x08010161
 800fa0c:	08010161 	.word	0x08010161
 800fa10:	080111e9 	.word	0x080111e9
 800fa14:	08010a1d 	.word	0x08010a1d
 800fa18:	08010a1d 	.word	0x08010a1d
 800fa1c:	080111fd 	.word	0x080111fd
 800fa20:	080111fd 	.word	0x080111fd
 800fa24:	080100e1 	.word	0x080100e1
 800fa28:	08010101 	.word	0x08010101
 800fa2c:	080111fd 	.word	0x080111fd
 800fa30:	08011041 	.word	0x08011041
 800fa34:	080111fd 	.word	0x080111fd
 800fa38:	080111fd 	.word	0x080111fd
 800fa3c:	080111fd 	.word	0x080111fd
 800fa40:	080111fd 	.word	0x080111fd
 800fa44:	080111fd 	.word	0x080111fd
 800fa48:	080111fd 	.word	0x080111fd
 800fa4c:	080110e9 	.word	0x080110e9
 800fa50:	08011145 	.word	0x08011145
 800fa54:	080111a1 	.word	0x080111a1
 800fa58:	080111fd 	.word	0x080111fd
 800fa5c:	080111fd 	.word	0x080111fd
 800fa60:	080111fd 	.word	0x080111fd
 800fa64:	080111fd 	.word	0x080111fd
 800fa68:	080111fd 	.word	0x080111fd
 800fa6c:	080111fd 	.word	0x080111fd
 800fa70:	080111fd 	.word	0x080111fd
 800fa74:	080111fd 	.word	0x080111fd
 800fa78:	080111fd 	.word	0x080111fd
 800fa7c:	080111fd 	.word	0x080111fd
 800fa80:	080111fd 	.word	0x080111fd
 800fa84:	080111fd 	.word	0x080111fd
 800fa88:	080111fd 	.word	0x080111fd
 800fa8c:	080111fd 	.word	0x080111fd
 800fa90:	080111fd 	.word	0x080111fd
 800fa94:	080111fd 	.word	0x080111fd
 800fa98:	0800fd25 	.word	0x0800fd25
	case COMM_FW_VERSION:
		if (len == 2) {
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d117      	bne.n	800fad2 <bldc_interface_process_packet+0x15a>
			ind = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	1c5a      	adds	r2, r3, #1
 800faaa:	60fa      	str	r2, [r7, #12]
 800faac:	461a      	mov	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4413      	add	r3, r2
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	461a      	mov	r2, r3
 800fab6:	4b83      	ldr	r3, [pc, #524]	; (800fcc4 <bldc_interface_process_packet+0x34c>)
 800fab8:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	1c5a      	adds	r2, r3, #1
 800fabe:	60fa      	str	r2, [r7, #12]
 800fac0:	461a      	mov	r2, r3
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4413      	add	r3, r2
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	461a      	mov	r2, r3
 800faca:	4b7f      	ldr	r3, [pc, #508]	; (800fcc8 <bldc_interface_process_packet+0x350>)
 800facc:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 800face:	f001 bbaa 	b.w	8011226 <bldc_interface_process_packet+0x18ae>
			fw_major = -1;
 800fad2:	4b7c      	ldr	r3, [pc, #496]	; (800fcc4 <bldc_interface_process_packet+0x34c>)
 800fad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fad8:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 800fada:	4b7b      	ldr	r3, [pc, #492]	; (800fcc8 <bldc_interface_process_packet+0x350>)
 800fadc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fae0:	601a      	str	r2, [r3, #0]
		break;
 800fae2:	f001 bba0 	b.w	8011226 <bldc_interface_process_packet+0x18ae>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 800fae6:	2300      	movs	r3, #0
 800fae8:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800faea:	f107 030c 	add.w	r3, r7, #12
 800faee:	4619      	mov	r1, r3
 800faf0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f001 fc65 	bl	80113c4 <buffer_get_float16>
 800fafa:	eef0 7a40 	vmov.f32	s15, s0
 800fafe:	4b73      	ldr	r3, [pc, #460]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb00:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800fb04:	f107 030c 	add.w	r3, r7, #12
 800fb08:	4619      	mov	r1, r3
 800fb0a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f001 fc58 	bl	80113c4 <buffer_get_float16>
 800fb14:	eef0 7a40 	vmov.f32	s15, s0
 800fb18:	4b6c      	ldr	r3, [pc, #432]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb1a:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800fb1e:	f107 030c 	add.w	r3, r7, #12
 800fb22:	4619      	mov	r1, r3
 800fb24:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 800fcd0 <bldc_interface_process_packet+0x358>
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f001 fc66 	bl	80113fa <buffer_get_float32>
 800fb2e:	eef0 7a40 	vmov.f32	s15, s0
 800fb32:	4b66      	ldr	r3, [pc, #408]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb34:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 800fb38:	f107 030c 	add.w	r3, r7, #12
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800fcd0 <bldc_interface_process_packet+0x358>
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f001 fc59 	bl	80113fa <buffer_get_float32>
 800fb48:	eef0 7a40 	vmov.f32	s15, s0
 800fb4c:	4b5f      	ldr	r3, [pc, #380]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb4e:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 800fb52:	f107 030c 	add.w	r3, r7, #12
 800fb56:	4619      	mov	r1, r3
 800fb58:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800fcd0 <bldc_interface_process_packet+0x358>
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 fc4c 	bl	80113fa <buffer_get_float32>
 800fb62:	eef0 7a40 	vmov.f32	s15, s0
 800fb66:	4b59      	ldr	r3, [pc, #356]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb68:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 800fb6c:	f107 030c 	add.w	r3, r7, #12
 800fb70:	4619      	mov	r1, r3
 800fb72:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800fcd0 <bldc_interface_process_packet+0x358>
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f001 fc3f 	bl	80113fa <buffer_get_float32>
 800fb7c:	eef0 7a40 	vmov.f32	s15, s0
 800fb80:	4b52      	ldr	r3, [pc, #328]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb82:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800fb86:	f107 030c 	add.w	r3, r7, #12
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800fcd4 <bldc_interface_process_packet+0x35c>
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f001 fc17 	bl	80113c4 <buffer_get_float16>
 800fb96:	eef0 7a40 	vmov.f32	s15, s0
 800fb9a:	4b4c      	ldr	r3, [pc, #304]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fb9c:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 800fba0:	f107 030c 	add.w	r3, r7, #12
 800fba4:	4619      	mov	r1, r3
 800fba6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f001 fc25 	bl	80113fa <buffer_get_float32>
 800fbb0:	eef0 7a40 	vmov.f32	s15, s0
 800fbb4:	4b45      	ldr	r3, [pc, #276]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fbb6:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 800fbba:	f107 030c 	add.w	r3, r7, #12
 800fbbe:	4619      	mov	r1, r3
 800fbc0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f001 fbfd 	bl	80113c4 <buffer_get_float16>
 800fbca:	eef0 7a40 	vmov.f32	s15, s0
 800fbce:	4b3f      	ldr	r3, [pc, #252]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fbd0:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800fbd4:	f107 030c 	add.w	r3, r7, #12
 800fbd8:	4619      	mov	r1, r3
 800fbda:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800fcd8 <bldc_interface_process_packet+0x360>
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f001 fc0b 	bl	80113fa <buffer_get_float32>
 800fbe4:	eef0 7a40 	vmov.f32	s15, s0
 800fbe8:	4b38      	ldr	r3, [pc, #224]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fbea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800fbee:	f107 030c 	add.w	r3, r7, #12
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800fcd8 <bldc_interface_process_packet+0x360>
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f001 fbfe 	bl	80113fa <buffer_get_float32>
 800fbfe:	eef0 7a40 	vmov.f32	s15, s0
 800fc02:	4b32      	ldr	r3, [pc, #200]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc04:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800fc08:	f107 030c 	add.w	r3, r7, #12
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800fcd8 <bldc_interface_process_packet+0x360>
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f001 fbf1 	bl	80113fa <buffer_get_float32>
 800fc18:	eef0 7a40 	vmov.f32	s15, s0
 800fc1c:	4b2b      	ldr	r3, [pc, #172]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc1e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800fc22:	f107 030c 	add.w	r3, r7, #12
 800fc26:	4619      	mov	r1, r3
 800fc28:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800fcd8 <bldc_interface_process_packet+0x360>
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f001 fbe4 	bl	80113fa <buffer_get_float32>
 800fc32:	eef0 7a40 	vmov.f32	s15, s0
 800fc36:	4b25      	ldr	r3, [pc, #148]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc38:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 800fc3c:	f107 030c 	add.w	r3, r7, #12
 800fc40:	4619      	mov	r1, r3
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f001 fb5e 	bl	8011304 <buffer_get_int32>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4a20      	ldr	r2, [pc, #128]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc4c:	6353      	str	r3, [r2, #52]	; 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 800fc4e:	f107 030c 	add.w	r3, r7, #12
 800fc52:	4619      	mov	r1, r3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f001 fb55 	bl	8011304 <buffer_get_int32>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	4a1b      	ldr	r2, [pc, #108]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc5e:	6393      	str	r3, [r2, #56]	; 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	60fa      	str	r2, [r7, #12]
 800fc66:	461a      	mov	r2, r3
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	781a      	ldrb	r2, [r3, #0]
 800fc6e:	4b17      	ldr	r3, [pc, #92]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		if (ind < (int)len) {
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	da0d      	bge.n	800fc98 <bldc_interface_process_packet+0x320>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800fc7c:	f107 030c 	add.w	r3, r7, #12
 800fc80:	4619      	mov	r1, r3
 800fc82:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800fcdc <bldc_interface_process_packet+0x364>
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f001 fbb7 	bl	80113fa <buffer_get_float32>
 800fc8c:	eef0 7a40 	vmov.f32	s15, s0
 800fc90:	4b0e      	ldr	r3, [pc, #56]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc92:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 800fc96:	e003      	b.n	800fca0 <bldc_interface_process_packet+0x328>
		} else {
			values.pid_pos = 0.0;
 800fc98:	4b0c      	ldr	r3, [pc, #48]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fc9a:	f04f 0200 	mov.w	r2, #0
 800fc9e:	645a      	str	r2, [r3, #68]	; 0x44
		}

		if (ind < (int)len) {
 800fca0:	68fa      	ldr	r2, [r7, #12]
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	da1b      	bge.n	800fce0 <bldc_interface_process_packet+0x368>
			values.vesc_id = data[ind++];
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	1c5a      	adds	r2, r3, #1
 800fcac:	60fa      	str	r2, [r7, #12]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	781a      	ldrb	r2, [r3, #0]
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <bldc_interface_process_packet+0x354>)
 800fcb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fcbc:	e014      	b.n	800fce8 <bldc_interface_process_packet+0x370>
 800fcbe:	bf00      	nop
 800fcc0:	20000b70 	.word	0x20000b70
 800fcc4:	200008e8 	.word	0x200008e8
 800fcc8:	200008ec 	.word	0x200008ec
 800fccc:	20000888 	.word	0x20000888
 800fcd0:	42c80000 	.word	0x42c80000
 800fcd4:	447a0000 	.word	0x447a0000
 800fcd8:	461c4000 	.word	0x461c4000
 800fcdc:	49742400 	.word	0x49742400
		} else {
			values.vesc_id = 255;
 800fce0:	4b0c      	ldr	r3, [pc, #48]	; (800fd14 <bldc_interface_process_packet+0x39c>)
 800fce2:	22ff      	movs	r2, #255	; 0xff
 800fce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		}

		rx_value_buf = values;
 800fce8:	4a0b      	ldr	r2, [pc, #44]	; (800fd18 <bldc_interface_process_packet+0x3a0>)
 800fcea:	4b0a      	ldr	r3, [pc, #40]	; (800fd14 <bldc_interface_process_packet+0x39c>)
 800fcec:	4610      	mov	r0, r2
 800fcee:	4619      	mov	r1, r3
 800fcf0:	2360      	movs	r3, #96	; 0x60
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	f00c fe2c 	bl	801c950 <memcpy>

		if (rx_value_func) {
 800fcf8:	4b08      	ldr	r3, [pc, #32]	; (800fd1c <bldc_interface_process_packet+0x3a4>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d003      	beq.n	800fd08 <bldc_interface_process_packet+0x390>
			rx_value_func(&values);
 800fd00:	4b06      	ldr	r3, [pc, #24]	; (800fd1c <bldc_interface_process_packet+0x3a4>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4803      	ldr	r0, [pc, #12]	; (800fd14 <bldc_interface_process_packet+0x39c>)
 800fd06:	4798      	blx	r3
		}

		rx_value_complete = true;
 800fd08:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <bldc_interface_process_packet+0x3a8>)
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	701a      	strb	r2, [r3, #0]

		break;
 800fd0e:	f001 ba8a 	b.w	8011226 <bldc_interface_process_packet+0x18ae>
 800fd12:	bf00      	nop
 800fd14:	20000888 	.word	0x20000888
 800fd18:	20007848 	.word	0x20007848
 800fd1c:	20000b74 	.word	0x20000b74
 800fd20:	2000a364 	.word	0x2000a364

	case COMM_GET_VALUES_SELECTIVE:
		ind = 0;
 800fd24:	2300      	movs	r3, #0
 800fd26:	60fb      	str	r3, [r7, #12]
		mask = buffer_get_uint32(data, &ind);
 800fd28:	f107 030c 	add.w	r3, r7, #12
 800fd2c:	4619      	mov	r1, r3
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f001 fb18 	bl	8011364 <buffer_get_uint32>
 800fd34:	6178      	str	r0, [r7, #20]

		if (mask & ((uint32_t)1 << 0)) {
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	f003 0301 	and.w	r3, r3, #1
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00e      	beq.n	800fd5e <bldc_interface_process_packet+0x3e6>
			values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 800fd40:	f107 030c 	add.w	r3, r7, #12
 800fd44:	4619      	mov	r1, r3
 800fd46:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 fb3a 	bl	80113c4 <buffer_get_float16>
 800fd50:	eef0 7a40 	vmov.f32	s15, s0
 800fd54:	4bc6      	ldr	r3, [pc, #792]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fd56:	edc3 7a01 	vstr	s15, [r3, #4]
			hahaha = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 1)) {
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f003 0302 	and.w	r3, r3, #2
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00e      	beq.n	800fd86 <bldc_interface_process_packet+0x40e>
			values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 800fd68:	f107 030c 	add.w	r3, r7, #12
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f001 fb26 	bl	80113c4 <buffer_get_float16>
 800fd78:	eef0 7a40 	vmov.f32	s15, s0
 800fd7c:	4bbc      	ldr	r3, [pc, #752]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fd7e:	edc3 7a02 	vstr	s15, [r3, #8]
			hahaha = 1;
 800fd82:	2301      	movs	r3, #1
 800fd84:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 2)) {
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	f003 0304 	and.w	r3, r3, #4
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00e      	beq.n	800fdae <bldc_interface_process_packet+0x436>
			values.current_motor = buffer_get_float32(data, 1e2, &ind);
 800fd90:	f107 030c 	add.w	r3, r7, #12
 800fd94:	4619      	mov	r1, r3
 800fd96:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8010074 <bldc_interface_process_packet+0x6fc>
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f001 fb2d 	bl	80113fa <buffer_get_float32>
 800fda0:	eef0 7a40 	vmov.f32	s15, s0
 800fda4:	4bb2      	ldr	r3, [pc, #712]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fda6:	edc3 7a03 	vstr	s15, [r3, #12]
			hahaha = 2;
 800fdaa:	2302      	movs	r3, #2
 800fdac:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 3)) {
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	f003 0308 	and.w	r3, r3, #8
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d00e      	beq.n	800fdd6 <bldc_interface_process_packet+0x45e>
			values.current_in = buffer_get_float32(data, 1e2, &ind);
 800fdb8:	f107 030c 	add.w	r3, r7, #12
 800fdbc:	4619      	mov	r1, r3
 800fdbe:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8010074 <bldc_interface_process_packet+0x6fc>
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f001 fb19 	bl	80113fa <buffer_get_float32>
 800fdc8:	eef0 7a40 	vmov.f32	s15, s0
 800fdcc:	4ba8      	ldr	r3, [pc, #672]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fdce:	edc3 7a04 	vstr	s15, [r3, #16]
			hahaha = 3;
 800fdd2:	2303      	movs	r3, #3
 800fdd4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 4)) {
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f003 0310 	and.w	r3, r3, #16
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00e      	beq.n	800fdfe <bldc_interface_process_packet+0x486>
			values.id = buffer_get_float32(data, 1e2, &ind);
 800fde0:	f107 030c 	add.w	r3, r7, #12
 800fde4:	4619      	mov	r1, r3
 800fde6:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8010074 <bldc_interface_process_packet+0x6fc>
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f001 fb05 	bl	80113fa <buffer_get_float32>
 800fdf0:	eef0 7a40 	vmov.f32	s15, s0
 800fdf4:	4b9e      	ldr	r3, [pc, #632]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fdf6:	edc3 7a05 	vstr	s15, [r3, #20]
			hahaha = 4;
 800fdfa:	2304      	movs	r3, #4
 800fdfc:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 5)) {
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	f003 0320 	and.w	r3, r3, #32
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00e      	beq.n	800fe26 <bldc_interface_process_packet+0x4ae>
			values.iq = buffer_get_float32(data, 1e2, &ind);
 800fe08:	f107 030c 	add.w	r3, r7, #12
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8010074 <bldc_interface_process_packet+0x6fc>
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f001 faf1 	bl	80113fa <buffer_get_float32>
 800fe18:	eef0 7a40 	vmov.f32	s15, s0
 800fe1c:	4b94      	ldr	r3, [pc, #592]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fe1e:	edc3 7a06 	vstr	s15, [r3, #24]
			hahaha = 5;
 800fe22:	2305      	movs	r3, #5
 800fe24:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 6)) {
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00e      	beq.n	800fe4e <bldc_interface_process_packet+0x4d6>
			values.duty_now = buffer_get_float16(data, 1e3, &ind);
 800fe30:	f107 030c 	add.w	r3, r7, #12
 800fe34:	4619      	mov	r1, r3
 800fe36:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8010080 <bldc_interface_process_packet+0x708>
 800fe3a:	6878      	ldr	r0, [r7, #4]
 800fe3c:	f001 fac2 	bl	80113c4 <buffer_get_float16>
 800fe40:	eef0 7a40 	vmov.f32	s15, s0
 800fe44:	4b8a      	ldr	r3, [pc, #552]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fe46:	edc3 7a08 	vstr	s15, [r3, #32]
			hahaha = 6;
 800fe4a:	2306      	movs	r3, #6
 800fe4c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 7)) {
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00e      	beq.n	800fe76 <bldc_interface_process_packet+0x4fe>
			values.rpm = buffer_get_float32(data, 1e0, &ind); // has to be divided by pole pairs
 800fe58:	f107 030c 	add.w	r3, r7, #12
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f001 fac9 	bl	80113fa <buffer_get_float32>
 800fe68:	eef0 7a40 	vmov.f32	s15, s0
 800fe6c:	4b80      	ldr	r3, [pc, #512]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fe6e:	edc3 7a07 	vstr	s15, [r3, #28]
			hahaha = 7;
 800fe72:	2307      	movs	r3, #7
 800fe74:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 8)) {
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00e      	beq.n	800fe9e <bldc_interface_process_packet+0x526>
			values.v_in = buffer_get_float16(data, 1e1, &ind);
 800fe80:	f107 030c 	add.w	r3, r7, #12
 800fe84:	4619      	mov	r1, r3
 800fe86:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f001 fa9a 	bl	80113c4 <buffer_get_float16>
 800fe90:	eef0 7a40 	vmov.f32	s15, s0
 800fe94:	4b76      	ldr	r3, [pc, #472]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fe96:	edc3 7a00 	vstr	s15, [r3]
			hahaha = 8;
 800fe9a:	2308      	movs	r3, #8
 800fe9c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 9)) {
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00e      	beq.n	800fec6 <bldc_interface_process_packet+0x54e>
			values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 800fea8:	f107 030c 	add.w	r3, r7, #12
 800feac:	4619      	mov	r1, r3
 800feae:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8010078 <bldc_interface_process_packet+0x700>
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 faa1 	bl	80113fa <buffer_get_float32>
 800feb8:	eef0 7a40 	vmov.f32	s15, s0
 800febc:	4b6c      	ldr	r3, [pc, #432]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800febe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			hahaha = 9;
 800fec2:	2309      	movs	r3, #9
 800fec4:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 10)) {
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00e      	beq.n	800feee <bldc_interface_process_packet+0x576>
			values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800fed0:	f107 030c 	add.w	r3, r7, #12
 800fed4:	4619      	mov	r1, r3
 800fed6:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8010078 <bldc_interface_process_packet+0x700>
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f001 fa8d 	bl	80113fa <buffer_get_float32>
 800fee0:	eef0 7a40 	vmov.f32	s15, s0
 800fee4:	4b62      	ldr	r3, [pc, #392]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800fee6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			hahaha = 10;
 800feea:	230a      	movs	r3, #10
 800feec:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 11)) {
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d00e      	beq.n	800ff16 <bldc_interface_process_packet+0x59e>
			values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 800fef8:	f107 030c 	add.w	r3, r7, #12
 800fefc:	4619      	mov	r1, r3
 800fefe:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8010078 <bldc_interface_process_packet+0x700>
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f001 fa79 	bl	80113fa <buffer_get_float32>
 800ff08:	eef0 7a40 	vmov.f32	s15, s0
 800ff0c:	4b58      	ldr	r3, [pc, #352]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ff0e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			hahaha = 11;
 800ff12:	230b      	movs	r3, #11
 800ff14:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 12)) {
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00e      	beq.n	800ff3e <bldc_interface_process_packet+0x5c6>
			values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 800ff20:	f107 030c 	add.w	r3, r7, #12
 800ff24:	4619      	mov	r1, r3
 800ff26:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8010078 <bldc_interface_process_packet+0x700>
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f001 fa65 	bl	80113fa <buffer_get_float32>
 800ff30:	eef0 7a40 	vmov.f32	s15, s0
 800ff34:	4b4e      	ldr	r3, [pc, #312]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ff36:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			hahaha = 12;
 800ff3a:	230c      	movs	r3, #12
 800ff3c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 13)) {
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d00a      	beq.n	800ff5e <bldc_interface_process_packet+0x5e6>
			values.tachometer = buffer_get_int32(data, &ind);
 800ff48:	f107 030c 	add.w	r3, r7, #12
 800ff4c:	4619      	mov	r1, r3
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f001 f9d8 	bl	8011304 <buffer_get_int32>
 800ff54:	4603      	mov	r3, r0
 800ff56:	4a46      	ldr	r2, [pc, #280]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ff58:	6353      	str	r3, [r2, #52]	; 0x34
			hahaha = 13;
 800ff5a:	230d      	movs	r3, #13
 800ff5c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 14)) {
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00a      	beq.n	800ff7e <bldc_interface_process_packet+0x606>
			values.tachometer_abs = buffer_get_int32(data, &ind);
 800ff68:	f107 030c 	add.w	r3, r7, #12
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f001 f9c8 	bl	8011304 <buffer_get_int32>
 800ff74:	4603      	mov	r3, r0
 800ff76:	4a3e      	ldr	r2, [pc, #248]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ff78:	6393      	str	r3, [r2, #56]	; 0x38
			hahaha = 14;
 800ff7a:	230e      	movs	r3, #14
 800ff7c:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 15)) {
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <bldc_interface_process_packet+0x628>
			values.fault_code = (mc_fault_code)data[ind++];
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	60fa      	str	r2, [r7, #12]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4413      	add	r3, r2
 800ff94:	781a      	ldrb	r2, [r3, #0]
 800ff96:	4b36      	ldr	r3, [pc, #216]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ff98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			hahaha = 15;
 800ff9c:	230f      	movs	r3, #15
 800ff9e:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 16)) {
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00e      	beq.n	800ffc8 <bldc_interface_process_packet+0x650>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 800ffaa:	f107 030c 	add.w	r3, r7, #12
 800ffae:	4619      	mov	r1, r3
 800ffb0:	ed9f 0a32 	vldr	s0, [pc, #200]	; 801007c <bldc_interface_process_packet+0x704>
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f001 fa20 	bl	80113fa <buffer_get_float32>
 800ffba:	eef0 7a40 	vmov.f32	s15, s0
 800ffbe:	4b2c      	ldr	r3, [pc, #176]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ffc0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			hahaha = 16;
 800ffc4:	2310      	movs	r3, #16
 800ffc6:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 17)) {
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00b      	beq.n	800ffea <bldc_interface_process_packet+0x672>
			values.vesc_id = data[ind++];
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	1c5a      	adds	r2, r3, #1
 800ffd6:	60fa      	str	r2, [r7, #12]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4413      	add	r3, r2
 800ffde:	781a      	ldrb	r2, [r3, #0]
 800ffe0:	4b23      	ldr	r3, [pc, #140]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 800ffe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
			hahaha = 17;
 800ffe6:	2311      	movs	r3, #17
 800ffe8:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 18)) {
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d028      	beq.n	8010046 <bldc_interface_process_packet+0x6ce>
			values.temp_mos1 = buffer_get_float16(data, 1e1, &ind);
 800fff4:	f107 030c 	add.w	r3, r7, #12
 800fff8:	4619      	mov	r1, r3
 800fffa:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f001 f9e0 	bl	80113c4 <buffer_get_float16>
 8010004:	eef0 7a40 	vmov.f32	s15, s0
 8010008:	4b19      	ldr	r3, [pc, #100]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 801000a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			values.temp_mos2 = buffer_get_float16(data, 1e1, &ind);
 801000e:	f107 030c 	add.w	r3, r7, #12
 8010012:	4619      	mov	r1, r3
 8010014:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f001 f9d3 	bl	80113c4 <buffer_get_float16>
 801001e:	eef0 7a40 	vmov.f32	s15, s0
 8010022:	4b13      	ldr	r3, [pc, #76]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 8010024:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			values.temp_mos3 = buffer_get_float16(data, 1e1, &ind);
 8010028:	f107 030c 	add.w	r3, r7, #12
 801002c:	4619      	mov	r1, r3
 801002e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f001 f9c6 	bl	80113c4 <buffer_get_float16>
 8010038:	eef0 7a40 	vmov.f32	s15, s0
 801003c:	4b0c      	ldr	r3, [pc, #48]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 801003e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			hahaha = 18;
 8010042:	2312      	movs	r3, #18
 8010044:	61fb      	str	r3, [r7, #28]
		}
		if (mask & ((uint32_t)1 << 19)) {
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801004c:	2b00      	cmp	r3, #0
 801004e:	d019      	beq.n	8010084 <bldc_interface_process_packet+0x70c>
			values.vd = buffer_get_float32(data, 1e3, &ind);
 8010050:	f107 030c 	add.w	r3, r7, #12
 8010054:	4619      	mov	r1, r3
 8010056:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8010080 <bldc_interface_process_packet+0x708>
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f001 f9cd 	bl	80113fa <buffer_get_float32>
 8010060:	eef0 7a40 	vmov.f32	s15, s0
 8010064:	4b02      	ldr	r3, [pc, #8]	; (8010070 <bldc_interface_process_packet+0x6f8>)
 8010066:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			hahaha = 19;
 801006a:	2313      	movs	r3, #19
 801006c:	61fb      	str	r3, [r7, #28]
 801006e:	e009      	b.n	8010084 <bldc_interface_process_packet+0x70c>
 8010070:	20000888 	.word	0x20000888
 8010074:	42c80000 	.word	0x42c80000
 8010078:	461c4000 	.word	0x461c4000
 801007c:	49742400 	.word	0x49742400
 8010080:	447a0000 	.word	0x447a0000
		}
		if (mask & ((uint32_t)1 << 20)) {
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00e      	beq.n	80100ac <bldc_interface_process_packet+0x734>
			values.vq = buffer_get_float32(data, 1e3, &ind);
 801008e:	f107 030c 	add.w	r3, r7, #12
 8010092:	4619      	mov	r1, r3
 8010094:	ed1f 0a06 	vldr	s0, [pc, #-24]	; 8010080 <bldc_interface_process_packet+0x708>
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f001 f9ae 	bl	80113fa <buffer_get_float32>
 801009e:	eef0 7a40 	vmov.f32	s15, s0
 80100a2:	4b26      	ldr	r3, [pc, #152]	; (801013c <bldc_interface_process_packet+0x7c4>)
 80100a4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			hahaha = 20;
 80100a8:	2314      	movs	r3, #20
 80100aa:	61fb      	str	r3, [r7, #28]
		}

		rx_value_buf = values;
 80100ac:	4a24      	ldr	r2, [pc, #144]	; (8010140 <bldc_interface_process_packet+0x7c8>)
 80100ae:	4b23      	ldr	r3, [pc, #140]	; (801013c <bldc_interface_process_packet+0x7c4>)
 80100b0:	4610      	mov	r0, r2
 80100b2:	4619      	mov	r1, r3
 80100b4:	2360      	movs	r3, #96	; 0x60
 80100b6:	461a      	mov	r2, r3
 80100b8:	f00c fc4a 	bl	801c950 <memcpy>

		if(rx_value_selective_print){
 80100bc:	4b21      	ldr	r3, [pc, #132]	; (8010144 <bldc_interface_process_packet+0x7cc>)
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d008      	beq.n	80100d6 <bldc_interface_process_packet+0x75e>
			if (rx_value_selective_func) {
 80100c4:	4b20      	ldr	r3, [pc, #128]	; (8010148 <bldc_interface_process_packet+0x7d0>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d004      	beq.n	80100d6 <bldc_interface_process_packet+0x75e>
				rx_value_selective_func(hahaha, &values);
 80100cc:	4b1e      	ldr	r3, [pc, #120]	; (8010148 <bldc_interface_process_packet+0x7d0>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	491a      	ldr	r1, [pc, #104]	; (801013c <bldc_interface_process_packet+0x7c4>)
 80100d2:	69f8      	ldr	r0, [r7, #28]
 80100d4:	4798      	blx	r3
			}
		}

		rx_value_complete = true;
 80100d6:	4b1d      	ldr	r3, [pc, #116]	; (801014c <bldc_interface_process_packet+0x7d4>)
 80100d8:	2201      	movs	r2, #1
 80100da:	701a      	strb	r2, [r3, #0]
		break;
 80100dc:	f001 b8a3 	b.w	8011226 <bldc_interface_process_packet+0x18ae>

	case COMM_PRINT:
		if (rx_printf_func) {
 80100e0:	4b1b      	ldr	r3, [pc, #108]	; (8010150 <bldc_interface_process_packet+0x7d8>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	f001 808b 	beq.w	8011200 <bldc_interface_process_packet+0x1888>
			data[len] = '\0';
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	4413      	add	r3, r2
 80100f0:	2200      	movs	r2, #0
 80100f2:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 80100f4:	4b16      	ldr	r3, [pc, #88]	; (8010150 <bldc_interface_process_packet+0x7d8>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	4798      	blx	r3
		}
		break;
 80100fc:	f001 b880 	b.w	8011200 <bldc_interface_process_packet+0x1888>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8010104:	f107 030c 	add.w	r3, r7, #12
 8010108:	4619      	mov	r1, r3
 801010a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8010154 <bldc_interface_process_packet+0x7dc>
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f001 f973 	bl	80113fa <buffer_get_float32>
 8010114:	eef0 7a40 	vmov.f32	s15, s0
 8010118:	4b0f      	ldr	r3, [pc, #60]	; (8010158 <bldc_interface_process_packet+0x7e0>)
 801011a:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 801011e:	4b0f      	ldr	r3, [pc, #60]	; (801015c <bldc_interface_process_packet+0x7e4>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	f001 806e 	beq.w	8011204 <bldc_interface_process_packet+0x188c>
			rx_rotor_pos_func(rotor_pos);
 8010128:	4b0c      	ldr	r3, [pc, #48]	; (801015c <bldc_interface_process_packet+0x7e4>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a0a      	ldr	r2, [pc, #40]	; (8010158 <bldc_interface_process_packet+0x7e0>)
 801012e:	edd2 7a00 	vldr	s15, [r2]
 8010132:	eeb0 0a67 	vmov.f32	s0, s15
 8010136:	4798      	blx	r3
		}
		break;
 8010138:	f001 b864 	b.w	8011204 <bldc_interface_process_packet+0x188c>
 801013c:	20000888 	.word	0x20000888
 8010140:	20007848 	.word	0x20007848
 8010144:	2000a6ac 	.word	0x2000a6ac
 8010148:	20000b78 	.word	0x20000b78
 801014c:	2000a364 	.word	0x2000a364
 8010150:	20000b7c 	.word	0x20000b7c
 8010154:	47c35000 	.word	0x47c35000
 8010158:	200008f0 	.word	0x200008f0
 801015c:	20000b80 	.word	0x20000b80
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	60fb      	str	r3, [r7, #12]

		mcconf.signature = buffer_get_uint32(data, &ind);
 8010164:	f107 030c 	add.w	r3, r7, #12
 8010168:	4619      	mov	r1, r3
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f001 f8fa 	bl	8011364 <buffer_get_uint32>
 8010170:	4603      	mov	r3, r0
 8010172:	4ac5      	ldr	r2, [pc, #788]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010174:	6013      	str	r3, [r2, #0]

		mcconf.pwm_mode = data[ind++];
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	60fa      	str	r2, [r7, #12]
 801017c:	461a      	mov	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	4413      	add	r3, r2
 8010182:	781a      	ldrb	r2, [r3, #0]
 8010184:	4bc0      	ldr	r3, [pc, #768]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010186:	711a      	strb	r2, [r3, #4]
		mcconf.comm_mode = data[ind++];
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	60fa      	str	r2, [r7, #12]
 801018e:	461a      	mov	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4413      	add	r3, r2
 8010194:	781a      	ldrb	r2, [r3, #0]
 8010196:	4bbc      	ldr	r3, [pc, #752]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010198:	715a      	strb	r2, [r3, #5]
		mcconf.motor_type = data[ind++];
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	1c5a      	adds	r2, r3, #1
 801019e:	60fa      	str	r2, [r7, #12]
 80101a0:	461a      	mov	r2, r3
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4413      	add	r3, r2
 80101a6:	781a      	ldrb	r2, [r3, #0]
 80101a8:	4bb7      	ldr	r3, [pc, #732]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80101aa:	719a      	strb	r2, [r3, #6]
		mcconf.sensor_mode = data[ind++];
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	1c5a      	adds	r2, r3, #1
 80101b0:	60fa      	str	r2, [r7, #12]
 80101b2:	461a      	mov	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	4413      	add	r3, r2
 80101b8:	781a      	ldrb	r2, [r3, #0]
 80101ba:	4bb3      	ldr	r3, [pc, #716]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80101bc:	71da      	strb	r2, [r3, #7]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 80101be:	f107 030c 	add.w	r3, r7, #12
 80101c2:	4619      	mov	r1, r3
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f001 f933 	bl	8011430 <buffer_get_float32_auto>
 80101ca:	eef0 7a40 	vmov.f32	s15, s0
 80101ce:	4bae      	ldr	r3, [pc, #696]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80101d0:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 80101d4:	f107 030c 	add.w	r3, r7, #12
 80101d8:	4619      	mov	r1, r3
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f001 f928 	bl	8011430 <buffer_get_float32_auto>
 80101e0:	eef0 7a40 	vmov.f32	s15, s0
 80101e4:	4ba8      	ldr	r3, [pc, #672]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80101e6:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 80101ea:	f107 030c 	add.w	r3, r7, #12
 80101ee:	4619      	mov	r1, r3
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f001 f91d 	bl	8011430 <buffer_get_float32_auto>
 80101f6:	eef0 7a40 	vmov.f32	s15, s0
 80101fa:	4ba3      	ldr	r3, [pc, #652]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80101fc:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8010200:	f107 030c 	add.w	r3, r7, #12
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f001 f912 	bl	8011430 <buffer_get_float32_auto>
 801020c:	eef0 7a40 	vmov.f32	s15, s0
 8010210:	4b9d      	ldr	r3, [pc, #628]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010212:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8010216:	f107 030c 	add.w	r3, r7, #12
 801021a:	4619      	mov	r1, r3
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f001 f907 	bl	8011430 <buffer_get_float32_auto>
 8010222:	eef0 7a40 	vmov.f32	s15, s0
 8010226:	4b98      	ldr	r3, [pc, #608]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010228:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 801022c:	f107 030c 	add.w	r3, r7, #12
 8010230:	4619      	mov	r1, r3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f001 f8fc 	bl	8011430 <buffer_get_float32_auto>
 8010238:	eef0 7a40 	vmov.f32	s15, s0
 801023c:	4b92      	ldr	r3, [pc, #584]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801023e:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8010242:	f107 030c 	add.w	r3, r7, #12
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f001 f8f1 	bl	8011430 <buffer_get_float32_auto>
 801024e:	eef0 7a40 	vmov.f32	s15, s0
 8010252:	4b8d      	ldr	r3, [pc, #564]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010254:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8010258:	f107 030c 	add.w	r3, r7, #12
 801025c:	4619      	mov	r1, r3
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f001 f8e6 	bl	8011430 <buffer_get_float32_auto>
 8010264:	eef0 7a40 	vmov.f32	s15, s0
 8010268:	4b87      	ldr	r3, [pc, #540]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801026a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 801026e:	f107 030c 	add.w	r3, r7, #12
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f001 f8db 	bl	8011430 <buffer_get_float32_auto>
 801027a:	eef0 7a40 	vmov.f32	s15, s0
 801027e:	4b82      	ldr	r3, [pc, #520]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010280:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8010284:	f107 030c 	add.w	r3, r7, #12
 8010288:	4619      	mov	r1, r3
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f001 f8d0 	bl	8011430 <buffer_get_float32_auto>
 8010290:	eef0 7a40 	vmov.f32	s15, s0
 8010294:	4b7c      	ldr	r3, [pc, #496]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010296:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 801029a:	f107 030c 	add.w	r3, r7, #12
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f001 f8c5 	bl	8011430 <buffer_get_float32_auto>
 80102a6:	eef0 7a40 	vmov.f32	s15, s0
 80102aa:	4b77      	ldr	r3, [pc, #476]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80102ac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 80102b0:	f107 030c 	add.w	r3, r7, #12
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f001 f8ba 	bl	8011430 <buffer_get_float32_auto>
 80102bc:	eef0 7a40 	vmov.f32	s15, s0
 80102c0:	4b71      	ldr	r3, [pc, #452]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80102c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 80102c6:	f107 030c 	add.w	r3, r7, #12
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f001 f8af 	bl	8011430 <buffer_get_float32_auto>
 80102d2:	eef0 7a40 	vmov.f32	s15, s0
 80102d6:	4b6c      	ldr	r3, [pc, #432]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80102d8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 80102dc:	f107 030c 	add.w	r3, r7, #12
 80102e0:	4619      	mov	r1, r3
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f001 f8a4 	bl	8011430 <buffer_get_float32_auto>
 80102e8:	eef0 7a40 	vmov.f32	s15, s0
 80102ec:	4b66      	ldr	r3, [pc, #408]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80102ee:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mcconf.l_slow_abs_current = data[ind++];
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	1c5a      	adds	r2, r3, #1
 80102f6:	60fa      	str	r2, [r7, #12]
 80102f8:	461a      	mov	r2, r3
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4413      	add	r3, r2
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	2b00      	cmp	r3, #0
 8010302:	bf14      	ite	ne
 8010304:	2301      	movne	r3, #1
 8010306:	2300      	moveq	r3, #0
 8010308:	b2da      	uxtb	r2, r3
 801030a:	4b5f      	ldr	r3, [pc, #380]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801030c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8010310:	f107 030c 	add.w	r3, r7, #12
 8010314:	4619      	mov	r1, r3
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f001 f88a 	bl	8011430 <buffer_get_float32_auto>
 801031c:	eef0 7a40 	vmov.f32	s15, s0
 8010320:	4b59      	ldr	r3, [pc, #356]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010322:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8010326:	f107 030c 	add.w	r3, r7, #12
 801032a:	4619      	mov	r1, r3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f001 f87f 	bl	8011430 <buffer_get_float32_auto>
 8010332:	eef0 7a40 	vmov.f32	s15, s0
 8010336:	4b54      	ldr	r3, [pc, #336]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010338:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 801033c:	f107 030c 	add.w	r3, r7, #12
 8010340:	4619      	mov	r1, r3
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f001 f874 	bl	8011430 <buffer_get_float32_auto>
 8010348:	eef0 7a40 	vmov.f32	s15, s0
 801034c:	4b4e      	ldr	r3, [pc, #312]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801034e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8010352:	f107 030c 	add.w	r3, r7, #12
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f001 f869 	bl	8011430 <buffer_get_float32_auto>
 801035e:	eef0 7a40 	vmov.f32	s15, s0
 8010362:	4b49      	ldr	r3, [pc, #292]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010364:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8010368:	f107 030c 	add.w	r3, r7, #12
 801036c:	4619      	mov	r1, r3
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f001 f85e 	bl	8011430 <buffer_get_float32_auto>
 8010374:	eef0 7a40 	vmov.f32	s15, s0
 8010378:	4b43      	ldr	r3, [pc, #268]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801037a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 801037e:	f107 030c 	add.w	r3, r7, #12
 8010382:	4619      	mov	r1, r3
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f001 f853 	bl	8011430 <buffer_get_float32_auto>
 801038a:	eef0 7a40 	vmov.f32	s15, s0
 801038e:	4b3e      	ldr	r3, [pc, #248]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010390:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8010394:	f107 030c 	add.w	r3, r7, #12
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f001 f848 	bl	8011430 <buffer_get_float32_auto>
 80103a0:	eef0 7a40 	vmov.f32	s15, s0
 80103a4:	4b38      	ldr	r3, [pc, #224]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103a6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 80103aa:	f107 030c 	add.w	r3, r7, #12
 80103ae:	4619      	mov	r1, r3
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f001 f83d 	bl	8011430 <buffer_get_float32_auto>
 80103b6:	eef0 7a40 	vmov.f32	s15, s0
 80103ba:	4b33      	ldr	r3, [pc, #204]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103bc:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 80103c0:	f107 030c 	add.w	r3, r7, #12
 80103c4:	4619      	mov	r1, r3
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f001 f832 	bl	8011430 <buffer_get_float32_auto>
 80103cc:	eef0 7a40 	vmov.f32	s15, s0
 80103d0:	4b2d      	ldr	r3, [pc, #180]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103d2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		mcconf.lo_current_max = mcconf.l_current_max;
 80103d6:	4b2c      	ldr	r3, [pc, #176]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	4a2b      	ldr	r2, [pc, #172]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103dc:	6693      	str	r3, [r2, #104]	; 0x68
		mcconf.lo_current_min = mcconf.l_current_min;
 80103de:	4b2a      	ldr	r3, [pc, #168]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	4a29      	ldr	r2, [pc, #164]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103e4:	66d3      	str	r3, [r2, #108]	; 0x6c
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 80103e6:	4b28      	ldr	r3, [pc, #160]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103e8:	691b      	ldr	r3, [r3, #16]
 80103ea:	4a27      	ldr	r2, [pc, #156]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103ec:	6713      	str	r3, [r2, #112]	; 0x70
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 80103ee:	4b26      	ldr	r3, [pc, #152]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	4a25      	ldr	r2, [pc, #148]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103f4:	6753      	str	r3, [r2, #116]	; 0x74
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 80103f6:	4b24      	ldr	r3, [pc, #144]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	4a23      	ldr	r2, [pc, #140]	; (8010488 <bldc_interface_process_packet+0xb10>)
 80103fc:	6793      	str	r3, [r2, #120]	; 0x78
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 80103fe:	4b22      	ldr	r3, [pc, #136]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010400:	68db      	ldr	r3, [r3, #12]
 8010402:	4a21      	ldr	r2, [pc, #132]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010404:	67d3      	str	r3, [r2, #124]	; 0x7c

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8010406:	f107 030c 	add.w	r3, r7, #12
 801040a:	4619      	mov	r1, r3
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f001 f80f 	bl	8011430 <buffer_get_float32_auto>
 8010412:	eef0 7a40 	vmov.f32	s15, s0
 8010416:	4b1c      	ldr	r3, [pc, #112]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010418:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 801041c:	f107 030c 	add.w	r3, r7, #12
 8010420:	4619      	mov	r1, r3
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f001 f804 	bl	8011430 <buffer_get_float32_auto>
 8010428:	eef0 7a40 	vmov.f32	s15, s0
 801042c:	4b16      	ldr	r3, [pc, #88]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801042e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8010432:	f107 030c 	add.w	r3, r7, #12
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fff9 	bl	8011430 <buffer_get_float32_auto>
 801043e:	eef0 7a40 	vmov.f32	s15, s0
 8010442:	4b11      	ldr	r3, [pc, #68]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010444:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	4619      	mov	r1, r3
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 ffee 	bl	8011430 <buffer_get_float32_auto>
 8010454:	eef0 7a40 	vmov.f32	s15, s0
 8010458:	4b0b      	ldr	r3, [pc, #44]	; (8010488 <bldc_interface_process_packet+0xb10>)
 801045a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 801045e:	f107 030c 	add.w	r3, r7, #12
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 ffe3 	bl	8011430 <buffer_get_float32_auto>
 801046a:	eef0 7a40 	vmov.f32	s15, s0
 801046e:	4b06      	ldr	r3, [pc, #24]	; (8010488 <bldc_interface_process_packet+0xb10>)
 8010470:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8010474:	f107 030c 	add.w	r3, r7, #12
 8010478:	4619      	mov	r1, r3
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 ffd8 	bl	8011430 <buffer_get_float32_auto>
 8010480:	eef0 7a40 	vmov.f32	s15, s0
 8010484:	e002      	b.n	801048c <bldc_interface_process_packet+0xb14>
 8010486:	bf00      	nop
 8010488:	200008f4 	.word	0x200008f4
 801048c:	4bc7      	ldr	r3, [pc, #796]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801048e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8010492:	f107 030c 	add.w	r3, r7, #12
 8010496:	4619      	mov	r1, r3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 ffc9 	bl	8011430 <buffer_get_float32_auto>
 801049e:	eef0 7a40 	vmov.f32	s15, s0
 80104a2:	4bc2      	ldr	r3, [pc, #776]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80104a4:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98

		memcpy(mcconf.hall_table, data + ind, 8);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	461a      	mov	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	441a      	add	r2, r3
 80104b0:	4bbe      	ldr	r3, [pc, #760]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80104b2:	339c      	adds	r3, #156	; 0x9c
 80104b4:	6810      	ldr	r0, [r2, #0]
 80104b6:	6851      	ldr	r1, [r2, #4]
 80104b8:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3308      	adds	r3, #8
 80104be:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 80104c0:	f107 030c 	add.w	r3, r7, #12
 80104c4:	4619      	mov	r1, r3
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 ffb2 	bl	8011430 <buffer_get_float32_auto>
 80104cc:	eef0 7a40 	vmov.f32	s15, s0
 80104d0:	4bb6      	ldr	r3, [pc, #728]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80104d2:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 80104d6:	f107 030c 	add.w	r3, r7, #12
 80104da:	4619      	mov	r1, r3
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 ffa7 	bl	8011430 <buffer_get_float32_auto>
 80104e2:	eef0 7a40 	vmov.f32	s15, s0
 80104e6:	4bb1      	ldr	r3, [pc, #708]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80104e8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 80104ec:	f107 030c 	add.w	r3, r7, #12
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 ff9c 	bl	8011430 <buffer_get_float32_auto>
 80104f8:	eef0 7a40 	vmov.f32	s15, s0
 80104fc:	4bab      	ldr	r3, [pc, #684]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80104fe:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 8010502:	f107 030c 	add.w	r3, r7, #12
 8010506:	4619      	mov	r1, r3
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 ff91 	bl	8011430 <buffer_get_float32_auto>
 801050e:	eef0 7a40 	vmov.f32	s15, s0
 8010512:	4ba6      	ldr	r3, [pc, #664]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010514:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8010518:	f107 030c 	add.w	r3, r7, #12
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 ff86 	bl	8011430 <buffer_get_float32_auto>
 8010524:	eef0 7a40 	vmov.f32	s15, s0
 8010528:	4ba0      	ldr	r3, [pc, #640]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801052a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		mcconf.foc_encoder_inverted = data[ind++];
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	1c5a      	adds	r2, r3, #1
 8010532:	60fa      	str	r2, [r7, #12]
 8010534:	461a      	mov	r2, r3
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	4413      	add	r3, r2
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	bf14      	ite	ne
 8010540:	2301      	movne	r3, #1
 8010542:	2300      	moveq	r3, #0
 8010544:	b2da      	uxtb	r2, r3
 8010546:	4b99      	ldr	r3, [pc, #612]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010548:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 801054c:	f107 030c 	add.w	r3, r7, #12
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 ff6c 	bl	8011430 <buffer_get_float32_auto>
 8010558:	eef0 7a40 	vmov.f32	s15, s0
 801055c:	4b93      	ldr	r3, [pc, #588]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801055e:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 8010562:	f107 030c 	add.w	r3, r7, #12
 8010566:	4619      	mov	r1, r3
 8010568:	6878      	ldr	r0, [r7, #4]
 801056a:	f000 ff61 	bl	8011430 <buffer_get_float32_auto>
 801056e:	eef0 7a40 	vmov.f32	s15, s0
 8010572:	4b8e      	ldr	r3, [pc, #568]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010574:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		mcconf.foc_sensor_mode = data[ind++];
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	60fa      	str	r2, [r7, #12]
 801057e:	461a      	mov	r2, r3
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	4413      	add	r3, r2
 8010584:	781a      	ldrb	r2, [r3, #0]
 8010586:	4b89      	ldr	r3, [pc, #548]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010588:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 801058c:	f107 030c 	add.w	r3, r7, #12
 8010590:	4619      	mov	r1, r3
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f000 ff4c 	bl	8011430 <buffer_get_float32_auto>
 8010598:	eef0 7a40 	vmov.f32	s15, s0
 801059c:	4b83      	ldr	r3, [pc, #524]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801059e:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	4619      	mov	r1, r3
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 ff41 	bl	8011430 <buffer_get_float32_auto>
 80105ae:	eef0 7a40 	vmov.f32	s15, s0
 80105b2:	4b7e      	ldr	r3, [pc, #504]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80105b4:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80105b8:	f107 030c 	add.w	r3, r7, #12
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 ff36 	bl	8011430 <buffer_get_float32_auto>
 80105c4:	eef0 7a40 	vmov.f32	s15, s0
 80105c8:	4b78      	ldr	r3, [pc, #480]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80105ca:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80105ce:	f107 030c 	add.w	r3, r7, #12
 80105d2:	4619      	mov	r1, r3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 ff2b 	bl	8011430 <buffer_get_float32_auto>
 80105da:	eef0 7a40 	vmov.f32	s15, s0
 80105de:	4b73      	ldr	r3, [pc, #460]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80105e0:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 80105e4:	f107 030c 	add.w	r3, r7, #12
 80105e8:	4619      	mov	r1, r3
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 ff20 	bl	8011430 <buffer_get_float32_auto>
 80105f0:	eef0 7a40 	vmov.f32	s15, s0
 80105f4:	4b6d      	ldr	r3, [pc, #436]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80105f6:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 80105fa:	f107 030c 	add.w	r3, r7, #12
 80105fe:	4619      	mov	r1, r3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 ff15 	bl	8011430 <buffer_get_float32_auto>
 8010606:	eef0 7a40 	vmov.f32	s15, s0
 801060a:	4b68      	ldr	r3, [pc, #416]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801060c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 8010610:	f107 030c 	add.w	r3, r7, #12
 8010614:	4619      	mov	r1, r3
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 ff0a 	bl	8011430 <buffer_get_float32_auto>
 801061c:	eef0 7a40 	vmov.f32	s15, s0
 8010620:	4b62      	ldr	r3, [pc, #392]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010622:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8010626:	f107 030c 	add.w	r3, r7, #12
 801062a:	4619      	mov	r1, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 feff 	bl	8011430 <buffer_get_float32_auto>
 8010632:	eef0 7a40 	vmov.f32	s15, s0
 8010636:	4b5d      	ldr	r3, [pc, #372]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010638:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 801063c:	f107 030c 	add.w	r3, r7, #12
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f000 fef4 	bl	8011430 <buffer_get_float32_auto>
 8010648:	eef0 7a40 	vmov.f32	s15, s0
 801064c:	4b57      	ldr	r3, [pc, #348]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801064e:	edc3 7a39 	vstr	s15, [r3, #228]	; 0xe4
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 8010652:	f107 030c 	add.w	r3, r7, #12
 8010656:	4619      	mov	r1, r3
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f000 fee9 	bl	8011430 <buffer_get_float32_auto>
 801065e:	eef0 7a40 	vmov.f32	s15, s0
 8010662:	4b52      	ldr	r3, [pc, #328]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010664:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8010668:	f107 030c 	add.w	r3, r7, #12
 801066c:	4619      	mov	r1, r3
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 fede 	bl	8011430 <buffer_get_float32_auto>
 8010674:	eef0 7a40 	vmov.f32	s15, s0
 8010678:	4b4c      	ldr	r3, [pc, #304]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801067a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 801067e:	f107 030c 	add.w	r3, r7, #12
 8010682:	4619      	mov	r1, r3
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f000 fed3 	bl	8011430 <buffer_get_float32_auto>
 801068a:	eef0 7a40 	vmov.f32	s15, s0
 801068e:	4b47      	ldr	r3, [pc, #284]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010690:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 8010694:	f107 030c 	add.w	r3, r7, #12
 8010698:	4619      	mov	r1, r3
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f000 fec8 	bl	8011430 <buffer_get_float32_auto>
 80106a0:	eef0 7a40 	vmov.f32	s15, s0
 80106a4:	4b41      	ldr	r3, [pc, #260]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80106a6:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80106aa:	f107 030c 	add.w	r3, r7, #12
 80106ae:	4619      	mov	r1, r3
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 febd 	bl	8011430 <buffer_get_float32_auto>
 80106b6:	eef0 7a40 	vmov.f32	s15, s0
 80106ba:	4b3c      	ldr	r3, [pc, #240]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80106bc:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	461a      	mov	r2, r3
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	441a      	add	r2, r3
 80106c8:	4b38      	ldr	r3, [pc, #224]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80106ca:	33fd      	adds	r3, #253	; 0xfd
 80106cc:	6811      	ldr	r1, [r2, #0]
 80106ce:	6852      	ldr	r2, [r2, #4]
 80106d0:	6019      	str	r1, [r3, #0]
 80106d2:	605a      	str	r2, [r3, #4]
		ind += 8;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	3308      	adds	r3, #8
 80106d8:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 80106da:	f107 030c 	add.w	r3, r7, #12
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 fea5 	bl	8011430 <buffer_get_float32_auto>
 80106e6:	eef0 7a40 	vmov.f32	s15, s0
 80106ea:	4b30      	ldr	r3, [pc, #192]	; (80107ac <bldc_interface_process_packet+0xe34>)
 80106ec:	edc3 7a42 	vstr	s15, [r3, #264]	; 0x108
		mcconf.foc_sample_v0_v7 = data[ind++];
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	1c5a      	adds	r2, r3, #1
 80106f4:	60fa      	str	r2, [r7, #12]
 80106f6:	461a      	mov	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4413      	add	r3, r2
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	bf14      	ite	ne
 8010702:	2301      	movne	r3, #1
 8010704:	2300      	moveq	r3, #0
 8010706:	b2da      	uxtb	r2, r3
 8010708:	4b28      	ldr	r3, [pc, #160]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801070a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
		mcconf.foc_sample_high_current = data[ind++];
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	1c5a      	adds	r2, r3, #1
 8010712:	60fa      	str	r2, [r7, #12]
 8010714:	461a      	mov	r2, r3
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	4413      	add	r3, r2
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	bf14      	ite	ne
 8010720:	2301      	movne	r3, #1
 8010722:	2300      	moveq	r3, #0
 8010724:	b2da      	uxtb	r2, r3
 8010726:	4b21      	ldr	r3, [pc, #132]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010728:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 801072c:	f107 030c 	add.w	r3, r7, #12
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 fe7c 	bl	8011430 <buffer_get_float32_auto>
 8010738:	eef0 7a40 	vmov.f32	s15, s0
 801073c:	4b1b      	ldr	r3, [pc, #108]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801073e:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
		mcconf.foc_temp_comp = data[ind++];
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	1c5a      	adds	r2, r3, #1
 8010746:	60fa      	str	r2, [r7, #12]
 8010748:	461a      	mov	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4413      	add	r3, r2
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	2b00      	cmp	r3, #0
 8010752:	bf14      	ite	ne
 8010754:	2301      	movne	r3, #1
 8010756:	2300      	moveq	r3, #0
 8010758:	b2da      	uxtb	r2, r3
 801075a:	4b14      	ldr	r3, [pc, #80]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801075c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 8010760:	f107 030c 	add.w	r3, r7, #12
 8010764:	4619      	mov	r1, r3
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 fe62 	bl	8011430 <buffer_get_float32_auto>
 801076c:	eef0 7a40 	vmov.f32	s15, s0
 8010770:	4b0e      	ldr	r3, [pc, #56]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010772:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8010776:	f107 030c 	add.w	r3, r7, #12
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 fe57 	bl	8011430 <buffer_get_float32_auto>
 8010782:	eef0 7a40 	vmov.f32	s15, s0
 8010786:	4b09      	ldr	r3, [pc, #36]	; (80107ac <bldc_interface_process_packet+0xe34>)
 8010788:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 801078c:	f107 030c 	add.w	r3, r7, #12
 8010790:	4619      	mov	r1, r3
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 fe4c 	bl	8011430 <buffer_get_float32_auto>
 8010798:	eef0 7a40 	vmov.f32	s15, s0
 801079c:	4b03      	ldr	r3, [pc, #12]	; (80107ac <bldc_interface_process_packet+0xe34>)
 801079e:	edc3 7a48 	vstr	s15, [r3, #288]	; 0x120
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80107a2:	f107 030c 	add.w	r3, r7, #12
 80107a6:	4619      	mov	r1, r3
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	e001      	b.n	80107b0 <bldc_interface_process_packet+0xe38>
 80107ac:	200008f4 	.word	0x200008f4
 80107b0:	f000 fe3e 	bl	8011430 <buffer_get_float32_auto>
 80107b4:	eef0 7a40 	vmov.f32	s15, s0
 80107b8:	4b96      	ldr	r3, [pc, #600]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80107ba:	edc3 7a49 	vstr	s15, [r3, #292]	; 0x124
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80107be:	f107 030c 	add.w	r3, r7, #12
 80107c2:	4619      	mov	r1, r3
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fe33 	bl	8011430 <buffer_get_float32_auto>
 80107ca:	eef0 7a40 	vmov.f32	s15, s0
 80107ce:	4b91      	ldr	r3, [pc, #580]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80107d0:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80107d4:	f107 030c 	add.w	r3, r7, #12
 80107d8:	4619      	mov	r1, r3
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 fe28 	bl	8011430 <buffer_get_float32_auto>
 80107e0:	eef0 7a40 	vmov.f32	s15, s0
 80107e4:	4b8b      	ldr	r3, [pc, #556]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80107e6:	edc3 7a4b 	vstr	s15, [r3, #300]	; 0x12c
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 80107ea:	f107 030c 	add.w	r3, r7, #12
 80107ee:	4619      	mov	r1, r3
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f000 fe1d 	bl	8011430 <buffer_get_float32_auto>
 80107f6:	eef0 7a40 	vmov.f32	s15, s0
 80107fa:	4b86      	ldr	r3, [pc, #536]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80107fc:	edc3 7a4c 	vstr	s15, [r3, #304]	; 0x130
		mcconf.s_pid_allow_braking = data[ind++];
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	1c5a      	adds	r2, r3, #1
 8010804:	60fa      	str	r2, [r7, #12]
 8010806:	461a      	mov	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4413      	add	r3, r2
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	2b00      	cmp	r3, #0
 8010810:	bf14      	ite	ne
 8010812:	2301      	movne	r3, #1
 8010814:	2300      	moveq	r3, #0
 8010816:	b2da      	uxtb	r2, r3
 8010818:	4b7e      	ldr	r3, [pc, #504]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 801081a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 801081e:	f107 030c 	add.w	r3, r7, #12
 8010822:	4619      	mov	r1, r3
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f000 fe03 	bl	8011430 <buffer_get_float32_auto>
 801082a:	eef0 7a40 	vmov.f32	s15, s0
 801082e:	4b79      	ldr	r3, [pc, #484]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010830:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8010834:	f107 030c 	add.w	r3, r7, #12
 8010838:	4619      	mov	r1, r3
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 fdf8 	bl	8011430 <buffer_get_float32_auto>
 8010840:	eef0 7a40 	vmov.f32	s15, s0
 8010844:	4b73      	ldr	r3, [pc, #460]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010846:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 801084a:	f107 030c 	add.w	r3, r7, #12
 801084e:	4619      	mov	r1, r3
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f000 fded 	bl	8011430 <buffer_get_float32_auto>
 8010856:	eef0 7a40 	vmov.f32	s15, s0
 801085a:	4b6e      	ldr	r3, [pc, #440]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 801085c:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 8010860:	f107 030c 	add.w	r3, r7, #12
 8010864:	4619      	mov	r1, r3
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 fde2 	bl	8011430 <buffer_get_float32_auto>
 801086c:	eef0 7a40 	vmov.f32	s15, s0
 8010870:	4b68      	ldr	r3, [pc, #416]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010872:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8010876:	f107 030c 	add.w	r3, r7, #12
 801087a:	4619      	mov	r1, r3
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fdd7 	bl	8011430 <buffer_get_float32_auto>
 8010882:	eef0 7a40 	vmov.f32	s15, s0
 8010886:	4b63      	ldr	r3, [pc, #396]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010888:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 801088c:	f107 030c 	add.w	r3, r7, #12
 8010890:	4619      	mov	r1, r3
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f000 fdcc 	bl	8011430 <buffer_get_float32_auto>
 8010898:	eef0 7a40 	vmov.f32	s15, s0
 801089c:	4b5d      	ldr	r3, [pc, #372]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 801089e:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80108a2:	f107 030c 	add.w	r3, r7, #12
 80108a6:	4619      	mov	r1, r3
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f000 fdc1 	bl	8011430 <buffer_get_float32_auto>
 80108ae:	eef0 7a40 	vmov.f32	s15, s0
 80108b2:	4b58      	ldr	r3, [pc, #352]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80108b4:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80108b8:	f107 030c 	add.w	r3, r7, #12
 80108bc:	4619      	mov	r1, r3
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 fdb6 	bl	8011430 <buffer_get_float32_auto>
 80108c4:	eef0 7a40 	vmov.f32	s15, s0
 80108c8:	4b52      	ldr	r3, [pc, #328]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80108ca:	edc3 7a55 	vstr	s15, [r3, #340]	; 0x154
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80108ce:	f107 030c 	add.w	r3, r7, #12
 80108d2:	4619      	mov	r1, r3
 80108d4:	6878      	ldr	r0, [r7, #4]
 80108d6:	f000 fdab 	bl	8011430 <buffer_get_float32_auto>
 80108da:	eef0 7a40 	vmov.f32	s15, s0
 80108de:	4b4d      	ldr	r3, [pc, #308]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80108e0:	edc3 7a56 	vstr	s15, [r3, #344]	; 0x158

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 80108e4:	f107 030c 	add.w	r3, r7, #12
 80108e8:	4619      	mov	r1, r3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 fd0a 	bl	8011304 <buffer_get_int32>
 80108f0:	4603      	mov	r3, r0
 80108f2:	4a48      	ldr	r2, [pc, #288]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80108f4:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 80108f8:	f107 030c 	add.w	r3, r7, #12
 80108fc:	4619      	mov	r1, r3
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f000 fd96 	bl	8011430 <buffer_get_float32_auto>
 8010904:	eef0 7a40 	vmov.f32	s15, s0
 8010908:	4b42      	ldr	r3, [pc, #264]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 801090a:	edc3 7a58 	vstr	s15, [r3, #352]	; 0x160
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 801090e:	f107 030c 	add.w	r3, r7, #12
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f000 fd8b 	bl	8011430 <buffer_get_float32_auto>
 801091a:	eef0 7a40 	vmov.f32	s15, s0
 801091e:	4b3d      	ldr	r3, [pc, #244]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010920:	edc3 7a59 	vstr	s15, [r3, #356]	; 0x164
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8010924:	f107 030c 	add.w	r3, r7, #12
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fd1a 	bl	8011364 <buffer_get_uint32>
 8010930:	4603      	mov	r3, r0
 8010932:	4a38      	ldr	r2, [pc, #224]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010934:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
		mcconf.m_sensor_port_mode = data[ind++];
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	1c5a      	adds	r2, r3, #1
 801093c:	60fa      	str	r2, [r7, #12]
 801093e:	461a      	mov	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4413      	add	r3, r2
 8010944:	781a      	ldrb	r2, [r3, #0]
 8010946:	4b33      	ldr	r3, [pc, #204]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010948:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
		mcconf.m_invert_direction = data[ind++];
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	1c5a      	adds	r2, r3, #1
 8010950:	60fa      	str	r2, [r7, #12]
 8010952:	461a      	mov	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	4413      	add	r3, r2
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	bf14      	ite	ne
 801095e:	2301      	movne	r3, #1
 8010960:	2300      	moveq	r3, #0
 8010962:	b2da      	uxtb	r2, r3
 8010964:	4b2b      	ldr	r3, [pc, #172]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010966:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
		mcconf.m_drv8301_oc_mode = data[ind++];
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	1c5a      	adds	r2, r3, #1
 801096e:	60fa      	str	r2, [r7, #12]
 8010970:	461a      	mov	r2, r3
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	4413      	add	r3, r2
 8010976:	781a      	ldrb	r2, [r3, #0]
 8010978:	4b26      	ldr	r3, [pc, #152]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 801097a:	f883 216e 	strb.w	r2, [r3, #366]	; 0x16e
		mcconf.m_drv8301_oc_adj = data[ind++];
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	1c5a      	adds	r2, r3, #1
 8010982:	60fa      	str	r2, [r7, #12]
 8010984:	461a      	mov	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	4413      	add	r3, r2
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	461a      	mov	r2, r3
 801098e:	4b21      	ldr	r3, [pc, #132]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010990:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 8010994:	f107 030c 	add.w	r3, r7, #12
 8010998:	4619      	mov	r1, r3
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f000 fd48 	bl	8011430 <buffer_get_float32_auto>
 80109a0:	eef0 7a40 	vmov.f32	s15, s0
 80109a4:	4b1b      	ldr	r3, [pc, #108]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80109a6:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80109aa:	f107 030c 	add.w	r3, r7, #12
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fd3d 	bl	8011430 <buffer_get_float32_auto>
 80109b6:	eef0 7a40 	vmov.f32	s15, s0
 80109ba:	4b16      	ldr	r3, [pc, #88]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80109bc:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80109c0:	f107 030c 	add.w	r3, r7, #12
 80109c4:	4619      	mov	r1, r3
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 fd32 	bl	8011430 <buffer_get_float32_auto>
 80109cc:	eef0 7a40 	vmov.f32	s15, s0
 80109d0:	4b10      	ldr	r3, [pc, #64]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80109d2:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80109d6:	f107 030c 	add.w	r3, r7, #12
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 fd27 	bl	8011430 <buffer_get_float32_auto>
 80109e2:	eef0 7a40 	vmov.f32	s15, s0
 80109e6:	4b0b      	ldr	r3, [pc, #44]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80109e8:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
		mcconf.m_out_aux_mode = data[ind++];
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	1c5a      	adds	r2, r3, #1
 80109f0:	60fa      	str	r2, [r7, #12]
 80109f2:	461a      	mov	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	4413      	add	r3, r2
 80109f8:	781a      	ldrb	r2, [r3, #0]
 80109fa:	4b06      	ldr	r3, [pc, #24]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 80109fc:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184

		if (rx_mcconf_func) {
 8010a00:	4b05      	ldr	r3, [pc, #20]	; (8010a18 <bldc_interface_process_packet+0x10a0>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f000 83ff 	beq.w	8011208 <bldc_interface_process_packet+0x1890>
			rx_mcconf_func(&mcconf);
 8010a0a:	4b03      	ldr	r3, [pc, #12]	; (8010a18 <bldc_interface_process_packet+0x10a0>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4801      	ldr	r0, [pc, #4]	; (8010a14 <bldc_interface_process_packet+0x109c>)
 8010a10:	4798      	blx	r3
		}
		break;
 8010a12:	e3f9      	b.n	8011208 <bldc_interface_process_packet+0x1890>
 8010a14:	200008f4 	.word	0x200008f4
 8010a18:	20000b84 	.word	0x20000b84

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	60fb      	str	r3, [r7, #12]
		appconf.signature = buffer_get_uint32(data, &ind);
 8010a20:	f107 030c 	add.w	r3, r7, #12
 8010a24:	4619      	mov	r1, r3
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fc9c 	bl	8011364 <buffer_get_uint32>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	4aba      	ldr	r2, [pc, #744]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a30:	6013      	str	r3, [r2, #0]
		appconf.controller_id = data[ind++];
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	1c5a      	adds	r2, r3, #1
 8010a36:	60fa      	str	r2, [r7, #12]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	781a      	ldrb	r2, [r3, #0]
 8010a40:	4bb5      	ldr	r3, [pc, #724]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a42:	711a      	strb	r2, [r3, #4]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8010a44:	f107 030c 	add.w	r3, r7, #12
 8010a48:	4619      	mov	r1, r3
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fc8a 	bl	8011364 <buffer_get_uint32>
 8010a50:	4603      	mov	r3, r0
 8010a52:	4ab1      	ldr	r2, [pc, #708]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a54:	6093      	str	r3, [r2, #8]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8010a56:	f107 030c 	add.w	r3, r7, #12
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f000 fce7 	bl	8011430 <buffer_get_float32_auto>
 8010a62:	eef0 7a40 	vmov.f32	s15, s0
 8010a66:	4bac      	ldr	r3, [pc, #688]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a68:	edc3 7a03 	vstr	s15, [r3, #12]
		appconf.send_can_status = data[ind++];
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	60fa      	str	r2, [r7, #12]
 8010a72:	461a      	mov	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4413      	add	r3, r2
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	bf14      	ite	ne
 8010a7e:	2301      	movne	r3, #1
 8010a80:	2300      	moveq	r3, #0
 8010a82:	b2da      	uxtb	r2, r3
 8010a84:	4ba4      	ldr	r3, [pc, #656]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a86:	741a      	strb	r2, [r3, #16]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8010a88:	f107 030c 	add.w	r3, r7, #12
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fc15 	bl	80112be <buffer_get_uint16>
 8010a94:	4603      	mov	r3, r0
 8010a96:	461a      	mov	r2, r3
 8010a98:	4b9f      	ldr	r3, [pc, #636]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010a9a:	615a      	str	r2, [r3, #20]
		appconf.can_baud_rate = data[ind++];
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	1c5a      	adds	r2, r3, #1
 8010aa0:	60fa      	str	r2, [r7, #12]
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4413      	add	r3, r2
 8010aa8:	781a      	ldrb	r2, [r3, #0]
 8010aaa:	4b9b      	ldr	r3, [pc, #620]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010aac:	761a      	strb	r2, [r3, #24]

		appconf.app_to_use = data[ind++];
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	1c5a      	adds	r2, r3, #1
 8010ab2:	60fa      	str	r2, [r7, #12]
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4413      	add	r3, r2
 8010aba:	781a      	ldrb	r2, [r3, #0]
 8010abc:	4b96      	ldr	r3, [pc, #600]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010abe:	765a      	strb	r2, [r3, #25]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	1c5a      	adds	r2, r3, #1
 8010ac4:	60fa      	str	r2, [r7, #12]
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	4413      	add	r3, r2
 8010acc:	781a      	ldrb	r2, [r3, #0]
 8010ace:	4b92      	ldr	r3, [pc, #584]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010ad0:	771a      	strb	r2, [r3, #28]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 8010ad2:	f107 030c 	add.w	r3, r7, #12
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 fca9 	bl	8011430 <buffer_get_float32_auto>
 8010ade:	eef0 7a40 	vmov.f32	s15, s0
 8010ae2:	4b8d      	ldr	r3, [pc, #564]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010ae4:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 8010ae8:	f107 030c 	add.w	r3, r7, #12
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 fc9e 	bl	8011430 <buffer_get_float32_auto>
 8010af4:	eef0 7a40 	vmov.f32	s15, s0
 8010af8:	4b87      	ldr	r3, [pc, #540]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010afa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 8010afe:	f107 030c 	add.w	r3, r7, #12
 8010b02:	4619      	mov	r1, r3
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f000 fc93 	bl	8011430 <buffer_get_float32_auto>
 8010b0a:	eef0 7a40 	vmov.f32	s15, s0
 8010b0e:	4b82      	ldr	r3, [pc, #520]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b10:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8010b14:	f107 030c 	add.w	r3, r7, #12
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 fc88 	bl	8011430 <buffer_get_float32_auto>
 8010b20:	eef0 7a40 	vmov.f32	s15, s0
 8010b24:	4b7c      	ldr	r3, [pc, #496]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b26:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8010b2a:	f107 030c 	add.w	r3, r7, #12
 8010b2e:	4619      	mov	r1, r3
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f000 fc7d 	bl	8011430 <buffer_get_float32_auto>
 8010b36:	eef0 7a40 	vmov.f32	s15, s0
 8010b3a:	4b77      	ldr	r3, [pc, #476]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b3c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		appconf.app_ppm_conf.median_filter = data[ind++];
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	1c5a      	adds	r2, r3, #1
 8010b44:	60fa      	str	r2, [r7, #12]
 8010b46:	461a      	mov	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	4413      	add	r3, r2
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	bf14      	ite	ne
 8010b52:	2301      	movne	r3, #1
 8010b54:	2300      	moveq	r3, #0
 8010b56:	b2da      	uxtb	r2, r3
 8010b58:	4b6f      	ldr	r3, [pc, #444]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		appconf.app_ppm_conf.safe_start = data[ind++];
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	1c5a      	adds	r2, r3, #1
 8010b62:	60fa      	str	r2, [r7, #12]
 8010b64:	461a      	mov	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4413      	add	r3, r2
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	bf14      	ite	ne
 8010b70:	2301      	movne	r3, #1
 8010b72:	2300      	moveq	r3, #0
 8010b74:	b2da      	uxtb	r2, r3
 8010b76:	4b68      	ldr	r3, [pc, #416]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8010b7c:	f107 030c 	add.w	r3, r7, #12
 8010b80:	4619      	mov	r1, r3
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 fc54 	bl	8011430 <buffer_get_float32_auto>
 8010b88:	eef0 7a40 	vmov.f32	s15, s0
 8010b8c:	4b62      	ldr	r3, [pc, #392]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010b8e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8010b92:	f107 030c 	add.w	r3, r7, #12
 8010b96:	4619      	mov	r1, r3
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 fc49 	bl	8011430 <buffer_get_float32_auto>
 8010b9e:	eef0 7a40 	vmov.f32	s15, s0
 8010ba2:	4b5d      	ldr	r3, [pc, #372]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010ba4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	1c5a      	adds	r2, r3, #1
 8010bac:	60fa      	str	r2, [r7, #12]
 8010bae:	461a      	mov	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4413      	add	r3, r2
 8010bb4:	781a      	ldrb	r2, [r3, #0]
 8010bb6:	4b58      	ldr	r3, [pc, #352]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8010bbc:	f107 030c 	add.w	r3, r7, #12
 8010bc0:	4619      	mov	r1, r3
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fc34 	bl	8011430 <buffer_get_float32_auto>
 8010bc8:	eef0 7a40 	vmov.f32	s15, s0
 8010bcc:	4b52      	ldr	r3, [pc, #328]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010bce:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8010bd2:	f107 030c 	add.w	r3, r7, #12
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 fc29 	bl	8011430 <buffer_get_float32_auto>
 8010bde:	eef0 7a40 	vmov.f32	s15, s0
 8010be2:	4b4d      	ldr	r3, [pc, #308]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010be4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		appconf.app_ppm_conf.multi_esc = data[ind++];
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	60fa      	str	r2, [r7, #12]
 8010bee:	461a      	mov	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	bf14      	ite	ne
 8010bfa:	2301      	movne	r3, #1
 8010bfc:	2300      	moveq	r3, #0
 8010bfe:	b2da      	uxtb	r2, r3
 8010c00:	4b45      	ldr	r3, [pc, #276]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		appconf.app_ppm_conf.tc = data[ind++];
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	60fa      	str	r2, [r7, #12]
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4413      	add	r3, r2
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	bf14      	ite	ne
 8010c18:	2301      	movne	r3, #1
 8010c1a:	2300      	moveq	r3, #0
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	4b3e      	ldr	r3, [pc, #248]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8010c24:	f107 030c 	add.w	r3, r7, #12
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fc00 	bl	8011430 <buffer_get_float32_auto>
 8010c30:	eef0 7a40 	vmov.f32	s15, s0
 8010c34:	4b38      	ldr	r3, [pc, #224]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c36:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	1c5a      	adds	r2, r3, #1
 8010c3e:	60fa      	str	r2, [r7, #12]
 8010c40:	461a      	mov	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4413      	add	r3, r2
 8010c46:	781a      	ldrb	r2, [r3, #0]
 8010c48:	4b33      	ldr	r3, [pc, #204]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 8010c4e:	f107 030c 	add.w	r3, r7, #12
 8010c52:	4619      	mov	r1, r3
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 fbeb 	bl	8011430 <buffer_get_float32_auto>
 8010c5a:	eef0 7a40 	vmov.f32	s15, s0
 8010c5e:	4b2e      	ldr	r3, [pc, #184]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c60:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8010c64:	f107 030c 	add.w	r3, r7, #12
 8010c68:	4619      	mov	r1, r3
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fbe0 	bl	8011430 <buffer_get_float32_auto>
 8010c70:	eef0 7a40 	vmov.f32	s15, s0
 8010c74:	4b28      	ldr	r3, [pc, #160]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c76:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8010c7a:	f107 030c 	add.w	r3, r7, #12
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f000 fbd5 	bl	8011430 <buffer_get_float32_auto>
 8010c86:	eef0 7a40 	vmov.f32	s15, s0
 8010c8a:	4b23      	ldr	r3, [pc, #140]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010c8c:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 8010c90:	f107 030c 	add.w	r3, r7, #12
 8010c94:	4619      	mov	r1, r3
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f000 fbca 	bl	8011430 <buffer_get_float32_auto>
 8010c9c:	eef0 7a40 	vmov.f32	s15, s0
 8010ca0:	4b1d      	ldr	r3, [pc, #116]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010ca2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 8010ca6:	f107 030c 	add.w	r3, r7, #12
 8010caa:	4619      	mov	r1, r3
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 fbbf 	bl	8011430 <buffer_get_float32_auto>
 8010cb2:	eef0 7a40 	vmov.f32	s15, s0
 8010cb6:	4b18      	ldr	r3, [pc, #96]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010cb8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 8010cbc:	f107 030c 	add.w	r3, r7, #12
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 fbb4 	bl	8011430 <buffer_get_float32_auto>
 8010cc8:	eef0 7a40 	vmov.f32	s15, s0
 8010ccc:	4b12      	ldr	r3, [pc, #72]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010cce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		appconf.app_adc_conf.use_filter = data[ind++];
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	1c5a      	adds	r2, r3, #1
 8010cd6:	60fa      	str	r2, [r7, #12]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4413      	add	r3, r2
 8010cde:	781b      	ldrb	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bf14      	ite	ne
 8010ce4:	2301      	movne	r3, #1
 8010ce6:	2300      	moveq	r3, #0
 8010ce8:	b2da      	uxtb	r2, r3
 8010cea:	4b0b      	ldr	r3, [pc, #44]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010cec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
		appconf.app_adc_conf.safe_start = data[ind++];
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	1c5a      	adds	r2, r3, #1
 8010cf4:	60fa      	str	r2, [r7, #12]
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	bf14      	ite	ne
 8010d02:	2301      	movne	r3, #1
 8010d04:	2300      	moveq	r3, #0
 8010d06:	b2da      	uxtb	r2, r3
 8010d08:	4b03      	ldr	r3, [pc, #12]	; (8010d18 <bldc_interface_process_packet+0x13a0>)
 8010d0a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	60fa      	str	r2, [r7, #12]
 8010d14:	e002      	b.n	8010d1c <bldc_interface_process_packet+0x13a4>
 8010d16:	bf00      	nop
 8010d18:	20000a7c 	.word	0x20000a7c
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	4413      	add	r3, r2
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bf14      	ite	ne
 8010d28:	2301      	movne	r3, #1
 8010d2a:	2300      	moveq	r3, #0
 8010d2c:	b2da      	uxtb	r2, r3
 8010d2e:	4bb7      	ldr	r3, [pc, #732]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010d30:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	1c5a      	adds	r2, r3, #1
 8010d38:	60fa      	str	r2, [r7, #12]
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4413      	add	r3, r2
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	bf14      	ite	ne
 8010d46:	2301      	movne	r3, #1
 8010d48:	2300      	moveq	r3, #0
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	4baf      	ldr	r3, [pc, #700]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010d4e:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	60fa      	str	r2, [r7, #12]
 8010d58:	461a      	mov	r2, r3
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	bf14      	ite	ne
 8010d64:	2301      	movne	r3, #1
 8010d66:	2300      	moveq	r3, #0
 8010d68:	b2da      	uxtb	r2, r3
 8010d6a:	4ba8      	ldr	r3, [pc, #672]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	60fa      	str	r2, [r7, #12]
 8010d76:	461a      	mov	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	bf14      	ite	ne
 8010d82:	2301      	movne	r3, #1
 8010d84:	2300      	moveq	r3, #0
 8010d86:	b2da      	uxtb	r2, r3
 8010d88:	4ba0      	ldr	r3, [pc, #640]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010d8a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8010d8e:	f107 030c 	add.w	r3, r7, #12
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fb4b 	bl	8011430 <buffer_get_float32_auto>
 8010d9a:	eef0 7a40 	vmov.f32	s15, s0
 8010d9e:	4b9b      	ldr	r3, [pc, #620]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010da0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8010da4:	f107 030c 	add.w	r3, r7, #12
 8010da8:	4619      	mov	r1, r3
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 fb40 	bl	8011430 <buffer_get_float32_auto>
 8010db0:	eef0 7a40 	vmov.f32	s15, s0
 8010db4:	4b95      	ldr	r3, [pc, #596]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010db6:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	1c5a      	adds	r2, r3, #1
 8010dbe:	60fa      	str	r2, [r7, #12]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4413      	add	r3, r2
 8010dc6:	781a      	ldrb	r2, [r3, #0]
 8010dc8:	4b90      	ldr	r3, [pc, #576]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8010dce:	f107 030c 	add.w	r3, r7, #12
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 fb2b 	bl	8011430 <buffer_get_float32_auto>
 8010dda:	eef0 7a40 	vmov.f32	s15, s0
 8010dde:	4b8b      	ldr	r3, [pc, #556]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010de0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8010de4:	f107 030c 	add.w	r3, r7, #12
 8010de8:	4619      	mov	r1, r3
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f000 fb20 	bl	8011430 <buffer_get_float32_auto>
 8010df0:	eef0 7a40 	vmov.f32	s15, s0
 8010df4:	4b85      	ldr	r3, [pc, #532]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010df6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
		appconf.app_adc_conf.multi_esc = data[ind++];
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	1c5a      	adds	r2, r3, #1
 8010dfe:	60fa      	str	r2, [r7, #12]
 8010e00:	461a      	mov	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4413      	add	r3, r2
 8010e06:	781b      	ldrb	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	bf14      	ite	ne
 8010e0c:	2301      	movne	r3, #1
 8010e0e:	2300      	moveq	r3, #0
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	4b7e      	ldr	r3, [pc, #504]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e14:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		appconf.app_adc_conf.tc = data[ind++];
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	1c5a      	adds	r2, r3, #1
 8010e1c:	60fa      	str	r2, [r7, #12]
 8010e1e:	461a      	mov	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	4413      	add	r3, r2
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	bf14      	ite	ne
 8010e2a:	2301      	movne	r3, #1
 8010e2c:	2300      	moveq	r3, #0
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	4b76      	ldr	r3, [pc, #472]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e32:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8010e36:	f107 030c 	add.w	r3, r7, #12
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 faf7 	bl	8011430 <buffer_get_float32_auto>
 8010e42:	eef0 7a40 	vmov.f32	s15, s0
 8010e46:	4b71      	ldr	r3, [pc, #452]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e48:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 8010e4c:	f107 030c 	add.w	r3, r7, #12
 8010e50:	4619      	mov	r1, r3
 8010e52:	6878      	ldr	r0, [r7, #4]
 8010e54:	f000 fa33 	bl	80112be <buffer_get_uint16>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	4b6b      	ldr	r3, [pc, #428]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e5e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8010e62:	f107 030c 	add.w	r3, r7, #12
 8010e66:	4619      	mov	r1, r3
 8010e68:	6878      	ldr	r0, [r7, #4]
 8010e6a:	f000 fa7b 	bl	8011364 <buffer_get_uint32>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	4a66      	ldr	r2, [pc, #408]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	1c5a      	adds	r2, r3, #1
 8010e7a:	60fa      	str	r2, [r7, #12]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4413      	add	r3, r2
 8010e82:	781a      	ldrb	r2, [r3, #0]
 8010e84:	4b61      	ldr	r3, [pc, #388]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e86:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8010e8a:	f107 030c 	add.w	r3, r7, #12
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f000 facd 	bl	8011430 <buffer_get_float32_auto>
 8010e96:	eef0 7a40 	vmov.f32	s15, s0
 8010e9a:	4b5c      	ldr	r3, [pc, #368]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010e9c:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 8010ea0:	f107 030c 	add.w	r3, r7, #12
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f000 fac2 	bl	8011430 <buffer_get_float32_auto>
 8010eac:	eef0 7a40 	vmov.f32	s15, s0
 8010eb0:	4b56      	ldr	r3, [pc, #344]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010eb2:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 8010eb6:	f107 030c 	add.w	r3, r7, #12
 8010eba:	4619      	mov	r1, r3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 fab7 	bl	8011430 <buffer_get_float32_auto>
 8010ec2:	eef0 7a40 	vmov.f32	s15, s0
 8010ec6:	4b51      	ldr	r3, [pc, #324]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010ec8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 8010ecc:	f107 030c 	add.w	r3, r7, #12
 8010ed0:	4619      	mov	r1, r3
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 faac 	bl	8011430 <buffer_get_float32_auto>
 8010ed8:	eef0 7a40 	vmov.f32	s15, s0
 8010edc:	4b4b      	ldr	r3, [pc, #300]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010ede:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 8010ee2:	f107 030c 	add.w	r3, r7, #12
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 faa1 	bl	8011430 <buffer_get_float32_auto>
 8010eee:	eef0 7a40 	vmov.f32	s15, s0
 8010ef2:	4b46      	ldr	r3, [pc, #280]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010ef4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8010ef8:	f107 030c 	add.w	r3, r7, #12
 8010efc:	4619      	mov	r1, r3
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fa96 	bl	8011430 <buffer_get_float32_auto>
 8010f04:	eef0 7a40 	vmov.f32	s15, s0
 8010f08:	4b40      	ldr	r3, [pc, #256]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f0a:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	1c5a      	adds	r2, r3, #1
 8010f12:	60fa      	str	r2, [r7, #12]
 8010f14:	461a      	mov	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	781a      	ldrb	r2, [r3, #0]
 8010f1c:	4b3b      	ldr	r3, [pc, #236]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	60fa      	str	r2, [r7, #12]
 8010f28:	461a      	mov	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	781b      	ldrb	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	bf14      	ite	ne
 8010f34:	2301      	movne	r3, #1
 8010f36:	2300      	moveq	r3, #0
 8010f38:	b2da      	uxtb	r2, r3
 8010f3a:	4b34      	ldr	r3, [pc, #208]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
		appconf.app_chuk_conf.tc = data[ind++];
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	60fa      	str	r2, [r7, #12]
 8010f46:	461a      	mov	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	bf14      	ite	ne
 8010f52:	2301      	movne	r3, #1
 8010f54:	2300      	moveq	r3, #0
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4b2c      	ldr	r3, [pc, #176]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f5a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8010f5e:	f107 030c 	add.w	r3, r7, #12
 8010f62:	4619      	mov	r1, r3
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 fa63 	bl	8011430 <buffer_get_float32_auto>
 8010f6a:	eef0 7a40 	vmov.f32	s15, s0
 8010f6e:	4b27      	ldr	r3, [pc, #156]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f70:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc

		appconf.app_nrf_conf.speed = data[ind++];
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	1c5a      	adds	r2, r3, #1
 8010f78:	60fa      	str	r2, [r7, #12]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	4413      	add	r3, r2
 8010f80:	781a      	ldrb	r2, [r3, #0]
 8010f82:	4b22      	ldr	r3, [pc, #136]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f84:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		appconf.app_nrf_conf.power = data[ind++];
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	1c5a      	adds	r2, r3, #1
 8010f8c:	60fa      	str	r2, [r7, #12]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	4413      	add	r3, r2
 8010f94:	781a      	ldrb	r2, [r3, #0]
 8010f96:	4b1d      	ldr	r3, [pc, #116]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010f98:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		appconf.app_nrf_conf.crc_type = data[ind++];
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	1c5a      	adds	r2, r3, #1
 8010fa0:	60fa      	str	r2, [r7, #12]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	781a      	ldrb	r2, [r3, #0]
 8010faa:	4b18      	ldr	r3, [pc, #96]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010fac:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	1c5a      	adds	r2, r3, #1
 8010fb4:	60fa      	str	r2, [r7, #12]
 8010fb6:	461a      	mov	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	4413      	add	r3, r2
 8010fbc:	781a      	ldrb	r2, [r3, #0]
 8010fbe:	4b13      	ldr	r3, [pc, #76]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010fc0:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
		appconf.app_nrf_conf.retries = data[ind++];
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	1c5a      	adds	r2, r3, #1
 8010fc8:	60fa      	str	r2, [r7, #12]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	4413      	add	r3, r2
 8010fd0:	781a      	ldrb	r2, [r3, #0]
 8010fd2:	4b0e      	ldr	r3, [pc, #56]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010fd4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		appconf.app_nrf_conf.channel = data[ind++];
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	1c5a      	adds	r2, r3, #1
 8010fdc:	60fa      	str	r2, [r7, #12]
 8010fde:	461a      	mov	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4413      	add	r3, r2
 8010fe4:	781a      	ldrb	r2, [r3, #0]
 8010fe6:	4b09      	ldr	r3, [pc, #36]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010fe8:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	461a      	mov	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	441a      	add	r2, r3
 8010ff4:	4b05      	ldr	r3, [pc, #20]	; (801100c <bldc_interface_process_packet+0x1694>)
 8010ff6:	33c6      	adds	r3, #198	; 0xc6
 8010ff8:	8811      	ldrh	r1, [r2, #0]
 8010ffa:	7892      	ldrb	r2, [r2, #2]
 8010ffc:	8019      	strh	r1, [r3, #0]
 8010ffe:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	3303      	adds	r3, #3
 8011004:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	e002      	b.n	8011010 <bldc_interface_process_packet+0x1698>
 801100a:	bf00      	nop
 801100c:	20000a7c 	.word	0x20000a7c
 8011010:	1c5a      	adds	r2, r3, #1
 8011012:	60fa      	str	r2, [r7, #12]
 8011014:	461a      	mov	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	4413      	add	r3, r2
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b00      	cmp	r3, #0
 801101e:	bf14      	ite	ne
 8011020:	2301      	movne	r3, #1
 8011022:	2300      	moveq	r3, #0
 8011024:	b2da      	uxtb	r2, r3
 8011026:	4b81      	ldr	r3, [pc, #516]	; (801122c <bldc_interface_process_packet+0x18b4>)
 8011028:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9

		if (rx_appconf_func) {
 801102c:	4b80      	ldr	r3, [pc, #512]	; (8011230 <bldc_interface_process_packet+0x18b8>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	f000 80eb 	beq.w	801120c <bldc_interface_process_packet+0x1894>
			rx_appconf_func(&appconf);
 8011036:	4b7e      	ldr	r3, [pc, #504]	; (8011230 <bldc_interface_process_packet+0x18b8>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	487c      	ldr	r0, [pc, #496]	; (801122c <bldc_interface_process_packet+0x18b4>)
 801103c:	4798      	blx	r3
		}
		break;
 801103e:	e0e5      	b.n	801120c <bldc_interface_process_packet+0x1894>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8011040:	2300      	movs	r3, #0
 8011042:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8011044:	f107 030c 	add.w	r3, r7, #12
 8011048:	4619      	mov	r1, r3
 801104a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8011234 <bldc_interface_process_packet+0x18bc>
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f9d3 	bl	80113fa <buffer_get_float32>
 8011054:	eef0 7a40 	vmov.f32	s15, s0
 8011058:	4b77      	ldr	r3, [pc, #476]	; (8011238 <bldc_interface_process_packet+0x18c0>)
 801105a:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 801105e:	f107 030c 	add.w	r3, r7, #12
 8011062:	4619      	mov	r1, r3
 8011064:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8011234 <bldc_interface_process_packet+0x18bc>
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f000 f9c6 	bl	80113fa <buffer_get_float32>
 801106e:	eef0 7a40 	vmov.f32	s15, s0
 8011072:	4b72      	ldr	r3, [pc, #456]	; (801123c <bldc_interface_process_packet+0x18c4>)
 8011074:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8011078:	2300      	movs	r3, #0
 801107a:	61bb      	str	r3, [r7, #24]
 801107c:	e00f      	b.n	801109e <bldc_interface_process_packet+0x1726>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	60fa      	str	r2, [r7, #12]
 8011084:	461a      	mov	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	4413      	add	r3, r2
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	b259      	sxtb	r1, r3
 801108e:	4a6c      	ldr	r2, [pc, #432]	; (8011240 <bldc_interface_process_packet+0x18c8>)
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	4413      	add	r3, r2
 8011094:	460a      	mov	r2, r1
 8011096:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	3301      	adds	r3, #1
 801109c:	61bb      	str	r3, [r7, #24]
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	2b07      	cmp	r3, #7
 80110a2:	ddec      	ble.n	801107e <bldc_interface_process_packet+0x1706>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	1c5a      	adds	r2, r3, #1
 80110a8:	60fa      	str	r2, [r7, #12]
 80110aa:	461a      	mov	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4413      	add	r3, r2
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	b25a      	sxtb	r2, r3
 80110b4:	4b63      	ldr	r3, [pc, #396]	; (8011244 <bldc_interface_process_packet+0x18cc>)
 80110b6:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 80110b8:	4b63      	ldr	r3, [pc, #396]	; (8011248 <bldc_interface_process_packet+0x18d0>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 80a7 	beq.w	8011210 <bldc_interface_process_packet+0x1898>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 80110c2:	4b61      	ldr	r3, [pc, #388]	; (8011248 <bldc_interface_process_packet+0x18d0>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	4a5c      	ldr	r2, [pc, #368]	; (8011238 <bldc_interface_process_packet+0x18c0>)
 80110c8:	edd2 7a00 	vldr	s15, [r2]
 80110cc:	4a5b      	ldr	r2, [pc, #364]	; (801123c <bldc_interface_process_packet+0x18c4>)
 80110ce:	ed92 7a00 	vldr	s14, [r2]
 80110d2:	4a5c      	ldr	r2, [pc, #368]	; (8011244 <bldc_interface_process_packet+0x18cc>)
 80110d4:	f992 2000 	ldrsb.w	r2, [r2]
 80110d8:	4611      	mov	r1, r2
 80110da:	4859      	ldr	r0, [pc, #356]	; (8011240 <bldc_interface_process_packet+0x18c8>)
 80110dc:	eef0 0a47 	vmov.f32	s1, s14
 80110e0:	eeb0 0a67 	vmov.f32	s0, s15
 80110e4:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 80110e6:	e093      	b.n	8011210 <bldc_interface_process_packet+0x1898>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 80110e8:	2300      	movs	r3, #0
 80110ea:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 80110ec:	f107 030c 	add.w	r3, r7, #12
 80110f0:	4619      	mov	r1, r3
 80110f2:	ed9f 0a56 	vldr	s0, [pc, #344]	; 801124c <bldc_interface_process_packet+0x18d4>
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f000 f97f 	bl	80113fa <buffer_get_float32>
 80110fc:	eef0 7a40 	vmov.f32	s15, s0
 8011100:	4b53      	ldr	r3, [pc, #332]	; (8011250 <bldc_interface_process_packet+0x18d8>)
 8011102:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8011106:	f107 030c 	add.w	r3, r7, #12
 801110a:	4619      	mov	r1, r3
 801110c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 801124c <bldc_interface_process_packet+0x18d4>
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 f972 	bl	80113fa <buffer_get_float32>
 8011116:	eef0 7a40 	vmov.f32	s15, s0
 801111a:	4b4e      	ldr	r3, [pc, #312]	; (8011254 <bldc_interface_process_packet+0x18dc>)
 801111c:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8011120:	4b4d      	ldr	r3, [pc, #308]	; (8011258 <bldc_interface_process_packet+0x18e0>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d075      	beq.n	8011214 <bldc_interface_process_packet+0x189c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8011128:	4b4b      	ldr	r3, [pc, #300]	; (8011258 <bldc_interface_process_packet+0x18e0>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4a48      	ldr	r2, [pc, #288]	; (8011250 <bldc_interface_process_packet+0x18d8>)
 801112e:	edd2 7a00 	vldr	s15, [r2]
 8011132:	4a48      	ldr	r2, [pc, #288]	; (8011254 <bldc_interface_process_packet+0x18dc>)
 8011134:	ed92 7a00 	vldr	s14, [r2]
 8011138:	eef0 0a47 	vmov.f32	s1, s14
 801113c:	eeb0 0a67 	vmov.f32	s0, s15
 8011140:	4798      	blx	r3
		}
		break;
 8011142:	e067      	b.n	8011214 <bldc_interface_process_packet+0x189c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8011144:	2300      	movs	r3, #0
 8011146:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8011148:	f107 030c 	add.w	r3, r7, #12
 801114c:	4619      	mov	r1, r3
 801114e:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801124c <bldc_interface_process_packet+0x18d4>
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f951 	bl	80113fa <buffer_get_float32>
 8011158:	eef0 7a40 	vmov.f32	s15, s0
 801115c:	4b3f      	ldr	r3, [pc, #252]	; (801125c <bldc_interface_process_packet+0x18e4>)
 801115e:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8011162:	f107 030c 	add.w	r3, r7, #12
 8011166:	4619      	mov	r1, r3
 8011168:	ed9f 0a38 	vldr	s0, [pc, #224]	; 801124c <bldc_interface_process_packet+0x18d4>
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 f944 	bl	80113fa <buffer_get_float32>
 8011172:	eef0 7a40 	vmov.f32	s15, s0
 8011176:	4b3a      	ldr	r3, [pc, #232]	; (8011260 <bldc_interface_process_packet+0x18e8>)
 8011178:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 801117c:	4b39      	ldr	r3, [pc, #228]	; (8011264 <bldc_interface_process_packet+0x18ec>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d049      	beq.n	8011218 <bldc_interface_process_packet+0x18a0>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8011184:	4b37      	ldr	r3, [pc, #220]	; (8011264 <bldc_interface_process_packet+0x18ec>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	4a34      	ldr	r2, [pc, #208]	; (801125c <bldc_interface_process_packet+0x18e4>)
 801118a:	edd2 7a00 	vldr	s15, [r2]
 801118e:	4a34      	ldr	r2, [pc, #208]	; (8011260 <bldc_interface_process_packet+0x18e8>)
 8011190:	ed92 7a00 	vldr	s14, [r2]
 8011194:	eef0 0a47 	vmov.f32	s1, s14
 8011198:	eeb0 0a67 	vmov.f32	s0, s15
 801119c:	4798      	blx	r3
		}
		break;
 801119e:	e03b      	b.n	8011218 <bldc_interface_process_packet+0x18a0>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 80111a4:	f107 030c 	add.w	r3, r7, #12
 80111a8:	4619      	mov	r1, r3
 80111aa:	ed9f 0a28 	vldr	s0, [pc, #160]	; 801124c <bldc_interface_process_packet+0x18d4>
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 f923 	bl	80113fa <buffer_get_float32>
 80111b4:	eef0 7a40 	vmov.f32	s15, s0
 80111b8:	4b2b      	ldr	r3, [pc, #172]	; (8011268 <bldc_interface_process_packet+0x18f0>)
 80111ba:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 80111be:	4b2b      	ldr	r3, [pc, #172]	; (801126c <bldc_interface_process_packet+0x18f4>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d02a      	beq.n	801121c <bldc_interface_process_packet+0x18a4>
			rx_dec_chuk_func(dec_chuk);
 80111c6:	4b29      	ldr	r3, [pc, #164]	; (801126c <bldc_interface_process_packet+0x18f4>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a27      	ldr	r2, [pc, #156]	; (8011268 <bldc_interface_process_packet+0x18f0>)
 80111cc:	edd2 7a00 	vldr	s15, [r2]
 80111d0:	eeb0 0a67 	vmov.f32	s0, s15
 80111d4:	4798      	blx	r3
		}
		break;
 80111d6:	e021      	b.n	801121c <bldc_interface_process_packet+0x18a4>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 80111d8:	4b25      	ldr	r3, [pc, #148]	; (8011270 <bldc_interface_process_packet+0x18f8>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d01f      	beq.n	8011220 <bldc_interface_process_packet+0x18a8>
			rx_mcconf_received_func();
 80111e0:	4b23      	ldr	r3, [pc, #140]	; (8011270 <bldc_interface_process_packet+0x18f8>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4798      	blx	r3
		}
		break;
 80111e6:	e01b      	b.n	8011220 <bldc_interface_process_packet+0x18a8>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 80111e8:	4b22      	ldr	r3, [pc, #136]	; (8011274 <bldc_interface_process_packet+0x18fc>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d019      	beq.n	8011224 <bldc_interface_process_packet+0x18ac>
			rx_appconf_received_func();
 80111f0:	4b20      	ldr	r3, [pc, #128]	; (8011274 <bldc_interface_process_packet+0x18fc>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4798      	blx	r3
		}
		break;
 80111f6:	e015      	b.n	8011224 <bldc_interface_process_packet+0x18ac>
		return;
 80111f8:	bf00      	nop
 80111fa:	e014      	b.n	8011226 <bldc_interface_process_packet+0x18ae>

	default:
		break;
 80111fc:	bf00      	nop
 80111fe:	e012      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011200:	bf00      	nop
 8011202:	e010      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011204:	bf00      	nop
 8011206:	e00e      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011208:	bf00      	nop
 801120a:	e00c      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 801120c:	bf00      	nop
 801120e:	e00a      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011210:	bf00      	nop
 8011212:	e008      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011214:	bf00      	nop
 8011216:	e006      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011218:	bf00      	nop
 801121a:	e004      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 801121c:	bf00      	nop
 801121e:	e002      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011220:	bf00      	nop
 8011222:	e000      	b.n	8011226 <bldc_interface_process_packet+0x18ae>
		break;
 8011224:	bf00      	nop
	}
}
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000a7c 	.word	0x20000a7c
 8011230:	20000b88 	.word	0x20000b88
 8011234:	447a0000 	.word	0x447a0000
 8011238:	20000b48 	.word	0x20000b48
 801123c:	20000b4c 	.word	0x20000b4c
 8011240:	20000b50 	.word	0x20000b50
 8011244:	20000b58 	.word	0x20000b58
 8011248:	20000b8c 	.word	0x20000b8c
 801124c:	49742400 	.word	0x49742400
 8011250:	20000b5c 	.word	0x20000b5c
 8011254:	20000b60 	.word	0x20000b60
 8011258:	20000b90 	.word	0x20000b90
 801125c:	20000b64 	.word	0x20000b64
 8011260:	20000b68 	.word	0x20000b68
 8011264:	20000b94 	.word	0x20000b94
 8011268:	20000b6c 	.word	0x20000b6c
 801126c:	20000b98 	.word	0x20000b98
 8011270:	20000b9c 	.word	0x20000b9c
 8011274:	20000ba0 	.word	0x20000ba0

08011278 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	461a      	mov	r2, r3
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	4413      	add	r3, r2
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	021b      	lsls	r3, r3, #8
 8011290:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3301      	adds	r3, #1
 8011298:	6879      	ldr	r1, [r7, #4]
 801129a:	440b      	add	r3, r1
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 80112a0:	4313      	orrs	r3, r2
 80112a2:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	1c9a      	adds	r2, r3, #2
 80112aa:	683b      	ldr	r3, [r7, #0]
 80112ac:	601a      	str	r2, [r3, #0]
	return res;
 80112ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr

080112be <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 80112be:	b480      	push	{r7}
 80112c0:	b085      	sub	sp, #20
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	6078      	str	r0, [r7, #4]
 80112c6:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	461a      	mov	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4413      	add	r3, r2
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	021b      	lsls	r3, r3, #8
 80112d6:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	3301      	adds	r3, #1
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	440b      	add	r3, r1
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80112e6:	4313      	orrs	r3, r2
 80112e8:	b21b      	sxth	r3, r3
 80112ea:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	1c9a      	adds	r2, r3, #2
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	601a      	str	r2, [r3, #0]
	return res;
 80112f6:	89fb      	ldrh	r3, [r7, #14]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3714      	adds	r7, #20
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8011304:	b480      	push	{r7}
 8011306:	b085      	sub	sp, #20
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	461a      	mov	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4413      	add	r3, r2
 8011318:	781b      	ldrb	r3, [r3, #0]
 801131a:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	3301      	adds	r3, #1
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	440b      	add	r3, r1
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 801132a:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	3302      	adds	r3, #2
 8011332:	6879      	ldr	r1, [r7, #4]
 8011334:	440b      	add	r3, r1
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 801133a:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	6812      	ldr	r2, [r2, #0]
 8011340:	3203      	adds	r2, #3
 8011342:	6879      	ldr	r1, [r7, #4]
 8011344:	440a      	add	r2, r1
 8011346:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8011348:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 801134a:	60fb      	str	r3, [r7, #12]
	*index += 4;
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	1d1a      	adds	r2, r3, #4
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	601a      	str	r2, [r3, #0]
	return res;
 8011356:	68fb      	ldr	r3, [r7, #12]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3714      	adds	r7, #20
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	461a      	mov	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4413      	add	r3, r2
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	3301      	adds	r3, #1
 8011382:	6879      	ldr	r1, [r7, #4]
 8011384:	440b      	add	r3, r1
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 801138a:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	3302      	adds	r3, #2
 8011392:	6879      	ldr	r1, [r7, #4]
 8011394:	440b      	add	r3, r1
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 801139a:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	6812      	ldr	r2, [r2, #0]
 80113a0:	3203      	adds	r2, #3
 80113a2:	6879      	ldr	r1, [r7, #4]
 80113a4:	440a      	add	r2, r1
 80113a6:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 80113a8:	4313      	orrs	r3, r2
 80113aa:	60fb      	str	r3, [r7, #12]
	*index += 4;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	1d1a      	adds	r2, r3, #4
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	601a      	str	r2, [r3, #0]
	return res;
 80113b6:	68fb      	ldr	r3, [r7, #12]
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3714      	adds	r7, #20
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr

080113c4 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b084      	sub	sp, #16
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80113d0:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 80113d2:	6879      	ldr	r1, [r7, #4]
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f7ff ff4f 	bl	8011278 <buffer_get_int16>
 80113da:	4603      	mov	r3, r0
 80113dc:	ee07 3a90 	vmov	s15, r3
 80113e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80113e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80113e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80113ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80113f0:	eeb0 0a67 	vmov.f32	s0, s15
 80113f4:	3710      	adds	r7, #16
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}

080113fa <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80113fa:	b580      	push	{r7, lr}
 80113fc:	b084      	sub	sp, #16
 80113fe:	af00      	add	r7, sp, #0
 8011400:	60f8      	str	r0, [r7, #12]
 8011402:	ed87 0a02 	vstr	s0, [r7, #8]
 8011406:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f7ff ff7a 	bl	8011304 <buffer_get_int32>
 8011410:	ee07 0a90 	vmov	s15, r0
 8011414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8011418:	edd7 7a02 	vldr	s15, [r7, #8]
 801141c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011420:	eef0 7a66 	vmov.f32	s15, s13
}
 8011424:	eeb0 0a67 	vmov.f32	s0, s15
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
	...

08011430 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 8011430:	b580      	push	{r7, lr}
 8011432:	b088      	sub	sp, #32
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 801143a:	6839      	ldr	r1, [r7, #0]
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff ff91 	bl	8011364 <buffer_get_uint32>
 8011442:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	0ddb      	lsrs	r3, r3, #23
 8011448:	b2db      	uxtb	r3, r3
 801144a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011452:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801145a:	2b00      	cmp	r3, #0
 801145c:	bf14      	ite	ne
 801145e:	2301      	movne	r3, #1
 8011460:	2300      	moveq	r3, #0
 8011462:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8011464:	f04f 0300 	mov.w	r3, #0
 8011468:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d102      	bne.n	8011476 <buffer_get_float32_auto+0x46>
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d021      	beq.n	80114ba <buffer_get_float32_auto+0x8a>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	ee07 3a90 	vmov	s15, r3
 801147c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011480:	ee17 0a90 	vmov	r0, s15
 8011484:	f7ef f860 	bl	8000548 <__aeabi_f2d>
 8011488:	f04f 0200 	mov.w	r2, #0
 801148c:	4b15      	ldr	r3, [pc, #84]	; (80114e4 <buffer_get_float32_auto+0xb4>)
 801148e:	f7ef f9dd 	bl	800084c <__aeabi_ddiv>
 8011492:	4602      	mov	r2, r0
 8011494:	460b      	mov	r3, r1
 8011496:	4610      	mov	r0, r2
 8011498:	4619      	mov	r1, r3
 801149a:	f04f 0200 	mov.w	r2, #0
 801149e:	4b12      	ldr	r3, [pc, #72]	; (80114e8 <buffer_get_float32_auto+0xb8>)
 80114a0:	f7ee fef4 	bl	800028c <__adddf3>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	4610      	mov	r0, r2
 80114aa:	4619      	mov	r1, r3
 80114ac:	f7ef fb9c 	bl	8000be8 <__aeabi_d2f>
 80114b0:	4603      	mov	r3, r0
 80114b2:	61bb      	str	r3, [r7, #24]
		e -= 126;
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	3b7e      	subs	r3, #126	; 0x7e
 80114b8:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 80114ba:	7bfb      	ldrb	r3, [r7, #15]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d005      	beq.n	80114cc <buffer_get_float32_auto+0x9c>
		sig = -sig;
 80114c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80114c4:	eef1 7a67 	vneg.f32	s15, s15
 80114c8:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 80114cc:	69f8      	ldr	r0, [r7, #28]
 80114ce:	ed97 0a06 	vldr	s0, [r7, #24]
 80114d2:	f00c f98f 	bl	801d7f4 <ldexpf>
 80114d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80114da:	eeb0 0a67 	vmov.f32	s0, s15
 80114de:	3720      	adds	r7, #32
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	41700000 	.word	0x41700000
 80114e8:	3fe00000 	.word	0x3fe00000

080114ec <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80114ec:	b480      	push	{r7}
 80114ee:	b085      	sub	sp, #20
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80114fa:	2300      	movs	r3, #0
 80114fc:	60fb      	str	r3, [r7, #12]
 80114fe:	e016      	b.n	801152e <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8011500:	897b      	ldrh	r3, [r7, #10]
 8011502:	0a1b      	lsrs	r3, r3, #8
 8011504:	b29b      	uxth	r3, r3
 8011506:	4619      	mov	r1, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	1c5a      	adds	r2, r3, #1
 801150c:	607a      	str	r2, [r7, #4]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	404b      	eors	r3, r1
 8011512:	b2db      	uxtb	r3, r3
 8011514:	4a0b      	ldr	r2, [pc, #44]	; (8011544 <crc16+0x58>)
 8011516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801151a:	b21a      	sxth	r2, r3
 801151c:	897b      	ldrh	r3, [r7, #10]
 801151e:	021b      	lsls	r3, r3, #8
 8011520:	b21b      	sxth	r3, r3
 8011522:	4053      	eors	r3, r2
 8011524:	b21b      	sxth	r3, r3
 8011526:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	3301      	adds	r3, #1
 801152c:	60fb      	str	r3, [r7, #12]
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	429a      	cmp	r2, r3
 8011534:	d3e4      	bcc.n	8011500 <crc16+0x14>
	}
	return cksum;
 8011536:	897b      	ldrh	r3, [r7, #10]
}
 8011538:	4618      	mov	r0, r3
 801153a:	3714      	adds	r7, #20
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	0802273c 	.word	0x0802273c

08011548 <decode_VESC>:
	CAN_TxMsgEID(&hcan2, controller_id |
				((uint32_t)CAN_PACKET_SET_CURRENT_HANDBRAKE_REL<< 8), buffer, send_index);
#endif
}

void decode_VESC(void){
 8011548:	b5b0      	push	{r4, r5, r7, lr}
 801154a:	b090      	sub	sp, #64	; 0x40
 801154c:	af00      	add	r7, sp, #0
	int32_t ind = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t crc_low;
	uint8_t crc_high;
	uint8_t commands_send;

	Vescmsg *rxmsg_tmp;
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 8011552:	e0dd      	b.n	8011710 <decode_VESC+0x1c8>
		Vescmsg rxmsg = *rxmsg_tmp;
 8011554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011556:	1d3c      	adds	r4, r7, #4
 8011558:	461d      	mov	r5, r3
 801155a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801155c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801155e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011562:	682b      	ldr	r3, [r5, #0]
 8011564:	6023      	str	r3, [r4, #0]

		if (rxmsg.Rxmsg.IDE == CAN_ID_EXT) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b04      	cmp	r3, #4
 801156a:	f040 80c6 	bne.w	80116fa <decode_VESC+0x1b2>
			uint8_t id = rxmsg.Rxmsg.ExtId & 0xFF;
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			CAN_PACKET_ID cmd = rxmsg.Rxmsg.ExtId >> 8;
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	0a1b      	lsrs	r3, r3, #8
 8011578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

			if (id == 255 || id == RNS_TO_VESC) {
 801157c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011580:	2bff      	cmp	r3, #255	; 0xff
 8011582:	d004      	beq.n	801158e <decode_VESC+0x46>
 8011584:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011588:	2b1e      	cmp	r3, #30
 801158a:	f040 80b6 	bne.w	80116fa <decode_VESC+0x1b2>
				switch (cmd) {
 801158e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8011592:	3b05      	subs	r3, #5
 8011594:	2b03      	cmp	r3, #3
 8011596:	f200 80b2 	bhi.w	80116fe <decode_VESC+0x1b6>
 801159a:	a201      	add	r2, pc, #4	; (adr r2, 80115a0 <decode_VESC+0x58>)
 801159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a0:	080115b1 	.word	0x080115b1
 80115a4:	080115cd 	.word	0x080115cd
 80115a8:	08011603 	.word	0x08011603
 80115ac:	080116bb 	.word	0x080116bb
				case CAN_PACKET_FILL_RX_BUFFER:
					memcpy(rx_buffer + rxmsg.Data[0], rxmsg.Data + 1, rxmsg.Rxmsg.DLC - 1);
 80115b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115b4:	461a      	mov	r2, r3
 80115b6:	4b5c      	ldr	r3, [pc, #368]	; (8011728 <decode_VESC+0x1e0>)
 80115b8:	18d0      	adds	r0, r2, r3
 80115ba:	1d3b      	adds	r3, r7, #4
 80115bc:	331c      	adds	r3, #28
 80115be:	3301      	adds	r3, #1
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	3a01      	subs	r2, #1
 80115c4:	4619      	mov	r1, r3
 80115c6:	f00b f9c3 	bl	801c950 <memcpy>
					break;
 80115ca:	e0a1      	b.n	8011710 <decode_VESC+0x1c8>

				case CAN_PACKET_FILL_RX_BUFFER_LONG:
					rxbuf_ind = (unsigned int)rxmsg.Data[0] << 8;
 80115cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80115d0:	021b      	lsls	r3, r3, #8
 80115d2:	62bb      	str	r3, [r7, #40]	; 0x28
					rxbuf_ind |= rxmsg.Data[1];
 80115d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80115d8:	461a      	mov	r2, r3
 80115da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115dc:	4313      	orrs	r3, r2
 80115de:	62bb      	str	r3, [r7, #40]	; 0x28
					if (rxbuf_ind < RX_BUFFER_SIZE) {
 80115e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115e6:	f080 808c 	bcs.w	8011702 <decode_VESC+0x1ba>
						memcpy(rx_buffer + rxbuf_ind, rxmsg.Data + 2, rxmsg.Rxmsg.DLC - 2);
 80115ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ec:	4a4e      	ldr	r2, [pc, #312]	; (8011728 <decode_VESC+0x1e0>)
 80115ee:	1898      	adds	r0, r3, r2
 80115f0:	1d3b      	adds	r3, r7, #4
 80115f2:	331c      	adds	r3, #28
 80115f4:	3302      	adds	r3, #2
 80115f6:	697a      	ldr	r2, [r7, #20]
 80115f8:	3a02      	subs	r2, #2
 80115fa:	4619      	mov	r1, r3
 80115fc:	f00b f9a8 	bl	801c950 <memcpy>
					}
					break;
 8011600:	e07f      	b.n	8011702 <decode_VESC+0x1ba>

				case CAN_PACKET_PROCESS_RX_BUFFER:
					ind = 0;
 8011602:	2300      	movs	r3, #0
 8011604:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 8011606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011608:	1c5a      	adds	r2, r3, #1
 801160a:	63ba      	str	r2, [r7, #56]	; 0x38
 801160c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011610:	4413      	add	r3, r2
 8011612:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011616:	461a      	mov	r2, r3
 8011618:	4b44      	ldr	r3, [pc, #272]	; (801172c <decode_VESC+0x1e4>)
 801161a:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 801161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161e:	1c5a      	adds	r2, r3, #1
 8011620:	63ba      	str	r2, [r7, #56]	; 0x38
 8011622:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011626:	4413      	add	r3, r2
 8011628:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 801162c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					rxbuf_len = (unsigned int)rxmsg.Data[ind++] << 8;
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	1c5a      	adds	r2, r3, #1
 8011634:	63ba      	str	r2, [r7, #56]	; 0x38
 8011636:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801163a:	4413      	add	r3, r2
 801163c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011640:	021b      	lsls	r3, r3, #8
 8011642:	63fb      	str	r3, [r7, #60]	; 0x3c
					rxbuf_len |= (unsigned int)rxmsg.Data[ind++];
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	1c5a      	adds	r2, r3, #1
 8011648:	63ba      	str	r2, [r7, #56]	; 0x38
 801164a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801164e:	4413      	add	r3, r2
 8011650:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011654:	461a      	mov	r2, r3
 8011656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011658:	4313      	orrs	r3, r2
 801165a:	63fb      	str	r3, [r7, #60]	; 0x3c

					if (rxbuf_len > RX_BUFFER_SIZE) {
 801165c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801165e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011662:	d850      	bhi.n	8011706 <decode_VESC+0x1be>
						break;
					}

					crc_high = rxmsg.Data[ind++];
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	1c5a      	adds	r2, r3, #1
 8011668:	63ba      	str	r2, [r7, #56]	; 0x38
 801166a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801166e:	4413      	add	r3, r2
 8011670:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011674:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					crc_low = rxmsg.Data[ind++];
 8011678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167a:	1c5a      	adds	r2, r3, #1
 801167c:	63ba      	str	r2, [r7, #56]	; 0x38
 801167e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011682:	4413      	add	r3, r2
 8011684:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8011688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

					if (crc16(rx_buffer, rxbuf_len)
 801168c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801168e:	4826      	ldr	r0, [pc, #152]	; (8011728 <decode_VESC+0x1e0>)
 8011690:	f7ff ff2c 	bl	80114ec <crc16>
 8011694:	4603      	mov	r3, r0
 8011696:	4619      	mov	r1, r3
							== ((unsigned short) crc_high << 8
 8011698:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801169c:	021a      	lsls	r2, r3, #8
									| (unsigned short) crc_low)) {
 801169e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116a2:	4313      	orrs	r3, r2
					if (crc16(rx_buffer, rxbuf_len)
 80116a4:	4299      	cmp	r1, r3
 80116a6:	d130      	bne.n	801170a <decode_VESC+0x1c2>
						if(commands_send==1)
 80116a8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d12c      	bne.n	801170a <decode_VESC+0x1c2>
							bldc_interface_process_packet(rx_buffer, rxbuf_len);
 80116b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116b2:	481d      	ldr	r0, [pc, #116]	; (8011728 <decode_VESC+0x1e0>)
 80116b4:	f7fe f960 	bl	800f978 <bldc_interface_process_packet>
					}
					break;
 80116b8:	e027      	b.n	801170a <decode_VESC+0x1c2>

				case CAN_PACKET_PROCESS_SHORT_BUFFER:
					ind = 0;
 80116ba:	2300      	movs	r3, #0
 80116bc:	63bb      	str	r3, [r7, #56]	; 0x38
					rx_buffer_last_id = rxmsg.Data[ind++];
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	1c5a      	adds	r2, r3, #1
 80116c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80116c4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80116c8:	4413      	add	r3, r2
 80116ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80116ce:	461a      	mov	r2, r3
 80116d0:	4b16      	ldr	r3, [pc, #88]	; (801172c <decode_VESC+0x1e4>)
 80116d2:	601a      	str	r2, [r3, #0]
					commands_send = rxmsg.Data[ind++];
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	1c5a      	adds	r2, r3, #1
 80116d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80116da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80116de:	4413      	add	r3, r2
 80116e0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80116e4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

					if(commands_send==1)
 80116e8:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d10e      	bne.n	801170e <decode_VESC+0x1c6>
						bldc_interface_process_packet(rx_buffer, rxbuf_len);
 80116f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80116f2:	480d      	ldr	r0, [pc, #52]	; (8011728 <decode_VESC+0x1e0>)
 80116f4:	f7fe f940 	bl	800f978 <bldc_interface_process_packet>
					break;
 80116f8:	e009      	b.n	801170e <decode_VESC+0x1c6>
				default:
					break;
				}
			}
 80116fa:	bf00      	nop
 80116fc:	e008      	b.n	8011710 <decode_VESC+0x1c8>
					break;
 80116fe:	bf00      	nop
 8011700:	e006      	b.n	8011710 <decode_VESC+0x1c8>
					break;
 8011702:	bf00      	nop
 8011704:	e004      	b.n	8011710 <decode_VESC+0x1c8>
						break;
 8011706:	bf00      	nop
 8011708:	e002      	b.n	8011710 <decode_VESC+0x1c8>
					break;
 801170a:	bf00      	nop
 801170c:	e000      	b.n	8011710 <decode_VESC+0x1c8>
					break;
 801170e:	bf00      	nop
	while ((rxmsg_tmp = get_rx_frame()) != 0) {
 8011710:	f000 f80e 	bl	8011730 <get_rx_frame>
 8011714:	6378      	str	r0, [r7, #52]	; 0x34
 8011716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011718:	2b00      	cmp	r3, #0
 801171a:	f47f af1b 	bne.w	8011554 <decode_VESC+0xc>
		}
	}
}
 801171e:	bf00      	nop
 8011720:	bf00      	nop
 8011722:	3740      	adds	r7, #64	; 0x40
 8011724:	46bd      	mov	sp, r7
 8011726:	bdb0      	pop	{r4, r5, r7, pc}
 8011728:	20000ba4 	.word	0x20000ba4
 801172c:	20000da4 	.word	0x20000da4

08011730 <get_rx_frame>:

Vescmsg *get_rx_frame(void) {
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
	if (rx_frame_read != rx_frame_write){
 8011736:	4b11      	ldr	r3, [pc, #68]	; (801177c <get_rx_frame+0x4c>)
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	4b11      	ldr	r3, [pc, #68]	; (8011780 <get_rx_frame+0x50>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	429a      	cmp	r2, r3
 8011740:	d014      	beq.n	801176c <get_rx_frame+0x3c>
		Vescmsg *res = &rx_frames[rx_frame_read++];
 8011742:	4b0e      	ldr	r3, [pc, #56]	; (801177c <get_rx_frame+0x4c>)
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	1c53      	adds	r3, r2, #1
 8011748:	490c      	ldr	r1, [pc, #48]	; (801177c <get_rx_frame+0x4c>)
 801174a:	600b      	str	r3, [r1, #0]
 801174c:	4613      	mov	r3, r2
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	4413      	add	r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	4a0b      	ldr	r2, [pc, #44]	; (8011784 <get_rx_frame+0x54>)
 8011756:	4413      	add	r3, r2
 8011758:	607b      	str	r3, [r7, #4]

		if (rx_frame_read == RX_FRAMES_SIZE){
 801175a:	4b08      	ldr	r3, [pc, #32]	; (801177c <get_rx_frame+0x4c>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b64      	cmp	r3, #100	; 0x64
 8011760:	d102      	bne.n	8011768 <get_rx_frame+0x38>
			rx_frame_read = 0;
 8011762:	4b06      	ldr	r3, [pc, #24]	; (801177c <get_rx_frame+0x4c>)
 8011764:	2200      	movs	r2, #0
 8011766:	601a      	str	r2, [r3, #0]
		}

		return res;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	e000      	b.n	801176e <get_rx_frame+0x3e>
	} else
		return 0;
 801176c:	2300      	movs	r3, #0
}
 801176e:	4618      	mov	r0, r3
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr
 801177a:	bf00      	nop
 801177c:	20001bb8 	.word	0x20001bb8
 8011780:	20001bbc 	.word	0x20001bbc
 8011784:	20000da8 	.word	0x20000da8

08011788 <set_rx_frames>:

uint8_t set_rx_frames(Vescmsg* CANRxFrame) {
 8011788:	b4b0      	push	{r4, r5, r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
	uint32_t cmd;

	rx_frames[rx_frame_write++] = *CANRxFrame;
 8011790:	4b16      	ldr	r3, [pc, #88]	; (80117ec <set_rx_frames+0x64>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	1c53      	adds	r3, r2, #1
 8011796:	4915      	ldr	r1, [pc, #84]	; (80117ec <set_rx_frames+0x64>)
 8011798:	600b      	str	r3, [r1, #0]
 801179a:	4915      	ldr	r1, [pc, #84]	; (80117f0 <set_rx_frames+0x68>)
 801179c:	4613      	mov	r3, r2
 801179e:	00db      	lsls	r3, r3, #3
 80117a0:	4413      	add	r3, r2
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	18ca      	adds	r2, r1, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4614      	mov	r4, r2
 80117aa:	461d      	mov	r5, r3
 80117ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80117b4:	682b      	ldr	r3, [r5, #0]
 80117b6:	6023      	str	r3, [r4, #0]
	if (rx_frame_write == RX_FRAMES_SIZE) {
 80117b8:	4b0c      	ldr	r3, [pc, #48]	; (80117ec <set_rx_frames+0x64>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b64      	cmp	r3, #100	; 0x64
 80117be:	d102      	bne.n	80117c6 <set_rx_frames+0x3e>
		rx_frame_write = 0;
 80117c0:	4b0a      	ldr	r3, [pc, #40]	; (80117ec <set_rx_frames+0x64>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	601a      	str	r2, [r3, #0]
	}

	cmd = CANRxFrame->Rxmsg.ExtId >> 8;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	0a1b      	lsrs	r3, r3, #8
 80117cc:	60fb      	str	r3, [r7, #12]
	if(cmd == (uint32_t)CAN_PACKET_PROCESS_RX_BUFFER || cmd == (uint32_t)CAN_PACKET_PROCESS_SHORT_BUFFER)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2b07      	cmp	r3, #7
 80117d2:	d002      	beq.n	80117da <set_rx_frames+0x52>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b08      	cmp	r3, #8
 80117d8:	d101      	bne.n	80117de <set_rx_frames+0x56>
		return 112;
 80117da:	2370      	movs	r3, #112	; 0x70
 80117dc:	e000      	b.n	80117e0 <set_rx_frames+0x58>
	else
		return 0;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bcb0      	pop	{r4, r5, r7}
 80117e8:	4770      	bx	lr
 80117ea:	bf00      	nop
 80117ec:	20001bbc 	.word	0x20001bbc
 80117f0:	20000da8 	.word	0x20000da8

080117f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80117f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 801182c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80117f8:	480d      	ldr	r0, [pc, #52]	; (8011830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80117fa:	490e      	ldr	r1, [pc, #56]	; (8011834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80117fc:	4a0e      	ldr	r2, [pc, #56]	; (8011838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80117fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8011800:	e002      	b.n	8011808 <LoopCopyDataInit>

08011802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8011802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8011804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8011806:	3304      	adds	r3, #4

08011808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8011808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801180c:	d3f9      	bcc.n	8011802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801180e:	4a0b      	ldr	r2, [pc, #44]	; (801183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8011810:	4c0b      	ldr	r4, [pc, #44]	; (8011840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8011812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8011814:	e001      	b.n	801181a <LoopFillZerobss>

08011816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8011816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8011818:	3204      	adds	r2, #4

0801181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801181c:	d3fb      	bcc.n	8011816 <FillZerobss>


/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801181e:	f7fc f90d 	bl	800da3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011822:	f00b f861 	bl	801c8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8011826:	f7f2 fcef 	bl	8004208 <main>
  bx  lr    
 801182a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8011830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8011834:	20000794 	.word	0x20000794
  ldr r2, =_sidata
 8011838:	080231dc 	.word	0x080231dc
  ldr r2, =_sbss
 801183c:	20000798 	.word	0x20000798
  ldr r4, =_ebss
 8011840:	2000a7e4 	.word	0x2000a7e4

08011844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011844:	e7fe      	b.n	8011844 <ADC_IRQHandler>
	...

08011848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801184c:	4b0e      	ldr	r3, [pc, #56]	; (8011888 <HAL_Init+0x40>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a0d      	ldr	r2, [pc, #52]	; (8011888 <HAL_Init+0x40>)
 8011852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8011858:	4b0b      	ldr	r3, [pc, #44]	; (8011888 <HAL_Init+0x40>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4a0a      	ldr	r2, [pc, #40]	; (8011888 <HAL_Init+0x40>)
 801185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011864:	4b08      	ldr	r3, [pc, #32]	; (8011888 <HAL_Init+0x40>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	4a07      	ldr	r2, [pc, #28]	; (8011888 <HAL_Init+0x40>)
 801186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8011870:	2003      	movs	r0, #3
 8011872:	f001 fbc0 	bl	8012ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8011876:	2000      	movs	r0, #0
 8011878:	f7fb ffc0 	bl	800d7fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801187c:	f7f0 fd58 	bl	8002330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	40023c00 	.word	0x40023c00

0801188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801188c:	b480      	push	{r7}
 801188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8011890:	4b06      	ldr	r3, [pc, #24]	; (80118ac <HAL_IncTick+0x20>)
 8011892:	781b      	ldrb	r3, [r3, #0]
 8011894:	461a      	mov	r2, r3
 8011896:	4b06      	ldr	r3, [pc, #24]	; (80118b0 <HAL_IncTick+0x24>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	4413      	add	r3, r2
 801189c:	4a04      	ldr	r2, [pc, #16]	; (80118b0 <HAL_IncTick+0x24>)
 801189e:	6013      	str	r3, [r2, #0]
}
 80118a0:	bf00      	nop
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr
 80118aa:	bf00      	nop
 80118ac:	200005b8 	.word	0x200005b8
 80118b0:	2000a770 	.word	0x2000a770

080118b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
  return uwTick;
 80118b8:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <HAL_GetTick+0x14>)
 80118ba:	681b      	ldr	r3, [r3, #0]
}
 80118bc:	4618      	mov	r0, r3
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	2000a770 	.word	0x2000a770

080118cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b084      	sub	sp, #16
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80118d4:	f7ff ffee 	bl	80118b4 <HAL_GetTick>
 80118d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118e4:	d005      	beq.n	80118f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80118e6:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <HAL_Delay+0x44>)
 80118e8:	781b      	ldrb	r3, [r3, #0]
 80118ea:	461a      	mov	r2, r3
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4413      	add	r3, r2
 80118f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80118f2:	bf00      	nop
 80118f4:	f7ff ffde 	bl	80118b4 <HAL_GetTick>
 80118f8:	4602      	mov	r2, r0
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	1ad3      	subs	r3, r2, r3
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	429a      	cmp	r2, r3
 8011902:	d8f7      	bhi.n	80118f4 <HAL_Delay+0x28>
  {
  }
}
 8011904:	bf00      	nop
 8011906:	bf00      	nop
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop
 8011910:	200005b8 	.word	0x200005b8

08011914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d101      	bne.n	801192a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8011926:	2301      	movs	r3, #1
 8011928:	e033      	b.n	8011992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192e:	2b00      	cmp	r3, #0
 8011930:	d109      	bne.n	8011946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8011932:	6878      	ldr	r0, [r7, #4]
 8011934:	f7f0 fd28 	bl	8002388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194a:	f003 0310 	and.w	r3, r3, #16
 801194e:	2b00      	cmp	r3, #0
 8011950:	d118      	bne.n	8011984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801195a:	f023 0302 	bic.w	r3, r3, #2
 801195e:	f043 0202 	orr.w	r2, r3, #2
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fa4a 	bl	8011e00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2200      	movs	r2, #0
 8011970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011976:	f023 0303 	bic.w	r3, r3, #3
 801197a:	f043 0201 	orr.w	r2, r3, #1
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	641a      	str	r2, [r3, #64]	; 0x40
 8011982:	e001      	b.n	8011988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8011990:	7bfb      	ldrb	r3, [r7, #15]
}
 8011992:	4618      	mov	r0, r3
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
	...

0801199c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80119a8:	2300      	movs	r3, #0
 80119aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d101      	bne.n	80119ba <HAL_ADC_Start_DMA+0x1e>
 80119b6:	2302      	movs	r3, #2
 80119b8:	e0cc      	b.n	8011b54 <HAL_ADC_Start_DMA+0x1b8>
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	2201      	movs	r2, #1
 80119be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	f003 0301 	and.w	r3, r3, #1
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	d018      	beq.n	8011a02 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	689a      	ldr	r2, [r3, #8]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f042 0201 	orr.w	r2, r2, #1
 80119de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80119e0:	4b5e      	ldr	r3, [pc, #376]	; (8011b5c <HAL_ADC_Start_DMA+0x1c0>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	4a5e      	ldr	r2, [pc, #376]	; (8011b60 <HAL_ADC_Start_DMA+0x1c4>)
 80119e6:	fba2 2303 	umull	r2, r3, r2, r3
 80119ea:	0c9a      	lsrs	r2, r3, #18
 80119ec:	4613      	mov	r3, r2
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	4413      	add	r3, r2
 80119f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80119f4:	e002      	b.n	80119fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	3b01      	subs	r3, #1
 80119fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1f9      	bne.n	80119f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	689b      	ldr	r3, [r3, #8]
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	f040 80a0 	bne.w	8011b52 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8011a1a:	f023 0301 	bic.w	r3, r3, #1
 8011a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d007      	beq.n	8011a44 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011a3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a50:	d106      	bne.n	8011a60 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a56:	f023 0206 	bic.w	r2, r3, #6
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	645a      	str	r2, [r3, #68]	; 0x44
 8011a5e:	e002      	b.n	8011a66 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011a6e:	4b3d      	ldr	r3, [pc, #244]	; (8011b64 <HAL_ADC_Start_DMA+0x1c8>)
 8011a70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a76:	4a3c      	ldr	r2, [pc, #240]	; (8011b68 <HAL_ADC_Start_DMA+0x1cc>)
 8011a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7e:	4a3b      	ldr	r2, [pc, #236]	; (8011b6c <HAL_ADC_Start_DMA+0x1d0>)
 8011a80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a86:	4a3a      	ldr	r2, [pc, #232]	; (8011b70 <HAL_ADC_Start_DMA+0x1d4>)
 8011a88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8011a92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	685a      	ldr	r2, [r3, #4]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011aa2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	689a      	ldr	r2, [r3, #8]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011ab2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	334c      	adds	r3, #76	; 0x4c
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f001 fbf4 	bl	80132b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	f003 031f 	and.w	r3, r3, #31
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d12a      	bne.n	8011b2a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4a26      	ldr	r2, [pc, #152]	; (8011b74 <HAL_ADC_Start_DMA+0x1d8>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d015      	beq.n	8011b0a <HAL_ADC_Start_DMA+0x16e>
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4a25      	ldr	r2, [pc, #148]	; (8011b78 <HAL_ADC_Start_DMA+0x1dc>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d105      	bne.n	8011af4 <HAL_ADC_Start_DMA+0x158>
 8011ae8:	4b1e      	ldr	r3, [pc, #120]	; (8011b64 <HAL_ADC_Start_DMA+0x1c8>)
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	f003 031f 	and.w	r3, r3, #31
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d00a      	beq.n	8011b0a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a20      	ldr	r2, [pc, #128]	; (8011b7c <HAL_ADC_Start_DMA+0x1e0>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d129      	bne.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
 8011afe:	4b19      	ldr	r3, [pc, #100]	; (8011b64 <HAL_ADC_Start_DMA+0x1c8>)
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	f003 0310 	and.w	r3, r3, #16
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d123      	bne.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d11c      	bne.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	689a      	ldr	r2, [r3, #8]
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011b26:	609a      	str	r2, [r3, #8]
 8011b28:	e013      	b.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	4a11      	ldr	r2, [pc, #68]	; (8011b74 <HAL_ADC_Start_DMA+0x1d8>)
 8011b30:	4293      	cmp	r3, r2
 8011b32:	d10e      	bne.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d107      	bne.n	8011b52 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	689a      	ldr	r2, [r3, #8]
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011b50:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8011b52:	2300      	movs	r3, #0
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	3718      	adds	r7, #24
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}
 8011b5c:	20000538 	.word	0x20000538
 8011b60:	431bde83 	.word	0x431bde83
 8011b64:	40012300 	.word	0x40012300
 8011b68:	08011ff9 	.word	0x08011ff9
 8011b6c:	080120b3 	.word	0x080120b3
 8011b70:	080120cf 	.word	0x080120cf
 8011b74:	40012000 	.word	0x40012000
 8011b78:	40012100 	.word	0x40012100
 8011b7c:	40012200 	.word	0x40012200

08011b80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8011b88:	bf00      	nop
 8011b8a:	370c      	adds	r7, #12
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr

08011b94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8011b9c:	bf00      	nop
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8011bb0:	bf00      	nop
 8011bb2:	370c      	adds	r7, #12
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr

08011bbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011bd0:	2b01      	cmp	r3, #1
 8011bd2:	d101      	bne.n	8011bd8 <HAL_ADC_ConfigChannel+0x1c>
 8011bd4:	2302      	movs	r3, #2
 8011bd6:	e105      	b.n	8011de4 <HAL_ADC_ConfigChannel+0x228>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2201      	movs	r2, #1
 8011bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b09      	cmp	r3, #9
 8011be6:	d925      	bls.n	8011c34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	68d9      	ldr	r1, [r3, #12]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	005b      	lsls	r3, r3, #1
 8011bfa:	4413      	add	r3, r2
 8011bfc:	3b1e      	subs	r3, #30
 8011bfe:	2207      	movs	r2, #7
 8011c00:	fa02 f303 	lsl.w	r3, r2, r3
 8011c04:	43da      	mvns	r2, r3
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	400a      	ands	r2, r1
 8011c0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	68d9      	ldr	r1, [r3, #12]
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	689a      	ldr	r2, [r3, #8]
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	b29b      	uxth	r3, r3
 8011c1e:	4618      	mov	r0, r3
 8011c20:	4603      	mov	r3, r0
 8011c22:	005b      	lsls	r3, r3, #1
 8011c24:	4403      	add	r3, r0
 8011c26:	3b1e      	subs	r3, #30
 8011c28:	409a      	lsls	r2, r3
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	430a      	orrs	r2, r1
 8011c30:	60da      	str	r2, [r3, #12]
 8011c32:	e022      	b.n	8011c7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	6919      	ldr	r1, [r3, #16]
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	461a      	mov	r2, r3
 8011c42:	4613      	mov	r3, r2
 8011c44:	005b      	lsls	r3, r3, #1
 8011c46:	4413      	add	r3, r2
 8011c48:	2207      	movs	r2, #7
 8011c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c4e:	43da      	mvns	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	400a      	ands	r2, r1
 8011c56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	6919      	ldr	r1, [r3, #16]
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	689a      	ldr	r2, [r3, #8]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4618      	mov	r0, r3
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	005b      	lsls	r3, r3, #1
 8011c6e:	4403      	add	r3, r0
 8011c70:	409a      	lsls	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	430a      	orrs	r2, r1
 8011c78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	2b06      	cmp	r3, #6
 8011c80:	d824      	bhi.n	8011ccc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	4613      	mov	r3, r2
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	4413      	add	r3, r2
 8011c92:	3b05      	subs	r3, #5
 8011c94:	221f      	movs	r2, #31
 8011c96:	fa02 f303 	lsl.w	r3, r2, r3
 8011c9a:	43da      	mvns	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	400a      	ands	r2, r1
 8011ca2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	683b      	ldr	r3, [r7, #0]
 8011cb4:	685a      	ldr	r2, [r3, #4]
 8011cb6:	4613      	mov	r3, r2
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4413      	add	r3, r2
 8011cbc:	3b05      	subs	r3, #5
 8011cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	430a      	orrs	r2, r1
 8011cc8:	635a      	str	r2, [r3, #52]	; 0x34
 8011cca:	e04c      	b.n	8011d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	2b0c      	cmp	r3, #12
 8011cd2:	d824      	bhi.n	8011d1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	685a      	ldr	r2, [r3, #4]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	3b23      	subs	r3, #35	; 0x23
 8011ce6:	221f      	movs	r2, #31
 8011ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cec:	43da      	mvns	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	400a      	ands	r2, r1
 8011cf4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	4618      	mov	r0, r3
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	685a      	ldr	r2, [r3, #4]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	3b23      	subs	r3, #35	; 0x23
 8011d10:	fa00 f203 	lsl.w	r2, r0, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	430a      	orrs	r2, r1
 8011d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8011d1c:	e023      	b.n	8011d66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	685a      	ldr	r2, [r3, #4]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	3b41      	subs	r3, #65	; 0x41
 8011d30:	221f      	movs	r2, #31
 8011d32:	fa02 f303 	lsl.w	r3, r2, r3
 8011d36:	43da      	mvns	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	400a      	ands	r2, r1
 8011d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	685a      	ldr	r2, [r3, #4]
 8011d52:	4613      	mov	r3, r2
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	4413      	add	r3, r2
 8011d58:	3b41      	subs	r3, #65	; 0x41
 8011d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	430a      	orrs	r2, r1
 8011d64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011d66:	4b22      	ldr	r3, [pc, #136]	; (8011df0 <HAL_ADC_ConfigChannel+0x234>)
 8011d68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a21      	ldr	r2, [pc, #132]	; (8011df4 <HAL_ADC_ConfigChannel+0x238>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d109      	bne.n	8011d88 <HAL_ADC_ConfigChannel+0x1cc>
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2b12      	cmp	r3, #18
 8011d7a:	d105      	bne.n	8011d88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4a19      	ldr	r2, [pc, #100]	; (8011df4 <HAL_ADC_ConfigChannel+0x238>)
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d123      	bne.n	8011dda <HAL_ADC_ConfigChannel+0x21e>
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b10      	cmp	r3, #16
 8011d98:	d003      	beq.n	8011da2 <HAL_ADC_ConfigChannel+0x1e6>
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b11      	cmp	r3, #17
 8011da0:	d11b      	bne.n	8011dda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b10      	cmp	r3, #16
 8011db4:	d111      	bne.n	8011dda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8011db6:	4b10      	ldr	r3, [pc, #64]	; (8011df8 <HAL_ADC_ConfigChannel+0x23c>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a10      	ldr	r2, [pc, #64]	; (8011dfc <HAL_ADC_ConfigChannel+0x240>)
 8011dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8011dc0:	0c9a      	lsrs	r2, r3, #18
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	4413      	add	r3, r2
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011dcc:	e002      	b.n	8011dd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	3b01      	subs	r3, #1
 8011dd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d1f9      	bne.n	8011dce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	40012300 	.word	0x40012300
 8011df4:	40012000 	.word	0x40012000
 8011df8:	20000538 	.word	0x20000538
 8011dfc:	431bde83 	.word	0x431bde83

08011e00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b085      	sub	sp, #20
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8011e08:	4b79      	ldr	r3, [pc, #484]	; (8011ff0 <ADC_Init+0x1f0>)
 8011e0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	685a      	ldr	r2, [r3, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	431a      	orrs	r2, r3
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	685a      	ldr	r2, [r3, #4]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	6859      	ldr	r1, [r3, #4]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	691b      	ldr	r3, [r3, #16]
 8011e40:	021a      	lsls	r2, r3, #8
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	430a      	orrs	r2, r1
 8011e48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	685a      	ldr	r2, [r3, #4]
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8011e58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	6859      	ldr	r1, [r3, #4]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	689a      	ldr	r2, [r3, #8]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	430a      	orrs	r2, r1
 8011e6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	689a      	ldr	r2, [r3, #8]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	6899      	ldr	r1, [r3, #8]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	68da      	ldr	r2, [r3, #12]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	430a      	orrs	r2, r1
 8011e8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e92:	4a58      	ldr	r2, [pc, #352]	; (8011ff4 <ADC_Init+0x1f4>)
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d022      	beq.n	8011ede <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	689a      	ldr	r2, [r3, #8]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011ea6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6899      	ldr	r1, [r3, #8]
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	430a      	orrs	r2, r1
 8011eb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	689a      	ldr	r2, [r3, #8]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	6899      	ldr	r1, [r3, #8]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	430a      	orrs	r2, r1
 8011eda:	609a      	str	r2, [r3, #8]
 8011edc:	e00f      	b.n	8011efe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	689a      	ldr	r2, [r3, #8]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011eec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	689a      	ldr	r2, [r3, #8]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8011efc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	689a      	ldr	r2, [r3, #8]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f022 0202 	bic.w	r2, r2, #2
 8011f0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	6899      	ldr	r1, [r3, #8]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	7e1b      	ldrb	r3, [r3, #24]
 8011f18:	005a      	lsls	r2, r3, #1
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	430a      	orrs	r2, r1
 8011f20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d01b      	beq.n	8011f64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	685a      	ldr	r2, [r3, #4]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8011f4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	6859      	ldr	r1, [r3, #4]
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f56:	3b01      	subs	r3, #1
 8011f58:	035a      	lsls	r2, r3, #13
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	430a      	orrs	r2, r1
 8011f60:	605a      	str	r2, [r3, #4]
 8011f62:	e007      	b.n	8011f74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	685a      	ldr	r2, [r3, #4]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011f72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8011f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	69db      	ldr	r3, [r3, #28]
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	051a      	lsls	r2, r3, #20
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	430a      	orrs	r2, r1
 8011f98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	689a      	ldr	r2, [r3, #8]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8011fa8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	6899      	ldr	r1, [r3, #8]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fb6:	025a      	lsls	r2, r3, #9
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	430a      	orrs	r2, r1
 8011fbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	689a      	ldr	r2, [r3, #8]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	6899      	ldr	r1, [r3, #8]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	029a      	lsls	r2, r3, #10
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	430a      	orrs	r2, r1
 8011fe2:	609a      	str	r2, [r3, #8]
}
 8011fe4:	bf00      	nop
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr
 8011ff0:	40012300 	.word	0x40012300
 8011ff4:	0f000001 	.word	0x0f000001

08011ff8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012004:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801200a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801200e:	2b00      	cmp	r3, #0
 8012010:	d13c      	bne.n	801208c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012016:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d12b      	bne.n	8012084 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8012030:	2b00      	cmp	r3, #0
 8012032:	d127      	bne.n	8012084 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801203a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801203e:	2b00      	cmp	r3, #0
 8012040:	d006      	beq.n	8012050 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	689b      	ldr	r3, [r3, #8]
 8012048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 801204c:	2b00      	cmp	r3, #0
 801204e:	d119      	bne.n	8012084 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	685a      	ldr	r2, [r3, #4]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f022 0220 	bic.w	r2, r2, #32
 801205e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012064:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012074:	2b00      	cmp	r3, #0
 8012076:	d105      	bne.n	8012084 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801207c:	f043 0201 	orr.w	r2, r3, #1
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f7ff fd7b 	bl	8011b80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801208a:	e00e      	b.n	80120aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012090:	f003 0310 	and.w	r3, r3, #16
 8012094:	2b00      	cmp	r3, #0
 8012096:	d003      	beq.n	80120a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7ff fd85 	bl	8011ba8 <HAL_ADC_ErrorCallback>
}
 801209e:	e004      	b.n	80120aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	4798      	blx	r3
}
 80120aa:	bf00      	nop
 80120ac:	3710      	adds	r7, #16
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b084      	sub	sp, #16
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f7ff fd67 	bl	8011b94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80120c6:	bf00      	nop
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b084      	sub	sp, #16
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	2240      	movs	r2, #64	; 0x40
 80120e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120e6:	f043 0204 	orr.w	r2, r3, #4
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80120ee:	68f8      	ldr	r0, [r7, #12]
 80120f0:	f7ff fd5a 	bl	8011ba8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80120f4:	bf00      	nop
 80120f6:	3710      	adds	r7, #16
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d101      	bne.n	801210e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 801210a:	2301      	movs	r3, #1
 801210c:	e0ed      	b.n	80122ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012114:	b2db      	uxtb	r3, r3
 8012116:	2b00      	cmp	r3, #0
 8012118:	d102      	bne.n	8012120 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7f0 f982 	bl	8002424 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	681a      	ldr	r2, [r3, #0]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f022 0202 	bic.w	r2, r2, #2
 801212e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012130:	f7ff fbc0 	bl	80118b4 <HAL_GetTick>
 8012134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8012136:	e012      	b.n	801215e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8012138:	f7ff fbbc 	bl	80118b4 <HAL_GetTick>
 801213c:	4602      	mov	r2, r0
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	1ad3      	subs	r3, r2, r3
 8012142:	2b0a      	cmp	r3, #10
 8012144:	d90b      	bls.n	801215e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801214a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2205      	movs	r2, #5
 8012156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801215a:	2301      	movs	r3, #1
 801215c:	e0c5      	b.n	80122ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	685b      	ldr	r3, [r3, #4]
 8012164:	f003 0302 	and.w	r3, r3, #2
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1e5      	bne.n	8012138 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f042 0201 	orr.w	r2, r2, #1
 801217a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801217c:	f7ff fb9a 	bl	80118b4 <HAL_GetTick>
 8012180:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8012182:	e012      	b.n	80121aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8012184:	f7ff fb96 	bl	80118b4 <HAL_GetTick>
 8012188:	4602      	mov	r2, r0
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	1ad3      	subs	r3, r2, r3
 801218e:	2b0a      	cmp	r3, #10
 8012190:	d90b      	bls.n	80121aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012196:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2205      	movs	r2, #5
 80121a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80121a6:	2301      	movs	r3, #1
 80121a8:	e09f      	b.n	80122ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0e5      	beq.n	8012184 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	7e1b      	ldrb	r3, [r3, #24]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d108      	bne.n	80121d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80121ce:	601a      	str	r2, [r3, #0]
 80121d0:	e007      	b.n	80121e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	681a      	ldr	r2, [r3, #0]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80121e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	7e5b      	ldrb	r3, [r3, #25]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d108      	bne.n	80121fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121f8:	601a      	str	r2, [r3, #0]
 80121fa:	e007      	b.n	801220c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801220a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	7e9b      	ldrb	r3, [r3, #26]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d108      	bne.n	8012226 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	f042 0220 	orr.w	r2, r2, #32
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	e007      	b.n	8012236 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	f022 0220 	bic.w	r2, r2, #32
 8012234:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	7edb      	ldrb	r3, [r3, #27]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d108      	bne.n	8012250 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	681a      	ldr	r2, [r3, #0]
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f022 0210 	bic.w	r2, r2, #16
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	e007      	b.n	8012260 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f042 0210 	orr.w	r2, r2, #16
 801225e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	7f1b      	ldrb	r3, [r3, #28]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d108      	bne.n	801227a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	681a      	ldr	r2, [r3, #0]
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f042 0208 	orr.w	r2, r2, #8
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	e007      	b.n	801228a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	f022 0208 	bic.w	r2, r2, #8
 8012288:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	7f5b      	ldrb	r3, [r3, #29]
 801228e:	2b01      	cmp	r3, #1
 8012290:	d108      	bne.n	80122a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	681a      	ldr	r2, [r3, #0]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	f042 0204 	orr.w	r2, r2, #4
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	e007      	b.n	80122b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f022 0204 	bic.w	r2, r2, #4
 80122b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	431a      	orrs	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	691b      	ldr	r3, [r3, #16]
 80122c2:	431a      	orrs	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	695b      	ldr	r3, [r3, #20]
 80122c8:	ea42 0103 	orr.w	r1, r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	1e5a      	subs	r2, r3, #1
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	430a      	orrs	r2, r1
 80122d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2200      	movs	r2, #0
 80122de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2201      	movs	r2, #1
 80122e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
	...

080122f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80122f4:	b480      	push	{r7}
 80122f6:	b087      	sub	sp, #28
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
 80122fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f893 3020 	ldrb.w	r3, [r3, #32]
 801230a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 801230c:	7cfb      	ldrb	r3, [r7, #19]
 801230e:	2b01      	cmp	r3, #1
 8012310:	d003      	beq.n	801231a <HAL_CAN_ConfigFilter+0x26>
 8012312:	7cfb      	ldrb	r3, [r7, #19]
 8012314:	2b02      	cmp	r3, #2
 8012316:	f040 80be 	bne.w	8012496 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 801231a:	4b65      	ldr	r3, [pc, #404]	; (80124b0 <HAL_CAN_ConfigFilter+0x1bc>)
 801231c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012324:	f043 0201 	orr.w	r2, r3, #1
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012334:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012348:	021b      	lsls	r3, r3, #8
 801234a:	431a      	orrs	r2, r3
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	695b      	ldr	r3, [r3, #20]
 8012356:	f003 031f 	and.w	r3, r3, #31
 801235a:	2201      	movs	r2, #1
 801235c:	fa02 f303 	lsl.w	r3, r2, r3
 8012360:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	43db      	mvns	r3, r3
 801236c:	401a      	ands	r2, r3
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	69db      	ldr	r3, [r3, #28]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d123      	bne.n	80123c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	43db      	mvns	r3, r3
 8012386:	401a      	ands	r2, r3
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801239e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	3248      	adds	r2, #72	; 0x48
 80123a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80123b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80123ba:	6979      	ldr	r1, [r7, #20]
 80123bc:	3348      	adds	r3, #72	; 0x48
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	440b      	add	r3, r1
 80123c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	69db      	ldr	r3, [r3, #28]
 80123c8:	2b01      	cmp	r3, #1
 80123ca:	d122      	bne.n	8012412 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	431a      	orrs	r2, r3
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80123e8:	683a      	ldr	r2, [r7, #0]
 80123ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80123ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	3248      	adds	r2, #72	; 0x48
 80123f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	689b      	ldr	r3, [r3, #8]
 80123fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8012406:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8012408:	6979      	ldr	r1, [r7, #20]
 801240a:	3348      	adds	r3, #72	; 0x48
 801240c:	00db      	lsls	r3, r3, #3
 801240e:	440b      	add	r3, r1
 8012410:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	699b      	ldr	r3, [r3, #24]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d109      	bne.n	801242e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	43db      	mvns	r3, r3
 8012424:	401a      	ands	r2, r3
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801242c:	e007      	b.n	801243e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	431a      	orrs	r2, r3
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	691b      	ldr	r3, [r3, #16]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d109      	bne.n	801245a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	43db      	mvns	r3, r3
 8012450:	401a      	ands	r2, r3
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8012458:	e007      	b.n	801246a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	431a      	orrs	r2, r3
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	6a1b      	ldr	r3, [r3, #32]
 801246e:	2b01      	cmp	r3, #1
 8012470:	d107      	bne.n	8012482 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	431a      	orrs	r2, r3
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012488:	f023 0201 	bic.w	r2, r3, #1
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	e006      	b.n	80124a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80124a2:	2301      	movs	r3, #1
  }
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	371c      	adds	r7, #28
 80124a8:	46bd      	mov	sp, r7
 80124aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ae:	4770      	bx	lr
 80124b0:	40006400 	.word	0x40006400

080124b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d12e      	bne.n	8012526 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2202      	movs	r2, #2
 80124cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	681a      	ldr	r2, [r3, #0]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f022 0201 	bic.w	r2, r2, #1
 80124de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80124e0:	f7ff f9e8 	bl	80118b4 <HAL_GetTick>
 80124e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80124e6:	e012      	b.n	801250e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80124e8:	f7ff f9e4 	bl	80118b4 <HAL_GetTick>
 80124ec:	4602      	mov	r2, r0
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	1ad3      	subs	r3, r2, r3
 80124f2:	2b0a      	cmp	r3, #10
 80124f4:	d90b      	bls.n	801250e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2205      	movs	r2, #5
 8012506:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801250a:	2301      	movs	r3, #1
 801250c:	e012      	b.n	8012534 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	f003 0301 	and.w	r3, r3, #1
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1e5      	bne.n	80124e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2200      	movs	r2, #0
 8012520:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8012522:	2300      	movs	r3, #0
 8012524:	e006      	b.n	8012534 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801252a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8012532:	2301      	movs	r3, #1
  }
}
 8012534:	4618      	mov	r0, r3
 8012536:	3710      	adds	r7, #16
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 801253c:	b480      	push	{r7}
 801253e:	b089      	sub	sp, #36	; 0x24
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
 8012548:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012550:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 801255a:	7ffb      	ldrb	r3, [r7, #31]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d003      	beq.n	8012568 <HAL_CAN_AddTxMessage+0x2c>
 8012560:	7ffb      	ldrb	r3, [r7, #31]
 8012562:	2b02      	cmp	r3, #2
 8012564:	f040 80b8 	bne.w	80126d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801256e:	2b00      	cmp	r3, #0
 8012570:	d10a      	bne.n	8012588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8012572:	69bb      	ldr	r3, [r7, #24]
 8012574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8012578:	2b00      	cmp	r3, #0
 801257a:	d105      	bne.n	8012588 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8012582:	2b00      	cmp	r3, #0
 8012584:	f000 80a0 	beq.w	80126c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	0e1b      	lsrs	r3, r3, #24
 801258c:	f003 0303 	and.w	r3, r3, #3
 8012590:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	2b02      	cmp	r3, #2
 8012596:	d907      	bls.n	80125a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801259c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80125a4:	2301      	movs	r3, #1
 80125a6:	e09e      	b.n	80126e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80125a8:	2201      	movs	r2, #1
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	409a      	lsls	r2, r3
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	689b      	ldr	r3, [r3, #8]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10d      	bne.n	80125d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80125c4:	68f9      	ldr	r1, [r7, #12]
 80125c6:	6809      	ldr	r1, [r1, #0]
 80125c8:	431a      	orrs	r2, r3
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	3318      	adds	r3, #24
 80125ce:	011b      	lsls	r3, r3, #4
 80125d0:	440b      	add	r3, r1
 80125d2:	601a      	str	r2, [r3, #0]
 80125d4:	e00f      	b.n	80125f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80125e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80125e6:	68f9      	ldr	r1, [r7, #12]
 80125e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80125ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	3318      	adds	r3, #24
 80125f0:	011b      	lsls	r3, r3, #4
 80125f2:	440b      	add	r3, r1
 80125f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	6819      	ldr	r1, [r3, #0]
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	691a      	ldr	r2, [r3, #16]
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	3318      	adds	r3, #24
 8012602:	011b      	lsls	r3, r3, #4
 8012604:	440b      	add	r3, r1
 8012606:	3304      	adds	r3, #4
 8012608:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	7d1b      	ldrb	r3, [r3, #20]
 801260e:	2b01      	cmp	r3, #1
 8012610:	d111      	bne.n	8012636 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	3318      	adds	r3, #24
 801261a:	011b      	lsls	r3, r3, #4
 801261c:	4413      	add	r3, r2
 801261e:	3304      	adds	r3, #4
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	68fa      	ldr	r2, [r7, #12]
 8012624:	6811      	ldr	r1, [r2, #0]
 8012626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	3318      	adds	r3, #24
 801262e:	011b      	lsls	r3, r3, #4
 8012630:	440b      	add	r3, r1
 8012632:	3304      	adds	r3, #4
 8012634:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	3307      	adds	r3, #7
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	061a      	lsls	r2, r3, #24
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	3306      	adds	r3, #6
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	041b      	lsls	r3, r3, #16
 8012646:	431a      	orrs	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	3305      	adds	r3, #5
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	021b      	lsls	r3, r3, #8
 8012650:	4313      	orrs	r3, r2
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	3204      	adds	r2, #4
 8012656:	7812      	ldrb	r2, [r2, #0]
 8012658:	4610      	mov	r0, r2
 801265a:	68fa      	ldr	r2, [r7, #12]
 801265c:	6811      	ldr	r1, [r2, #0]
 801265e:	ea43 0200 	orr.w	r2, r3, r0
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	011b      	lsls	r3, r3, #4
 8012666:	440b      	add	r3, r1
 8012668:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801266c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	3303      	adds	r3, #3
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	061a      	lsls	r2, r3, #24
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	3302      	adds	r3, #2
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	041b      	lsls	r3, r3, #16
 801267e:	431a      	orrs	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	3301      	adds	r3, #1
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	021b      	lsls	r3, r3, #8
 8012688:	4313      	orrs	r3, r2
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	7812      	ldrb	r2, [r2, #0]
 801268e:	4610      	mov	r0, r2
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	6811      	ldr	r1, [r2, #0]
 8012694:	ea43 0200 	orr.w	r2, r3, r0
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	011b      	lsls	r3, r3, #4
 801269c:	440b      	add	r3, r1
 801269e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80126a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	3318      	adds	r3, #24
 80126ac:	011b      	lsls	r3, r3, #4
 80126ae:	4413      	add	r3, r2
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	6811      	ldr	r1, [r2, #0]
 80126b6:	f043 0201 	orr.w	r2, r3, #1
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	3318      	adds	r3, #24
 80126be:	011b      	lsls	r3, r3, #4
 80126c0:	440b      	add	r3, r1
 80126c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80126c4:	2300      	movs	r3, #0
 80126c6:	e00e      	b.n	80126e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80126d4:	2301      	movs	r3, #1
 80126d6:	e006      	b.n	80126e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
  }
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3724      	adds	r7, #36	; 0x24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f0:	4770      	bx	lr

080126f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80126f2:	b480      	push	{r7}
 80126f4:	b085      	sub	sp, #20
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80126fa:	2300      	movs	r3, #0
 80126fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012704:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8012706:	7afb      	ldrb	r3, [r7, #11]
 8012708:	2b01      	cmp	r3, #1
 801270a:	d002      	beq.n	8012712 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 801270c:	7afb      	ldrb	r3, [r7, #11]
 801270e:	2b02      	cmp	r3, #2
 8012710:	d11d      	bne.n	801274e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801271c:	2b00      	cmp	r3, #0
 801271e:	d002      	beq.n	8012726 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	3301      	adds	r3, #1
 8012724:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	689b      	ldr	r3, [r3, #8]
 801272c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	3301      	adds	r3, #1
 8012738:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	689b      	ldr	r3, [r3, #8]
 8012740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	3301      	adds	r3, #1
 801274c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 801274e:	68fb      	ldr	r3, [r7, #12]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3714      	adds	r7, #20
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr

0801275c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801275c:	b480      	push	{r7}
 801275e:	b087      	sub	sp, #28
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012770:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	2b01      	cmp	r3, #1
 8012776:	d003      	beq.n	8012780 <HAL_CAN_GetRxMessage+0x24>
 8012778:	7dfb      	ldrb	r3, [r7, #23]
 801277a:	2b02      	cmp	r3, #2
 801277c:	f040 80f3 	bne.w	8012966 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d10e      	bne.n	80127a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	f003 0303 	and.w	r3, r3, #3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d116      	bne.n	80127c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012798:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80127a0:	2301      	movs	r3, #1
 80127a2:	e0e7      	b.n	8012974 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	691b      	ldr	r3, [r3, #16]
 80127aa:	f003 0303 	and.w	r3, r3, #3
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d107      	bne.n	80127c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80127be:	2301      	movs	r3, #1
 80127c0:	e0d8      	b.n	8012974 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	681a      	ldr	r2, [r3, #0]
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	331b      	adds	r3, #27
 80127ca:	011b      	lsls	r3, r3, #4
 80127cc:	4413      	add	r3, r2
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	f003 0204 	and.w	r2, r3, #4
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d10c      	bne.n	80127fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	331b      	adds	r3, #27
 80127e8:	011b      	lsls	r3, r3, #4
 80127ea:	4413      	add	r3, r2
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	0d5b      	lsrs	r3, r3, #21
 80127f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	601a      	str	r2, [r3, #0]
 80127f8:	e00b      	b.n	8012812 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	68bb      	ldr	r3, [r7, #8]
 8012800:	331b      	adds	r3, #27
 8012802:	011b      	lsls	r3, r3, #4
 8012804:	4413      	add	r3, r2
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	08db      	lsrs	r3, r3, #3
 801280a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	331b      	adds	r3, #27
 801281a:	011b      	lsls	r3, r3, #4
 801281c:	4413      	add	r3, r2
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	f003 0202 	and.w	r2, r3, #2
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	331b      	adds	r3, #27
 8012830:	011b      	lsls	r3, r3, #4
 8012832:	4413      	add	r3, r2
 8012834:	3304      	adds	r3, #4
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	f003 020f 	and.w	r2, r3, #15
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681a      	ldr	r2, [r3, #0]
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	331b      	adds	r3, #27
 8012848:	011b      	lsls	r3, r3, #4
 801284a:	4413      	add	r3, r2
 801284c:	3304      	adds	r3, #4
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	0a1b      	lsrs	r3, r3, #8
 8012852:	b2da      	uxtb	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	331b      	adds	r3, #27
 8012860:	011b      	lsls	r3, r3, #4
 8012862:	4413      	add	r3, r2
 8012864:	3304      	adds	r3, #4
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	0c1b      	lsrs	r3, r3, #16
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	011b      	lsls	r3, r3, #4
 8012878:	4413      	add	r3, r2
 801287a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	b2da      	uxtb	r2, r3
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	011b      	lsls	r3, r3, #4
 801288e:	4413      	add	r3, r2
 8012890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	0a1a      	lsrs	r2, r3, #8
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	3301      	adds	r3, #1
 801289c:	b2d2      	uxtb	r2, r2
 801289e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	011b      	lsls	r3, r3, #4
 80128a8:	4413      	add	r3, r2
 80128aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	0c1a      	lsrs	r2, r3, #16
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	3302      	adds	r3, #2
 80128b6:	b2d2      	uxtb	r2, r2
 80128b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	011b      	lsls	r3, r3, #4
 80128c2:	4413      	add	r3, r2
 80128c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	0e1a      	lsrs	r2, r3, #24
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	3303      	adds	r3, #3
 80128d0:	b2d2      	uxtb	r2, r2
 80128d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	011b      	lsls	r3, r3, #4
 80128dc:	4413      	add	r3, r2
 80128de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	3304      	adds	r3, #4
 80128e8:	b2d2      	uxtb	r2, r2
 80128ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681a      	ldr	r2, [r3, #0]
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	011b      	lsls	r3, r3, #4
 80128f4:	4413      	add	r3, r2
 80128f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	0a1a      	lsrs	r2, r3, #8
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	3305      	adds	r3, #5
 8012902:	b2d2      	uxtb	r2, r2
 8012904:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	011b      	lsls	r3, r3, #4
 801290e:	4413      	add	r3, r2
 8012910:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	0c1a      	lsrs	r2, r3, #16
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	3306      	adds	r3, #6
 801291c:	b2d2      	uxtb	r2, r2
 801291e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	011b      	lsls	r3, r3, #4
 8012928:	4413      	add	r3, r2
 801292a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	0e1a      	lsrs	r2, r3, #24
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	3307      	adds	r3, #7
 8012936:	b2d2      	uxtb	r2, r2
 8012938:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d108      	bne.n	8012952 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	68da      	ldr	r2, [r3, #12]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f042 0220 	orr.w	r2, r2, #32
 801294e:	60da      	str	r2, [r3, #12]
 8012950:	e007      	b.n	8012962 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	691a      	ldr	r2, [r3, #16]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	f042 0220 	orr.w	r2, r2, #32
 8012960:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8012962:	2300      	movs	r3, #0
 8012964:	e006      	b.n	8012974 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8012972:	2301      	movs	r3, #1
  }
}
 8012974:	4618      	mov	r0, r3
 8012976:	371c      	adds	r7, #28
 8012978:	46bd      	mov	sp, r7
 801297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801297e:	4770      	bx	lr

08012980 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012990:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8012992:	7bfb      	ldrb	r3, [r7, #15]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d002      	beq.n	801299e <HAL_CAN_ActivateNotification+0x1e>
 8012998:	7bfb      	ldrb	r3, [r7, #15]
 801299a:	2b02      	cmp	r3, #2
 801299c:	d109      	bne.n	80129b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	6959      	ldr	r1, [r3, #20]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	683a      	ldr	r2, [r7, #0]
 80129aa:	430a      	orrs	r2, r1
 80129ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80129ae:	2300      	movs	r3, #0
 80129b0:	e006      	b.n	80129c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80129be:	2301      	movs	r3, #1
  }
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3714      	adds	r7, #20
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b08a      	sub	sp, #40	; 0x28
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80129d4:	2300      	movs	r3, #0
 80129d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	695b      	ldr	r3, [r3, #20]
 80129de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	691b      	ldr	r3, [r3, #16]
 80129fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8012a08:	6a3b      	ldr	r3, [r7, #32]
 8012a0a:	f003 0301 	and.w	r3, r3, #1
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d07c      	beq.n	8012b0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8012a12:	69bb      	ldr	r3, [r7, #24]
 8012a14:	f003 0301 	and.w	r3, r3, #1
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d023      	beq.n	8012a64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2201      	movs	r2, #1
 8012a22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	f003 0302 	and.w	r3, r3, #2
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d003      	beq.n	8012a36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f983 	bl	8012d3a <HAL_CAN_TxMailbox0CompleteCallback>
 8012a34:	e016      	b.n	8012a64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	f003 0304 	and.w	r3, r3, #4
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d004      	beq.n	8012a4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012a46:	627b      	str	r3, [r7, #36]	; 0x24
 8012a48:	e00c      	b.n	8012a64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	f003 0308 	and.w	r3, r3, #8
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d004      	beq.n	8012a5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8012a5c:	e002      	b.n	8012a64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	f000 f989 	bl	8012d76 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d024      	beq.n	8012ab8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012a76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d003      	beq.n	8012a8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 f963 	bl	8012d4e <HAL_CAN_TxMailbox1CompleteCallback>
 8012a88:	e016      	b.n	8012ab8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d004      	beq.n	8012a9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8012a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8012a9c:	e00c      	b.n	8012ab8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012aae:	627b      	str	r3, [r7, #36]	; 0x24
 8012ab0:	e002      	b.n	8012ab8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f000 f969 	bl	8012d8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d024      	beq.n	8012b0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012aca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8012acc:	69bb      	ldr	r3, [r7, #24]
 8012ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d003      	beq.n	8012ade <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 f943 	bl	8012d62 <HAL_CAN_TxMailbox2CompleteCallback>
 8012adc:	e016      	b.n	8012b0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d004      	beq.n	8012af2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8012ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012aee:	627b      	str	r3, [r7, #36]	; 0x24
 8012af0:	e00c      	b.n	8012b0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d004      	beq.n	8012b06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012b02:	627b      	str	r3, [r7, #36]	; 0x24
 8012b04:	e002      	b.n	8012b0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f949 	bl	8012d9e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8012b0c:	6a3b      	ldr	r3, [r7, #32]
 8012b0e:	f003 0308 	and.w	r3, r3, #8
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00c      	beq.n	8012b30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	f003 0310 	and.w	r3, r3, #16
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d007      	beq.n	8012b30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012b26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2210      	movs	r2, #16
 8012b2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8012b30:	6a3b      	ldr	r3, [r7, #32]
 8012b32:	f003 0304 	and.w	r3, r3, #4
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d00b      	beq.n	8012b52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	f003 0308 	and.w	r3, r3, #8
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d006      	beq.n	8012b52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	2208      	movs	r2, #8
 8012b4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 f930 	bl	8012db2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8012b52:	6a3b      	ldr	r3, [r7, #32]
 8012b54:	f003 0302 	and.w	r3, r3, #2
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d009      	beq.n	8012b70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	f003 0303 	and.w	r3, r3, #3
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d002      	beq.n	8012b70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7f6 fa00 	bl	8008f70 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00c      	beq.n	8012b94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	f003 0310 	and.w	r3, r3, #16
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d007      	beq.n	8012b94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012b8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2210      	movs	r2, #16
 8012b92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8012b94:	6a3b      	ldr	r3, [r7, #32]
 8012b96:	f003 0320 	and.w	r3, r3, #32
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00b      	beq.n	8012bb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	f003 0308 	and.w	r3, r3, #8
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d006      	beq.n	8012bb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2208      	movs	r2, #8
 8012bae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f000 f908 	bl	8012dc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	f003 0310 	and.w	r3, r3, #16
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d009      	beq.n	8012bd4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	691b      	ldr	r3, [r3, #16]
 8012bc6:	f003 0303 	and.w	r3, r3, #3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d002      	beq.n	8012bd4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7f6 fae8 	bl	80091a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d00b      	beq.n	8012bf6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	f003 0310 	and.w	r3, r3, #16
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d006      	beq.n	8012bf6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	2210      	movs	r2, #16
 8012bee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 f8f2 	bl	8012dda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8012bf6:	6a3b      	ldr	r3, [r7, #32]
 8012bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00b      	beq.n	8012c18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	f003 0308 	and.w	r3, r3, #8
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d006      	beq.n	8012c18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2208      	movs	r2, #8
 8012c10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f8eb 	bl	8012dee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8012c18:	6a3b      	ldr	r3, [r7, #32]
 8012c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d07b      	beq.n	8012d1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	f003 0304 	and.w	r3, r3, #4
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d072      	beq.n	8012d12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
 8012c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d008      	beq.n	8012c48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d003      	beq.n	8012c48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8012c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c42:	f043 0301 	orr.w	r3, r3, #1
 8012c46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012c48:	6a3b      	ldr	r3, [r7, #32]
 8012c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d008      	beq.n	8012c64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d003      	beq.n	8012c64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	f043 0302 	orr.w	r3, r3, #2
 8012c62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012c64:	6a3b      	ldr	r3, [r7, #32]
 8012c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d008      	beq.n	8012c80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d003      	beq.n	8012c80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	f043 0304 	orr.w	r3, r3, #4
 8012c7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012c80:	6a3b      	ldr	r3, [r7, #32]
 8012c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d043      	beq.n	8012d12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d03e      	beq.n	8012d12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012c9a:	2b60      	cmp	r3, #96	; 0x60
 8012c9c:	d02b      	beq.n	8012cf6 <HAL_CAN_IRQHandler+0x32a>
 8012c9e:	2b60      	cmp	r3, #96	; 0x60
 8012ca0:	d82e      	bhi.n	8012d00 <HAL_CAN_IRQHandler+0x334>
 8012ca2:	2b50      	cmp	r3, #80	; 0x50
 8012ca4:	d022      	beq.n	8012cec <HAL_CAN_IRQHandler+0x320>
 8012ca6:	2b50      	cmp	r3, #80	; 0x50
 8012ca8:	d82a      	bhi.n	8012d00 <HAL_CAN_IRQHandler+0x334>
 8012caa:	2b40      	cmp	r3, #64	; 0x40
 8012cac:	d019      	beq.n	8012ce2 <HAL_CAN_IRQHandler+0x316>
 8012cae:	2b40      	cmp	r3, #64	; 0x40
 8012cb0:	d826      	bhi.n	8012d00 <HAL_CAN_IRQHandler+0x334>
 8012cb2:	2b30      	cmp	r3, #48	; 0x30
 8012cb4:	d010      	beq.n	8012cd8 <HAL_CAN_IRQHandler+0x30c>
 8012cb6:	2b30      	cmp	r3, #48	; 0x30
 8012cb8:	d822      	bhi.n	8012d00 <HAL_CAN_IRQHandler+0x334>
 8012cba:	2b10      	cmp	r3, #16
 8012cbc:	d002      	beq.n	8012cc4 <HAL_CAN_IRQHandler+0x2f8>
 8012cbe:	2b20      	cmp	r3, #32
 8012cc0:	d005      	beq.n	8012cce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8012cc2:	e01d      	b.n	8012d00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	f043 0308 	orr.w	r3, r3, #8
 8012cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012ccc:	e019      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	f043 0310 	orr.w	r3, r3, #16
 8012cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cd6:	e014      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8012cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cda:	f043 0320 	orr.w	r3, r3, #32
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012ce0:	e00f      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cea:	e00a      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cf4:	e005      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8012cfe:	e000      	b.n	8012d02 <HAL_CAN_IRQHandler+0x336>
            break;
 8012d00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	699a      	ldr	r2, [r3, #24]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8012d10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2204      	movs	r2, #4
 8012d18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d008      	beq.n	8012d32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d26:	431a      	orrs	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f000 f868 	bl	8012e02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8012d32:	bf00      	nop
 8012d34:	3728      	adds	r7, #40	; 0x28
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b083      	sub	sp, #12
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8012d42:	bf00      	nop
 8012d44:	370c      	adds	r7, #12
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr

08012d4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d4e:	b480      	push	{r7}
 8012d50:	b083      	sub	sp, #12
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8012d56:	bf00      	nop
 8012d58:	370c      	adds	r7, #12
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr

08012d62 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8012d62:	b480      	push	{r7}
 8012d64:	b083      	sub	sp, #12
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8012d6a:	bf00      	nop
 8012d6c:	370c      	adds	r7, #12
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d74:	4770      	bx	lr

08012d76 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d76:	b480      	push	{r7}
 8012d78:	b083      	sub	sp, #12
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8012d7e:	bf00      	nop
 8012d80:	370c      	adds	r7, #12
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr

08012d8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d8a:	b480      	push	{r7}
 8012d8c:	b083      	sub	sp, #12
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8012d92:	bf00      	nop
 8012d94:	370c      	adds	r7, #12
 8012d96:	46bd      	mov	sp, r7
 8012d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9c:	4770      	bx	lr

08012d9e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8012d9e:	b480      	push	{r7}
 8012da0:	b083      	sub	sp, #12
 8012da2:	af00      	add	r7, sp, #0
 8012da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8012da6:	bf00      	nop
 8012da8:	370c      	adds	r7, #12
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr

08012db2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8012db2:	b480      	push	{r7}
 8012db4:	b083      	sub	sp, #12
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8012dba:	bf00      	nop
 8012dbc:	370c      	adds	r7, #12
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc4:	4770      	bx	lr

08012dc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8012dc6:	b480      	push	{r7}
 8012dc8:	b083      	sub	sp, #12
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8012dce:	bf00      	nop
 8012dd0:	370c      	adds	r7, #12
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd8:	4770      	bx	lr

08012dda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8012dda:	b480      	push	{r7}
 8012ddc:	b083      	sub	sp, #12
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8012de2:	bf00      	nop
 8012de4:	370c      	adds	r7, #12
 8012de6:	46bd      	mov	sp, r7
 8012de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dec:	4770      	bx	lr

08012dee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8012dee:	b480      	push	{r7}
 8012df0:	b083      	sub	sp, #12
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8012df6:	bf00      	nop
 8012df8:	370c      	adds	r7, #12
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8012e02:	b480      	push	{r7}
 8012e04:	b083      	sub	sp, #12
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8012e0a:	bf00      	nop
 8012e0c:	370c      	adds	r7, #12
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e14:	4770      	bx	lr
	...

08012e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b085      	sub	sp, #20
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	f003 0307 	and.w	r3, r3, #7
 8012e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012e28:	4b0c      	ldr	r3, [pc, #48]	; (8012e5c <__NVIC_SetPriorityGrouping+0x44>)
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012e34:	4013      	ands	r3, r2
 8012e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8012e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012e4a:	4a04      	ldr	r2, [pc, #16]	; (8012e5c <__NVIC_SetPriorityGrouping+0x44>)
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	60d3      	str	r3, [r2, #12]
}
 8012e50:	bf00      	nop
 8012e52:	3714      	adds	r7, #20
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr
 8012e5c:	e000ed00 	.word	0xe000ed00

08012e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012e60:	b480      	push	{r7}
 8012e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012e64:	4b04      	ldr	r3, [pc, #16]	; (8012e78 <__NVIC_GetPriorityGrouping+0x18>)
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	0a1b      	lsrs	r3, r3, #8
 8012e6a:	f003 0307 	and.w	r3, r3, #7
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr
 8012e78:	e000ed00 	.word	0xe000ed00

08012e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b083      	sub	sp, #12
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	4603      	mov	r3, r0
 8012e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	db0b      	blt.n	8012ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	f003 021f 	and.w	r2, r3, #31
 8012e94:	4907      	ldr	r1, [pc, #28]	; (8012eb4 <__NVIC_EnableIRQ+0x38>)
 8012e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e9a:	095b      	lsrs	r3, r3, #5
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8012ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012ea6:	bf00      	nop
 8012ea8:	370c      	adds	r7, #12
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	e000e100 	.word	0xe000e100

08012eb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b083      	sub	sp, #12
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	db12      	blt.n	8012ef0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012eca:	79fb      	ldrb	r3, [r7, #7]
 8012ecc:	f003 021f 	and.w	r2, r3, #31
 8012ed0:	490a      	ldr	r1, [pc, #40]	; (8012efc <__NVIC_DisableIRQ+0x44>)
 8012ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ed6:	095b      	lsrs	r3, r3, #5
 8012ed8:	2001      	movs	r0, #1
 8012eda:	fa00 f202 	lsl.w	r2, r0, r2
 8012ede:	3320      	adds	r3, #32
 8012ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012ee4:	f3bf 8f4f 	dsb	sy
}
 8012ee8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012eea:	f3bf 8f6f 	isb	sy
}
 8012eee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8012ef0:	bf00      	nop
 8012ef2:	370c      	adds	r7, #12
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	e000e100 	.word	0xe000e100

08012f00 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	4603      	mov	r3, r0
 8012f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	db0c      	blt.n	8012f2c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012f12:	79fb      	ldrb	r3, [r7, #7]
 8012f14:	f003 021f 	and.w	r2, r3, #31
 8012f18:	4907      	ldr	r1, [pc, #28]	; (8012f38 <__NVIC_ClearPendingIRQ+0x38>)
 8012f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f1e:	095b      	lsrs	r3, r3, #5
 8012f20:	2001      	movs	r0, #1
 8012f22:	fa00 f202 	lsl.w	r2, r0, r2
 8012f26:	3360      	adds	r3, #96	; 0x60
 8012f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012f2c:	bf00      	nop
 8012f2e:	370c      	adds	r7, #12
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr
 8012f38:	e000e100 	.word	0xe000e100

08012f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012f3c:	b480      	push	{r7}
 8012f3e:	b083      	sub	sp, #12
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	4603      	mov	r3, r0
 8012f44:	6039      	str	r1, [r7, #0]
 8012f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	db0a      	blt.n	8012f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	b2da      	uxtb	r2, r3
 8012f54:	490c      	ldr	r1, [pc, #48]	; (8012f88 <__NVIC_SetPriority+0x4c>)
 8012f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f5a:	0112      	lsls	r2, r2, #4
 8012f5c:	b2d2      	uxtb	r2, r2
 8012f5e:	440b      	add	r3, r1
 8012f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012f64:	e00a      	b.n	8012f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	b2da      	uxtb	r2, r3
 8012f6a:	4908      	ldr	r1, [pc, #32]	; (8012f8c <__NVIC_SetPriority+0x50>)
 8012f6c:	79fb      	ldrb	r3, [r7, #7]
 8012f6e:	f003 030f 	and.w	r3, r3, #15
 8012f72:	3b04      	subs	r3, #4
 8012f74:	0112      	lsls	r2, r2, #4
 8012f76:	b2d2      	uxtb	r2, r2
 8012f78:	440b      	add	r3, r1
 8012f7a:	761a      	strb	r2, [r3, #24]
}
 8012f7c:	bf00      	nop
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr
 8012f88:	e000e100 	.word	0xe000e100
 8012f8c:	e000ed00 	.word	0xe000ed00

08012f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b089      	sub	sp, #36	; 0x24
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	60f8      	str	r0, [r7, #12]
 8012f98:	60b9      	str	r1, [r7, #8]
 8012f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f003 0307 	and.w	r3, r3, #7
 8012fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	f1c3 0307 	rsb	r3, r3, #7
 8012faa:	2b04      	cmp	r3, #4
 8012fac:	bf28      	it	cs
 8012fae:	2304      	movcs	r3, #4
 8012fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	2b06      	cmp	r3, #6
 8012fb8:	d902      	bls.n	8012fc0 <NVIC_EncodePriority+0x30>
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	3b03      	subs	r3, #3
 8012fbe:	e000      	b.n	8012fc2 <NVIC_EncodePriority+0x32>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fc8:	69bb      	ldr	r3, [r7, #24]
 8012fca:	fa02 f303 	lsl.w	r3, r2, r3
 8012fce:	43da      	mvns	r2, r3
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	401a      	ands	r2, r3
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	fa01 f303 	lsl.w	r3, r1, r3
 8012fe2:	43d9      	mvns	r1, r3
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012fe8:	4313      	orrs	r3, r2
         );
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3724      	adds	r7, #36	; 0x24
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr

08012ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012ff6:	b580      	push	{r7, lr}
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	af00      	add	r7, sp, #0
 8012ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7ff ff0a 	bl	8012e18 <__NVIC_SetPriorityGrouping>
}
 8013004:	bf00      	nop
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801300c:	b580      	push	{r7, lr}
 801300e:	b086      	sub	sp, #24
 8013010:	af00      	add	r7, sp, #0
 8013012:	4603      	mov	r3, r0
 8013014:	60b9      	str	r1, [r7, #8]
 8013016:	607a      	str	r2, [r7, #4]
 8013018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801301a:	2300      	movs	r3, #0
 801301c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801301e:	f7ff ff1f 	bl	8012e60 <__NVIC_GetPriorityGrouping>
 8013022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	68b9      	ldr	r1, [r7, #8]
 8013028:	6978      	ldr	r0, [r7, #20]
 801302a:	f7ff ffb1 	bl	8012f90 <NVIC_EncodePriority>
 801302e:	4602      	mov	r2, r0
 8013030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013034:	4611      	mov	r1, r2
 8013036:	4618      	mov	r0, r3
 8013038:	f7ff ff80 	bl	8012f3c <__NVIC_SetPriority>
}
 801303c:	bf00      	nop
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	4603      	mov	r3, r0
 801304c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff ff12 	bl	8012e7c <__NVIC_EnableIRQ>
}
 8013058:	bf00      	nop
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b082      	sub	sp, #8
 8013064:	af00      	add	r7, sp, #0
 8013066:	4603      	mov	r3, r0
 8013068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801306e:	4618      	mov	r0, r3
 8013070:	f7ff ff22 	bl	8012eb8 <__NVIC_DisableIRQ>
}
 8013074:	bf00      	nop
 8013076:	3708      	adds	r7, #8
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b082      	sub	sp, #8
 8013080:	af00      	add	r7, sp, #0
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8013086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801308a:	4618      	mov	r0, r3
 801308c:	f7ff ff38 	bl	8012f00 <__NVIC_ClearPendingIRQ>
}
 8013090:	bf00      	nop
 8013092:	3708      	adds	r7, #8
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b086      	sub	sp, #24
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80130a0:	2300      	movs	r3, #0
 80130a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80130a4:	f7fe fc06 	bl	80118b4 <HAL_GetTick>
 80130a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e099      	b.n	80131e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2200      	movs	r2, #0
 80130b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2202      	movs	r2, #2
 80130c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f022 0201 	bic.w	r2, r2, #1
 80130d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80130d4:	e00f      	b.n	80130f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80130d6:	f7fe fbed 	bl	80118b4 <HAL_GetTick>
 80130da:	4602      	mov	r2, r0
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	1ad3      	subs	r3, r2, r3
 80130e0:	2b05      	cmp	r3, #5
 80130e2:	d908      	bls.n	80130f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2220      	movs	r2, #32
 80130e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2203      	movs	r2, #3
 80130ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80130f2:	2303      	movs	r3, #3
 80130f4:	e078      	b.n	80131e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	f003 0301 	and.w	r3, r3, #1
 8013100:	2b00      	cmp	r3, #0
 8013102:	d1e8      	bne.n	80130d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801310c:	697a      	ldr	r2, [r7, #20]
 801310e:	4b38      	ldr	r3, [pc, #224]	; (80131f0 <HAL_DMA_Init+0x158>)
 8013110:	4013      	ands	r3, r2
 8013112:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	685a      	ldr	r2, [r3, #4]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013122:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	691b      	ldr	r3, [r3, #16]
 8013128:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801312e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	699b      	ldr	r3, [r3, #24]
 8013134:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801313a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a1b      	ldr	r3, [r3, #32]
 8013140:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8013142:	697a      	ldr	r2, [r7, #20]
 8013144:	4313      	orrs	r3, r2
 8013146:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801314c:	2b04      	cmp	r3, #4
 801314e:	d107      	bne.n	8013160 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013158:	4313      	orrs	r3, r2
 801315a:	697a      	ldr	r2, [r7, #20]
 801315c:	4313      	orrs	r3, r2
 801315e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	697a      	ldr	r2, [r7, #20]
 8013166:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	695b      	ldr	r3, [r3, #20]
 801316e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	f023 0307 	bic.w	r3, r3, #7
 8013176:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317c:	697a      	ldr	r2, [r7, #20]
 801317e:	4313      	orrs	r3, r2
 8013180:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013186:	2b04      	cmp	r3, #4
 8013188:	d117      	bne.n	80131ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801318e:	697a      	ldr	r2, [r7, #20]
 8013190:	4313      	orrs	r3, r2
 8013192:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00e      	beq.n	80131ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f000 fb09 	bl	80137b4 <DMA_CheckFifoParam>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d008      	beq.n	80131ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	2240      	movs	r2, #64	; 0x40
 80131ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2201      	movs	r2, #1
 80131b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80131b6:	2301      	movs	r3, #1
 80131b8:	e016      	b.n	80131e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	697a      	ldr	r2, [r7, #20]
 80131c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f000 fac0 	bl	8013748 <DMA_CalcBaseAndBitshift>
 80131c8:	4603      	mov	r3, r0
 80131ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131d0:	223f      	movs	r2, #63	; 0x3f
 80131d2:	409a      	lsls	r2, r3
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2201      	movs	r2, #1
 80131e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80131e6:	2300      	movs	r3, #0
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3718      	adds	r7, #24
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}
 80131f0:	f010803f 	.word	0xf010803f

080131f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b084      	sub	sp, #16
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d101      	bne.n	8013206 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8013202:	2301      	movs	r3, #1
 8013204:	e050      	b.n	80132a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b02      	cmp	r3, #2
 8013210:	d101      	bne.n	8013216 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8013212:	2302      	movs	r3, #2
 8013214:	e048      	b.n	80132a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	f022 0201 	bic.w	r2, r2, #1
 8013224:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2200      	movs	r2, #0
 801322c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	2200      	movs	r2, #0
 8013234:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	2200      	movs	r2, #0
 801323c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	2200      	movs	r2, #0
 8013244:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2200      	movs	r2, #0
 801324c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2221      	movs	r2, #33	; 0x21
 8013254:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 fa76 	bl	8013748 <DMA_CalcBaseAndBitshift>
 801325c:	4603      	mov	r3, r0
 801325e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2200      	movs	r2, #0
 8013264:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2200      	movs	r2, #0
 801326a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2200      	movs	r2, #0
 8013276:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2200      	movs	r2, #0
 801327c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013288:	223f      	movs	r2, #63	; 0x3f
 801328a:	409a      	lsls	r2, r3
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2200      	movs	r2, #0
 801329a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80132a6:	2300      	movs	r3, #0
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b086      	sub	sp, #24
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
 80132bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80132be:	2300      	movs	r3, #0
 80132c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132ce:	2b01      	cmp	r3, #1
 80132d0:	d101      	bne.n	80132d6 <HAL_DMA_Start_IT+0x26>
 80132d2:	2302      	movs	r3, #2
 80132d4:	e040      	b.n	8013358 <HAL_DMA_Start_IT+0xa8>
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2201      	movs	r2, #1
 80132da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  

  if(HAL_DMA_STATE_READY == hdma->State)
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d12f      	bne.n	801334a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	2202      	movs	r2, #2
 80132ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2200      	movs	r2, #0
 80132f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	687a      	ldr	r2, [r7, #4]
 80132fc:	68b9      	ldr	r1, [r7, #8]
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f000 f9f4 	bl	80136ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013308:	223f      	movs	r2, #63	; 0x3f
 801330a:	409a      	lsls	r2, r3
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	f042 0216 	orr.w	r2, r2, #22
 801331e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013324:	2b00      	cmp	r3, #0
 8013326:	d007      	beq.n	8013338 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	681a      	ldr	r2, [r3, #0]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f042 0208 	orr.w	r2, r2, #8
 8013336:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	681a      	ldr	r2, [r3, #0]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f042 0201 	orr.w	r2, r2, #1
 8013346:	601a      	str	r2, [r3, #0]
 8013348:	e005      	b.n	8013356 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2200      	movs	r2, #0
 801334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_BUSY;
 8013352:	2302      	movs	r3, #2
 8013354:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8013356:	7dfb      	ldrb	r3, [r7, #23]
}
 8013358:	4618      	mov	r0, r3
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013360:	b480      	push	{r7}
 8013362:	b083      	sub	sp, #12
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801336e:	b2db      	uxtb	r3, r3
 8013370:	2b02      	cmp	r3, #2
 8013372:	d004      	beq.n	801337e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2280      	movs	r2, #128	; 0x80
 8013378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801337a:	2301      	movs	r3, #1
 801337c:	e00c      	b.n	8013398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2205      	movs	r2, #5
 8013382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f022 0201 	bic.w	r2, r2, #1
 8013394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80133ac:	2300      	movs	r3, #0
 80133ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80133b0:	4b92      	ldr	r3, [pc, #584]	; (80135fc <HAL_DMA_IRQHandler+0x258>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4a92      	ldr	r2, [pc, #584]	; (8013600 <HAL_DMA_IRQHandler+0x25c>)
 80133b6:	fba2 2303 	umull	r2, r3, r2, r3
 80133ba:	0a9b      	lsrs	r3, r3, #10
 80133bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80133ce:	2208      	movs	r2, #8
 80133d0:	409a      	lsls	r2, r3
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	4013      	ands	r3, r2
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d01a      	beq.n	8013410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f003 0304 	and.w	r3, r3, #4
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d013      	beq.n	8013410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f022 0204 	bic.w	r2, r2, #4
 80133f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80133fc:	2208      	movs	r2, #8
 80133fe:	409a      	lsls	r2, r3
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013408:	f043 0201 	orr.w	r2, r3, #1
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013414:	2201      	movs	r2, #1
 8013416:	409a      	lsls	r2, r3
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	4013      	ands	r3, r2
 801341c:	2b00      	cmp	r3, #0
 801341e:	d012      	beq.n	8013446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	695b      	ldr	r3, [r3, #20]
 8013426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00b      	beq.n	8013446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013432:	2201      	movs	r2, #1
 8013434:	409a      	lsls	r2, r3
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801343e:	f043 0202 	orr.w	r2, r3, #2
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801344a:	2204      	movs	r2, #4
 801344c:	409a      	lsls	r2, r3
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	4013      	ands	r3, r2
 8013452:	2b00      	cmp	r3, #0
 8013454:	d012      	beq.n	801347c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f003 0302 	and.w	r3, r3, #2
 8013460:	2b00      	cmp	r3, #0
 8013462:	d00b      	beq.n	801347c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013468:	2204      	movs	r2, #4
 801346a:	409a      	lsls	r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013474:	f043 0204 	orr.w	r2, r3, #4
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013480:	2210      	movs	r2, #16
 8013482:	409a      	lsls	r2, r3
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	4013      	ands	r3, r2
 8013488:	2b00      	cmp	r3, #0
 801348a:	d043      	beq.n	8013514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	f003 0308 	and.w	r3, r3, #8
 8013496:	2b00      	cmp	r3, #0
 8013498:	d03c      	beq.n	8013514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801349e:	2210      	movs	r2, #16
 80134a0:	409a      	lsls	r2, r3
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d018      	beq.n	80134e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d108      	bne.n	80134d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d024      	beq.n	8013514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	4798      	blx	r3
 80134d2:	e01f      	b.n	8013514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d01b      	beq.n	8013514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	4798      	blx	r3
 80134e4:	e016      	b.n	8013514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d107      	bne.n	8013504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	681a      	ldr	r2, [r3, #0]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	f022 0208 	bic.w	r2, r2, #8
 8013502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013508:	2b00      	cmp	r3, #0
 801350a:	d003      	beq.n	8013514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013518:	2220      	movs	r2, #32
 801351a:	409a      	lsls	r2, r3
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	4013      	ands	r3, r2
 8013520:	2b00      	cmp	r3, #0
 8013522:	f000 808e 	beq.w	8013642 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f003 0310 	and.w	r3, r3, #16
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 8086 	beq.w	8013642 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801353a:	2220      	movs	r2, #32
 801353c:	409a      	lsls	r2, r3
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013548:	b2db      	uxtb	r3, r3
 801354a:	2b05      	cmp	r3, #5
 801354c:	d136      	bne.n	80135bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	f022 0216 	bic.w	r2, r2, #22
 801355c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	695a      	ldr	r2, [r3, #20]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801356c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013572:	2b00      	cmp	r3, #0
 8013574:	d103      	bne.n	801357e <HAL_DMA_IRQHandler+0x1da>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801357a:	2b00      	cmp	r3, #0
 801357c:	d007      	beq.n	801358e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	681a      	ldr	r2, [r3, #0]
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f022 0208 	bic.w	r2, r2, #8
 801358c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013592:	223f      	movs	r2, #63	; 0x3f
 8013594:	409a      	lsls	r2, r3
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	2200      	movs	r2, #0
 801359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2201      	movs	r2, #1
 80135a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d07d      	beq.n	80136ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135b6:	6878      	ldr	r0, [r7, #4]
 80135b8:	4798      	blx	r3
        }
        return;
 80135ba:	e078      	b.n	80136ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d01c      	beq.n	8013604 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d108      	bne.n	80135ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d030      	beq.n	8013642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	4798      	blx	r3
 80135e8:	e02b      	b.n	8013642 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d027      	beq.n	8013642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135f6:	6878      	ldr	r0, [r7, #4]
 80135f8:	4798      	blx	r3
 80135fa:	e022      	b.n	8013642 <HAL_DMA_IRQHandler+0x29e>
 80135fc:	20000538 	.word	0x20000538
 8013600:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801360e:	2b00      	cmp	r3, #0
 8013610:	d10f      	bne.n	8013632 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	681a      	ldr	r2, [r3, #0]
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	f022 0210 	bic.w	r2, r2, #16
 8013620:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	2200      	movs	r2, #0
 8013626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2201      	movs	r2, #1
 801362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013636:	2b00      	cmp	r3, #0
 8013638:	d003      	beq.n	8013642 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013646:	2b00      	cmp	r3, #0
 8013648:	d032      	beq.n	80136b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801364e:	f003 0301 	and.w	r3, r3, #1
 8013652:	2b00      	cmp	r3, #0
 8013654:	d022      	beq.n	801369c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2205      	movs	r2, #5
 801365a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f022 0201 	bic.w	r2, r2, #1
 801366c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	3301      	adds	r3, #1
 8013672:	60bb      	str	r3, [r7, #8]
 8013674:	697a      	ldr	r2, [r7, #20]
 8013676:	429a      	cmp	r2, r3
 8013678:	d307      	bcc.n	801368a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f003 0301 	and.w	r3, r3, #1
 8013684:	2b00      	cmp	r3, #0
 8013686:	d1f2      	bne.n	801366e <HAL_DMA_IRQHandler+0x2ca>
 8013688:	e000      	b.n	801368c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801368a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2201      	movs	r2, #1
 8013698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d005      	beq.n	80136b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	4798      	blx	r3
 80136ac:	e000      	b.n	80136b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80136ae:	bf00      	nop
    }
  }
}
 80136b0:	3718      	adds	r7, #24
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop

080136b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80136b8:	b480      	push	{r7}
 80136ba:	b083      	sub	sp, #12
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80136c6:	b2db      	uxtb	r3, r3
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b085      	sub	sp, #20
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	683a      	ldr	r2, [r7, #0]
 8013710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	689b      	ldr	r3, [r3, #8]
 8013716:	2b40      	cmp	r3, #64	; 0x40
 8013718:	d108      	bne.n	801372c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	68ba      	ldr	r2, [r7, #8]
 8013728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801372a:	e007      	b.n	801373c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	68ba      	ldr	r2, [r7, #8]
 8013732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	60da      	str	r2, [r3, #12]
}
 801373c:	bf00      	nop
 801373e:	3714      	adds	r7, #20
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr

08013748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8013748:	b480      	push	{r7}
 801374a:	b085      	sub	sp, #20
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	b2db      	uxtb	r3, r3
 8013756:	3b10      	subs	r3, #16
 8013758:	4a14      	ldr	r2, [pc, #80]	; (80137ac <DMA_CalcBaseAndBitshift+0x64>)
 801375a:	fba2 2303 	umull	r2, r3, r2, r3
 801375e:	091b      	lsrs	r3, r3, #4
 8013760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8013762:	4a13      	ldr	r2, [pc, #76]	; (80137b0 <DMA_CalcBaseAndBitshift+0x68>)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	4413      	add	r3, r2
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	461a      	mov	r2, r3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2b03      	cmp	r3, #3
 8013774:	d909      	bls.n	801378a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801377e:	f023 0303 	bic.w	r3, r3, #3
 8013782:	1d1a      	adds	r2, r3, #4
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	659a      	str	r2, [r3, #88]	; 0x58
 8013788:	e007      	b.n	801379a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8013792:	f023 0303 	bic.w	r3, r3, #3
 8013796:	687a      	ldr	r2, [r7, #4]
 8013798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3714      	adds	r7, #20
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	aaaaaaab 	.word	0xaaaaaaab
 80137b0:	0802293c 	.word	0x0802293c

080137b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b085      	sub	sp, #20
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80137bc:	2300      	movs	r3, #0
 80137be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	699b      	ldr	r3, [r3, #24]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d11f      	bne.n	801380e <DMA_CheckFifoParam+0x5a>
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d856      	bhi.n	8013882 <DMA_CheckFifoParam+0xce>
 80137d4:	a201      	add	r2, pc, #4	; (adr r2, 80137dc <DMA_CheckFifoParam+0x28>)
 80137d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137da:	bf00      	nop
 80137dc:	080137ed 	.word	0x080137ed
 80137e0:	080137ff 	.word	0x080137ff
 80137e4:	080137ed 	.word	0x080137ed
 80137e8:	08013883 	.word	0x08013883
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d046      	beq.n	8013886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80137f8:	2301      	movs	r3, #1
 80137fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80137fc:	e043      	b.n	8013886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013806:	d140      	bne.n	801388a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8013808:	2301      	movs	r3, #1
 801380a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801380c:	e03d      	b.n	801388a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	699b      	ldr	r3, [r3, #24]
 8013812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013816:	d121      	bne.n	801385c <DMA_CheckFifoParam+0xa8>
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	2b03      	cmp	r3, #3
 801381c:	d837      	bhi.n	801388e <DMA_CheckFifoParam+0xda>
 801381e:	a201      	add	r2, pc, #4	; (adr r2, 8013824 <DMA_CheckFifoParam+0x70>)
 8013820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013824:	08013835 	.word	0x08013835
 8013828:	0801383b 	.word	0x0801383b
 801382c:	08013835 	.word	0x08013835
 8013830:	0801384d 	.word	0x0801384d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8013834:	2301      	movs	r3, #1
 8013836:	73fb      	strb	r3, [r7, #15]
      break;
 8013838:	e030      	b.n	801389c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013842:	2b00      	cmp	r3, #0
 8013844:	d025      	beq.n	8013892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8013846:	2301      	movs	r3, #1
 8013848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801384a:	e022      	b.n	8013892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8013854:	d11f      	bne.n	8013896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8013856:	2301      	movs	r3, #1
 8013858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801385a:	e01c      	b.n	8013896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	2b02      	cmp	r3, #2
 8013860:	d903      	bls.n	801386a <DMA_CheckFifoParam+0xb6>
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	2b03      	cmp	r3, #3
 8013866:	d003      	beq.n	8013870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8013868:	e018      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801386a:	2301      	movs	r3, #1
 801386c:	73fb      	strb	r3, [r7, #15]
      break;
 801386e:	e015      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00e      	beq.n	801389a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801387c:	2301      	movs	r3, #1
 801387e:	73fb      	strb	r3, [r7, #15]
      break;
 8013880:	e00b      	b.n	801389a <DMA_CheckFifoParam+0xe6>
      break;
 8013882:	bf00      	nop
 8013884:	e00a      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;
 8013886:	bf00      	nop
 8013888:	e008      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;
 801388a:	bf00      	nop
 801388c:	e006      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;
 801388e:	bf00      	nop
 8013890:	e004      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;
 8013892:	bf00      	nop
 8013894:	e002      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;   
 8013896:	bf00      	nop
 8013898:	e000      	b.n	801389c <DMA_CheckFifoParam+0xe8>
      break;
 801389a:	bf00      	nop
    }
  } 
  
  return status; 
 801389c:	7bfb      	ldrb	r3, [r7, #15]
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop

080138ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b086      	sub	sp, #24
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80138ba:	2301      	movs	r3, #1
 80138bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80138be:	4b23      	ldr	r3, [pc, #140]	; (801394c <HAL_FLASH_Program+0xa0>)
 80138c0:	7e1b      	ldrb	r3, [r3, #24]
 80138c2:	2b01      	cmp	r3, #1
 80138c4:	d101      	bne.n	80138ca <HAL_FLASH_Program+0x1e>
 80138c6:	2302      	movs	r3, #2
 80138c8:	e03b      	b.n	8013942 <HAL_FLASH_Program+0x96>
 80138ca:	4b20      	ldr	r3, [pc, #128]	; (801394c <HAL_FLASH_Program+0xa0>)
 80138cc:	2201      	movs	r2, #1
 80138ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80138d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80138d4:	f000 f87c 	bl	80139d0 <FLASH_WaitForLastOperation>
 80138d8:	4603      	mov	r3, r0
 80138da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80138dc:	7dfb      	ldrb	r3, [r7, #23]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d12b      	bne.n	801393a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d105      	bne.n	80138f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80138e8:	783b      	ldrb	r3, [r7, #0]
 80138ea:	4619      	mov	r1, r3
 80138ec:	68b8      	ldr	r0, [r7, #8]
 80138ee:	f000 f927 	bl	8013b40 <FLASH_Program_Byte>
 80138f2:	e016      	b.n	8013922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b01      	cmp	r3, #1
 80138f8:	d105      	bne.n	8013906 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80138fa:	883b      	ldrh	r3, [r7, #0]
 80138fc:	4619      	mov	r1, r3
 80138fe:	68b8      	ldr	r0, [r7, #8]
 8013900:	f000 f8fa 	bl	8013af8 <FLASH_Program_HalfWord>
 8013904:	e00d      	b.n	8013922 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2b02      	cmp	r3, #2
 801390a:	d105      	bne.n	8013918 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	4619      	mov	r1, r3
 8013910:	68b8      	ldr	r0, [r7, #8]
 8013912:	f000 f8cf 	bl	8013ab4 <FLASH_Program_Word>
 8013916:	e004      	b.n	8013922 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8013918:	e9d7 2300 	ldrd	r2, r3, [r7]
 801391c:	68b8      	ldr	r0, [r7, #8]
 801391e:	f000 f897 	bl	8013a50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013922:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013926:	f000 f853 	bl	80139d0 <FLASH_WaitForLastOperation>
 801392a:	4603      	mov	r3, r0
 801392c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801392e:	4b08      	ldr	r3, [pc, #32]	; (8013950 <HAL_FLASH_Program+0xa4>)
 8013930:	691b      	ldr	r3, [r3, #16]
 8013932:	4a07      	ldr	r2, [pc, #28]	; (8013950 <HAL_FLASH_Program+0xa4>)
 8013934:	f023 0301 	bic.w	r3, r3, #1
 8013938:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801393a:	4b04      	ldr	r3, [pc, #16]	; (801394c <HAL_FLASH_Program+0xa0>)
 801393c:	2200      	movs	r2, #0
 801393e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8013940:	7dfb      	ldrb	r3, [r7, #23]
}
 8013942:	4618      	mov	r0, r3
 8013944:	3718      	adds	r7, #24
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	2000a774 	.word	0x2000a774
 8013950:	40023c00 	.word	0x40023c00

08013954 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013954:	b480      	push	{r7}
 8013956:	b083      	sub	sp, #12
 8013958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801395a:	2300      	movs	r3, #0
 801395c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 801395e:	4b0b      	ldr	r3, [pc, #44]	; (801398c <HAL_FLASH_Unlock+0x38>)
 8013960:	691b      	ldr	r3, [r3, #16]
 8013962:	2b00      	cmp	r3, #0
 8013964:	da0b      	bge.n	801397e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013966:	4b09      	ldr	r3, [pc, #36]	; (801398c <HAL_FLASH_Unlock+0x38>)
 8013968:	4a09      	ldr	r2, [pc, #36]	; (8013990 <HAL_FLASH_Unlock+0x3c>)
 801396a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801396c:	4b07      	ldr	r3, [pc, #28]	; (801398c <HAL_FLASH_Unlock+0x38>)
 801396e:	4a09      	ldr	r2, [pc, #36]	; (8013994 <HAL_FLASH_Unlock+0x40>)
 8013970:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8013972:	4b06      	ldr	r3, [pc, #24]	; (801398c <HAL_FLASH_Unlock+0x38>)
 8013974:	691b      	ldr	r3, [r3, #16]
 8013976:	2b00      	cmp	r3, #0
 8013978:	da01      	bge.n	801397e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801397a:	2301      	movs	r3, #1
 801397c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801397e:	79fb      	ldrb	r3, [r7, #7]
}
 8013980:	4618      	mov	r0, r3
 8013982:	370c      	adds	r7, #12
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	40023c00 	.word	0x40023c00
 8013990:	45670123 	.word	0x45670123
 8013994:	cdef89ab 	.word	0xcdef89ab

08013998 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8013998:	b480      	push	{r7}
 801399a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 801399c:	4b05      	ldr	r3, [pc, #20]	; (80139b4 <HAL_FLASH_Lock+0x1c>)
 801399e:	691b      	ldr	r3, [r3, #16]
 80139a0:	4a04      	ldr	r2, [pc, #16]	; (80139b4 <HAL_FLASH_Lock+0x1c>)
 80139a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80139a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	46bd      	mov	sp, r7
 80139ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b2:	4770      	bx	lr
 80139b4:	40023c00 	.word	0x40023c00

080139b8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80139b8:	b480      	push	{r7}
 80139ba:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80139bc:	4b03      	ldr	r3, [pc, #12]	; (80139cc <HAL_FLASH_GetError+0x14>)
 80139be:	69db      	ldr	r3, [r3, #28]
}  
 80139c0:	4618      	mov	r0, r3
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	2000a774 	.word	0x2000a774

080139d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b084      	sub	sp, #16
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80139d8:	2300      	movs	r3, #0
 80139da:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80139dc:	4b1a      	ldr	r3, [pc, #104]	; (8013a48 <FLASH_WaitForLastOperation+0x78>)
 80139de:	2200      	movs	r2, #0
 80139e0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80139e2:	f7fd ff67 	bl	80118b4 <HAL_GetTick>
 80139e6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80139e8:	e010      	b.n	8013a0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139f0:	d00c      	beq.n	8013a0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d007      	beq.n	8013a08 <FLASH_WaitForLastOperation+0x38>
 80139f8:	f7fd ff5c 	bl	80118b4 <HAL_GetTick>
 80139fc:	4602      	mov	r2, r0
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d201      	bcs.n	8013a0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8013a08:	2303      	movs	r3, #3
 8013a0a:	e019      	b.n	8013a40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8013a0c:	4b0f      	ldr	r3, [pc, #60]	; (8013a4c <FLASH_WaitForLastOperation+0x7c>)
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d1e8      	bne.n	80139ea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8013a18:	4b0c      	ldr	r3, [pc, #48]	; (8013a4c <FLASH_WaitForLastOperation+0x7c>)
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	f003 0301 	and.w	r3, r3, #1
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d002      	beq.n	8013a2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013a24:	4b09      	ldr	r3, [pc, #36]	; (8013a4c <FLASH_WaitForLastOperation+0x7c>)
 8013a26:	2201      	movs	r2, #1
 8013a28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8013a2a:	4b08      	ldr	r3, [pc, #32]	; (8013a4c <FLASH_WaitForLastOperation+0x7c>)
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d003      	beq.n	8013a3e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8013a36:	f000 f8a5 	bl	8013b84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	e000      	b.n	8013a40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8013a3e:	2300      	movs	r3, #0
  
}  
 8013a40:	4618      	mov	r0, r3
 8013a42:	3710      	adds	r7, #16
 8013a44:	46bd      	mov	sp, r7
 8013a46:	bd80      	pop	{r7, pc}
 8013a48:	2000a774 	.word	0x2000a774
 8013a4c:	40023c00 	.word	0x40023c00

08013a50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013a5c:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	4a13      	ldr	r2, [pc, #76]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013a66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8013a68:	4b11      	ldr	r3, [pc, #68]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a6a:	691b      	ldr	r3, [r3, #16]
 8013a6c:	4a10      	ldr	r2, [pc, #64]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8013a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013a74:	4b0e      	ldr	r3, [pc, #56]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	4a0d      	ldr	r2, [pc, #52]	; (8013ab0 <FLASH_Program_DoubleWord+0x60>)
 8013a7a:	f043 0301 	orr.w	r3, r3, #1
 8013a7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8013a86:	f3bf 8f6f 	isb	sy
}
 8013a8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8013a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013a90:	f04f 0200 	mov.w	r2, #0
 8013a94:	f04f 0300 	mov.w	r3, #0
 8013a98:	000a      	movs	r2, r1
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	68f9      	ldr	r1, [r7, #12]
 8013a9e:	3104      	adds	r1, #4
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	600b      	str	r3, [r1, #0]
}
 8013aa4:	bf00      	nop
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aae:	4770      	bx	lr
 8013ab0:	40023c00 	.word	0x40023c00

08013ab4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	b083      	sub	sp, #12
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
 8013abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013abe:	4b0d      	ldr	r3, [pc, #52]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	4a0c      	ldr	r2, [pc, #48]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ac8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8013aca:	4b0a      	ldr	r3, [pc, #40]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	4a09      	ldr	r2, [pc, #36]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013ad4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013ad6:	4b07      	ldr	r3, [pc, #28]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013ad8:	691b      	ldr	r3, [r3, #16]
 8013ada:	4a06      	ldr	r2, [pc, #24]	; (8013af4 <FLASH_Program_Word+0x40>)
 8013adc:	f043 0301 	orr.w	r3, r3, #1
 8013ae0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	683a      	ldr	r2, [r7, #0]
 8013ae6:	601a      	str	r2, [r3, #0]
}
 8013ae8:	bf00      	nop
 8013aea:	370c      	adds	r7, #12
 8013aec:	46bd      	mov	sp, r7
 8013aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af2:	4770      	bx	lr
 8013af4:	40023c00 	.word	0x40023c00

08013af8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
 8013b00:	460b      	mov	r3, r1
 8013b02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013b04:	4b0d      	ldr	r3, [pc, #52]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b06:	691b      	ldr	r3, [r3, #16]
 8013b08:	4a0c      	ldr	r2, [pc, #48]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8013b10:	4b0a      	ldr	r3, [pc, #40]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b12:	691b      	ldr	r3, [r3, #16]
 8013b14:	4a09      	ldr	r2, [pc, #36]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013b1c:	4b07      	ldr	r3, [pc, #28]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b1e:	691b      	ldr	r3, [r3, #16]
 8013b20:	4a06      	ldr	r2, [pc, #24]	; (8013b3c <FLASH_Program_HalfWord+0x44>)
 8013b22:	f043 0301 	orr.w	r3, r3, #1
 8013b26:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	887a      	ldrh	r2, [r7, #2]
 8013b2c:	801a      	strh	r2, [r3, #0]
}
 8013b2e:	bf00      	nop
 8013b30:	370c      	adds	r7, #12
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop
 8013b3c:	40023c00 	.word	0x40023c00

08013b40 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b083      	sub	sp, #12
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013b4c:	4b0c      	ldr	r3, [pc, #48]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b4e:	691b      	ldr	r3, [r3, #16]
 8013b50:	4a0b      	ldr	r2, [pc, #44]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013b56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8013b58:	4b09      	ldr	r3, [pc, #36]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b5a:	4a09      	ldr	r2, [pc, #36]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b5c:	691b      	ldr	r3, [r3, #16]
 8013b5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8013b60:	4b07      	ldr	r3, [pc, #28]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b62:	691b      	ldr	r3, [r3, #16]
 8013b64:	4a06      	ldr	r2, [pc, #24]	; (8013b80 <FLASH_Program_Byte+0x40>)
 8013b66:	f043 0301 	orr.w	r3, r3, #1
 8013b6a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	78fa      	ldrb	r2, [r7, #3]
 8013b70:	701a      	strb	r2, [r3, #0]
}
 8013b72:	bf00      	nop
 8013b74:	370c      	adds	r7, #12
 8013b76:	46bd      	mov	sp, r7
 8013b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7c:	4770      	bx	lr
 8013b7e:	bf00      	nop
 8013b80:	40023c00 	.word	0x40023c00

08013b84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8013b84:	b480      	push	{r7}
 8013b86:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8013b88:	4b27      	ldr	r3, [pc, #156]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	f003 0310 	and.w	r3, r3, #16
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d008      	beq.n	8013ba6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8013b94:	4b25      	ldr	r3, [pc, #148]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013b96:	69db      	ldr	r3, [r3, #28]
 8013b98:	f043 0310 	orr.w	r3, r3, #16
 8013b9c:	4a23      	ldr	r2, [pc, #140]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013b9e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8013ba0:	4b21      	ldr	r3, [pc, #132]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013ba2:	2210      	movs	r2, #16
 8013ba4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8013ba6:	4b20      	ldr	r3, [pc, #128]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	f003 0320 	and.w	r3, r3, #32
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d008      	beq.n	8013bc4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8013bb2:	4b1e      	ldr	r3, [pc, #120]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bb4:	69db      	ldr	r3, [r3, #28]
 8013bb6:	f043 0308 	orr.w	r3, r3, #8
 8013bba:	4a1c      	ldr	r2, [pc, #112]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bbc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8013bbe:	4b1a      	ldr	r3, [pc, #104]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013bc0:	2220      	movs	r2, #32
 8013bc2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8013bc4:	4b18      	ldr	r3, [pc, #96]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013bc6:	68db      	ldr	r3, [r3, #12]
 8013bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d008      	beq.n	8013be2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8013bd0:	4b16      	ldr	r3, [pc, #88]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bd2:	69db      	ldr	r3, [r3, #28]
 8013bd4:	f043 0304 	orr.w	r3, r3, #4
 8013bd8:	4a14      	ldr	r2, [pc, #80]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8013bdc:	4b12      	ldr	r3, [pc, #72]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013bde:	2240      	movs	r2, #64	; 0x40
 8013be0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8013be2:	4b11      	ldr	r3, [pc, #68]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013be4:	68db      	ldr	r3, [r3, #12]
 8013be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d008      	beq.n	8013c00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8013bee:	4b0f      	ldr	r3, [pc, #60]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bf0:	69db      	ldr	r3, [r3, #28]
 8013bf2:	f043 0302 	orr.w	r3, r3, #2
 8013bf6:	4a0d      	ldr	r2, [pc, #52]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013bf8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8013bfa:	4b0b      	ldr	r3, [pc, #44]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013bfc:	2280      	movs	r2, #128	; 0x80
 8013bfe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8013c00:	4b09      	ldr	r3, [pc, #36]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	f003 0302 	and.w	r3, r3, #2
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d008      	beq.n	8013c1e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8013c0c:	4b07      	ldr	r3, [pc, #28]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013c0e:	69db      	ldr	r3, [r3, #28]
 8013c10:	f043 0320 	orr.w	r3, r3, #32
 8013c14:	4a05      	ldr	r2, [pc, #20]	; (8013c2c <FLASH_SetErrorCode+0xa8>)
 8013c16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8013c18:	4b03      	ldr	r3, [pc, #12]	; (8013c28 <FLASH_SetErrorCode+0xa4>)
 8013c1a:	2202      	movs	r2, #2
 8013c1c:	60da      	str	r2, [r3, #12]
  }
}
 8013c1e:	bf00      	nop
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	40023c00 	.word	0x40023c00
 8013c2c:	2000a774 	.word	0x2000a774

08013c30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013c42:	4b31      	ldr	r3, [pc, #196]	; (8013d08 <HAL_FLASHEx_Erase+0xd8>)
 8013c44:	7e1b      	ldrb	r3, [r3, #24]
 8013c46:	2b01      	cmp	r3, #1
 8013c48:	d101      	bne.n	8013c4e <HAL_FLASHEx_Erase+0x1e>
 8013c4a:	2302      	movs	r3, #2
 8013c4c:	e058      	b.n	8013d00 <HAL_FLASHEx_Erase+0xd0>
 8013c4e:	4b2e      	ldr	r3, [pc, #184]	; (8013d08 <HAL_FLASHEx_Erase+0xd8>)
 8013c50:	2201      	movs	r2, #1
 8013c52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013c54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013c58:	f7ff feba 	bl	80139d0 <FLASH_WaitForLastOperation>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8013c60:	7bfb      	ldrb	r3, [r7, #15]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d148      	bne.n	8013cf8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8013c66:	683b      	ldr	r3, [r7, #0]
 8013c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c6c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d115      	bne.n	8013ca2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	691b      	ldr	r3, [r3, #16]
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	4619      	mov	r1, r3
 8013c82:	4610      	mov	r0, r2
 8013c84:	f000 f844 	bl	8013d10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013c88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013c8c:	f7ff fea0 	bl	80139d0 <FLASH_WaitForLastOperation>
 8013c90:	4603      	mov	r3, r0
 8013c92:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8013c94:	4b1d      	ldr	r3, [pc, #116]	; (8013d0c <HAL_FLASHEx_Erase+0xdc>)
 8013c96:	691b      	ldr	r3, [r3, #16]
 8013c98:	4a1c      	ldr	r2, [pc, #112]	; (8013d0c <HAL_FLASHEx_Erase+0xdc>)
 8013c9a:	f023 0304 	bic.w	r3, r3, #4
 8013c9e:	6113      	str	r3, [r2, #16]
 8013ca0:	e028      	b.n	8013cf4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	60bb      	str	r3, [r7, #8]
 8013ca8:	e01c      	b.n	8013ce4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	691b      	ldr	r3, [r3, #16]
 8013cae:	b2db      	uxtb	r3, r3
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	68b8      	ldr	r0, [r7, #8]
 8013cb4:	f000 f850 	bl	8013d58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013cb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8013cbc:	f7ff fe88 	bl	80139d0 <FLASH_WaitForLastOperation>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8013cc4:	4b11      	ldr	r3, [pc, #68]	; (8013d0c <HAL_FLASHEx_Erase+0xdc>)
 8013cc6:	691b      	ldr	r3, [r3, #16]
 8013cc8:	4a10      	ldr	r2, [pc, #64]	; (8013d0c <HAL_FLASHEx_Erase+0xdc>)
 8013cca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8013cce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8013cd0:	7bfb      	ldrb	r3, [r7, #15]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d003      	beq.n	8013cde <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	601a      	str	r2, [r3, #0]
          break;
 8013cdc:	e00a      	b.n	8013cf4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	60bb      	str	r3, [r7, #8]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	68da      	ldr	r2, [r3, #12]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	4413      	add	r3, r2
 8013cee:	68ba      	ldr	r2, [r7, #8]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d3da      	bcc.n	8013caa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8013cf4:	f000 f878 	bl	8013de8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013cf8:	4b03      	ldr	r3, [pc, #12]	; (8013d08 <HAL_FLASHEx_Erase+0xd8>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	761a      	strb	r2, [r3, #24]

  return status;
 8013cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3710      	adds	r7, #16
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	2000a774 	.word	0x2000a774
 8013d0c:	40023c00 	.word	0x40023c00

08013d10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b083      	sub	sp, #12
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	4603      	mov	r3, r0
 8013d18:	6039      	str	r1, [r7, #0]
 8013d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013d1c:	4b0d      	ldr	r3, [pc, #52]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d1e:	691b      	ldr	r3, [r3, #16]
 8013d20:	4a0c      	ldr	r2, [pc, #48]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8013d28:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	4a09      	ldr	r2, [pc, #36]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d2e:	f043 0304 	orr.w	r3, r3, #4
 8013d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8013d34:	4b07      	ldr	r3, [pc, #28]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d36:	691a      	ldr	r2, [r3, #16]
 8013d38:	79fb      	ldrb	r3, [r7, #7]
 8013d3a:	021b      	lsls	r3, r3, #8
 8013d3c:	4313      	orrs	r3, r2
 8013d3e:	4a05      	ldr	r2, [pc, #20]	; (8013d54 <FLASH_MassErase+0x44>)
 8013d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013d44:	6113      	str	r3, [r2, #16]
}
 8013d46:	bf00      	nop
 8013d48:	370c      	adds	r7, #12
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop
 8013d54:	40023c00 	.word	0x40023c00

08013d58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b085      	sub	sp, #20
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	460b      	mov	r3, r1
 8013d62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8013d64:	2300      	movs	r3, #0
 8013d66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8013d68:	78fb      	ldrb	r3, [r7, #3]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d102      	bne.n	8013d74 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	60fb      	str	r3, [r7, #12]
 8013d72:	e010      	b.n	8013d96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8013d74:	78fb      	ldrb	r3, [r7, #3]
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	d103      	bne.n	8013d82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8013d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013d7e:	60fb      	str	r3, [r7, #12]
 8013d80:	e009      	b.n	8013d96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8013d82:	78fb      	ldrb	r3, [r7, #3]
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	d103      	bne.n	8013d90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8013d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013d8c:	60fb      	str	r3, [r7, #12]
 8013d8e:	e002      	b.n	8013d96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8013d90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013d94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8013d96:	4b13      	ldr	r3, [pc, #76]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013d98:	691b      	ldr	r3, [r3, #16]
 8013d9a:	4a12      	ldr	r2, [pc, #72]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013da0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8013da2:	4b10      	ldr	r3, [pc, #64]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013da4:	691a      	ldr	r2, [r3, #16]
 8013da6:	490f      	ldr	r1, [pc, #60]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	4313      	orrs	r3, r2
 8013dac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8013dae:	4b0d      	ldr	r3, [pc, #52]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013db0:	691b      	ldr	r3, [r3, #16]
 8013db2:	4a0c      	ldr	r2, [pc, #48]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013db4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8013db8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8013dba:	4b0a      	ldr	r3, [pc, #40]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013dbc:	691a      	ldr	r2, [r3, #16]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	00db      	lsls	r3, r3, #3
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	4a07      	ldr	r2, [pc, #28]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013dc6:	f043 0302 	orr.w	r3, r3, #2
 8013dca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8013dcc:	4b05      	ldr	r3, [pc, #20]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013dce:	691b      	ldr	r3, [r3, #16]
 8013dd0:	4a04      	ldr	r2, [pc, #16]	; (8013de4 <FLASH_Erase_Sector+0x8c>)
 8013dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013dd6:	6113      	str	r3, [r2, #16]
}
 8013dd8:	bf00      	nop
 8013dda:	3714      	adds	r7, #20
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr
 8013de4:	40023c00 	.word	0x40023c00

08013de8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8013de8:	b480      	push	{r7}
 8013dea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8013dec:	4b20      	ldr	r3, [pc, #128]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d017      	beq.n	8013e28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8013df8:	4b1d      	ldr	r3, [pc, #116]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a1c      	ldr	r2, [pc, #112]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013dfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013e02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8013e04:	4b1a      	ldr	r3, [pc, #104]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	4a19      	ldr	r2, [pc, #100]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013e0e:	6013      	str	r3, [r2, #0]
 8013e10:	4b17      	ldr	r3, [pc, #92]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	4a16      	ldr	r2, [pc, #88]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8013e1c:	4b14      	ldr	r3, [pc, #80]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	4a13      	ldr	r2, [pc, #76]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013e26:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8013e28:	4b11      	ldr	r3, [pc, #68]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d017      	beq.n	8013e64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8013e34:	4b0e      	ldr	r3, [pc, #56]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a0d      	ldr	r2, [pc, #52]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013e3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013e40:	4b0b      	ldr	r3, [pc, #44]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	4a0a      	ldr	r2, [pc, #40]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013e4a:	6013      	str	r3, [r2, #0]
 8013e4c:	4b08      	ldr	r3, [pc, #32]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	4a07      	ldr	r2, [pc, #28]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8013e58:	4b05      	ldr	r3, [pc, #20]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	4a04      	ldr	r2, [pc, #16]	; (8013e70 <FLASH_FlushCaches+0x88>)
 8013e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013e62:	6013      	str	r3, [r2, #0]
  }
}
 8013e64:	bf00      	nop
 8013e66:	46bd      	mov	sp, r7
 8013e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6c:	4770      	bx	lr
 8013e6e:	bf00      	nop
 8013e70:	40023c00 	.word	0x40023c00

08013e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b089      	sub	sp, #36	; 0x24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8013e82:	2300      	movs	r3, #0
 8013e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8013e86:	2300      	movs	r3, #0
 8013e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	61fb      	str	r3, [r7, #28]
 8013e8e:	e16b      	b.n	8014168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8013e90:	2201      	movs	r2, #1
 8013e92:	69fb      	ldr	r3, [r7, #28]
 8013e94:	fa02 f303 	lsl.w	r3, r2, r3
 8013e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	697a      	ldr	r2, [r7, #20]
 8013ea0:	4013      	ands	r3, r2
 8013ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8013ea4:	693a      	ldr	r2, [r7, #16]
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	429a      	cmp	r2, r3
 8013eaa:	f040 815a 	bne.w	8014162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d00b      	beq.n	8013ece <HAL_GPIO_Init+0x5a>
 8013eb6:	683b      	ldr	r3, [r7, #0]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d007      	beq.n	8013ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013ec2:	2b11      	cmp	r3, #17
 8013ec4:	d003      	beq.n	8013ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	2b12      	cmp	r3, #18
 8013ecc:	d130      	bne.n	8013f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	2203      	movs	r2, #3
 8013eda:	fa02 f303 	lsl.w	r3, r2, r3
 8013ede:	43db      	mvns	r3, r3
 8013ee0:	69ba      	ldr	r2, [r7, #24]
 8013ee2:	4013      	ands	r3, r2
 8013ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	68da      	ldr	r2, [r3, #12]
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef2:	69ba      	ldr	r2, [r7, #24]
 8013ef4:	4313      	orrs	r3, r2
 8013ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	69ba      	ldr	r2, [r7, #24]
 8013efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013f04:	2201      	movs	r2, #1
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	fa02 f303 	lsl.w	r3, r2, r3
 8013f0c:	43db      	mvns	r3, r3
 8013f0e:	69ba      	ldr	r2, [r7, #24]
 8013f10:	4013      	ands	r3, r2
 8013f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	685b      	ldr	r3, [r3, #4]
 8013f18:	091b      	lsrs	r3, r3, #4
 8013f1a:	f003 0201 	and.w	r2, r3, #1
 8013f1e:	69fb      	ldr	r3, [r7, #28]
 8013f20:	fa02 f303 	lsl.w	r3, r2, r3
 8013f24:	69ba      	ldr	r2, [r7, #24]
 8013f26:	4313      	orrs	r3, r2
 8013f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	69ba      	ldr	r2, [r7, #24]
 8013f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	005b      	lsls	r3, r3, #1
 8013f3a:	2203      	movs	r2, #3
 8013f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f40:	43db      	mvns	r3, r3
 8013f42:	69ba      	ldr	r2, [r7, #24]
 8013f44:	4013      	ands	r3, r2
 8013f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	689a      	ldr	r2, [r3, #8]
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	005b      	lsls	r3, r3, #1
 8013f50:	fa02 f303 	lsl.w	r3, r2, r3
 8013f54:	69ba      	ldr	r2, [r7, #24]
 8013f56:	4313      	orrs	r3, r2
 8013f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	69ba      	ldr	r2, [r7, #24]
 8013f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	685b      	ldr	r3, [r3, #4]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d003      	beq.n	8013f70 <HAL_GPIO_Init+0xfc>
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	685b      	ldr	r3, [r3, #4]
 8013f6c:	2b12      	cmp	r3, #18
 8013f6e:	d123      	bne.n	8013fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013f70:	69fb      	ldr	r3, [r7, #28]
 8013f72:	08da      	lsrs	r2, r3, #3
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	3208      	adds	r2, #8
 8013f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	f003 0307 	and.w	r3, r3, #7
 8013f84:	009b      	lsls	r3, r3, #2
 8013f86:	220f      	movs	r2, #15
 8013f88:	fa02 f303 	lsl.w	r3, r2, r3
 8013f8c:	43db      	mvns	r3, r3
 8013f8e:	69ba      	ldr	r2, [r7, #24]
 8013f90:	4013      	ands	r3, r2
 8013f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	691a      	ldr	r2, [r3, #16]
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	f003 0307 	and.w	r3, r3, #7
 8013f9e:	009b      	lsls	r3, r3, #2
 8013fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8013fa4:	69ba      	ldr	r2, [r7, #24]
 8013fa6:	4313      	orrs	r3, r2
 8013fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	08da      	lsrs	r2, r3, #3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	3208      	adds	r2, #8
 8013fb2:	69b9      	ldr	r1, [r7, #24]
 8013fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013fbe:	69fb      	ldr	r3, [r7, #28]
 8013fc0:	005b      	lsls	r3, r3, #1
 8013fc2:	2203      	movs	r2, #3
 8013fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8013fc8:	43db      	mvns	r3, r3
 8013fca:	69ba      	ldr	r2, [r7, #24]
 8013fcc:	4013      	ands	r3, r2
 8013fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	f003 0203 	and.w	r2, r3, #3
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8013fe0:	69ba      	ldr	r2, [r7, #24]
 8013fe2:	4313      	orrs	r3, r2
 8013fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	69ba      	ldr	r2, [r7, #24]
 8013fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f000 80b4 	beq.w	8014162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	60fb      	str	r3, [r7, #12]
 8013ffe:	4b60      	ldr	r3, [pc, #384]	; (8014180 <HAL_GPIO_Init+0x30c>)
 8014000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014002:	4a5f      	ldr	r2, [pc, #380]	; (8014180 <HAL_GPIO_Init+0x30c>)
 8014004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014008:	6453      	str	r3, [r2, #68]	; 0x44
 801400a:	4b5d      	ldr	r3, [pc, #372]	; (8014180 <HAL_GPIO_Init+0x30c>)
 801400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014012:	60fb      	str	r3, [r7, #12]
 8014014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8014016:	4a5b      	ldr	r2, [pc, #364]	; (8014184 <HAL_GPIO_Init+0x310>)
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	089b      	lsrs	r3, r3, #2
 801401c:	3302      	adds	r3, #2
 801401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	f003 0303 	and.w	r3, r3, #3
 801402a:	009b      	lsls	r3, r3, #2
 801402c:	220f      	movs	r2, #15
 801402e:	fa02 f303 	lsl.w	r3, r2, r3
 8014032:	43db      	mvns	r3, r3
 8014034:	69ba      	ldr	r2, [r7, #24]
 8014036:	4013      	ands	r3, r2
 8014038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	4a52      	ldr	r2, [pc, #328]	; (8014188 <HAL_GPIO_Init+0x314>)
 801403e:	4293      	cmp	r3, r2
 8014040:	d02b      	beq.n	801409a <HAL_GPIO_Init+0x226>
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	4a51      	ldr	r2, [pc, #324]	; (801418c <HAL_GPIO_Init+0x318>)
 8014046:	4293      	cmp	r3, r2
 8014048:	d025      	beq.n	8014096 <HAL_GPIO_Init+0x222>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	4a50      	ldr	r2, [pc, #320]	; (8014190 <HAL_GPIO_Init+0x31c>)
 801404e:	4293      	cmp	r3, r2
 8014050:	d01f      	beq.n	8014092 <HAL_GPIO_Init+0x21e>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	4a4f      	ldr	r2, [pc, #316]	; (8014194 <HAL_GPIO_Init+0x320>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d019      	beq.n	801408e <HAL_GPIO_Init+0x21a>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	4a4e      	ldr	r2, [pc, #312]	; (8014198 <HAL_GPIO_Init+0x324>)
 801405e:	4293      	cmp	r3, r2
 8014060:	d013      	beq.n	801408a <HAL_GPIO_Init+0x216>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	4a4d      	ldr	r2, [pc, #308]	; (801419c <HAL_GPIO_Init+0x328>)
 8014066:	4293      	cmp	r3, r2
 8014068:	d00d      	beq.n	8014086 <HAL_GPIO_Init+0x212>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	4a4c      	ldr	r2, [pc, #304]	; (80141a0 <HAL_GPIO_Init+0x32c>)
 801406e:	4293      	cmp	r3, r2
 8014070:	d007      	beq.n	8014082 <HAL_GPIO_Init+0x20e>
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	4a4b      	ldr	r2, [pc, #300]	; (80141a4 <HAL_GPIO_Init+0x330>)
 8014076:	4293      	cmp	r3, r2
 8014078:	d101      	bne.n	801407e <HAL_GPIO_Init+0x20a>
 801407a:	2307      	movs	r3, #7
 801407c:	e00e      	b.n	801409c <HAL_GPIO_Init+0x228>
 801407e:	2308      	movs	r3, #8
 8014080:	e00c      	b.n	801409c <HAL_GPIO_Init+0x228>
 8014082:	2306      	movs	r3, #6
 8014084:	e00a      	b.n	801409c <HAL_GPIO_Init+0x228>
 8014086:	2305      	movs	r3, #5
 8014088:	e008      	b.n	801409c <HAL_GPIO_Init+0x228>
 801408a:	2304      	movs	r3, #4
 801408c:	e006      	b.n	801409c <HAL_GPIO_Init+0x228>
 801408e:	2303      	movs	r3, #3
 8014090:	e004      	b.n	801409c <HAL_GPIO_Init+0x228>
 8014092:	2302      	movs	r3, #2
 8014094:	e002      	b.n	801409c <HAL_GPIO_Init+0x228>
 8014096:	2301      	movs	r3, #1
 8014098:	e000      	b.n	801409c <HAL_GPIO_Init+0x228>
 801409a:	2300      	movs	r3, #0
 801409c:	69fa      	ldr	r2, [r7, #28]
 801409e:	f002 0203 	and.w	r2, r2, #3
 80140a2:	0092      	lsls	r2, r2, #2
 80140a4:	4093      	lsls	r3, r2
 80140a6:	69ba      	ldr	r2, [r7, #24]
 80140a8:	4313      	orrs	r3, r2
 80140aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80140ac:	4935      	ldr	r1, [pc, #212]	; (8014184 <HAL_GPIO_Init+0x310>)
 80140ae:	69fb      	ldr	r3, [r7, #28]
 80140b0:	089b      	lsrs	r3, r3, #2
 80140b2:	3302      	adds	r3, #2
 80140b4:	69ba      	ldr	r2, [r7, #24]
 80140b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80140ba:	4b3b      	ldr	r3, [pc, #236]	; (80141a8 <HAL_GPIO_Init+0x334>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80140c0:	693b      	ldr	r3, [r7, #16]
 80140c2:	43db      	mvns	r3, r3
 80140c4:	69ba      	ldr	r2, [r7, #24]
 80140c6:	4013      	ands	r3, r2
 80140c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d003      	beq.n	80140de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80140d6:	69ba      	ldr	r2, [r7, #24]
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	4313      	orrs	r3, r2
 80140dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80140de:	4a32      	ldr	r2, [pc, #200]	; (80141a8 <HAL_GPIO_Init+0x334>)
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80140e4:	4b30      	ldr	r3, [pc, #192]	; (80141a8 <HAL_GPIO_Init+0x334>)
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	43db      	mvns	r3, r3
 80140ee:	69ba      	ldr	r2, [r7, #24]
 80140f0:	4013      	ands	r3, r2
 80140f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d003      	beq.n	8014108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8014100:	69ba      	ldr	r2, [r7, #24]
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	4313      	orrs	r3, r2
 8014106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8014108:	4a27      	ldr	r2, [pc, #156]	; (80141a8 <HAL_GPIO_Init+0x334>)
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801410e:	4b26      	ldr	r3, [pc, #152]	; (80141a8 <HAL_GPIO_Init+0x334>)
 8014110:	689b      	ldr	r3, [r3, #8]
 8014112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	43db      	mvns	r3, r3
 8014118:	69ba      	ldr	r2, [r7, #24]
 801411a:	4013      	ands	r3, r2
 801411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801411e:	683b      	ldr	r3, [r7, #0]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014126:	2b00      	cmp	r3, #0
 8014128:	d003      	beq.n	8014132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 801412a:	69ba      	ldr	r2, [r7, #24]
 801412c:	693b      	ldr	r3, [r7, #16]
 801412e:	4313      	orrs	r3, r2
 8014130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8014132:	4a1d      	ldr	r2, [pc, #116]	; (80141a8 <HAL_GPIO_Init+0x334>)
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8014138:	4b1b      	ldr	r3, [pc, #108]	; (80141a8 <HAL_GPIO_Init+0x334>)
 801413a:	68db      	ldr	r3, [r3, #12]
 801413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801413e:	693b      	ldr	r3, [r7, #16]
 8014140:	43db      	mvns	r3, r3
 8014142:	69ba      	ldr	r2, [r7, #24]
 8014144:	4013      	ands	r3, r2
 8014146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014150:	2b00      	cmp	r3, #0
 8014152:	d003      	beq.n	801415c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8014154:	69ba      	ldr	r2, [r7, #24]
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	4313      	orrs	r3, r2
 801415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801415c:	4a12      	ldr	r2, [pc, #72]	; (80141a8 <HAL_GPIO_Init+0x334>)
 801415e:	69bb      	ldr	r3, [r7, #24]
 8014160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	3301      	adds	r3, #1
 8014166:	61fb      	str	r3, [r7, #28]
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	2b0f      	cmp	r3, #15
 801416c:	f67f ae90 	bls.w	8013e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8014170:	bf00      	nop
 8014172:	bf00      	nop
 8014174:	3724      	adds	r7, #36	; 0x24
 8014176:	46bd      	mov	sp, r7
 8014178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417c:	4770      	bx	lr
 801417e:	bf00      	nop
 8014180:	40023800 	.word	0x40023800
 8014184:	40013800 	.word	0x40013800
 8014188:	40020000 	.word	0x40020000
 801418c:	40020400 	.word	0x40020400
 8014190:	40020800 	.word	0x40020800
 8014194:	40020c00 	.word	0x40020c00
 8014198:	40021000 	.word	0x40021000
 801419c:	40021400 	.word	0x40021400
 80141a0:	40021800 	.word	0x40021800
 80141a4:	40021c00 	.word	0x40021c00
 80141a8:	40013c00 	.word	0x40013c00

080141ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b087      	sub	sp, #28
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
 80141b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80141b6:	2300      	movs	r3, #0
 80141b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80141ba:	2300      	movs	r3, #0
 80141bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80141be:	2300      	movs	r3, #0
 80141c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80141c2:	2300      	movs	r3, #0
 80141c4:	617b      	str	r3, [r7, #20]
 80141c6:	e0cd      	b.n	8014364 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80141c8:	2201      	movs	r2, #1
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	fa02 f303 	lsl.w	r3, r2, r3
 80141d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80141d2:	683a      	ldr	r2, [r7, #0]
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	4013      	ands	r3, r2
 80141d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	429a      	cmp	r2, r3
 80141e0:	f040 80bd 	bne.w	801435e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80141e4:	4a65      	ldr	r2, [pc, #404]	; (801437c <HAL_GPIO_DeInit+0x1d0>)
 80141e6:	697b      	ldr	r3, [r7, #20]
 80141e8:	089b      	lsrs	r3, r3, #2
 80141ea:	3302      	adds	r3, #2
 80141ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	f003 0303 	and.w	r3, r3, #3
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	220f      	movs	r2, #15
 80141fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014200:	68ba      	ldr	r2, [r7, #8]
 8014202:	4013      	ands	r3, r2
 8014204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	4a5d      	ldr	r2, [pc, #372]	; (8014380 <HAL_GPIO_DeInit+0x1d4>)
 801420a:	4293      	cmp	r3, r2
 801420c:	d02b      	beq.n	8014266 <HAL_GPIO_DeInit+0xba>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	4a5c      	ldr	r2, [pc, #368]	; (8014384 <HAL_GPIO_DeInit+0x1d8>)
 8014212:	4293      	cmp	r3, r2
 8014214:	d025      	beq.n	8014262 <HAL_GPIO_DeInit+0xb6>
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	4a5b      	ldr	r2, [pc, #364]	; (8014388 <HAL_GPIO_DeInit+0x1dc>)
 801421a:	4293      	cmp	r3, r2
 801421c:	d01f      	beq.n	801425e <HAL_GPIO_DeInit+0xb2>
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	4a5a      	ldr	r2, [pc, #360]	; (801438c <HAL_GPIO_DeInit+0x1e0>)
 8014222:	4293      	cmp	r3, r2
 8014224:	d019      	beq.n	801425a <HAL_GPIO_DeInit+0xae>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	4a59      	ldr	r2, [pc, #356]	; (8014390 <HAL_GPIO_DeInit+0x1e4>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d013      	beq.n	8014256 <HAL_GPIO_DeInit+0xaa>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	4a58      	ldr	r2, [pc, #352]	; (8014394 <HAL_GPIO_DeInit+0x1e8>)
 8014232:	4293      	cmp	r3, r2
 8014234:	d00d      	beq.n	8014252 <HAL_GPIO_DeInit+0xa6>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	4a57      	ldr	r2, [pc, #348]	; (8014398 <HAL_GPIO_DeInit+0x1ec>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d007      	beq.n	801424e <HAL_GPIO_DeInit+0xa2>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	4a56      	ldr	r2, [pc, #344]	; (801439c <HAL_GPIO_DeInit+0x1f0>)
 8014242:	4293      	cmp	r3, r2
 8014244:	d101      	bne.n	801424a <HAL_GPIO_DeInit+0x9e>
 8014246:	2307      	movs	r3, #7
 8014248:	e00e      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 801424a:	2308      	movs	r3, #8
 801424c:	e00c      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 801424e:	2306      	movs	r3, #6
 8014250:	e00a      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 8014252:	2305      	movs	r3, #5
 8014254:	e008      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 8014256:	2304      	movs	r3, #4
 8014258:	e006      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 801425a:	2303      	movs	r3, #3
 801425c:	e004      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 801425e:	2302      	movs	r3, #2
 8014260:	e002      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 8014262:	2301      	movs	r3, #1
 8014264:	e000      	b.n	8014268 <HAL_GPIO_DeInit+0xbc>
 8014266:	2300      	movs	r3, #0
 8014268:	697a      	ldr	r2, [r7, #20]
 801426a:	f002 0203 	and.w	r2, r2, #3
 801426e:	0092      	lsls	r2, r2, #2
 8014270:	4093      	lsls	r3, r2
 8014272:	68ba      	ldr	r2, [r7, #8]
 8014274:	429a      	cmp	r2, r3
 8014276:	d132      	bne.n	80142de <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8014278:	4b49      	ldr	r3, [pc, #292]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 801427a:	681a      	ldr	r2, [r3, #0]
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	43db      	mvns	r3, r3
 8014280:	4947      	ldr	r1, [pc, #284]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 8014282:	4013      	ands	r3, r2
 8014284:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8014286:	4b46      	ldr	r3, [pc, #280]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 8014288:	685a      	ldr	r2, [r3, #4]
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	43db      	mvns	r3, r3
 801428e:	4944      	ldr	r1, [pc, #272]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 8014290:	4013      	ands	r3, r2
 8014292:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8014294:	4b42      	ldr	r3, [pc, #264]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 8014296:	689a      	ldr	r2, [r3, #8]
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	43db      	mvns	r3, r3
 801429c:	4940      	ldr	r1, [pc, #256]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 801429e:	4013      	ands	r3, r2
 80142a0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80142a2:	4b3f      	ldr	r3, [pc, #252]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 80142a4:	68da      	ldr	r2, [r3, #12]
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	43db      	mvns	r3, r3
 80142aa:	493d      	ldr	r1, [pc, #244]	; (80143a0 <HAL_GPIO_DeInit+0x1f4>)
 80142ac:	4013      	ands	r3, r2
 80142ae:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	f003 0303 	and.w	r3, r3, #3
 80142b6:	009b      	lsls	r3, r3, #2
 80142b8:	220f      	movs	r2, #15
 80142ba:	fa02 f303 	lsl.w	r3, r2, r3
 80142be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80142c0:	4a2e      	ldr	r2, [pc, #184]	; (801437c <HAL_GPIO_DeInit+0x1d0>)
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	089b      	lsrs	r3, r3, #2
 80142c6:	3302      	adds	r3, #2
 80142c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	43da      	mvns	r2, r3
 80142d0:	482a      	ldr	r0, [pc, #168]	; (801437c <HAL_GPIO_DeInit+0x1d0>)
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	089b      	lsrs	r3, r3, #2
 80142d6:	400a      	ands	r2, r1
 80142d8:	3302      	adds	r3, #2
 80142da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681a      	ldr	r2, [r3, #0]
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	005b      	lsls	r3, r3, #1
 80142e6:	2103      	movs	r1, #3
 80142e8:	fa01 f303 	lsl.w	r3, r1, r3
 80142ec:	43db      	mvns	r3, r3
 80142ee:	401a      	ands	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	08da      	lsrs	r2, r3, #3
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	3208      	adds	r2, #8
 80142fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	f003 0307 	and.w	r3, r3, #7
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	220f      	movs	r2, #15
 801430a:	fa02 f303 	lsl.w	r3, r2, r3
 801430e:	43db      	mvns	r3, r3
 8014310:	697a      	ldr	r2, [r7, #20]
 8014312:	08d2      	lsrs	r2, r2, #3
 8014314:	4019      	ands	r1, r3
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	3208      	adds	r2, #8
 801431a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	68da      	ldr	r2, [r3, #12]
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	2103      	movs	r1, #3
 8014328:	fa01 f303 	lsl.w	r3, r1, r3
 801432c:	43db      	mvns	r3, r3
 801432e:	401a      	ands	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	685a      	ldr	r2, [r3, #4]
 8014338:	2101      	movs	r1, #1
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	fa01 f303 	lsl.w	r3, r1, r3
 8014340:	43db      	mvns	r3, r3
 8014342:	401a      	ands	r2, r3
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	689a      	ldr	r2, [r3, #8]
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	005b      	lsls	r3, r3, #1
 8014350:	2103      	movs	r1, #3
 8014352:	fa01 f303 	lsl.w	r3, r1, r3
 8014356:	43db      	mvns	r3, r3
 8014358:	401a      	ands	r2, r3
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	3301      	adds	r3, #1
 8014362:	617b      	str	r3, [r7, #20]
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	2b0f      	cmp	r3, #15
 8014368:	f67f af2e 	bls.w	80141c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801436c:	bf00      	nop
 801436e:	bf00      	nop
 8014370:	371c      	adds	r7, #28
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	40013800 	.word	0x40013800
 8014380:	40020000 	.word	0x40020000
 8014384:	40020400 	.word	0x40020400
 8014388:	40020800 	.word	0x40020800
 801438c:	40020c00 	.word	0x40020c00
 8014390:	40021000 	.word	0x40021000
 8014394:	40021400 	.word	0x40021400
 8014398:	40021800 	.word	0x40021800
 801439c:	40021c00 	.word	0x40021c00
 80143a0:	40013c00 	.word	0x40013c00

080143a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	460b      	mov	r3, r1
 80143ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	691a      	ldr	r2, [r3, #16]
 80143b4:	887b      	ldrh	r3, [r7, #2]
 80143b6:	4013      	ands	r3, r2
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80143bc:	2301      	movs	r3, #1
 80143be:	73fb      	strb	r3, [r7, #15]
 80143c0:	e001      	b.n	80143c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80143c2:	2300      	movs	r3, #0
 80143c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80143c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3714      	adds	r7, #20
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	460b      	mov	r3, r1
 80143de:	807b      	strh	r3, [r7, #2]
 80143e0:	4613      	mov	r3, r2
 80143e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80143e4:	787b      	ldrb	r3, [r7, #1]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d003      	beq.n	80143f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80143ea:	887a      	ldrh	r2, [r7, #2]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80143f0:	e003      	b.n	80143fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80143f2:	887b      	ldrh	r3, [r7, #2]
 80143f4:	041a      	lsls	r2, r3, #16
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	619a      	str	r2, [r3, #24]
}
 80143fa:	bf00      	nop
 80143fc:	370c      	adds	r7, #12
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr
	...

08014408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b084      	sub	sp, #16
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d101      	bne.n	801441a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8014416:	2301      	movs	r3, #1
 8014418:	e12b      	b.n	8014672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014420:	b2db      	uxtb	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2200      	movs	r2, #0
 801442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f7ee f898 	bl	8002564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2224      	movs	r2, #36	; 0x24
 8014438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	681a      	ldr	r2, [r3, #0]
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f022 0201 	bic.w	r2, r2, #1
 801444a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801445a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801446a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801446c:	f002 fc64 	bl	8016d38 <HAL_RCC_GetPCLK1Freq>
 8014470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	4a81      	ldr	r2, [pc, #516]	; (801467c <HAL_I2C_Init+0x274>)
 8014478:	4293      	cmp	r3, r2
 801447a:	d807      	bhi.n	801448c <HAL_I2C_Init+0x84>
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	4a80      	ldr	r2, [pc, #512]	; (8014680 <HAL_I2C_Init+0x278>)
 8014480:	4293      	cmp	r3, r2
 8014482:	bf94      	ite	ls
 8014484:	2301      	movls	r3, #1
 8014486:	2300      	movhi	r3, #0
 8014488:	b2db      	uxtb	r3, r3
 801448a:	e006      	b.n	801449a <HAL_I2C_Init+0x92>
 801448c:	68fb      	ldr	r3, [r7, #12]
 801448e:	4a7d      	ldr	r2, [pc, #500]	; (8014684 <HAL_I2C_Init+0x27c>)
 8014490:	4293      	cmp	r3, r2
 8014492:	bf94      	ite	ls
 8014494:	2301      	movls	r3, #1
 8014496:	2300      	movhi	r3, #0
 8014498:	b2db      	uxtb	r3, r3
 801449a:	2b00      	cmp	r3, #0
 801449c:	d001      	beq.n	80144a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801449e:	2301      	movs	r3, #1
 80144a0:	e0e7      	b.n	8014672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	4a78      	ldr	r2, [pc, #480]	; (8014688 <HAL_I2C_Init+0x280>)
 80144a6:	fba2 2303 	umull	r2, r3, r2, r3
 80144aa:	0c9b      	lsrs	r3, r3, #18
 80144ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	68ba      	ldr	r2, [r7, #8]
 80144be:	430a      	orrs	r2, r1
 80144c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	6a1b      	ldr	r3, [r3, #32]
 80144c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	685b      	ldr	r3, [r3, #4]
 80144d0:	4a6a      	ldr	r2, [pc, #424]	; (801467c <HAL_I2C_Init+0x274>)
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d802      	bhi.n	80144dc <HAL_I2C_Init+0xd4>
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	3301      	adds	r3, #1
 80144da:	e009      	b.n	80144f0 <HAL_I2C_Init+0xe8>
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80144e2:	fb02 f303 	mul.w	r3, r2, r3
 80144e6:	4a69      	ldr	r2, [pc, #420]	; (801468c <HAL_I2C_Init+0x284>)
 80144e8:	fba2 2303 	umull	r2, r3, r2, r3
 80144ec:	099b      	lsrs	r3, r3, #6
 80144ee:	3301      	adds	r3, #1
 80144f0:	687a      	ldr	r2, [r7, #4]
 80144f2:	6812      	ldr	r2, [r2, #0]
 80144f4:	430b      	orrs	r3, r1
 80144f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	69db      	ldr	r3, [r3, #28]
 80144fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8014502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	495c      	ldr	r1, [pc, #368]	; (801467c <HAL_I2C_Init+0x274>)
 801450c:	428b      	cmp	r3, r1
 801450e:	d819      	bhi.n	8014544 <HAL_I2C_Init+0x13c>
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	1e59      	subs	r1, r3, #1
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	005b      	lsls	r3, r3, #1
 801451a:	fbb1 f3f3 	udiv	r3, r1, r3
 801451e:	1c59      	adds	r1, r3, #1
 8014520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8014524:	400b      	ands	r3, r1
 8014526:	2b00      	cmp	r3, #0
 8014528:	d00a      	beq.n	8014540 <HAL_I2C_Init+0x138>
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	1e59      	subs	r1, r3, #1
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	005b      	lsls	r3, r3, #1
 8014534:	fbb1 f3f3 	udiv	r3, r1, r3
 8014538:	3301      	adds	r3, #1
 801453a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801453e:	e051      	b.n	80145e4 <HAL_I2C_Init+0x1dc>
 8014540:	2304      	movs	r3, #4
 8014542:	e04f      	b.n	80145e4 <HAL_I2C_Init+0x1dc>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	689b      	ldr	r3, [r3, #8]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d111      	bne.n	8014570 <HAL_I2C_Init+0x168>
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	1e58      	subs	r0, r3, #1
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	6859      	ldr	r1, [r3, #4]
 8014554:	460b      	mov	r3, r1
 8014556:	005b      	lsls	r3, r3, #1
 8014558:	440b      	add	r3, r1
 801455a:	fbb0 f3f3 	udiv	r3, r0, r3
 801455e:	3301      	adds	r3, #1
 8014560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014564:	2b00      	cmp	r3, #0
 8014566:	bf0c      	ite	eq
 8014568:	2301      	moveq	r3, #1
 801456a:	2300      	movne	r3, #0
 801456c:	b2db      	uxtb	r3, r3
 801456e:	e012      	b.n	8014596 <HAL_I2C_Init+0x18e>
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	1e58      	subs	r0, r3, #1
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	6859      	ldr	r1, [r3, #4]
 8014578:	460b      	mov	r3, r1
 801457a:	009b      	lsls	r3, r3, #2
 801457c:	440b      	add	r3, r1
 801457e:	0099      	lsls	r1, r3, #2
 8014580:	440b      	add	r3, r1
 8014582:	fbb0 f3f3 	udiv	r3, r0, r3
 8014586:	3301      	adds	r3, #1
 8014588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801458c:	2b00      	cmp	r3, #0
 801458e:	bf0c      	ite	eq
 8014590:	2301      	moveq	r3, #1
 8014592:	2300      	movne	r3, #0
 8014594:	b2db      	uxtb	r3, r3
 8014596:	2b00      	cmp	r3, #0
 8014598:	d001      	beq.n	801459e <HAL_I2C_Init+0x196>
 801459a:	2301      	movs	r3, #1
 801459c:	e022      	b.n	80145e4 <HAL_I2C_Init+0x1dc>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	689b      	ldr	r3, [r3, #8]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d10e      	bne.n	80145c4 <HAL_I2C_Init+0x1bc>
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	1e58      	subs	r0, r3, #1
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6859      	ldr	r1, [r3, #4]
 80145ae:	460b      	mov	r3, r1
 80145b0:	005b      	lsls	r3, r3, #1
 80145b2:	440b      	add	r3, r1
 80145b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80145b8:	3301      	adds	r3, #1
 80145ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80145be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145c2:	e00f      	b.n	80145e4 <HAL_I2C_Init+0x1dc>
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	1e58      	subs	r0, r3, #1
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6859      	ldr	r1, [r3, #4]
 80145cc:	460b      	mov	r3, r1
 80145ce:	009b      	lsls	r3, r3, #2
 80145d0:	440b      	add	r3, r1
 80145d2:	0099      	lsls	r1, r3, #2
 80145d4:	440b      	add	r3, r1
 80145d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80145da:	3301      	adds	r3, #1
 80145dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80145e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80145e4:	6879      	ldr	r1, [r7, #4]
 80145e6:	6809      	ldr	r1, [r1, #0]
 80145e8:	4313      	orrs	r3, r2
 80145ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	69da      	ldr	r2, [r3, #28]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6a1b      	ldr	r3, [r3, #32]
 80145fe:	431a      	orrs	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	430a      	orrs	r2, r1
 8014606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	689b      	ldr	r3, [r3, #8]
 801460e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8014612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	6911      	ldr	r1, [r2, #16]
 801461a:	687a      	ldr	r2, [r7, #4]
 801461c:	68d2      	ldr	r2, [r2, #12]
 801461e:	4311      	orrs	r1, r2
 8014620:	687a      	ldr	r2, [r7, #4]
 8014622:	6812      	ldr	r2, [r2, #0]
 8014624:	430b      	orrs	r3, r1
 8014626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	695a      	ldr	r2, [r3, #20]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	699b      	ldr	r3, [r3, #24]
 801463a:	431a      	orrs	r2, r3
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	430a      	orrs	r2, r1
 8014642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	f042 0201 	orr.w	r2, r2, #1
 8014652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2200      	movs	r2, #0
 8014658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2220      	movs	r2, #32
 801465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2200      	movs	r2, #0
 8014666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2200      	movs	r2, #0
 801466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014670:	2300      	movs	r3, #0
}
 8014672:	4618      	mov	r0, r3
 8014674:	3710      	adds	r7, #16
 8014676:	46bd      	mov	sp, r7
 8014678:	bd80      	pop	{r7, pc}
 801467a:	bf00      	nop
 801467c:	000186a0 	.word	0x000186a0
 8014680:	001e847f 	.word	0x001e847f
 8014684:	003d08ff 	.word	0x003d08ff
 8014688:	431bde83 	.word	0x431bde83
 801468c:	10624dd3 	.word	0x10624dd3

08014690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b082      	sub	sp, #8
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d101      	bne.n	80146a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801469e:	2301      	movs	r3, #1
 80146a0:	e021      	b.n	80146e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2224      	movs	r2, #36	; 0x24
 80146a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	f022 0201 	bic.w	r2, r2, #1
 80146b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f7ee f828 	bl	8002710 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2200      	movs	r2, #0
 80146d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2200      	movs	r2, #0
 80146e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80146e4:	2300      	movs	r3, #0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
	...

080146f0 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b086      	sub	sp, #24
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	60f8      	str	r0, [r7, #12]
 80146f8:	607a      	str	r2, [r7, #4]
 80146fa:	461a      	mov	r2, r3
 80146fc:	460b      	mov	r3, r1
 80146fe:	817b      	strh	r3, [r7, #10]
 8014700:	4613      	mov	r3, r2
 8014702:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8014704:	2300      	movs	r3, #0
 8014706:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801470e:	b2db      	uxtb	r3, r3
 8014710:	2b20      	cmp	r3, #32
 8014712:	f040 80f4 	bne.w	80148fe <HAL_I2C_Master_Receive_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8014716:	4b7c      	ldr	r3, [pc, #496]	; (8014908 <HAL_I2C_Master_Receive_DMA+0x218>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	08db      	lsrs	r3, r3, #3
 801471c:	4a7b      	ldr	r2, [pc, #492]	; (801490c <HAL_I2C_Master_Receive_DMA+0x21c>)
 801471e:	fba2 2303 	umull	r2, r3, r2, r3
 8014722:	0a1a      	lsrs	r2, r3, #8
 8014724:	4613      	mov	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4413      	add	r3, r2
 801472a:	009a      	lsls	r2, r3, #2
 801472c:	4413      	add	r3, r2
 801472e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	3b01      	subs	r3, #1
 8014734:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d116      	bne.n	801476a <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	2200      	movs	r2, #0
 8014740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2220      	movs	r2, #32
 8014746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	2200      	movs	r2, #0
 801474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014756:	f043 0220 	orr.w	r2, r3, #32
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	2200      	movs	r2, #0
 8014762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8014766:	2301      	movs	r3, #1
 8014768:	e0ca      	b.n	8014900 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	699b      	ldr	r3, [r3, #24]
 8014770:	f003 0302 	and.w	r3, r3, #2
 8014774:	2b02      	cmp	r3, #2
 8014776:	d0db      	beq.n	8014730 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801477e:	2b01      	cmp	r3, #1
 8014780:	d101      	bne.n	8014786 <HAL_I2C_Master_Receive_DMA+0x96>
 8014782:	2302      	movs	r3, #2
 8014784:	e0bc      	b.n	8014900 <HAL_I2C_Master_Receive_DMA+0x210>
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	2201      	movs	r2, #1
 801478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	f003 0301 	and.w	r3, r3, #1
 8014798:	2b01      	cmp	r3, #1
 801479a:	d007      	beq.n	80147ac <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	681a      	ldr	r2, [r3, #0]
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	f042 0201 	orr.w	r2, r2, #1
 80147aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80147ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2222      	movs	r2, #34	; 0x22
 80147c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2210      	movs	r2, #16
 80147c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2200      	movs	r2, #0
 80147d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	893a      	ldrh	r2, [r7, #8]
 80147dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	4a49      	ldr	r2, [pc, #292]	; (8014910 <HAL_I2C_Master_Receive_DMA+0x220>)
 80147ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80147ee:	897a      	ldrh	r2, [r7, #10]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d062      	beq.n	80148c2 <HAL_I2C_Master_Receive_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014800:	4a44      	ldr	r2, [pc, #272]	; (8014914 <HAL_I2C_Master_Receive_DMA+0x224>)
 8014802:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014808:	4a43      	ldr	r2, [pc, #268]	; (8014918 <HAL_I2C_Master_Receive_DMA+0x228>)
 801480a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014810:	2200      	movs	r2, #0
 8014812:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014818:	2200      	movs	r2, #0
 801481a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014820:	2200      	movs	r2, #0
 8014822:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014828:	2200      	movs	r2, #0
 801482a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	3310      	adds	r3, #16
 8014836:	4619      	mov	r1, r3
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801483c:	461a      	mov	r2, r3
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014842:	f7fe fd35 	bl	80132b0 <HAL_DMA_Start_IT>
 8014846:	4603      	mov	r3, r0
 8014848:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 801484a:	7dfb      	ldrb	r3, [r7, #23]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d124      	bne.n	801489a <HAL_I2C_Master_Receive_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801485e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	681a      	ldr	r2, [r3, #0]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801486e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	2200      	movs	r2, #0
 8014874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	685a      	ldr	r2, [r3, #4]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8014886:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	685a      	ldr	r2, [r3, #4]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014896:	605a      	str	r2, [r3, #4]
 8014898:	e02f      	b.n	80148fa <HAL_I2C_Master_Receive_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2220      	movs	r2, #32
 801489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	2200      	movs	r2, #0
 80148a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148ae:	f043 0210 	orr.w	r2, r3, #16
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2200      	movs	r2, #0
 80148ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80148be:	2301      	movs	r3, #1
 80148c0:	e01e      	b.n	8014900 <HAL_I2C_Master_Receive_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80148d0:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	681a      	ldr	r2, [r3, #0]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80148e0:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	2200      	movs	r2, #0
 80148e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	685a      	ldr	r2, [r3, #4]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80148f8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80148fa:	2300      	movs	r3, #0
 80148fc:	e000      	b.n	8014900 <HAL_I2C_Master_Receive_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 80148fe:	2302      	movs	r3, #2
  }
}
 8014900:	4618      	mov	r0, r3
 8014902:	3718      	adds	r7, #24
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}
 8014908:	20000538 	.word	0x20000538
 801490c:	14f8b589 	.word	0x14f8b589
 8014910:	ffff0000 	.word	0xffff0000
 8014914:	08016089 	.word	0x08016089
 8014918:	08016233 	.word	0x08016233

0801491c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b088      	sub	sp, #32
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8014924:	2300      	movs	r3, #0
 8014926:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014934:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801493c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014944:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8014946:	7bfb      	ldrb	r3, [r7, #15]
 8014948:	2b10      	cmp	r3, #16
 801494a:	d003      	beq.n	8014954 <HAL_I2C_EV_IRQHandler+0x38>
 801494c:	7bfb      	ldrb	r3, [r7, #15]
 801494e:	2b40      	cmp	r3, #64	; 0x40
 8014950:	f040 80bd 	bne.w	8014ace <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	699b      	ldr	r3, [r3, #24]
 801495a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	695b      	ldr	r3, [r3, #20]
 8014962:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	f003 0301 	and.w	r3, r3, #1
 801496a:	2b00      	cmp	r3, #0
 801496c:	d10d      	bne.n	801498a <HAL_I2C_EV_IRQHandler+0x6e>
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8014974:	d003      	beq.n	801497e <HAL_I2C_EV_IRQHandler+0x62>
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801497c:	d101      	bne.n	8014982 <HAL_I2C_EV_IRQHandler+0x66>
 801497e:	2301      	movs	r3, #1
 8014980:	e000      	b.n	8014984 <HAL_I2C_EV_IRQHandler+0x68>
 8014982:	2300      	movs	r3, #0
 8014984:	2b01      	cmp	r3, #1
 8014986:	f000 812e 	beq.w	8014be6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00c      	beq.n	80149ae <HAL_I2C_EV_IRQHandler+0x92>
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	0a5b      	lsrs	r3, r3, #9
 8014998:	f003 0301 	and.w	r3, r3, #1
 801499c:	2b00      	cmp	r3, #0
 801499e:	d006      	beq.n	80149ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f001 fd5d 	bl	8016460 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	f000 fd58 	bl	801545c <I2C_Master_SB>
 80149ac:	e08e      	b.n	8014acc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	08db      	lsrs	r3, r3, #3
 80149b2:	f003 0301 	and.w	r3, r3, #1
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d009      	beq.n	80149ce <HAL_I2C_EV_IRQHandler+0xb2>
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	0a5b      	lsrs	r3, r3, #9
 80149be:	f003 0301 	and.w	r3, r3, #1
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d003      	beq.n	80149ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 fdce 	bl	8015568 <I2C_Master_ADD10>
 80149cc:	e07e      	b.n	8014acc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80149ce:	69fb      	ldr	r3, [r7, #28]
 80149d0:	085b      	lsrs	r3, r3, #1
 80149d2:	f003 0301 	and.w	r3, r3, #1
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d009      	beq.n	80149ee <HAL_I2C_EV_IRQHandler+0xd2>
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	0a5b      	lsrs	r3, r3, #9
 80149de:	f003 0301 	and.w	r3, r3, #1
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d003      	beq.n	80149ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 fde8 	bl	80155bc <I2C_Master_ADDR>
 80149ec:	e06e      	b.n	8014acc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80149ee:	69bb      	ldr	r3, [r7, #24]
 80149f0:	089b      	lsrs	r3, r3, #2
 80149f2:	f003 0301 	and.w	r3, r3, #1
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d037      	beq.n	8014a6a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a08:	f000 80ef 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a0c:	69fb      	ldr	r3, [r7, #28]
 8014a0e:	09db      	lsrs	r3, r3, #7
 8014a10:	f003 0301 	and.w	r3, r3, #1
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00f      	beq.n	8014a38 <HAL_I2C_EV_IRQHandler+0x11c>
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	0a9b      	lsrs	r3, r3, #10
 8014a1c:	f003 0301 	and.w	r3, r3, #1
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d009      	beq.n	8014a38 <HAL_I2C_EV_IRQHandler+0x11c>
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	089b      	lsrs	r3, r3, #2
 8014a28:	f003 0301 	and.w	r3, r3, #1
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d103      	bne.n	8014a38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 f9e5 	bl	8014e00 <I2C_MasterTransmit_TXE>
 8014a36:	e049      	b.n	8014acc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a38:	69fb      	ldr	r3, [r7, #28]
 8014a3a:	089b      	lsrs	r3, r3, #2
 8014a3c:	f003 0301 	and.w	r3, r3, #1
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	f000 80d2 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
 8014a46:	697b      	ldr	r3, [r7, #20]
 8014a48:	0a5b      	lsrs	r3, r3, #9
 8014a4a:	f003 0301 	and.w	r3, r3, #1
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f000 80cb 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8014a54:	7bfb      	ldrb	r3, [r7, #15]
 8014a56:	2b10      	cmp	r3, #16
 8014a58:	d103      	bne.n	8014a62 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f000 fa6c 	bl	8014f38 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a60:	e0c3      	b.n	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 fad0 	bl	8015008 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014a68:	e0bf      	b.n	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a78:	f000 80b7 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	099b      	lsrs	r3, r3, #6
 8014a80:	f003 0301 	and.w	r3, r3, #1
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d00f      	beq.n	8014aa8 <HAL_I2C_EV_IRQHandler+0x18c>
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	0a9b      	lsrs	r3, r3, #10
 8014a8c:	f003 0301 	and.w	r3, r3, #1
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d009      	beq.n	8014aa8 <HAL_I2C_EV_IRQHandler+0x18c>
 8014a94:	69fb      	ldr	r3, [r7, #28]
 8014a96:	089b      	lsrs	r3, r3, #2
 8014a98:	f003 0301 	and.w	r3, r3, #1
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d103      	bne.n	8014aa8 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f000 fb40 	bl	8015126 <I2C_MasterReceive_RXNE>
 8014aa6:	e011      	b.n	8014acc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	089b      	lsrs	r3, r3, #2
 8014aac:	f003 0301 	and.w	r3, r3, #1
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	f000 809a 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	0a5b      	lsrs	r3, r3, #9
 8014aba:	f003 0301 	and.w	r3, r3, #1
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	f000 8093 	beq.w	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f000 fbdf 	bl	8015288 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014aca:	e08e      	b.n	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
 8014acc:	e08d      	b.n	8014bea <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d004      	beq.n	8014ae0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	695b      	ldr	r3, [r3, #20]
 8014adc:	61fb      	str	r3, [r7, #28]
 8014ade:	e007      	b.n	8014af0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	699b      	ldr	r3, [r3, #24]
 8014ae6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	085b      	lsrs	r3, r3, #1
 8014af4:	f003 0301 	and.w	r3, r3, #1
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d012      	beq.n	8014b22 <HAL_I2C_EV_IRQHandler+0x206>
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	0a5b      	lsrs	r3, r3, #9
 8014b00:	f003 0301 	and.w	r3, r3, #1
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d00c      	beq.n	8014b22 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d003      	beq.n	8014b18 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	699b      	ldr	r3, [r3, #24]
 8014b16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8014b18:	69b9      	ldr	r1, [r7, #24]
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f000 ff9d 	bl	8015a5a <I2C_Slave_ADDR>
 8014b20:	e066      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	091b      	lsrs	r3, r3, #4
 8014b26:	f003 0301 	and.w	r3, r3, #1
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d009      	beq.n	8014b42 <HAL_I2C_EV_IRQHandler+0x226>
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	0a5b      	lsrs	r3, r3, #9
 8014b32:	f003 0301 	and.w	r3, r3, #1
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d003      	beq.n	8014b42 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 ffd2 	bl	8015ae4 <I2C_Slave_STOPF>
 8014b40:	e056      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8014b42:	7bbb      	ldrb	r3, [r7, #14]
 8014b44:	2b21      	cmp	r3, #33	; 0x21
 8014b46:	d002      	beq.n	8014b4e <HAL_I2C_EV_IRQHandler+0x232>
 8014b48:	7bbb      	ldrb	r3, [r7, #14]
 8014b4a:	2b29      	cmp	r3, #41	; 0x29
 8014b4c:	d125      	bne.n	8014b9a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	09db      	lsrs	r3, r3, #7
 8014b52:	f003 0301 	and.w	r3, r3, #1
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d00f      	beq.n	8014b7a <HAL_I2C_EV_IRQHandler+0x25e>
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	0a9b      	lsrs	r3, r3, #10
 8014b5e:	f003 0301 	and.w	r3, r3, #1
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d009      	beq.n	8014b7a <HAL_I2C_EV_IRQHandler+0x25e>
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	089b      	lsrs	r3, r3, #2
 8014b6a:	f003 0301 	and.w	r3, r3, #1
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d103      	bne.n	8014b7a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f000 feb3 	bl	80158de <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014b78:	e039      	b.n	8014bee <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014b7a:	69fb      	ldr	r3, [r7, #28]
 8014b7c:	089b      	lsrs	r3, r3, #2
 8014b7e:	f003 0301 	and.w	r3, r3, #1
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d033      	beq.n	8014bee <HAL_I2C_EV_IRQHandler+0x2d2>
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	0a5b      	lsrs	r3, r3, #9
 8014b8a:	f003 0301 	and.w	r3, r3, #1
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d02d      	beq.n	8014bee <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f000 fee0 	bl	8015958 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014b98:	e029      	b.n	8014bee <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014b9a:	69fb      	ldr	r3, [r7, #28]
 8014b9c:	099b      	lsrs	r3, r3, #6
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d00f      	beq.n	8014bc6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	0a9b      	lsrs	r3, r3, #10
 8014baa:	f003 0301 	and.w	r3, r3, #1
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d009      	beq.n	8014bc6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	089b      	lsrs	r3, r3, #2
 8014bb6:	f003 0301 	and.w	r3, r3, #1
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d103      	bne.n	8014bc6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8014bbe:	6878      	ldr	r0, [r7, #4]
 8014bc0:	f000 feeb 	bl	801599a <I2C_SlaveReceive_RXNE>
 8014bc4:	e014      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	089b      	lsrs	r3, r3, #2
 8014bca:	f003 0301 	and.w	r3, r3, #1
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d00e      	beq.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	0a5b      	lsrs	r3, r3, #9
 8014bd6:	f003 0301 	and.w	r3, r3, #1
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d008      	beq.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f000 ff19 	bl	8015a16 <I2C_SlaveReceive_BTF>
 8014be4:	e004      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8014be6:	bf00      	nop
 8014be8:	e002      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8014bea:	bf00      	nop
 8014bec:	e000      	b.n	8014bf0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8014bee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8014bf0:	3720      	adds	r7, #32
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b08a      	sub	sp, #40	; 0x28
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	695b      	ldr	r3, [r3, #20]
 8014c04:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014c18:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014c1a:	6a3b      	ldr	r3, [r7, #32]
 8014c1c:	0a1b      	lsrs	r3, r3, #8
 8014c1e:	f003 0301 	and.w	r3, r3, #1
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d00e      	beq.n	8014c44 <HAL_I2C_ER_IRQHandler+0x4e>
 8014c26:	69fb      	ldr	r3, [r7, #28]
 8014c28:	0a1b      	lsrs	r3, r3, #8
 8014c2a:	f003 0301 	and.w	r3, r3, #1
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d008      	beq.n	8014c44 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8014c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c34:	f043 0301 	orr.w	r3, r3, #1
 8014c38:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014c42:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014c44:	6a3b      	ldr	r3, [r7, #32]
 8014c46:	0a5b      	lsrs	r3, r3, #9
 8014c48:	f003 0301 	and.w	r3, r3, #1
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d00e      	beq.n	8014c6e <HAL_I2C_ER_IRQHandler+0x78>
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	0a1b      	lsrs	r3, r3, #8
 8014c54:	f003 0301 	and.w	r3, r3, #1
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d008      	beq.n	8014c6e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5e:	f043 0302 	orr.w	r3, r3, #2
 8014c62:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8014c6c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014c6e:	6a3b      	ldr	r3, [r7, #32]
 8014c70:	0a9b      	lsrs	r3, r3, #10
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d03f      	beq.n	8014cfa <HAL_I2C_ER_IRQHandler+0x104>
 8014c7a:	69fb      	ldr	r3, [r7, #28]
 8014c7c:	0a1b      	lsrs	r3, r3, #8
 8014c7e:	f003 0301 	and.w	r3, r3, #1
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d039      	beq.n	8014cfa <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8014c86:	7efb      	ldrb	r3, [r7, #27]
 8014c88:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014c98:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c9e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8014ca0:	7ebb      	ldrb	r3, [r7, #26]
 8014ca2:	2b20      	cmp	r3, #32
 8014ca4:	d112      	bne.n	8014ccc <HAL_I2C_ER_IRQHandler+0xd6>
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d10f      	bne.n	8014ccc <HAL_I2C_ER_IRQHandler+0xd6>
 8014cac:	7cfb      	ldrb	r3, [r7, #19]
 8014cae:	2b21      	cmp	r3, #33	; 0x21
 8014cb0:	d008      	beq.n	8014cc4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8014cb2:	7cfb      	ldrb	r3, [r7, #19]
 8014cb4:	2b29      	cmp	r3, #41	; 0x29
 8014cb6:	d005      	beq.n	8014cc4 <HAL_I2C_ER_IRQHandler+0xce>
 8014cb8:	7cfb      	ldrb	r3, [r7, #19]
 8014cba:	2b28      	cmp	r3, #40	; 0x28
 8014cbc:	d106      	bne.n	8014ccc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2b21      	cmp	r3, #33	; 0x21
 8014cc2:	d103      	bne.n	8014ccc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f001 f83d 	bl	8015d44 <I2C_Slave_AF>
 8014cca:	e016      	b.n	8014cfa <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8014cd4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8014cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cd8:	f043 0304 	orr.w	r3, r3, #4
 8014cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8014cde:	7efb      	ldrb	r3, [r7, #27]
 8014ce0:	2b10      	cmp	r3, #16
 8014ce2:	d002      	beq.n	8014cea <HAL_I2C_ER_IRQHandler+0xf4>
 8014ce4:	7efb      	ldrb	r3, [r7, #27]
 8014ce6:	2b40      	cmp	r3, #64	; 0x40
 8014ce8:	d107      	bne.n	8014cfa <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014cf8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8014cfa:	6a3b      	ldr	r3, [r7, #32]
 8014cfc:	0adb      	lsrs	r3, r3, #11
 8014cfe:	f003 0301 	and.w	r3, r3, #1
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d00e      	beq.n	8014d24 <HAL_I2C_ER_IRQHandler+0x12e>
 8014d06:	69fb      	ldr	r3, [r7, #28]
 8014d08:	0a1b      	lsrs	r3, r3, #8
 8014d0a:	f003 0301 	and.w	r3, r3, #1
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d008      	beq.n	8014d24 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8014d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d14:	f043 0308 	orr.w	r3, r3, #8
 8014d18:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8014d22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8014d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d008      	beq.n	8014d3c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d30:	431a      	orrs	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f001 f874 	bl	8015e24 <I2C_ITError>
  }
}
 8014d3c:	bf00      	nop
 8014d3e:	3728      	adds	r7, #40	; 0x28
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8014d4c:	bf00      	nop
 8014d4e:	370c      	adds	r7, #12
 8014d50:	46bd      	mov	sp, r7
 8014d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d56:	4770      	bx	lr

08014d58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d58:	b480      	push	{r7}
 8014d5a:	b083      	sub	sp, #12
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8014d60:	bf00      	nop
 8014d62:	370c      	adds	r7, #12
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr

08014d6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d6c:	b480      	push	{r7}
 8014d6e:	b083      	sub	sp, #12
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8014d74:	bf00      	nop
 8014d76:	370c      	adds	r7, #12
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7e:	4770      	bx	lr

08014d80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b083      	sub	sp, #12
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	460b      	mov	r3, r1
 8014d8a:	70fb      	strb	r3, [r7, #3]
 8014d8c:	4613      	mov	r3, r2
 8014d8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8014d90:	bf00      	nop
 8014d92:	370c      	adds	r7, #12
 8014d94:	46bd      	mov	sp, r7
 8014d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9a:	4770      	bx	lr

08014d9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014d9c:	b480      	push	{r7}
 8014d9e:	b083      	sub	sp, #12
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8014da4:	bf00      	nop
 8014da6:	370c      	adds	r7, #12
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8014db8:	bf00      	nop
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8014dcc:	bf00      	nop
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8014de0:	bf00      	nop
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr

08014dec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8014df4:	bf00      	nop
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014e16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e1c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d150      	bne.n	8014ec8 <I2C_MasterTransmit_TXE+0xc8>
 8014e26:	7bfb      	ldrb	r3, [r7, #15]
 8014e28:	2b21      	cmp	r3, #33	; 0x21
 8014e2a:	d14d      	bne.n	8014ec8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	2b08      	cmp	r3, #8
 8014e30:	d01d      	beq.n	8014e6e <I2C_MasterTransmit_TXE+0x6e>
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	2b20      	cmp	r3, #32
 8014e36:	d01a      	beq.n	8014e6e <I2C_MasterTransmit_TXE+0x6e>
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014e3e:	d016      	beq.n	8014e6e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	685a      	ldr	r2, [r3, #4]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014e4e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2211      	movs	r2, #17
 8014e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	2220      	movs	r2, #32
 8014e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7ff ff6c 	bl	8014d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014e6c:	e060      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	685a      	ldr	r2, [r3, #4]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014e7c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014e8c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2200      	movs	r2, #0
 8014e92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2220      	movs	r2, #32
 8014e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014ea2:	b2db      	uxtb	r3, r3
 8014ea4:	2b40      	cmp	r3, #64	; 0x40
 8014ea6:	d107      	bne.n	8014eb8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2200      	movs	r2, #0
 8014eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7ff ff7d 	bl	8014db0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014eb6:	e03b      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7ff ff3f 	bl	8014d44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014ec6:	e033      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8014ec8:	7bfb      	ldrb	r3, [r7, #15]
 8014eca:	2b21      	cmp	r3, #33	; 0x21
 8014ecc:	d005      	beq.n	8014eda <I2C_MasterTransmit_TXE+0xda>
 8014ece:	7bbb      	ldrb	r3, [r7, #14]
 8014ed0:	2b40      	cmp	r3, #64	; 0x40
 8014ed2:	d12d      	bne.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8014ed4:	7bfb      	ldrb	r3, [r7, #15]
 8014ed6:	2b22      	cmp	r3, #34	; 0x22
 8014ed8:	d12a      	bne.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d108      	bne.n	8014ef6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	685a      	ldr	r2, [r3, #4]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	681b      	ldr	r3, [r3, #0]
 8014eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014ef2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8014ef4:	e01c      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014efc:	b2db      	uxtb	r3, r3
 8014efe:	2b40      	cmp	r3, #64	; 0x40
 8014f00:	d103      	bne.n	8014f0a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f000 f880 	bl	8015008 <I2C_MemoryTransmit_TXE_BTF>
}
 8014f08:	e012      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f0e:	781a      	ldrb	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f1a:	1c5a      	adds	r2, r3, #1
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	3b01      	subs	r3, #1
 8014f28:	b29a      	uxth	r2, r3
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8014f2e:	e7ff      	b.n	8014f30 <I2C_MasterTransmit_TXE+0x130>
 8014f30:	bf00      	nop
 8014f32:	3710      	adds	r7, #16
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b084      	sub	sp, #16
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f44:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	2b21      	cmp	r3, #33	; 0x21
 8014f50:	d156      	bne.n	8015000 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d012      	beq.n	8014f82 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f60:	781a      	ldrb	r2, [r3, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f6c:	1c5a      	adds	r2, r3, #1
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8014f80:	e03e      	b.n	8015000 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b08      	cmp	r3, #8
 8014f86:	d01d      	beq.n	8014fc4 <I2C_MasterTransmit_BTF+0x8c>
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2b20      	cmp	r3, #32
 8014f8c:	d01a      	beq.n	8014fc4 <I2C_MasterTransmit_BTF+0x8c>
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8014f94:	d016      	beq.n	8014fc4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014fa4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2211      	movs	r2, #17
 8014faa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2220      	movs	r2, #32
 8014fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f7ff fec1 	bl	8014d44 <HAL_I2C_MasterTxCpltCallback>
}
 8014fc2:	e01d      	b.n	8015000 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	685a      	ldr	r2, [r3, #4]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	681b      	ldr	r3, [r3, #0]
 8014fce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8014fd2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014fe2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2220      	movs	r2, #32
 8014fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f7ff fea2 	bl	8014d44 <HAL_I2C_MasterTxCpltCallback>
}
 8015000:	bf00      	nop
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015016:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801501c:	2b00      	cmp	r3, #0
 801501e:	d11d      	bne.n	801505c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015024:	2b01      	cmp	r3, #1
 8015026:	d10b      	bne.n	8015040 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801502c:	b2da      	uxtb	r2, r3
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015038:	1c9a      	adds	r2, r3, #2
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 801503e:	e06e      	b.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015044:	b29b      	uxth	r3, r3
 8015046:	121b      	asrs	r3, r3, #8
 8015048:	b2da      	uxtb	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015054:	1c5a      	adds	r2, r3, #1
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	651a      	str	r2, [r3, #80]	; 0x50
}
 801505a:	e060      	b.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015060:	2b01      	cmp	r3, #1
 8015062:	d10b      	bne.n	801507c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015068:	b2da      	uxtb	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015074:	1c5a      	adds	r2, r3, #1
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	651a      	str	r2, [r3, #80]	; 0x50
}
 801507a:	e050      	b.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015080:	2b02      	cmp	r3, #2
 8015082:	d14c      	bne.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8015084:	7bfb      	ldrb	r3, [r7, #15]
 8015086:	2b22      	cmp	r3, #34	; 0x22
 8015088:	d108      	bne.n	801509c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015098:	601a      	str	r2, [r3, #0]
}
 801509a:	e040      	b.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d015      	beq.n	80150d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80150a6:	7bfb      	ldrb	r3, [r7, #15]
 80150a8:	2b21      	cmp	r3, #33	; 0x21
 80150aa:	d112      	bne.n	80150d2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b0:	781a      	ldrb	r2, [r3, #0]
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150bc:	1c5a      	adds	r2, r3, #1
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	3b01      	subs	r3, #1
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80150d0:	e025      	b.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d120      	bne.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80150dc:	7bfb      	ldrb	r3, [r7, #15]
 80150de:	2b21      	cmp	r3, #33	; 0x21
 80150e0:	d11d      	bne.n	801511e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80150f0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015100:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2200      	movs	r2, #0
 8015106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2220      	movs	r2, #32
 801510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2200      	movs	r2, #0
 8015114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f7ff fe49 	bl	8014db0 <HAL_I2C_MemTxCpltCallback>
}
 801511e:	bf00      	nop
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015134:	b2db      	uxtb	r3, r3
 8015136:	2b22      	cmp	r3, #34	; 0x22
 8015138:	f040 80a2 	bne.w	8015280 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015140:	b29b      	uxth	r3, r3
 8015142:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2b03      	cmp	r3, #3
 8015148:	d921      	bls.n	801518e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	691a      	ldr	r2, [r3, #16]
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015154:	b2d2      	uxtb	r2, r2
 8015156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515c:	1c5a      	adds	r2, r3, #1
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015166:	b29b      	uxth	r3, r3
 8015168:	3b01      	subs	r3, #1
 801516a:	b29a      	uxth	r2, r3
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015174:	b29b      	uxth	r3, r3
 8015176:	2b03      	cmp	r3, #3
 8015178:	f040 8082 	bne.w	8015280 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	685a      	ldr	r2, [r3, #4]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801518a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 801518c:	e078      	b.n	8015280 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015192:	2b02      	cmp	r3, #2
 8015194:	d074      	beq.n	8015280 <I2C_MasterReceive_RXNE+0x15a>
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d002      	beq.n	80151a2 <I2C_MasterReceive_RXNE+0x7c>
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d16e      	bne.n	8015280 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f001 f92a 	bl	80163fc <I2C_WaitOnSTOPRequestThroughIT>
 80151a8:	4603      	mov	r3, r0
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d142      	bne.n	8015234 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80151bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	685a      	ldr	r2, [r3, #4]
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80151cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	691a      	ldr	r2, [r3, #16]
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d8:	b2d2      	uxtb	r2, r2
 80151da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e0:	1c5a      	adds	r2, r3, #1
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	3b01      	subs	r3, #1
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2220      	movs	r2, #32
 80151f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015202:	b2db      	uxtb	r3, r3
 8015204:	2b40      	cmp	r3, #64	; 0x40
 8015206:	d10a      	bne.n	801521e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2200      	movs	r2, #0
 801520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2200      	movs	r2, #0
 8015214:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff fdd4 	bl	8014dc4 <HAL_I2C_MemRxCpltCallback>
}
 801521c:	e030      	b.n	8015280 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	2200      	movs	r2, #0
 8015222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	2212      	movs	r2, #18
 801522a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f7f8 faa9 	bl	800d784 <HAL_I2C_MasterRxCpltCallback>
}
 8015232:	e025      	b.n	8015280 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	685a      	ldr	r2, [r3, #4]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015242:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	691a      	ldr	r2, [r3, #16]
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801524e:	b2d2      	uxtb	r2, r2
 8015250:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015256:	1c5a      	adds	r2, r3, #1
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015260:	b29b      	uxth	r3, r3
 8015262:	3b01      	subs	r3, #1
 8015264:	b29a      	uxth	r2, r3
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2220      	movs	r2, #32
 801526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2200      	movs	r2, #0
 8015276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f7ff fdac 	bl	8014dd8 <HAL_I2C_ErrorCallback>
}
 8015280:	bf00      	nop
 8015282:	3710      	adds	r7, #16
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015294:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801529a:	b29b      	uxth	r3, r3
 801529c:	2b04      	cmp	r3, #4
 801529e:	d11b      	bne.n	80152d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	685a      	ldr	r2, [r3, #4]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80152ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	691a      	ldr	r2, [r3, #16]
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ba:	b2d2      	uxtb	r2, r2
 80152bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c2:	1c5a      	adds	r2, r3, #1
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	3b01      	subs	r3, #1
 80152d0:	b29a      	uxth	r2, r3
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80152d6:	e0bd      	b.n	8015454 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80152dc:	b29b      	uxth	r3, r3
 80152de:	2b03      	cmp	r3, #3
 80152e0:	d129      	bne.n	8015336 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	685a      	ldr	r2, [r3, #4]
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80152f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2b04      	cmp	r3, #4
 80152f6:	d00a      	beq.n	801530e <I2C_MasterReceive_BTF+0x86>
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d007      	beq.n	801530e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	681a      	ldr	r2, [r3, #0]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801530c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	691a      	ldr	r2, [r3, #16]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015318:	b2d2      	uxtb	r2, r2
 801531a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015320:	1c5a      	adds	r2, r3, #1
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801532a:	b29b      	uxth	r3, r3
 801532c:	3b01      	subs	r3, #1
 801532e:	b29a      	uxth	r2, r3
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8015334:	e08e      	b.n	8015454 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801533a:	b29b      	uxth	r3, r3
 801533c:	2b02      	cmp	r3, #2
 801533e:	d176      	bne.n	801542e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	2b01      	cmp	r3, #1
 8015344:	d002      	beq.n	801534c <I2C_MasterReceive_BTF+0xc4>
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2b10      	cmp	r3, #16
 801534a:	d108      	bne.n	801535e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	681a      	ldr	r2, [r3, #0]
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801535a:	601a      	str	r2, [r3, #0]
 801535c:	e019      	b.n	8015392 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	2b04      	cmp	r3, #4
 8015362:	d002      	beq.n	801536a <I2C_MasterReceive_BTF+0xe2>
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	2b02      	cmp	r3, #2
 8015368:	d108      	bne.n	801537c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015378:	601a      	str	r2, [r3, #0]
 801537a:	e00a      	b.n	8015392 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	2b10      	cmp	r3, #16
 8015380:	d007      	beq.n	8015392 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	681a      	ldr	r2, [r3, #0]
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015390:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	691a      	ldr	r2, [r3, #16]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801539c:	b2d2      	uxtb	r2, r2
 801539e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a4:	1c5a      	adds	r2, r3, #1
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80153ae:	b29b      	uxth	r3, r3
 80153b0:	3b01      	subs	r3, #1
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	691a      	ldr	r2, [r3, #16]
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153c2:	b2d2      	uxtb	r2, r2
 80153c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ca:	1c5a      	adds	r2, r3, #1
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80153d4:	b29b      	uxth	r3, r3
 80153d6:	3b01      	subs	r3, #1
 80153d8:	b29a      	uxth	r2, r3
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	685a      	ldr	r2, [r3, #4]
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80153ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2220      	movs	r2, #32
 80153f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80153fc:	b2db      	uxtb	r3, r3
 80153fe:	2b40      	cmp	r3, #64	; 0x40
 8015400:	d10a      	bne.n	8015418 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2200      	movs	r2, #0
 8015406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	2200      	movs	r2, #0
 801540e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7ff fcd7 	bl	8014dc4 <HAL_I2C_MemRxCpltCallback>
}
 8015416:	e01d      	b.n	8015454 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2200      	movs	r2, #0
 801541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	2212      	movs	r2, #18
 8015424:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f7f8 f9ac 	bl	800d784 <HAL_I2C_MasterRxCpltCallback>
}
 801542c:	e012      	b.n	8015454 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	691a      	ldr	r2, [r3, #16]
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015438:	b2d2      	uxtb	r2, r2
 801543a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015440:	1c5a      	adds	r2, r3, #1
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801544a:	b29b      	uxth	r3, r3
 801544c:	3b01      	subs	r3, #1
 801544e:	b29a      	uxth	r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8015454:	bf00      	nop
 8015456:	3710      	adds	r7, #16
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801546a:	b2db      	uxtb	r3, r3
 801546c:	2b40      	cmp	r3, #64	; 0x40
 801546e:	d117      	bne.n	80154a0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015474:	2b00      	cmp	r3, #0
 8015476:	d109      	bne.n	801548c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801547c:	b2db      	uxtb	r3, r3
 801547e:	461a      	mov	r2, r3
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8015488:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801548a:	e067      	b.n	801555c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015490:	b2db      	uxtb	r3, r3
 8015492:	f043 0301 	orr.w	r3, r3, #1
 8015496:	b2da      	uxtb	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	611a      	str	r2, [r3, #16]
}
 801549e:	e05d      	b.n	801555c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154a8:	d133      	bne.n	8015512 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80154b0:	b2db      	uxtb	r3, r3
 80154b2:	2b21      	cmp	r3, #33	; 0x21
 80154b4:	d109      	bne.n	80154ca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	461a      	mov	r2, r3
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80154c6:	611a      	str	r2, [r3, #16]
 80154c8:	e008      	b.n	80154dc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	f043 0301 	orr.w	r3, r3, #1
 80154d4:	b2da      	uxtb	r2, r3
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d004      	beq.n	80154ee <I2C_Master_SB+0x92>
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d108      	bne.n	8015500 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d032      	beq.n	801555c <I2C_Master_SB+0x100>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d02d      	beq.n	801555c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	685a      	ldr	r2, [r3, #4]
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801550e:	605a      	str	r2, [r3, #4]
}
 8015510:	e024      	b.n	801555c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015516:	2b00      	cmp	r3, #0
 8015518:	d10e      	bne.n	8015538 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801551e:	b29b      	uxth	r3, r3
 8015520:	11db      	asrs	r3, r3, #7
 8015522:	b2db      	uxtb	r3, r3
 8015524:	f003 0306 	and.w	r3, r3, #6
 8015528:	b2db      	uxtb	r3, r3
 801552a:	f063 030f 	orn	r3, r3, #15
 801552e:	b2da      	uxtb	r2, r3
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	611a      	str	r2, [r3, #16]
}
 8015536:	e011      	b.n	801555c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801553c:	2b01      	cmp	r3, #1
 801553e:	d10d      	bne.n	801555c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015544:	b29b      	uxth	r3, r3
 8015546:	11db      	asrs	r3, r3, #7
 8015548:	b2db      	uxtb	r3, r3
 801554a:	f003 0306 	and.w	r3, r3, #6
 801554e:	b2db      	uxtb	r3, r3
 8015550:	f063 030e 	orn	r3, r3, #14
 8015554:	b2da      	uxtb	r2, r3
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	611a      	str	r2, [r3, #16]
}
 801555c:	bf00      	nop
 801555e:	370c      	adds	r7, #12
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr

08015568 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8015568:	b480      	push	{r7}
 801556a:	b083      	sub	sp, #12
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015574:	b2da      	uxtb	r2, r3
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015580:	2b00      	cmp	r3, #0
 8015582:	d103      	bne.n	801558c <I2C_Master_ADD10+0x24>
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015588:	2b00      	cmp	r3, #0
 801558a:	d011      	beq.n	80155b0 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015592:	2b00      	cmp	r3, #0
 8015594:	d104      	bne.n	80155a0 <I2C_Master_ADD10+0x38>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801559c:	2b00      	cmp	r3, #0
 801559e:	d007      	beq.n	80155b0 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	685a      	ldr	r2, [r3, #4]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80155ae:	605a      	str	r2, [r3, #4]
    }
  }
}
 80155b0:	bf00      	nop
 80155b2:	370c      	adds	r7, #12
 80155b4:	46bd      	mov	sp, r7
 80155b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ba:	4770      	bx	lr

080155bc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80155bc:	b480      	push	{r7}
 80155be:	b091      	sub	sp, #68	; 0x44
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80155ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80155e0:	b2db      	uxtb	r3, r3
 80155e2:	2b22      	cmp	r3, #34	; 0x22
 80155e4:	f040 8169 	bne.w	80158ba <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d10f      	bne.n	8015610 <I2C_Master_ADDR+0x54>
 80155f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155f4:	2b40      	cmp	r3, #64	; 0x40
 80155f6:	d10b      	bne.n	8015610 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80155f8:	2300      	movs	r3, #0
 80155fa:	633b      	str	r3, [r7, #48]	; 0x30
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	695b      	ldr	r3, [r3, #20]
 8015602:	633b      	str	r3, [r7, #48]	; 0x30
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	699b      	ldr	r3, [r3, #24]
 801560a:	633b      	str	r3, [r7, #48]	; 0x30
 801560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801560e:	e160      	b.n	80158d2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015614:	2b00      	cmp	r3, #0
 8015616:	d11d      	bne.n	8015654 <I2C_Master_ADDR+0x98>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	691b      	ldr	r3, [r3, #16]
 801561c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8015620:	d118      	bne.n	8015654 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015622:	2300      	movs	r3, #0
 8015624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	695b      	ldr	r3, [r3, #20]
 801562c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	699b      	ldr	r3, [r3, #24]
 8015634:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015636:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8015646:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801564c:	1c5a      	adds	r2, r3, #1
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	651a      	str	r2, [r3, #80]	; 0x50
 8015652:	e13e      	b.n	80158d2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015658:	b29b      	uxth	r3, r3
 801565a:	2b00      	cmp	r3, #0
 801565c:	d113      	bne.n	8015686 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801565e:	2300      	movs	r3, #0
 8015660:	62bb      	str	r3, [r7, #40]	; 0x28
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	695b      	ldr	r3, [r3, #20]
 8015668:	62bb      	str	r3, [r7, #40]	; 0x28
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	699b      	ldr	r3, [r3, #24]
 8015670:	62bb      	str	r3, [r7, #40]	; 0x28
 8015672:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	681a      	ldr	r2, [r3, #0]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015682:	601a      	str	r2, [r3, #0]
 8015684:	e115      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801568a:	b29b      	uxth	r3, r3
 801568c:	2b01      	cmp	r3, #1
 801568e:	f040 808a 	bne.w	80157a6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8015692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015698:	d137      	bne.n	801570a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80156a8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80156b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156b8:	d113      	bne.n	80156e2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	681a      	ldr	r2, [r3, #0]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80156c8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80156ca:	2300      	movs	r3, #0
 80156cc:	627b      	str	r3, [r7, #36]	; 0x24
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	695b      	ldr	r3, [r3, #20]
 80156d4:	627b      	str	r3, [r7, #36]	; 0x24
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	699b      	ldr	r3, [r3, #24]
 80156dc:	627b      	str	r3, [r7, #36]	; 0x24
 80156de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e0:	e0e7      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80156e2:	2300      	movs	r3, #0
 80156e4:	623b      	str	r3, [r7, #32]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	695b      	ldr	r3, [r3, #20]
 80156ec:	623b      	str	r3, [r7, #32]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	699b      	ldr	r3, [r3, #24]
 80156f4:	623b      	str	r3, [r7, #32]
 80156f6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015706:	601a      	str	r2, [r3, #0]
 8015708:	e0d3      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801570c:	2b08      	cmp	r3, #8
 801570e:	d02e      	beq.n	801576e <I2C_Master_ADDR+0x1b2>
 8015710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015712:	2b20      	cmp	r3, #32
 8015714:	d02b      	beq.n	801576e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8015716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015718:	2b12      	cmp	r3, #18
 801571a:	d102      	bne.n	8015722 <I2C_Master_ADDR+0x166>
 801571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801571e:	2b01      	cmp	r3, #1
 8015720:	d125      	bne.n	801576e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8015722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015724:	2b04      	cmp	r3, #4
 8015726:	d00e      	beq.n	8015746 <I2C_Master_ADDR+0x18a>
 8015728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801572a:	2b02      	cmp	r3, #2
 801572c:	d00b      	beq.n	8015746 <I2C_Master_ADDR+0x18a>
 801572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015730:	2b10      	cmp	r3, #16
 8015732:	d008      	beq.n	8015746 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015742:	601a      	str	r2, [r3, #0]
 8015744:	e007      	b.n	8015756 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	681a      	ldr	r2, [r3, #0]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015754:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015756:	2300      	movs	r3, #0
 8015758:	61fb      	str	r3, [r7, #28]
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	695b      	ldr	r3, [r3, #20]
 8015760:	61fb      	str	r3, [r7, #28]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	61fb      	str	r3, [r7, #28]
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	e0a1      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801577c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801577e:	2300      	movs	r3, #0
 8015780:	61bb      	str	r3, [r7, #24]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	695b      	ldr	r3, [r3, #20]
 8015788:	61bb      	str	r3, [r7, #24]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	699b      	ldr	r3, [r3, #24]
 8015790:	61bb      	str	r3, [r7, #24]
 8015792:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80157a2:	601a      	str	r2, [r3, #0]
 80157a4:	e085      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d14d      	bne.n	801584c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80157b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b2:	2b04      	cmp	r3, #4
 80157b4:	d016      	beq.n	80157e4 <I2C_Master_ADDR+0x228>
 80157b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b8:	2b02      	cmp	r3, #2
 80157ba:	d013      	beq.n	80157e4 <I2C_Master_ADDR+0x228>
 80157bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157be:	2b10      	cmp	r3, #16
 80157c0:	d010      	beq.n	80157e4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	681a      	ldr	r2, [r3, #0]
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80157d0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	681a      	ldr	r2, [r3, #0]
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80157e0:	601a      	str	r2, [r3, #0]
 80157e2:	e007      	b.n	80157f4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80157f2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80157fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015802:	d117      	bne.n	8015834 <I2C_Master_ADDR+0x278>
 8015804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015806:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801580a:	d00b      	beq.n	8015824 <I2C_Master_ADDR+0x268>
 801580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801580e:	2b01      	cmp	r3, #1
 8015810:	d008      	beq.n	8015824 <I2C_Master_ADDR+0x268>
 8015812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015814:	2b08      	cmp	r3, #8
 8015816:	d005      	beq.n	8015824 <I2C_Master_ADDR+0x268>
 8015818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801581a:	2b10      	cmp	r3, #16
 801581c:	d002      	beq.n	8015824 <I2C_Master_ADDR+0x268>
 801581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015820:	2b20      	cmp	r3, #32
 8015822:	d107      	bne.n	8015834 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8015832:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8015834:	2300      	movs	r3, #0
 8015836:	617b      	str	r3, [r7, #20]
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	695b      	ldr	r3, [r3, #20]
 801583e:	617b      	str	r3, [r7, #20]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	699b      	ldr	r3, [r3, #24]
 8015846:	617b      	str	r3, [r7, #20]
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	e032      	b.n	80158b2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	681a      	ldr	r2, [r3, #0]
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801585a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801586a:	d117      	bne.n	801589c <I2C_Master_ADDR+0x2e0>
 801586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801586e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8015872:	d00b      	beq.n	801588c <I2C_Master_ADDR+0x2d0>
 8015874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015876:	2b01      	cmp	r3, #1
 8015878:	d008      	beq.n	801588c <I2C_Master_ADDR+0x2d0>
 801587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587c:	2b08      	cmp	r3, #8
 801587e:	d005      	beq.n	801588c <I2C_Master_ADDR+0x2d0>
 8015880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015882:	2b10      	cmp	r3, #16
 8015884:	d002      	beq.n	801588c <I2C_Master_ADDR+0x2d0>
 8015886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015888:	2b20      	cmp	r3, #32
 801588a:	d107      	bne.n	801589c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	685a      	ldr	r2, [r3, #4]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801589a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801589c:	2300      	movs	r3, #0
 801589e:	613b      	str	r3, [r7, #16]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	695b      	ldr	r3, [r3, #20]
 80158a6:	613b      	str	r3, [r7, #16]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	699b      	ldr	r3, [r3, #24]
 80158ae:	613b      	str	r3, [r7, #16]
 80158b0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2200      	movs	r2, #0
 80158b6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80158b8:	e00b      	b.n	80158d2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80158ba:	2300      	movs	r3, #0
 80158bc:	60fb      	str	r3, [r7, #12]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	695b      	ldr	r3, [r3, #20]
 80158c4:	60fb      	str	r3, [r7, #12]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	699b      	ldr	r3, [r3, #24]
 80158cc:	60fb      	str	r3, [r7, #12]
 80158ce:	68fb      	ldr	r3, [r7, #12]
}
 80158d0:	e7ff      	b.n	80158d2 <I2C_Master_ADDR+0x316>
 80158d2:	bf00      	nop
 80158d4:	3744      	adds	r7, #68	; 0x44
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr

080158de <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80158de:	b580      	push	{r7, lr}
 80158e0:	b084      	sub	sp, #16
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80158ec:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d02b      	beq.n	8015950 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fc:	781a      	ldrb	r2, [r3, #0]
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015908:	1c5a      	adds	r2, r3, #1
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015912:	b29b      	uxth	r3, r3
 8015914:	3b01      	subs	r3, #1
 8015916:	b29a      	uxth	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015920:	b29b      	uxth	r3, r3
 8015922:	2b00      	cmp	r3, #0
 8015924:	d114      	bne.n	8015950 <I2C_SlaveTransmit_TXE+0x72>
 8015926:	7bfb      	ldrb	r3, [r7, #15]
 8015928:	2b29      	cmp	r3, #41	; 0x29
 801592a:	d111      	bne.n	8015950 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	685a      	ldr	r2, [r3, #4]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801593a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	2221      	movs	r2, #33	; 0x21
 8015940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2228      	movs	r2, #40	; 0x28
 8015946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7ff fa04 	bl	8014d58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8015950:	bf00      	nop
 8015952:	3710      	adds	r7, #16
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8015958:	b480      	push	{r7}
 801595a:	b083      	sub	sp, #12
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015964:	b29b      	uxth	r3, r3
 8015966:	2b00      	cmp	r3, #0
 8015968:	d011      	beq.n	801598e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801596e:	781a      	ldrb	r2, [r3, #0]
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597a:	1c5a      	adds	r2, r3, #1
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015984:	b29b      	uxth	r3, r3
 8015986:	3b01      	subs	r3, #1
 8015988:	b29a      	uxth	r2, r3
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801598e:	bf00      	nop
 8015990:	370c      	adds	r7, #12
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801599a:	b580      	push	{r7, lr}
 801599c:	b084      	sub	sp, #16
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80159ae:	b29b      	uxth	r3, r3
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d02c      	beq.n	8015a0e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	691a      	ldr	r2, [r3, #16]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159be:	b2d2      	uxtb	r2, r2
 80159c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c6:	1c5a      	adds	r2, r3, #1
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80159d0:	b29b      	uxth	r3, r3
 80159d2:	3b01      	subs	r3, #1
 80159d4:	b29a      	uxth	r2, r3
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80159de:	b29b      	uxth	r3, r3
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d114      	bne.n	8015a0e <I2C_SlaveReceive_RXNE+0x74>
 80159e4:	7bfb      	ldrb	r3, [r7, #15]
 80159e6:	2b2a      	cmp	r3, #42	; 0x2a
 80159e8:	d111      	bne.n	8015a0e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	685a      	ldr	r2, [r3, #4]
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80159f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2222      	movs	r2, #34	; 0x22
 80159fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2228      	movs	r2, #40	; 0x28
 8015a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7ff f9af 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8015a0e:	bf00      	nop
 8015a10:	3710      	adds	r7, #16
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8015a16:	b480      	push	{r7}
 8015a18:	b083      	sub	sp, #12
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d012      	beq.n	8015a4e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	691a      	ldr	r2, [r3, #16]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a32:	b2d2      	uxtb	r2, r2
 8015a34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3a:	1c5a      	adds	r2, r3, #1
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	3b01      	subs	r3, #1
 8015a48:	b29a      	uxth	r2, r3
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8015a4e:	bf00      	nop
 8015a50:	370c      	adds	r7, #12
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr

08015a5a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8015a5a:	b580      	push	{r7, lr}
 8015a5c:	b084      	sub	sp, #16
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	6078      	str	r0, [r7, #4]
 8015a62:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8015a64:	2300      	movs	r3, #0
 8015a66:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a6e:	b2db      	uxtb	r3, r3
 8015a70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015a74:	2b28      	cmp	r3, #40	; 0x28
 8015a76:	d127      	bne.n	8015ac8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	685a      	ldr	r2, [r3, #4]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015a86:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	089b      	lsrs	r3, r3, #2
 8015a8c:	f003 0301 	and.w	r3, r3, #1
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d101      	bne.n	8015a98 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8015a94:	2301      	movs	r3, #1
 8015a96:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8015a98:	683b      	ldr	r3, [r7, #0]
 8015a9a:	09db      	lsrs	r3, r3, #7
 8015a9c:	f003 0301 	and.w	r3, r3, #1
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d103      	bne.n	8015aac <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	68db      	ldr	r3, [r3, #12]
 8015aa8:	81bb      	strh	r3, [r7, #12]
 8015aaa:	e002      	b.n	8015ab2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	699b      	ldr	r3, [r3, #24]
 8015ab0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8015aba:	89ba      	ldrh	r2, [r7, #12]
 8015abc:	7bfb      	ldrb	r3, [r7, #15]
 8015abe:	4619      	mov	r1, r3
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7ff f95d 	bl	8014d80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8015ac6:	e008      	b.n	8015ada <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f06f 0202 	mvn.w	r2, #2
 8015ad0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8015ada:	bf00      	nop
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
	...

08015ae4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015af2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	685a      	ldr	r2, [r3, #4]
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015b02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8015b04:	2300      	movs	r3, #0
 8015b06:	60bb      	str	r3, [r7, #8]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	695b      	ldr	r3, [r3, #20]
 8015b0e:	60bb      	str	r3, [r7, #8]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	681a      	ldr	r2, [r3, #0]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f042 0201 	orr.w	r2, r2, #1
 8015b1e:	601a      	str	r2, [r3, #0]
 8015b20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	681a      	ldr	r2, [r3, #0]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015b30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015b40:	d172      	bne.n	8015c28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8015b42:	7bfb      	ldrb	r3, [r7, #15]
 8015b44:	2b22      	cmp	r3, #34	; 0x22
 8015b46:	d002      	beq.n	8015b4e <I2C_Slave_STOPF+0x6a>
 8015b48:	7bfb      	ldrb	r3, [r7, #15]
 8015b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b4c:	d135      	bne.n	8015bba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b60:	b29b      	uxth	r3, r3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d005      	beq.n	8015b72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b6a:	f043 0204 	orr.w	r2, r3, #4
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	685a      	ldr	r2, [r3, #4]
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015b80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fd fd96 	bl	80136b8 <HAL_DMA_GetState>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	d049      	beq.n	8015c26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b96:	4a69      	ldr	r2, [pc, #420]	; (8015d3c <I2C_Slave_STOPF+0x258>)
 8015b98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f7fd fbde 	bl	8013360 <HAL_DMA_Abort_IT>
 8015ba4:	4603      	mov	r3, r0
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d03d      	beq.n	8015c26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bb0:	687a      	ldr	r2, [r7, #4]
 8015bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015bb4:	4610      	mov	r0, r2
 8015bb6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015bb8:	e035      	b.n	8015c26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	b29a      	uxth	r2, r3
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bcc:	b29b      	uxth	r3, r3
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d005      	beq.n	8015bde <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bd6:	f043 0204 	orr.w	r2, r3, #4
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	685a      	ldr	r2, [r3, #4]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015bec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	f7fd fd60 	bl	80136b8 <HAL_DMA_GetState>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	d014      	beq.n	8015c28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c02:	4a4e      	ldr	r2, [pc, #312]	; (8015d3c <I2C_Slave_STOPF+0x258>)
 8015c04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7fd fba8 	bl	8013360 <HAL_DMA_Abort_IT>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d008      	beq.n	8015c28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015c20:	4610      	mov	r0, r2
 8015c22:	4798      	blx	r3
 8015c24:	e000      	b.n	8015c28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8015c26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d03e      	beq.n	8015cb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	695b      	ldr	r3, [r3, #20]
 8015c38:	f003 0304 	and.w	r3, r3, #4
 8015c3c:	2b04      	cmp	r3, #4
 8015c3e:	d112      	bne.n	8015c66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	691a      	ldr	r2, [r3, #16]
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c4a:	b2d2      	uxtb	r2, r2
 8015c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c52:	1c5a      	adds	r2, r3, #1
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c5c:	b29b      	uxth	r3, r3
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	b29a      	uxth	r2, r3
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c70:	2b40      	cmp	r3, #64	; 0x40
 8015c72:	d112      	bne.n	8015c9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	691a      	ldr	r2, [r3, #16]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c7e:	b2d2      	uxtb	r2, r2
 8015c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c86:	1c5a      	adds	r2, r3, #1
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	3b01      	subs	r3, #1
 8015c94:	b29a      	uxth	r2, r3
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d005      	beq.n	8015cb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ca8:	f043 0204 	orr.w	r2, r3, #4
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d003      	beq.n	8015cc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 f8b3 	bl	8015e24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8015cbe:	e039      	b.n	8015d34 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8015cc4:	d109      	bne.n	8015cda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2200      	movs	r2, #0
 8015cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2228      	movs	r2, #40	; 0x28
 8015cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff f849 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	2b28      	cmp	r3, #40	; 0x28
 8015ce4:	d111      	bne.n	8015d0a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	4a15      	ldr	r2, [pc, #84]	; (8015d40 <I2C_Slave_STOPF+0x25c>)
 8015cea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2220      	movs	r2, #32
 8015cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7ff f84a 	bl	8014d9c <HAL_I2C_ListenCpltCallback>
}
 8015d08:	e014      	b.n	8015d34 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d0e:	2b22      	cmp	r3, #34	; 0x22
 8015d10:	d002      	beq.n	8015d18 <I2C_Slave_STOPF+0x234>
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
 8015d14:	2b22      	cmp	r3, #34	; 0x22
 8015d16:	d10d      	bne.n	8015d34 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2220      	movs	r2, #32
 8015d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2200      	movs	r2, #0
 8015d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f7ff f81c 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
}
 8015d34:	bf00      	nop
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	080162ad 	.word	0x080162ad
 8015d40:	ffff0000 	.word	0xffff0000

08015d44 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d52:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d58:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8015d5a:	68bb      	ldr	r3, [r7, #8]
 8015d5c:	2b08      	cmp	r3, #8
 8015d5e:	d002      	beq.n	8015d66 <I2C_Slave_AF+0x22>
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	2b20      	cmp	r3, #32
 8015d64:	d129      	bne.n	8015dba <I2C_Slave_AF+0x76>
 8015d66:	7bfb      	ldrb	r3, [r7, #15]
 8015d68:	2b28      	cmp	r3, #40	; 0x28
 8015d6a:	d126      	bne.n	8015dba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	4a2c      	ldr	r2, [pc, #176]	; (8015e20 <I2C_Slave_AF+0xdc>)
 8015d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015d80:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015d8a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	681a      	ldr	r2, [r3, #0]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015d9a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2200      	movs	r2, #0
 8015da0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2220      	movs	r2, #32
 8015da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	2200      	movs	r2, #0
 8015dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7fe fff2 	bl	8014d9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8015db8:	e02e      	b.n	8015e18 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8015dba:	7bfb      	ldrb	r3, [r7, #15]
 8015dbc:	2b21      	cmp	r3, #33	; 0x21
 8015dbe:	d126      	bne.n	8015e0e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	4a17      	ldr	r2, [pc, #92]	; (8015e20 <I2C_Slave_AF+0xdc>)
 8015dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2221      	movs	r2, #33	; 0x21
 8015dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2220      	movs	r2, #32
 8015dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	685a      	ldr	r2, [r3, #4]
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8015dea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015df4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8015e04:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f7fe ffa6 	bl	8014d58 <HAL_I2C_SlaveTxCpltCallback>
}
 8015e0c:	e004      	b.n	8015e18 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8015e16:	615a      	str	r2, [r3, #20]
}
 8015e18:	bf00      	nop
 8015e1a:	3710      	adds	r7, #16
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	ffff0000 	.word	0xffff0000

08015e24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b084      	sub	sp, #16
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015e3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8015e3c:	7bbb      	ldrb	r3, [r7, #14]
 8015e3e:	2b10      	cmp	r3, #16
 8015e40:	d002      	beq.n	8015e48 <I2C_ITError+0x24>
 8015e42:	7bbb      	ldrb	r3, [r7, #14]
 8015e44:	2b40      	cmp	r3, #64	; 0x40
 8015e46:	d10a      	bne.n	8015e5e <I2C_ITError+0x3a>
 8015e48:	7bfb      	ldrb	r3, [r7, #15]
 8015e4a:	2b22      	cmp	r3, #34	; 0x22
 8015e4c:	d107      	bne.n	8015e5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015e5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8015e5e:	7bfb      	ldrb	r3, [r7, #15]
 8015e60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8015e64:	2b28      	cmp	r3, #40	; 0x28
 8015e66:	d107      	bne.n	8015e78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2228      	movs	r2, #40	; 0x28
 8015e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015e76:	e015      	b.n	8015ea4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015e86:	d00a      	beq.n	8015e9e <I2C_ITError+0x7a>
 8015e88:	7bfb      	ldrb	r3, [r7, #15]
 8015e8a:	2b60      	cmp	r3, #96	; 0x60
 8015e8c:	d007      	beq.n	8015e9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2220      	movs	r2, #32
 8015e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2200      	movs	r2, #0
 8015e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015eb2:	d162      	bne.n	8015f7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	685a      	ldr	r2, [r3, #4]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015ec2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015ecc:	b2db      	uxtb	r3, r3
 8015ece:	2b01      	cmp	r3, #1
 8015ed0:	d020      	beq.n	8015f14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ed6:	4a6a      	ldr	r2, [pc, #424]	; (8016080 <I2C_ITError+0x25c>)
 8015ed8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7fd fa3e 	bl	8013360 <HAL_DMA_Abort_IT>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f000 8089 	beq.w	8015ffe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	f022 0201 	bic.w	r2, r2, #1
 8015efa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2220      	movs	r2, #32
 8015f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8015f0e:	4610      	mov	r0, r2
 8015f10:	4798      	blx	r3
 8015f12:	e074      	b.n	8015ffe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f18:	4a59      	ldr	r2, [pc, #356]	; (8016080 <I2C_ITError+0x25c>)
 8015f1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7fd fa1d 	bl	8013360 <HAL_DMA_Abort_IT>
 8015f26:	4603      	mov	r3, r0
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d068      	beq.n	8015ffe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	695b      	ldr	r3, [r3, #20]
 8015f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f36:	2b40      	cmp	r3, #64	; 0x40
 8015f38:	d10b      	bne.n	8015f52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	691a      	ldr	r2, [r3, #16]
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f44:	b2d2      	uxtb	r2, r2
 8015f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f4c:	1c5a      	adds	r2, r3, #1
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	681a      	ldr	r2, [r3, #0]
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	f022 0201 	bic.w	r2, r2, #1
 8015f60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	2220      	movs	r2, #32
 8015f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f70:	687a      	ldr	r2, [r7, #4]
 8015f72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015f74:	4610      	mov	r0, r2
 8015f76:	4798      	blx	r3
 8015f78:	e041      	b.n	8015ffe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015f80:	b2db      	uxtb	r3, r3
 8015f82:	2b60      	cmp	r3, #96	; 0x60
 8015f84:	d125      	bne.n	8015fd2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2220      	movs	r2, #32
 8015f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2200      	movs	r2, #0
 8015f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	695b      	ldr	r3, [r3, #20]
 8015f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f9e:	2b40      	cmp	r3, #64	; 0x40
 8015fa0:	d10b      	bne.n	8015fba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	691a      	ldr	r2, [r3, #16]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fac:	b2d2      	uxtb	r2, r2
 8015fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb4:	1c5a      	adds	r2, r3, #1
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f022 0201 	bic.w	r2, r2, #1
 8015fc8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f7fe ff0e 	bl	8014dec <HAL_I2C_AbortCpltCallback>
 8015fd0:	e015      	b.n	8015ffe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	695b      	ldr	r3, [r3, #20]
 8015fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fdc:	2b40      	cmp	r3, #64	; 0x40
 8015fde:	d10b      	bne.n	8015ff8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	691a      	ldr	r2, [r3, #16]
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fea:	b2d2      	uxtb	r2, r2
 8015fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff2:	1c5a      	adds	r2, r3, #1
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8015ff8:	6878      	ldr	r0, [r7, #4]
 8015ffa:	f7fe feed 	bl	8014dd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016002:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	f003 0301 	and.w	r3, r3, #1
 801600a:	2b00      	cmp	r3, #0
 801600c:	d10e      	bne.n	801602c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8016014:	2b00      	cmp	r3, #0
 8016016:	d109      	bne.n	801602c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801601e:	2b00      	cmp	r3, #0
 8016020:	d104      	bne.n	801602c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8016028:	2b00      	cmp	r3, #0
 801602a:	d007      	beq.n	801603c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	685a      	ldr	r2, [r3, #4]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801603a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016042:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016048:	f003 0304 	and.w	r3, r3, #4
 801604c:	2b04      	cmp	r3, #4
 801604e:	d113      	bne.n	8016078 <I2C_ITError+0x254>
 8016050:	7bfb      	ldrb	r3, [r7, #15]
 8016052:	2b28      	cmp	r3, #40	; 0x28
 8016054:	d110      	bne.n	8016078 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	4a0a      	ldr	r2, [pc, #40]	; (8016084 <I2C_ITError+0x260>)
 801605a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2200      	movs	r2, #0
 8016060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2220      	movs	r2, #32
 8016066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2200      	movs	r2, #0
 801606e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f7fe fe92 	bl	8014d9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016078:	bf00      	nop
 801607a:	3710      	adds	r7, #16
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	080162ad 	.word	0x080162ad
 8016084:	ffff0000 	.word	0xffff0000

08016088 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b086      	sub	sp, #24
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016094:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801609c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	685a      	ldr	r2, [r3, #4]
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80160ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80160bc:	697b      	ldr	r3, [r7, #20]
 80160be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d003      	beq.n	80160cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160c8:	2200      	movs	r2, #0
 80160ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d003      	beq.n	80160dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160d8:	2200      	movs	r2, #0
 80160da:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80160dc:	7cfb      	ldrb	r3, [r7, #19]
 80160de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80160e2:	2b21      	cmp	r3, #33	; 0x21
 80160e4:	d007      	beq.n	80160f6 <I2C_DMAXferCplt+0x6e>
 80160e6:	7cfb      	ldrb	r3, [r7, #19]
 80160e8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80160ec:	2b22      	cmp	r3, #34	; 0x22
 80160ee:	d131      	bne.n	8016154 <I2C_DMAXferCplt+0xcc>
 80160f0:	7cbb      	ldrb	r3, [r7, #18]
 80160f2:	2b20      	cmp	r3, #32
 80160f4:	d12e      	bne.n	8016154 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	685a      	ldr	r2, [r3, #4]
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016104:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	2200      	movs	r2, #0
 801610a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801610c:	7cfb      	ldrb	r3, [r7, #19]
 801610e:	2b29      	cmp	r3, #41	; 0x29
 8016110:	d10a      	bne.n	8016128 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	2221      	movs	r2, #33	; 0x21
 8016116:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8016118:	697b      	ldr	r3, [r7, #20]
 801611a:	2228      	movs	r2, #40	; 0x28
 801611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8016120:	6978      	ldr	r0, [r7, #20]
 8016122:	f7fe fe19 	bl	8014d58 <HAL_I2C_SlaveTxCpltCallback>
 8016126:	e00c      	b.n	8016142 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8016128:	7cfb      	ldrb	r3, [r7, #19]
 801612a:	2b2a      	cmp	r3, #42	; 0x2a
 801612c:	d109      	bne.n	8016142 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801612e:	697b      	ldr	r3, [r7, #20]
 8016130:	2222      	movs	r2, #34	; 0x22
 8016132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	2228      	movs	r2, #40	; 0x28
 8016138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801613c:	6978      	ldr	r0, [r7, #20]
 801613e:	f7fe fe15 	bl	8014d6c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8016142:	697b      	ldr	r3, [r7, #20]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	685a      	ldr	r2, [r3, #4]
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8016150:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8016152:	e06a      	b.n	801622a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801615a:	b2db      	uxtb	r3, r3
 801615c:	2b00      	cmp	r3, #0
 801615e:	d064      	beq.n	801622a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016164:	b29b      	uxth	r3, r3
 8016166:	2b01      	cmp	r3, #1
 8016168:	d107      	bne.n	801617a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	681a      	ldr	r2, [r3, #0]
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016178:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	685a      	ldr	r2, [r3, #4]
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8016188:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8016190:	d009      	beq.n	80161a6 <I2C_DMAXferCplt+0x11e>
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	2b08      	cmp	r3, #8
 8016196:	d006      	beq.n	80161a6 <I2C_DMAXferCplt+0x11e>
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801619e:	d002      	beq.n	80161a6 <I2C_DMAXferCplt+0x11e>
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2b20      	cmp	r3, #32
 80161a4:	d107      	bne.n	80161b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	681a      	ldr	r2, [r3, #0]
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80161b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	685a      	ldr	r2, [r3, #4]
 80161bc:	697b      	ldr	r3, [r7, #20]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80161c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	685a      	ldr	r2, [r3, #4]
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80161d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80161d6:	697b      	ldr	r3, [r7, #20]
 80161d8:	2200      	movs	r2, #0
 80161da:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d003      	beq.n	80161ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80161e4:	6978      	ldr	r0, [r7, #20]
 80161e6:	f7fe fdf7 	bl	8014dd8 <HAL_I2C_ErrorCallback>
}
 80161ea:	e01e      	b.n	801622a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	2220      	movs	r2, #32
 80161f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80161fa:	b2db      	uxtb	r3, r3
 80161fc:	2b40      	cmp	r3, #64	; 0x40
 80161fe:	d10a      	bne.n	8016216 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	2200      	movs	r2, #0
 8016204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	2200      	movs	r2, #0
 801620c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801620e:	6978      	ldr	r0, [r7, #20]
 8016210:	f7fe fdd8 	bl	8014dc4 <HAL_I2C_MemRxCpltCallback>
}
 8016214:	e009      	b.n	801622a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	2200      	movs	r2, #0
 801621a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	2212      	movs	r2, #18
 8016222:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8016224:	6978      	ldr	r0, [r7, #20]
 8016226:	f7f7 faad 	bl	800d784 <HAL_I2C_MasterRxCpltCallback>
}
 801622a:	bf00      	nop
 801622c:	3718      	adds	r7, #24
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}

08016232 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8016232:	b580      	push	{r7, lr}
 8016234:	b084      	sub	sp, #16
 8016236:	af00      	add	r7, sp, #0
 8016238:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801623e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016244:	2b00      	cmp	r3, #0
 8016246:	d003      	beq.n	8016250 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801624c:	2200      	movs	r2, #0
 801624e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016254:	2b00      	cmp	r3, #0
 8016256:	d003      	beq.n	8016260 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801625c:	2200      	movs	r2, #0
 801625e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7fd fa37 	bl	80136d4 <HAL_DMA_GetError>
 8016266:	4603      	mov	r3, r0
 8016268:	2b02      	cmp	r3, #2
 801626a:	d01b      	beq.n	80162a4 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801627a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	2200      	movs	r2, #0
 8016280:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	2220      	movs	r2, #32
 8016286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2200      	movs	r2, #0
 801628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016296:	f043 0210 	orr.w	r2, r3, #16
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 801629e:	68f8      	ldr	r0, [r7, #12]
 80162a0:	f7fe fd9a 	bl	8014dd8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80162a4:	bf00      	nop
 80162a6:	3710      	adds	r7, #16
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b086      	sub	sp, #24
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80162b4:	2300      	movs	r3, #0
 80162b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80162c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80162c6:	4b4b      	ldr	r3, [pc, #300]	; (80163f4 <I2C_DMAAbort+0x148>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	08db      	lsrs	r3, r3, #3
 80162cc:	4a4a      	ldr	r2, [pc, #296]	; (80163f8 <I2C_DMAAbort+0x14c>)
 80162ce:	fba2 2303 	umull	r2, r3, r2, r3
 80162d2:	0a1a      	lsrs	r2, r3, #8
 80162d4:	4613      	mov	r3, r2
 80162d6:	009b      	lsls	r3, r3, #2
 80162d8:	4413      	add	r3, r2
 80162da:	00da      	lsls	r2, r3, #3
 80162dc:	1ad3      	subs	r3, r2, r3
 80162de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d106      	bne.n	80162f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162ea:	f043 0220 	orr.w	r2, r3, #32
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80162f2:	e00a      	b.n	801630a <I2C_DMAAbort+0x5e>
    }
    count--;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	3b01      	subs	r3, #1
 80162f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80162fa:	697b      	ldr	r3, [r7, #20]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016308:	d0ea      	beq.n	80162e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801630e:	2b00      	cmp	r3, #0
 8016310:	d003      	beq.n	801631a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016316:	2200      	movs	r2, #0
 8016318:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801631e:	2b00      	cmp	r3, #0
 8016320:	d003      	beq.n	801632a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016326:	2200      	movs	r2, #0
 8016328:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801632a:	697b      	ldr	r3, [r7, #20]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	681a      	ldr	r2, [r3, #0]
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8016338:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	2200      	movs	r2, #0
 801633e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016344:	2b00      	cmp	r3, #0
 8016346:	d003      	beq.n	8016350 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801634c:	2200      	movs	r2, #0
 801634e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016354:	2b00      	cmp	r3, #0
 8016356:	d003      	beq.n	8016360 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801635c:	2200      	movs	r2, #0
 801635e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	697b      	ldr	r3, [r7, #20]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f022 0201 	bic.w	r2, r2, #1
 801636e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016376:	b2db      	uxtb	r3, r3
 8016378:	2b60      	cmp	r3, #96	; 0x60
 801637a:	d10e      	bne.n	801639a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	2220      	movs	r2, #32
 8016380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	2200      	movs	r2, #0
 8016388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	2200      	movs	r2, #0
 8016390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8016392:	6978      	ldr	r0, [r7, #20]
 8016394:	f7fe fd2a 	bl	8014dec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8016398:	e027      	b.n	80163ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801639a:	7cfb      	ldrb	r3, [r7, #19]
 801639c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80163a0:	2b28      	cmp	r3, #40	; 0x28
 80163a2:	d117      	bne.n	80163d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	681a      	ldr	r2, [r3, #0]
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f042 0201 	orr.w	r2, r2, #1
 80163b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	681a      	ldr	r2, [r3, #0]
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80163c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80163c4:	697b      	ldr	r3, [r7, #20]
 80163c6:	2200      	movs	r2, #0
 80163c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	2228      	movs	r2, #40	; 0x28
 80163ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80163d2:	e007      	b.n	80163e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	2220      	movs	r2, #32
 80163d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	2200      	movs	r2, #0
 80163e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80163e4:	6978      	ldr	r0, [r7, #20]
 80163e6:	f7fe fcf7 	bl	8014dd8 <HAL_I2C_ErrorCallback>
}
 80163ea:	bf00      	nop
 80163ec:	3718      	adds	r7, #24
 80163ee:	46bd      	mov	sp, r7
 80163f0:	bd80      	pop	{r7, pc}
 80163f2:	bf00      	nop
 80163f4:	20000538 	.word	0x20000538
 80163f8:	14f8b589 	.word	0x14f8b589

080163fc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80163fc:	b480      	push	{r7}
 80163fe:	b085      	sub	sp, #20
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016404:	2300      	movs	r3, #0
 8016406:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8016408:	4b13      	ldr	r3, [pc, #76]	; (8016458 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	08db      	lsrs	r3, r3, #3
 801640e:	4a13      	ldr	r2, [pc, #76]	; (801645c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8016410:	fba2 2303 	umull	r2, r3, r2, r3
 8016414:	0a1a      	lsrs	r2, r3, #8
 8016416:	4613      	mov	r3, r2
 8016418:	009b      	lsls	r3, r3, #2
 801641a:	4413      	add	r3, r2
 801641c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	3b01      	subs	r3, #1
 8016422:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d107      	bne.n	801643a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801642e:	f043 0220 	orr.w	r2, r3, #32
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8016436:	2301      	movs	r3, #1
 8016438:	e008      	b.n	801644c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016448:	d0e9      	beq.n	801641e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801644a:	2300      	movs	r3, #0
}
 801644c:	4618      	mov	r0, r3
 801644e:	3714      	adds	r7, #20
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr
 8016458:	20000538 	.word	0x20000538
 801645c:	14f8b589 	.word	0x14f8b589

08016460 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801646c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8016470:	d103      	bne.n	801647a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2201      	movs	r2, #1
 8016476:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8016478:	e007      	b.n	801648a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801647e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8016482:	d102      	bne.n	801648a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2208      	movs	r2, #8
 8016488:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801648a:	bf00      	nop
 801648c:	370c      	adds	r7, #12
 801648e:	46bd      	mov	sp, r7
 8016490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016494:	4770      	bx	lr
	...

08016498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	d101      	bne.n	80164aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80164a6:	2301      	movs	r3, #1
 80164a8:	e25b      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f003 0301 	and.w	r3, r3, #1
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d075      	beq.n	80165a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80164b6:	4ba3      	ldr	r3, [pc, #652]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80164b8:	689b      	ldr	r3, [r3, #8]
 80164ba:	f003 030c 	and.w	r3, r3, #12
 80164be:	2b04      	cmp	r3, #4
 80164c0:	d00c      	beq.n	80164dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80164c2:	4ba0      	ldr	r3, [pc, #640]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80164c4:	689b      	ldr	r3, [r3, #8]
 80164c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80164ca:	2b08      	cmp	r3, #8
 80164cc:	d112      	bne.n	80164f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80164ce:	4b9d      	ldr	r3, [pc, #628]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80164d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80164da:	d10b      	bne.n	80164f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80164dc:	4b99      	ldr	r3, [pc, #612]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d05b      	beq.n	80165a0 <HAL_RCC_OscConfig+0x108>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	685b      	ldr	r3, [r3, #4]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d157      	bne.n	80165a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80164f0:	2301      	movs	r3, #1
 80164f2:	e236      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164fc:	d106      	bne.n	801650c <HAL_RCC_OscConfig+0x74>
 80164fe:	4b91      	ldr	r3, [pc, #580]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	4a90      	ldr	r2, [pc, #576]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016508:	6013      	str	r3, [r2, #0]
 801650a:	e01d      	b.n	8016548 <HAL_RCC_OscConfig+0xb0>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8016514:	d10c      	bne.n	8016530 <HAL_RCC_OscConfig+0x98>
 8016516:	4b8b      	ldr	r3, [pc, #556]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	4a8a      	ldr	r2, [pc, #552]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801651c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8016520:	6013      	str	r3, [r2, #0]
 8016522:	4b88      	ldr	r3, [pc, #544]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	4a87      	ldr	r2, [pc, #540]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801652c:	6013      	str	r3, [r2, #0]
 801652e:	e00b      	b.n	8016548 <HAL_RCC_OscConfig+0xb0>
 8016530:	4b84      	ldr	r3, [pc, #528]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	4a83      	ldr	r2, [pc, #524]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801653a:	6013      	str	r3, [r2, #0]
 801653c:	4b81      	ldr	r3, [pc, #516]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4a80      	ldr	r2, [pc, #512]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d013      	beq.n	8016578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016550:	f7fb f9b0 	bl	80118b4 <HAL_GetTick>
 8016554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016556:	e008      	b.n	801656a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016558:	f7fb f9ac 	bl	80118b4 <HAL_GetTick>
 801655c:	4602      	mov	r2, r0
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	1ad3      	subs	r3, r2, r3
 8016562:	2b64      	cmp	r3, #100	; 0x64
 8016564:	d901      	bls.n	801656a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8016566:	2303      	movs	r3, #3
 8016568:	e1fb      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801656a:	4b76      	ldr	r3, [pc, #472]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016572:	2b00      	cmp	r3, #0
 8016574:	d0f0      	beq.n	8016558 <HAL_RCC_OscConfig+0xc0>
 8016576:	e014      	b.n	80165a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016578:	f7fb f99c 	bl	80118b4 <HAL_GetTick>
 801657c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801657e:	e008      	b.n	8016592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016580:	f7fb f998 	bl	80118b4 <HAL_GetTick>
 8016584:	4602      	mov	r2, r0
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	1ad3      	subs	r3, r2, r3
 801658a:	2b64      	cmp	r3, #100	; 0x64
 801658c:	d901      	bls.n	8016592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801658e:	2303      	movs	r3, #3
 8016590:	e1e7      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8016592:	4b6c      	ldr	r3, [pc, #432]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801659a:	2b00      	cmp	r3, #0
 801659c:	d1f0      	bne.n	8016580 <HAL_RCC_OscConfig+0xe8>
 801659e:	e000      	b.n	80165a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80165a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	f003 0302 	and.w	r3, r3, #2
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d063      	beq.n	8016676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80165ae:	4b65      	ldr	r3, [pc, #404]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165b0:	689b      	ldr	r3, [r3, #8]
 80165b2:	f003 030c 	and.w	r3, r3, #12
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00b      	beq.n	80165d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80165ba:	4b62      	ldr	r3, [pc, #392]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165bc:	689b      	ldr	r3, [r3, #8]
 80165be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80165c2:	2b08      	cmp	r3, #8
 80165c4:	d11c      	bne.n	8016600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80165c6:	4b5f      	ldr	r3, [pc, #380]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165c8:	685b      	ldr	r3, [r3, #4]
 80165ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d116      	bne.n	8016600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80165d2:	4b5c      	ldr	r3, [pc, #368]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f003 0302 	and.w	r3, r3, #2
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d005      	beq.n	80165ea <HAL_RCC_OscConfig+0x152>
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	68db      	ldr	r3, [r3, #12]
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d001      	beq.n	80165ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80165e6:	2301      	movs	r3, #1
 80165e8:	e1bb      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80165ea:	4b56      	ldr	r3, [pc, #344]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	691b      	ldr	r3, [r3, #16]
 80165f6:	00db      	lsls	r3, r3, #3
 80165f8:	4952      	ldr	r1, [pc, #328]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80165fa:	4313      	orrs	r3, r2
 80165fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80165fe:	e03a      	b.n	8016676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d020      	beq.n	801664a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016608:	4b4f      	ldr	r3, [pc, #316]	; (8016748 <HAL_RCC_OscConfig+0x2b0>)
 801660a:	2201      	movs	r2, #1
 801660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801660e:	f7fb f951 	bl	80118b4 <HAL_GetTick>
 8016612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016614:	e008      	b.n	8016628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016616:	f7fb f94d 	bl	80118b4 <HAL_GetTick>
 801661a:	4602      	mov	r2, r0
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	1ad3      	subs	r3, r2, r3
 8016620:	2b02      	cmp	r3, #2
 8016622:	d901      	bls.n	8016628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8016624:	2303      	movs	r3, #3
 8016626:	e19c      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016628:	4b46      	ldr	r3, [pc, #280]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f003 0302 	and.w	r3, r3, #2
 8016630:	2b00      	cmp	r3, #0
 8016632:	d0f0      	beq.n	8016616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016634:	4b43      	ldr	r3, [pc, #268]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	691b      	ldr	r3, [r3, #16]
 8016640:	00db      	lsls	r3, r3, #3
 8016642:	4940      	ldr	r1, [pc, #256]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016644:	4313      	orrs	r3, r2
 8016646:	600b      	str	r3, [r1, #0]
 8016648:	e015      	b.n	8016676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801664a:	4b3f      	ldr	r3, [pc, #252]	; (8016748 <HAL_RCC_OscConfig+0x2b0>)
 801664c:	2200      	movs	r2, #0
 801664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016650:	f7fb f930 	bl	80118b4 <HAL_GetTick>
 8016654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016656:	e008      	b.n	801666a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016658:	f7fb f92c 	bl	80118b4 <HAL_GetTick>
 801665c:	4602      	mov	r2, r0
 801665e:	693b      	ldr	r3, [r7, #16]
 8016660:	1ad3      	subs	r3, r2, r3
 8016662:	2b02      	cmp	r3, #2
 8016664:	d901      	bls.n	801666a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8016666:	2303      	movs	r3, #3
 8016668:	e17b      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801666a:	4b36      	ldr	r3, [pc, #216]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f003 0302 	and.w	r3, r3, #2
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1f0      	bne.n	8016658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f003 0308 	and.w	r3, r3, #8
 801667e:	2b00      	cmp	r3, #0
 8016680:	d030      	beq.n	80166e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	695b      	ldr	r3, [r3, #20]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d016      	beq.n	80166b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801668a:	4b30      	ldr	r3, [pc, #192]	; (801674c <HAL_RCC_OscConfig+0x2b4>)
 801668c:	2201      	movs	r2, #1
 801668e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016690:	f7fb f910 	bl	80118b4 <HAL_GetTick>
 8016694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016696:	e008      	b.n	80166aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016698:	f7fb f90c 	bl	80118b4 <HAL_GetTick>
 801669c:	4602      	mov	r2, r0
 801669e:	693b      	ldr	r3, [r7, #16]
 80166a0:	1ad3      	subs	r3, r2, r3
 80166a2:	2b02      	cmp	r3, #2
 80166a4:	d901      	bls.n	80166aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80166a6:	2303      	movs	r3, #3
 80166a8:	e15b      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80166aa:	4b26      	ldr	r3, [pc, #152]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80166ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166ae:	f003 0302 	and.w	r3, r3, #2
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d0f0      	beq.n	8016698 <HAL_RCC_OscConfig+0x200>
 80166b6:	e015      	b.n	80166e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80166b8:	4b24      	ldr	r3, [pc, #144]	; (801674c <HAL_RCC_OscConfig+0x2b4>)
 80166ba:	2200      	movs	r2, #0
 80166bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80166be:	f7fb f8f9 	bl	80118b4 <HAL_GetTick>
 80166c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80166c4:	e008      	b.n	80166d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80166c6:	f7fb f8f5 	bl	80118b4 <HAL_GetTick>
 80166ca:	4602      	mov	r2, r0
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	1ad3      	subs	r3, r2, r3
 80166d0:	2b02      	cmp	r3, #2
 80166d2:	d901      	bls.n	80166d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80166d4:	2303      	movs	r3, #3
 80166d6:	e144      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80166d8:	4b1a      	ldr	r3, [pc, #104]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80166da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166dc:	f003 0302 	and.w	r3, r3, #2
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1f0      	bne.n	80166c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	f003 0304 	and.w	r3, r3, #4
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f000 80a0 	beq.w	8016832 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80166f2:	2300      	movs	r3, #0
 80166f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80166f6:	4b13      	ldr	r3, [pc, #76]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 80166f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80166fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10f      	bne.n	8016722 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016702:	2300      	movs	r3, #0
 8016704:	60bb      	str	r3, [r7, #8]
 8016706:	4b0f      	ldr	r3, [pc, #60]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670a:	4a0e      	ldr	r2, [pc, #56]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 801670c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016710:	6413      	str	r3, [r2, #64]	; 0x40
 8016712:	4b0c      	ldr	r3, [pc, #48]	; (8016744 <HAL_RCC_OscConfig+0x2ac>)
 8016714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801671a:	60bb      	str	r3, [r7, #8]
 801671c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801671e:	2301      	movs	r3, #1
 8016720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016722:	4b0b      	ldr	r3, [pc, #44]	; (8016750 <HAL_RCC_OscConfig+0x2b8>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801672a:	2b00      	cmp	r3, #0
 801672c:	d121      	bne.n	8016772 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801672e:	4b08      	ldr	r3, [pc, #32]	; (8016750 <HAL_RCC_OscConfig+0x2b8>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	4a07      	ldr	r2, [pc, #28]	; (8016750 <HAL_RCC_OscConfig+0x2b8>)
 8016734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801673a:	f7fb f8bb 	bl	80118b4 <HAL_GetTick>
 801673e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016740:	e011      	b.n	8016766 <HAL_RCC_OscConfig+0x2ce>
 8016742:	bf00      	nop
 8016744:	40023800 	.word	0x40023800
 8016748:	42470000 	.word	0x42470000
 801674c:	42470e80 	.word	0x42470e80
 8016750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016754:	f7fb f8ae 	bl	80118b4 <HAL_GetTick>
 8016758:	4602      	mov	r2, r0
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	1ad3      	subs	r3, r2, r3
 801675e:	2b02      	cmp	r3, #2
 8016760:	d901      	bls.n	8016766 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8016762:	2303      	movs	r3, #3
 8016764:	e0fd      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016766:	4b81      	ldr	r3, [pc, #516]	; (801696c <HAL_RCC_OscConfig+0x4d4>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801676e:	2b00      	cmp	r3, #0
 8016770:	d0f0      	beq.n	8016754 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	689b      	ldr	r3, [r3, #8]
 8016776:	2b01      	cmp	r3, #1
 8016778:	d106      	bne.n	8016788 <HAL_RCC_OscConfig+0x2f0>
 801677a:	4b7d      	ldr	r3, [pc, #500]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 801677c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801677e:	4a7c      	ldr	r2, [pc, #496]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016780:	f043 0301 	orr.w	r3, r3, #1
 8016784:	6713      	str	r3, [r2, #112]	; 0x70
 8016786:	e01c      	b.n	80167c2 <HAL_RCC_OscConfig+0x32a>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	689b      	ldr	r3, [r3, #8]
 801678c:	2b05      	cmp	r3, #5
 801678e:	d10c      	bne.n	80167aa <HAL_RCC_OscConfig+0x312>
 8016790:	4b77      	ldr	r3, [pc, #476]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016794:	4a76      	ldr	r2, [pc, #472]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016796:	f043 0304 	orr.w	r3, r3, #4
 801679a:	6713      	str	r3, [r2, #112]	; 0x70
 801679c:	4b74      	ldr	r3, [pc, #464]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 801679e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167a0:	4a73      	ldr	r2, [pc, #460]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167a2:	f043 0301 	orr.w	r3, r3, #1
 80167a6:	6713      	str	r3, [r2, #112]	; 0x70
 80167a8:	e00b      	b.n	80167c2 <HAL_RCC_OscConfig+0x32a>
 80167aa:	4b71      	ldr	r3, [pc, #452]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167ae:	4a70      	ldr	r2, [pc, #448]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167b0:	f023 0301 	bic.w	r3, r3, #1
 80167b4:	6713      	str	r3, [r2, #112]	; 0x70
 80167b6:	4b6e      	ldr	r3, [pc, #440]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167ba:	4a6d      	ldr	r2, [pc, #436]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167bc:	f023 0304 	bic.w	r3, r3, #4
 80167c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	689b      	ldr	r3, [r3, #8]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d015      	beq.n	80167f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80167ca:	f7fb f873 	bl	80118b4 <HAL_GetTick>
 80167ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80167d0:	e00a      	b.n	80167e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80167d2:	f7fb f86f 	bl	80118b4 <HAL_GetTick>
 80167d6:	4602      	mov	r2, r0
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	1ad3      	subs	r3, r2, r3
 80167dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80167e0:	4293      	cmp	r3, r2
 80167e2:	d901      	bls.n	80167e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80167e4:	2303      	movs	r3, #3
 80167e6:	e0bc      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80167e8:	4b61      	ldr	r3, [pc, #388]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80167ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167ec:	f003 0302 	and.w	r3, r3, #2
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d0ee      	beq.n	80167d2 <HAL_RCC_OscConfig+0x33a>
 80167f4:	e014      	b.n	8016820 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80167f6:	f7fb f85d 	bl	80118b4 <HAL_GetTick>
 80167fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80167fc:	e00a      	b.n	8016814 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80167fe:	f7fb f859 	bl	80118b4 <HAL_GetTick>
 8016802:	4602      	mov	r2, r0
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	f241 3288 	movw	r2, #5000	; 0x1388
 801680c:	4293      	cmp	r3, r2
 801680e:	d901      	bls.n	8016814 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8016810:	2303      	movs	r3, #3
 8016812:	e0a6      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016814:	4b56      	ldr	r3, [pc, #344]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016818:	f003 0302 	and.w	r3, r3, #2
 801681c:	2b00      	cmp	r3, #0
 801681e:	d1ee      	bne.n	80167fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8016820:	7dfb      	ldrb	r3, [r7, #23]
 8016822:	2b01      	cmp	r3, #1
 8016824:	d105      	bne.n	8016832 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016826:	4b52      	ldr	r3, [pc, #328]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801682a:	4a51      	ldr	r2, [pc, #324]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 801682c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016830:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	699b      	ldr	r3, [r3, #24]
 8016836:	2b00      	cmp	r3, #0
 8016838:	f000 8092 	beq.w	8016960 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801683c:	4b4c      	ldr	r3, [pc, #304]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 801683e:	689b      	ldr	r3, [r3, #8]
 8016840:	f003 030c 	and.w	r3, r3, #12
 8016844:	2b08      	cmp	r3, #8
 8016846:	d05c      	beq.n	8016902 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	699b      	ldr	r3, [r3, #24]
 801684c:	2b02      	cmp	r3, #2
 801684e:	d141      	bne.n	80168d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016850:	4b48      	ldr	r3, [pc, #288]	; (8016974 <HAL_RCC_OscConfig+0x4dc>)
 8016852:	2200      	movs	r2, #0
 8016854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016856:	f7fb f82d 	bl	80118b4 <HAL_GetTick>
 801685a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801685c:	e008      	b.n	8016870 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801685e:	f7fb f829 	bl	80118b4 <HAL_GetTick>
 8016862:	4602      	mov	r2, r0
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	1ad3      	subs	r3, r2, r3
 8016868:	2b02      	cmp	r3, #2
 801686a:	d901      	bls.n	8016870 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801686c:	2303      	movs	r3, #3
 801686e:	e078      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016870:	4b3f      	ldr	r3, [pc, #252]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016878:	2b00      	cmp	r3, #0
 801687a:	d1f0      	bne.n	801685e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	69da      	ldr	r2, [r3, #28]
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	6a1b      	ldr	r3, [r3, #32]
 8016884:	431a      	orrs	r2, r3
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801688a:	019b      	lsls	r3, r3, #6
 801688c:	431a      	orrs	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016892:	085b      	lsrs	r3, r3, #1
 8016894:	3b01      	subs	r3, #1
 8016896:	041b      	lsls	r3, r3, #16
 8016898:	431a      	orrs	r2, r3
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801689e:	061b      	lsls	r3, r3, #24
 80168a0:	4933      	ldr	r1, [pc, #204]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80168a2:	4313      	orrs	r3, r2
 80168a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80168a6:	4b33      	ldr	r3, [pc, #204]	; (8016974 <HAL_RCC_OscConfig+0x4dc>)
 80168a8:	2201      	movs	r2, #1
 80168aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80168ac:	f7fb f802 	bl	80118b4 <HAL_GetTick>
 80168b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80168b2:	e008      	b.n	80168c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80168b4:	f7fa fffe 	bl	80118b4 <HAL_GetTick>
 80168b8:	4602      	mov	r2, r0
 80168ba:	693b      	ldr	r3, [r7, #16]
 80168bc:	1ad3      	subs	r3, r2, r3
 80168be:	2b02      	cmp	r3, #2
 80168c0:	d901      	bls.n	80168c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80168c2:	2303      	movs	r3, #3
 80168c4:	e04d      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80168c6:	4b2a      	ldr	r3, [pc, #168]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d0f0      	beq.n	80168b4 <HAL_RCC_OscConfig+0x41c>
 80168d2:	e045      	b.n	8016960 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80168d4:	4b27      	ldr	r3, [pc, #156]	; (8016974 <HAL_RCC_OscConfig+0x4dc>)
 80168d6:	2200      	movs	r2, #0
 80168d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80168da:	f7fa ffeb 	bl	80118b4 <HAL_GetTick>
 80168de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80168e0:	e008      	b.n	80168f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80168e2:	f7fa ffe7 	bl	80118b4 <HAL_GetTick>
 80168e6:	4602      	mov	r2, r0
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	1ad3      	subs	r3, r2, r3
 80168ec:	2b02      	cmp	r3, #2
 80168ee:	d901      	bls.n	80168f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80168f0:	2303      	movs	r3, #3
 80168f2:	e036      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80168f4:	4b1e      	ldr	r3, [pc, #120]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d1f0      	bne.n	80168e2 <HAL_RCC_OscConfig+0x44a>
 8016900:	e02e      	b.n	8016960 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	699b      	ldr	r3, [r3, #24]
 8016906:	2b01      	cmp	r3, #1
 8016908:	d101      	bne.n	801690e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801690a:	2301      	movs	r3, #1
 801690c:	e029      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801690e:	4b18      	ldr	r3, [pc, #96]	; (8016970 <HAL_RCC_OscConfig+0x4d8>)
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	69db      	ldr	r3, [r3, #28]
 801691e:	429a      	cmp	r2, r3
 8016920:	d11c      	bne.n	801695c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801692c:	429a      	cmp	r2, r3
 801692e:	d115      	bne.n	801695c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8016930:	68fa      	ldr	r2, [r7, #12]
 8016932:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016936:	4013      	ands	r3, r2
 8016938:	687a      	ldr	r2, [r7, #4]
 801693a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801693c:	4293      	cmp	r3, r2
 801693e:	d10d      	bne.n	801695c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801694a:	429a      	cmp	r2, r3
 801694c:	d106      	bne.n	801695c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8016958:	429a      	cmp	r2, r3
 801695a:	d001      	beq.n	8016960 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801695c:	2301      	movs	r3, #1
 801695e:	e000      	b.n	8016962 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8016960:	2300      	movs	r3, #0
}
 8016962:	4618      	mov	r0, r3
 8016964:	3718      	adds	r7, #24
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}
 801696a:	bf00      	nop
 801696c:	40007000 	.word	0x40007000
 8016970:	40023800 	.word	0x40023800
 8016974:	42470060 	.word	0x42470060

08016978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b084      	sub	sp, #16
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016988:	2301      	movs	r3, #1
 801698a:	e0cc      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801698c:	4b68      	ldr	r3, [pc, #416]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	f003 030f 	and.w	r3, r3, #15
 8016994:	683a      	ldr	r2, [r7, #0]
 8016996:	429a      	cmp	r2, r3
 8016998:	d90c      	bls.n	80169b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801699a:	4b65      	ldr	r3, [pc, #404]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	b2d2      	uxtb	r2, r2
 80169a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80169a2:	4b63      	ldr	r3, [pc, #396]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	f003 030f 	and.w	r3, r3, #15
 80169aa:	683a      	ldr	r2, [r7, #0]
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d001      	beq.n	80169b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80169b0:	2301      	movs	r3, #1
 80169b2:	e0b8      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f003 0302 	and.w	r3, r3, #2
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d020      	beq.n	8016a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	f003 0304 	and.w	r3, r3, #4
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d005      	beq.n	80169d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80169cc:	4b59      	ldr	r3, [pc, #356]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169ce:	689b      	ldr	r3, [r3, #8]
 80169d0:	4a58      	ldr	r2, [pc, #352]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80169d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	f003 0308 	and.w	r3, r3, #8
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d005      	beq.n	80169f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80169e4:	4b53      	ldr	r3, [pc, #332]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	4a52      	ldr	r2, [pc, #328]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80169ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80169f0:	4b50      	ldr	r3, [pc, #320]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169f2:	689b      	ldr	r3, [r3, #8]
 80169f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	689b      	ldr	r3, [r3, #8]
 80169fc:	494d      	ldr	r1, [pc, #308]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 80169fe:	4313      	orrs	r3, r2
 8016a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f003 0301 	and.w	r3, r3, #1
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d044      	beq.n	8016a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d107      	bne.n	8016a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016a16:	4b47      	ldr	r3, [pc, #284]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d119      	bne.n	8016a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016a22:	2301      	movs	r3, #1
 8016a24:	e07f      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	685b      	ldr	r3, [r3, #4]
 8016a2a:	2b02      	cmp	r3, #2
 8016a2c:	d003      	beq.n	8016a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016a32:	2b03      	cmp	r3, #3
 8016a34:	d107      	bne.n	8016a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016a36:	4b3f      	ldr	r3, [pc, #252]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d109      	bne.n	8016a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016a42:	2301      	movs	r3, #1
 8016a44:	e06f      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016a46:	4b3b      	ldr	r3, [pc, #236]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	f003 0302 	and.w	r3, r3, #2
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d101      	bne.n	8016a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016a52:	2301      	movs	r3, #1
 8016a54:	e067      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016a56:	4b37      	ldr	r3, [pc, #220]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a58:	689b      	ldr	r3, [r3, #8]
 8016a5a:	f023 0203 	bic.w	r2, r3, #3
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	4934      	ldr	r1, [pc, #208]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a64:	4313      	orrs	r3, r2
 8016a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016a68:	f7fa ff24 	bl	80118b4 <HAL_GetTick>
 8016a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016a6e:	e00a      	b.n	8016a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8016a70:	f7fa ff20 	bl	80118b4 <HAL_GetTick>
 8016a74:	4602      	mov	r2, r0
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	1ad3      	subs	r3, r2, r3
 8016a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8016a7e:	4293      	cmp	r3, r2
 8016a80:	d901      	bls.n	8016a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8016a82:	2303      	movs	r3, #3
 8016a84:	e04f      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016a86:	4b2b      	ldr	r3, [pc, #172]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016a88:	689b      	ldr	r3, [r3, #8]
 8016a8a:	f003 020c 	and.w	r2, r3, #12
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	685b      	ldr	r3, [r3, #4]
 8016a92:	009b      	lsls	r3, r3, #2
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d1eb      	bne.n	8016a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016a98:	4b25      	ldr	r3, [pc, #148]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	f003 030f 	and.w	r3, r3, #15
 8016aa0:	683a      	ldr	r2, [r7, #0]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d20c      	bcs.n	8016ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016aa6:	4b22      	ldr	r3, [pc, #136]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 8016aa8:	683a      	ldr	r2, [r7, #0]
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016aae:	4b20      	ldr	r3, [pc, #128]	; (8016b30 <HAL_RCC_ClockConfig+0x1b8>)
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	f003 030f 	and.w	r3, r3, #15
 8016ab6:	683a      	ldr	r2, [r7, #0]
 8016ab8:	429a      	cmp	r2, r3
 8016aba:	d001      	beq.n	8016ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016abc:	2301      	movs	r3, #1
 8016abe:	e032      	b.n	8016b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f003 0304 	and.w	r3, r3, #4
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d008      	beq.n	8016ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016acc:	4b19      	ldr	r3, [pc, #100]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016ace:	689b      	ldr	r3, [r3, #8]
 8016ad0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	68db      	ldr	r3, [r3, #12]
 8016ad8:	4916      	ldr	r1, [pc, #88]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016ada:	4313      	orrs	r3, r2
 8016adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f003 0308 	and.w	r3, r3, #8
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d009      	beq.n	8016afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016aea:	4b12      	ldr	r3, [pc, #72]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016aec:	689b      	ldr	r3, [r3, #8]
 8016aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	691b      	ldr	r3, [r3, #16]
 8016af6:	00db      	lsls	r3, r3, #3
 8016af8:	490e      	ldr	r1, [pc, #56]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016afa:	4313      	orrs	r3, r2
 8016afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016afe:	f000 f82d 	bl	8016b5c <HAL_RCC_GetSysClockFreq>
 8016b02:	4602      	mov	r2, r0
 8016b04:	4b0b      	ldr	r3, [pc, #44]	; (8016b34 <HAL_RCC_ClockConfig+0x1bc>)
 8016b06:	689b      	ldr	r3, [r3, #8]
 8016b08:	091b      	lsrs	r3, r3, #4
 8016b0a:	f003 030f 	and.w	r3, r3, #15
 8016b0e:	490a      	ldr	r1, [pc, #40]	; (8016b38 <HAL_RCC_ClockConfig+0x1c0>)
 8016b10:	5ccb      	ldrb	r3, [r1, r3]
 8016b12:	fa22 f303 	lsr.w	r3, r2, r3
 8016b16:	4a09      	ldr	r2, [pc, #36]	; (8016b3c <HAL_RCC_ClockConfig+0x1c4>)
 8016b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8016b1a:	4b09      	ldr	r3, [pc, #36]	; (8016b40 <HAL_RCC_ClockConfig+0x1c8>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7f6 fe6c 	bl	800d7fc <HAL_InitTick>

  return HAL_OK;
 8016b24:	2300      	movs	r3, #0
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3710      	adds	r7, #16
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	40023c00 	.word	0x40023c00
 8016b34:	40023800 	.word	0x40023800
 8016b38:	08022724 	.word	0x08022724
 8016b3c:	20000538 	.word	0x20000538
 8016b40:	200005b4 	.word	0x200005b4

08016b44 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8016b44:	b480      	push	{r7}
 8016b46:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8016b48:	4b03      	ldr	r3, [pc, #12]	; (8016b58 <HAL_RCC_EnableCSS+0x14>)
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	601a      	str	r2, [r3, #0]
}
 8016b4e:	bf00      	nop
 8016b50:	46bd      	mov	sp, r7
 8016b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b56:	4770      	bx	lr
 8016b58:	4247004c 	.word	0x4247004c

08016b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016b5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8016b60:	b084      	sub	sp, #16
 8016b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8016b64:	2300      	movs	r3, #0
 8016b66:	607b      	str	r3, [r7, #4]
 8016b68:	2300      	movs	r3, #0
 8016b6a:	60fb      	str	r3, [r7, #12]
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8016b70:	2300      	movs	r3, #0
 8016b72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016b74:	4b67      	ldr	r3, [pc, #412]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016b76:	689b      	ldr	r3, [r3, #8]
 8016b78:	f003 030c 	and.w	r3, r3, #12
 8016b7c:	2b08      	cmp	r3, #8
 8016b7e:	d00d      	beq.n	8016b9c <HAL_RCC_GetSysClockFreq+0x40>
 8016b80:	2b08      	cmp	r3, #8
 8016b82:	f200 80bd 	bhi.w	8016d00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d002      	beq.n	8016b90 <HAL_RCC_GetSysClockFreq+0x34>
 8016b8a:	2b04      	cmp	r3, #4
 8016b8c:	d003      	beq.n	8016b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8016b8e:	e0b7      	b.n	8016d00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016b90:	4b61      	ldr	r3, [pc, #388]	; (8016d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8016b92:	60bb      	str	r3, [r7, #8]
       break;
 8016b94:	e0b7      	b.n	8016d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8016b96:	4b61      	ldr	r3, [pc, #388]	; (8016d1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8016b98:	60bb      	str	r3, [r7, #8]
      break;
 8016b9a:	e0b4      	b.n	8016d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016b9c:	4b5d      	ldr	r3, [pc, #372]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016b9e:	685b      	ldr	r3, [r3, #4]
 8016ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ba4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016ba6:	4b5b      	ldr	r3, [pc, #364]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d04d      	beq.n	8016c4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016bb2:	4b58      	ldr	r3, [pc, #352]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	099b      	lsrs	r3, r3, #6
 8016bb8:	461a      	mov	r2, r3
 8016bba:	f04f 0300 	mov.w	r3, #0
 8016bbe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016bc2:	f04f 0100 	mov.w	r1, #0
 8016bc6:	ea02 0800 	and.w	r8, r2, r0
 8016bca:	ea03 0901 	and.w	r9, r3, r1
 8016bce:	4640      	mov	r0, r8
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	f04f 0200 	mov.w	r2, #0
 8016bd6:	f04f 0300 	mov.w	r3, #0
 8016bda:	014b      	lsls	r3, r1, #5
 8016bdc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016be0:	0142      	lsls	r2, r0, #5
 8016be2:	4610      	mov	r0, r2
 8016be4:	4619      	mov	r1, r3
 8016be6:	ebb0 0008 	subs.w	r0, r0, r8
 8016bea:	eb61 0109 	sbc.w	r1, r1, r9
 8016bee:	f04f 0200 	mov.w	r2, #0
 8016bf2:	f04f 0300 	mov.w	r3, #0
 8016bf6:	018b      	lsls	r3, r1, #6
 8016bf8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016bfc:	0182      	lsls	r2, r0, #6
 8016bfe:	1a12      	subs	r2, r2, r0
 8016c00:	eb63 0301 	sbc.w	r3, r3, r1
 8016c04:	f04f 0000 	mov.w	r0, #0
 8016c08:	f04f 0100 	mov.w	r1, #0
 8016c0c:	00d9      	lsls	r1, r3, #3
 8016c0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016c12:	00d0      	lsls	r0, r2, #3
 8016c14:	4602      	mov	r2, r0
 8016c16:	460b      	mov	r3, r1
 8016c18:	eb12 0208 	adds.w	r2, r2, r8
 8016c1c:	eb43 0309 	adc.w	r3, r3, r9
 8016c20:	f04f 0000 	mov.w	r0, #0
 8016c24:	f04f 0100 	mov.w	r1, #0
 8016c28:	0259      	lsls	r1, r3, #9
 8016c2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8016c2e:	0250      	lsls	r0, r2, #9
 8016c30:	4602      	mov	r2, r0
 8016c32:	460b      	mov	r3, r1
 8016c34:	4610      	mov	r0, r2
 8016c36:	4619      	mov	r1, r3
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	461a      	mov	r2, r3
 8016c3c:	f04f 0300 	mov.w	r3, #0
 8016c40:	f7ea f822 	bl	8000c88 <__aeabi_uldivmod>
 8016c44:	4602      	mov	r2, r0
 8016c46:	460b      	mov	r3, r1
 8016c48:	4613      	mov	r3, r2
 8016c4a:	60fb      	str	r3, [r7, #12]
 8016c4c:	e04a      	b.n	8016ce4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016c4e:	4b31      	ldr	r3, [pc, #196]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	099b      	lsrs	r3, r3, #6
 8016c54:	461a      	mov	r2, r3
 8016c56:	f04f 0300 	mov.w	r3, #0
 8016c5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8016c5e:	f04f 0100 	mov.w	r1, #0
 8016c62:	ea02 0400 	and.w	r4, r2, r0
 8016c66:	ea03 0501 	and.w	r5, r3, r1
 8016c6a:	4620      	mov	r0, r4
 8016c6c:	4629      	mov	r1, r5
 8016c6e:	f04f 0200 	mov.w	r2, #0
 8016c72:	f04f 0300 	mov.w	r3, #0
 8016c76:	014b      	lsls	r3, r1, #5
 8016c78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8016c7c:	0142      	lsls	r2, r0, #5
 8016c7e:	4610      	mov	r0, r2
 8016c80:	4619      	mov	r1, r3
 8016c82:	1b00      	subs	r0, r0, r4
 8016c84:	eb61 0105 	sbc.w	r1, r1, r5
 8016c88:	f04f 0200 	mov.w	r2, #0
 8016c8c:	f04f 0300 	mov.w	r3, #0
 8016c90:	018b      	lsls	r3, r1, #6
 8016c92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8016c96:	0182      	lsls	r2, r0, #6
 8016c98:	1a12      	subs	r2, r2, r0
 8016c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8016c9e:	f04f 0000 	mov.w	r0, #0
 8016ca2:	f04f 0100 	mov.w	r1, #0
 8016ca6:	00d9      	lsls	r1, r3, #3
 8016ca8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8016cac:	00d0      	lsls	r0, r2, #3
 8016cae:	4602      	mov	r2, r0
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	1912      	adds	r2, r2, r4
 8016cb4:	eb45 0303 	adc.w	r3, r5, r3
 8016cb8:	f04f 0000 	mov.w	r0, #0
 8016cbc:	f04f 0100 	mov.w	r1, #0
 8016cc0:	0299      	lsls	r1, r3, #10
 8016cc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8016cc6:	0290      	lsls	r0, r2, #10
 8016cc8:	4602      	mov	r2, r0
 8016cca:	460b      	mov	r3, r1
 8016ccc:	4610      	mov	r0, r2
 8016cce:	4619      	mov	r1, r3
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	461a      	mov	r2, r3
 8016cd4:	f04f 0300 	mov.w	r3, #0
 8016cd8:	f7e9 ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8016cdc:	4602      	mov	r2, r0
 8016cde:	460b      	mov	r3, r1
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016ce4:	4b0b      	ldr	r3, [pc, #44]	; (8016d14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8016ce6:	685b      	ldr	r3, [r3, #4]
 8016ce8:	0c1b      	lsrs	r3, r3, #16
 8016cea:	f003 0303 	and.w	r3, r3, #3
 8016cee:	3301      	adds	r3, #1
 8016cf0:	005b      	lsls	r3, r3, #1
 8016cf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8016cf4:	68fa      	ldr	r2, [r7, #12]
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8016cfc:	60bb      	str	r3, [r7, #8]
      break;
 8016cfe:	e002      	b.n	8016d06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8016d00:	4b05      	ldr	r3, [pc, #20]	; (8016d18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8016d02:	60bb      	str	r3, [r7, #8]
      break;
 8016d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016d06:	68bb      	ldr	r3, [r7, #8]
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3710      	adds	r7, #16
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8016d12:	bf00      	nop
 8016d14:	40023800 	.word	0x40023800
 8016d18:	00f42400 	.word	0x00f42400
 8016d1c:	007a1200 	.word	0x007a1200

08016d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8016d20:	b480      	push	{r7}
 8016d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016d24:	4b03      	ldr	r3, [pc, #12]	; (8016d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8016d26:	681b      	ldr	r3, [r3, #0]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d30:	4770      	bx	lr
 8016d32:	bf00      	nop
 8016d34:	20000538 	.word	0x20000538

08016d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8016d3c:	f7ff fff0 	bl	8016d20 <HAL_RCC_GetHCLKFreq>
 8016d40:	4602      	mov	r2, r0
 8016d42:	4b05      	ldr	r3, [pc, #20]	; (8016d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016d44:	689b      	ldr	r3, [r3, #8]
 8016d46:	0a9b      	lsrs	r3, r3, #10
 8016d48:	f003 0307 	and.w	r3, r3, #7
 8016d4c:	4903      	ldr	r1, [pc, #12]	; (8016d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8016d4e:	5ccb      	ldrb	r3, [r1, r3]
 8016d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	bd80      	pop	{r7, pc}
 8016d58:	40023800 	.word	0x40023800
 8016d5c:	08022734 	.word	0x08022734

08016d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8016d64:	f7ff ffdc 	bl	8016d20 <HAL_RCC_GetHCLKFreq>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	4b05      	ldr	r3, [pc, #20]	; (8016d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016d6c:	689b      	ldr	r3, [r3, #8]
 8016d6e:	0b5b      	lsrs	r3, r3, #13
 8016d70:	f003 0307 	and.w	r3, r3, #7
 8016d74:	4903      	ldr	r1, [pc, #12]	; (8016d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016d76:	5ccb      	ldrb	r3, [r1, r3]
 8016d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	bd80      	pop	{r7, pc}
 8016d80:	40023800 	.word	0x40023800
 8016d84:	08022734 	.word	0x08022734

08016d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	220f      	movs	r2, #15
 8016d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016d98:	4b12      	ldr	r3, [pc, #72]	; (8016de4 <HAL_RCC_GetClockConfig+0x5c>)
 8016d9a:	689b      	ldr	r3, [r3, #8]
 8016d9c:	f003 0203 	and.w	r2, r3, #3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016da4:	4b0f      	ldr	r3, [pc, #60]	; (8016de4 <HAL_RCC_GetClockConfig+0x5c>)
 8016da6:	689b      	ldr	r3, [r3, #8]
 8016da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016db0:	4b0c      	ldr	r3, [pc, #48]	; (8016de4 <HAL_RCC_GetClockConfig+0x5c>)
 8016db2:	689b      	ldr	r3, [r3, #8]
 8016db4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016dbc:	4b09      	ldr	r3, [pc, #36]	; (8016de4 <HAL_RCC_GetClockConfig+0x5c>)
 8016dbe:	689b      	ldr	r3, [r3, #8]
 8016dc0:	08db      	lsrs	r3, r3, #3
 8016dc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016dca:	4b07      	ldr	r3, [pc, #28]	; (8016de8 <HAL_RCC_GetClockConfig+0x60>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	f003 020f 	and.w	r2, r3, #15
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	601a      	str	r2, [r3, #0]
}
 8016dd6:	bf00      	nop
 8016dd8:	370c      	adds	r7, #12
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop
 8016de4:	40023800 	.word	0x40023800
 8016de8:	40023c00 	.word	0x40023c00

08016dec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b088      	sub	sp, #32
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8016e04:	69bb      	ldr	r3, [r7, #24]
 8016e06:	099b      	lsrs	r3, r3, #6
 8016e08:	f003 0301 	and.w	r3, r3, #1
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d10f      	bne.n	8016e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00a      	beq.n	8016e30 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8016e1a:	69fb      	ldr	r3, [r7, #28]
 8016e1c:	099b      	lsrs	r3, r3, #6
 8016e1e:	f003 0301 	and.w	r3, r3, #1
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d004      	beq.n	8016e30 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e2a:	6878      	ldr	r0, [r7, #4]
 8016e2c:	4798      	blx	r3
    return;
 8016e2e:	e0d7      	b.n	8016fe0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8016e30:	69bb      	ldr	r3, [r7, #24]
 8016e32:	085b      	lsrs	r3, r3, #1
 8016e34:	f003 0301 	and.w	r3, r3, #1
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d00a      	beq.n	8016e52 <HAL_SPI_IRQHandler+0x66>
 8016e3c:	69fb      	ldr	r3, [r7, #28]
 8016e3e:	09db      	lsrs	r3, r3, #7
 8016e40:	f003 0301 	and.w	r3, r3, #1
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d004      	beq.n	8016e52 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	4798      	blx	r3
    return;
 8016e50:	e0c6      	b.n	8016fe0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8016e52:	69bb      	ldr	r3, [r7, #24]
 8016e54:	095b      	lsrs	r3, r3, #5
 8016e56:	f003 0301 	and.w	r3, r3, #1
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d10c      	bne.n	8016e78 <HAL_SPI_IRQHandler+0x8c>
 8016e5e:	69bb      	ldr	r3, [r7, #24]
 8016e60:	099b      	lsrs	r3, r3, #6
 8016e62:	f003 0301 	and.w	r3, r3, #1
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d106      	bne.n	8016e78 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	0a1b      	lsrs	r3, r3, #8
 8016e6e:	f003 0301 	and.w	r3, r3, #1
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	f000 80b4 	beq.w	8016fe0 <HAL_SPI_IRQHandler+0x1f4>
 8016e78:	69fb      	ldr	r3, [r7, #28]
 8016e7a:	095b      	lsrs	r3, r3, #5
 8016e7c:	f003 0301 	and.w	r3, r3, #1
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	f000 80ad 	beq.w	8016fe0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	099b      	lsrs	r3, r3, #6
 8016e8a:	f003 0301 	and.w	r3, r3, #1
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d023      	beq.n	8016eda <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	2b03      	cmp	r3, #3
 8016e9c:	d011      	beq.n	8016ec2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016ea2:	f043 0204 	orr.w	r2, r3, #4
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016eaa:	2300      	movs	r3, #0
 8016eac:	617b      	str	r3, [r7, #20]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	617b      	str	r3, [r7, #20]
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	689b      	ldr	r3, [r3, #8]
 8016ebc:	617b      	str	r3, [r7, #20]
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	e00b      	b.n	8016eda <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	613b      	str	r3, [r7, #16]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	613b      	str	r3, [r7, #16]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	689b      	ldr	r3, [r3, #8]
 8016ed4:	613b      	str	r3, [r7, #16]
 8016ed6:	693b      	ldr	r3, [r7, #16]
        return;
 8016ed8:	e082      	b.n	8016fe0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	095b      	lsrs	r3, r3, #5
 8016ede:	f003 0301 	and.w	r3, r3, #1
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d014      	beq.n	8016f10 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016eea:	f043 0201 	orr.w	r2, r3, #1
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	60fb      	str	r3, [r7, #12]
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	689b      	ldr	r3, [r3, #8]
 8016efc:	60fb      	str	r3, [r7, #12]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	681a      	ldr	r2, [r3, #0]
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016f0c:	601a      	str	r2, [r3, #0]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	0a1b      	lsrs	r3, r3, #8
 8016f14:	f003 0301 	and.w	r3, r3, #1
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d00c      	beq.n	8016f36 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f20:	f043 0208 	orr.w	r2, r3, #8
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8016f28:	2300      	movs	r3, #0
 8016f2a:	60bb      	str	r3, [r7, #8]
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	689b      	ldr	r3, [r3, #8]
 8016f32:	60bb      	str	r3, [r7, #8]
 8016f34:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d04f      	beq.n	8016fde <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	685a      	ldr	r2, [r3, #4]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016f4c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	2201      	movs	r2, #1
 8016f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8016f56:	69fb      	ldr	r3, [r7, #28]
 8016f58:	f003 0302 	and.w	r3, r3, #2
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d104      	bne.n	8016f6a <HAL_SPI_IRQHandler+0x17e>
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	f003 0301 	and.w	r3, r3, #1
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d034      	beq.n	8016fd4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	685a      	ldr	r2, [r3, #4]
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	f022 0203 	bic.w	r2, r2, #3
 8016f78:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d011      	beq.n	8016fa6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f86:	4a18      	ldr	r2, [pc, #96]	; (8016fe8 <HAL_SPI_IRQHandler+0x1fc>)
 8016f88:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f8e:	4618      	mov	r0, r3
 8016f90:	f7fc f9e6 	bl	8013360 <HAL_DMA_Abort_IT>
 8016f94:	4603      	mov	r3, r0
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d005      	beq.n	8016fa6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d016      	beq.n	8016fdc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016fb2:	4a0d      	ldr	r2, [pc, #52]	; (8016fe8 <HAL_SPI_IRQHandler+0x1fc>)
 8016fb4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7fc f9d0 	bl	8013360 <HAL_DMA_Abort_IT>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d00a      	beq.n	8016fdc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016fca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8016fd2:	e003      	b.n	8016fdc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f000 f809 	bl	8016fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8016fda:	e000      	b.n	8016fde <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8016fdc:	bf00      	nop
    return;
 8016fde:	bf00      	nop
  }
}
 8016fe0:	3720      	adds	r7, #32
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	08017001 	.word	0x08017001

08016fec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8016fec:	b480      	push	{r7}
 8016fee:	b083      	sub	sp, #12
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8016ff4:	bf00      	nop
 8016ff6:	370c      	adds	r7, #12
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffe:	4770      	bx	lr

08017000 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b084      	sub	sp, #16
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801700c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2200      	movs	r2, #0
 8017012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2200      	movs	r2, #0
 8017018:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	f7ff ffe6 	bl	8016fec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8017020:	bf00      	nop
 8017022:	3710      	adds	r7, #16
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d101      	bne.n	801703a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017036:	2301      	movs	r3, #1
 8017038:	e01d      	b.n	8017076 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017040:	b2db      	uxtb	r3, r3
 8017042:	2b00      	cmp	r3, #0
 8017044:	d106      	bne.n	8017054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	2200      	movs	r2, #0
 801704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f7eb fd06 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	2202      	movs	r2, #2
 8017058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	681a      	ldr	r2, [r3, #0]
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3304      	adds	r3, #4
 8017064:	4619      	mov	r1, r3
 8017066:	4610      	mov	r0, r2
 8017068:	f000 fc3e 	bl	80178e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2201      	movs	r2, #1
 8017070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017074:	2300      	movs	r3, #0
}
 8017076:	4618      	mov	r0, r3
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}

0801707e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801707e:	b480      	push	{r7}
 8017080:	b085      	sub	sp, #20
 8017082:	af00      	add	r7, sp, #0
 8017084:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2202      	movs	r2, #2
 801708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	f003 0307 	and.w	r3, r3, #7
 8017098:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	2b06      	cmp	r3, #6
 801709e:	d007      	beq.n	80170b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	681a      	ldr	r2, [r3, #0]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	f042 0201 	orr.w	r2, r2, #1
 80170ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2201      	movs	r2, #1
 80170b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80170b8:	2300      	movs	r3, #0
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	3714      	adds	r7, #20
 80170be:	46bd      	mov	sp, r7
 80170c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c4:	4770      	bx	lr

080170c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80170c6:	b480      	push	{r7}
 80170c8:	b085      	sub	sp, #20
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	68da      	ldr	r2, [r3, #12]
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f042 0201 	orr.w	r2, r2, #1
 80170dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	689b      	ldr	r3, [r3, #8]
 80170e4:	f003 0307 	and.w	r3, r3, #7
 80170e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2b06      	cmp	r3, #6
 80170ee:	d007      	beq.n	8017100 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	681a      	ldr	r2, [r3, #0]
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	f042 0201 	orr.w	r2, r2, #1
 80170fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017100:	2300      	movs	r3, #0
}
 8017102:	4618      	mov	r0, r3
 8017104:	3714      	adds	r7, #20
 8017106:	46bd      	mov	sp, r7
 8017108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710c:	4770      	bx	lr

0801710e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801710e:	b580      	push	{r7, lr}
 8017110:	b082      	sub	sp, #8
 8017112:	af00      	add	r7, sp, #0
 8017114:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d101      	bne.n	8017120 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801711c:	2301      	movs	r3, #1
 801711e:	e01d      	b.n	801715c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017126:	b2db      	uxtb	r3, r3
 8017128:	2b00      	cmp	r3, #0
 801712a:	d106      	bne.n	801713a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	2200      	movs	r2, #0
 8017130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8017134:	6878      	ldr	r0, [r7, #4]
 8017136:	f7eb fb55 	bl	80027e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	2202      	movs	r2, #2
 801713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	3304      	adds	r3, #4
 801714a:	4619      	mov	r1, r3
 801714c:	4610      	mov	r0, r2
 801714e:	f000 fbcb 	bl	80178e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2201      	movs	r2, #1
 8017156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801715a:	2300      	movs	r3, #0
}
 801715c:	4618      	mov	r0, r3
 801715e:	3708      	adds	r7, #8
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}

08017164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b084      	sub	sp, #16
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	2201      	movs	r2, #1
 8017174:	6839      	ldr	r1, [r7, #0]
 8017176:	4618      	mov	r0, r3
 8017178:	f000 fea0 	bl	8017ebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	4a15      	ldr	r2, [pc, #84]	; (80171d8 <HAL_TIM_PWM_Start+0x74>)
 8017182:	4293      	cmp	r3, r2
 8017184:	d004      	beq.n	8017190 <HAL_TIM_PWM_Start+0x2c>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	4a14      	ldr	r2, [pc, #80]	; (80171dc <HAL_TIM_PWM_Start+0x78>)
 801718c:	4293      	cmp	r3, r2
 801718e:	d101      	bne.n	8017194 <HAL_TIM_PWM_Start+0x30>
 8017190:	2301      	movs	r3, #1
 8017192:	e000      	b.n	8017196 <HAL_TIM_PWM_Start+0x32>
 8017194:	2300      	movs	r3, #0
 8017196:	2b00      	cmp	r3, #0
 8017198:	d007      	beq.n	80171aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80171a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	689b      	ldr	r3, [r3, #8]
 80171b0:	f003 0307 	and.w	r3, r3, #7
 80171b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	2b06      	cmp	r3, #6
 80171ba:	d007      	beq.n	80171cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	f042 0201 	orr.w	r2, r2, #1
 80171ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80171cc:	2300      	movs	r3, #0
}
 80171ce:	4618      	mov	r0, r3
 80171d0:	3710      	adds	r7, #16
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
 80171d6:	bf00      	nop
 80171d8:	40010000 	.word	0x40010000
 80171dc:	40010400 	.word	0x40010400

080171e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b086      	sub	sp, #24
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d101      	bne.n	80171f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80171f0:	2301      	movs	r3, #1
 80171f2:	e083      	b.n	80172fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171fa:	b2db      	uxtb	r3, r3
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d106      	bne.n	801720e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2200      	movs	r2, #0
 8017204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f7eb fedd 	bl	8002fc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	2202      	movs	r2, #2
 8017212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	689b      	ldr	r3, [r3, #8]
 801721c:	687a      	ldr	r2, [r7, #4]
 801721e:	6812      	ldr	r2, [r2, #0]
 8017220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017224:	f023 0307 	bic.w	r3, r3, #7
 8017228:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	3304      	adds	r3, #4
 8017232:	4619      	mov	r1, r3
 8017234:	4610      	mov	r0, r2
 8017236:	f000 fb57 	bl	80178e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	689b      	ldr	r3, [r3, #8]
 8017240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	699b      	ldr	r3, [r3, #24]
 8017248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	6a1b      	ldr	r3, [r3, #32]
 8017250:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	697a      	ldr	r2, [r7, #20]
 8017258:	4313      	orrs	r3, r2
 801725a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017262:	f023 0303 	bic.w	r3, r3, #3
 8017266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	689a      	ldr	r2, [r3, #8]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	699b      	ldr	r3, [r3, #24]
 8017270:	021b      	lsls	r3, r3, #8
 8017272:	4313      	orrs	r3, r2
 8017274:	693a      	ldr	r2, [r7, #16]
 8017276:	4313      	orrs	r3, r2
 8017278:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8017280:	f023 030c 	bic.w	r3, r3, #12
 8017284:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801728c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	68da      	ldr	r2, [r3, #12]
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	69db      	ldr	r3, [r3, #28]
 801729a:	021b      	lsls	r3, r3, #8
 801729c:	4313      	orrs	r3, r2
 801729e:	693a      	ldr	r2, [r7, #16]
 80172a0:	4313      	orrs	r3, r2
 80172a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	691b      	ldr	r3, [r3, #16]
 80172a8:	011a      	lsls	r2, r3, #4
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	6a1b      	ldr	r3, [r3, #32]
 80172ae:	031b      	lsls	r3, r3, #12
 80172b0:	4313      	orrs	r3, r2
 80172b2:	693a      	ldr	r2, [r7, #16]
 80172b4:	4313      	orrs	r3, r2
 80172b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80172be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80172c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	685a      	ldr	r2, [r3, #4]
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	695b      	ldr	r3, [r3, #20]
 80172d0:	011b      	lsls	r3, r3, #4
 80172d2:	4313      	orrs	r3, r2
 80172d4:	68fa      	ldr	r2, [r7, #12]
 80172d6:	4313      	orrs	r3, r2
 80172d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	697a      	ldr	r2, [r7, #20]
 80172e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	693a      	ldr	r2, [r7, #16]
 80172e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	68fa      	ldr	r2, [r7, #12]
 80172f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	2201      	movs	r2, #1
 80172f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80172fa:	2300      	movs	r3, #0
}
 80172fc:	4618      	mov	r0, r3
 80172fe:	3718      	adds	r7, #24
 8017300:	46bd      	mov	sp, r7
 8017302:	bd80      	pop	{r7, pc}

08017304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8017304:	b580      	push	{r7, lr}
 8017306:	b082      	sub	sp, #8
 8017308:	af00      	add	r7, sp, #0
 801730a:	6078      	str	r0, [r7, #4]
 801730c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d003      	beq.n	801731c <HAL_TIM_Encoder_Start+0x18>
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	2b04      	cmp	r3, #4
 8017318:	d008      	beq.n	801732c <HAL_TIM_Encoder_Start+0x28>
 801731a:	e00f      	b.n	801733c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2201      	movs	r2, #1
 8017322:	2100      	movs	r1, #0
 8017324:	4618      	mov	r0, r3
 8017326:	f000 fdc9 	bl	8017ebc <TIM_CCxChannelCmd>
      break;
 801732a:	e016      	b.n	801735a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	2201      	movs	r2, #1
 8017332:	2104      	movs	r1, #4
 8017334:	4618      	mov	r0, r3
 8017336:	f000 fdc1 	bl	8017ebc <TIM_CCxChannelCmd>
      break;
 801733a:	e00e      	b.n	801735a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	2201      	movs	r2, #1
 8017342:	2100      	movs	r1, #0
 8017344:	4618      	mov	r0, r3
 8017346:	f000 fdb9 	bl	8017ebc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	2201      	movs	r2, #1
 8017350:	2104      	movs	r1, #4
 8017352:	4618      	mov	r0, r3
 8017354:	f000 fdb2 	bl	8017ebc <TIM_CCxChannelCmd>
      break;
 8017358:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f042 0201 	orr.w	r2, r2, #1
 8017368:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801736a:	2300      	movs	r3, #0
}
 801736c:	4618      	mov	r0, r3
 801736e:	3708      	adds	r7, #8
 8017370:	46bd      	mov	sp, r7
 8017372:	bd80      	pop	{r7, pc}

08017374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b082      	sub	sp, #8
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	691b      	ldr	r3, [r3, #16]
 8017382:	f003 0302 	and.w	r3, r3, #2
 8017386:	2b02      	cmp	r3, #2
 8017388:	d122      	bne.n	80173d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	68db      	ldr	r3, [r3, #12]
 8017390:	f003 0302 	and.w	r3, r3, #2
 8017394:	2b02      	cmp	r3, #2
 8017396:	d11b      	bne.n	80173d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	f06f 0202 	mvn.w	r2, #2
 80173a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	2201      	movs	r2, #1
 80173a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	699b      	ldr	r3, [r3, #24]
 80173ae:	f003 0303 	and.w	r3, r3, #3
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d003      	beq.n	80173be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80173b6:	6878      	ldr	r0, [r7, #4]
 80173b8:	f000 fa78 	bl	80178ac <HAL_TIM_IC_CaptureCallback>
 80173bc:	e005      	b.n	80173ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80173be:	6878      	ldr	r0, [r7, #4]
 80173c0:	f000 fa6a 	bl	8017898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173c4:	6878      	ldr	r0, [r7, #4]
 80173c6:	f000 fa7b 	bl	80178c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2200      	movs	r2, #0
 80173ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	691b      	ldr	r3, [r3, #16]
 80173d6:	f003 0304 	and.w	r3, r3, #4
 80173da:	2b04      	cmp	r3, #4
 80173dc:	d122      	bne.n	8017424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	68db      	ldr	r3, [r3, #12]
 80173e4:	f003 0304 	and.w	r3, r3, #4
 80173e8:	2b04      	cmp	r3, #4
 80173ea:	d11b      	bne.n	8017424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	f06f 0204 	mvn.w	r2, #4
 80173f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2202      	movs	r2, #2
 80173fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	699b      	ldr	r3, [r3, #24]
 8017402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017406:	2b00      	cmp	r3, #0
 8017408:	d003      	beq.n	8017412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801740a:	6878      	ldr	r0, [r7, #4]
 801740c:	f000 fa4e 	bl	80178ac <HAL_TIM_IC_CaptureCallback>
 8017410:	e005      	b.n	801741e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017412:	6878      	ldr	r0, [r7, #4]
 8017414:	f000 fa40 	bl	8017898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017418:	6878      	ldr	r0, [r7, #4]
 801741a:	f000 fa51 	bl	80178c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	2200      	movs	r2, #0
 8017422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	691b      	ldr	r3, [r3, #16]
 801742a:	f003 0308 	and.w	r3, r3, #8
 801742e:	2b08      	cmp	r3, #8
 8017430:	d122      	bne.n	8017478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	f003 0308 	and.w	r3, r3, #8
 801743c:	2b08      	cmp	r3, #8
 801743e:	d11b      	bne.n	8017478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	f06f 0208 	mvn.w	r2, #8
 8017448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2204      	movs	r2, #4
 801744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	69db      	ldr	r3, [r3, #28]
 8017456:	f003 0303 	and.w	r3, r3, #3
 801745a:	2b00      	cmp	r3, #0
 801745c:	d003      	beq.n	8017466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f000 fa24 	bl	80178ac <HAL_TIM_IC_CaptureCallback>
 8017464:	e005      	b.n	8017472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f000 fa16 	bl	8017898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801746c:	6878      	ldr	r0, [r7, #4]
 801746e:	f000 fa27 	bl	80178c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	691b      	ldr	r3, [r3, #16]
 801747e:	f003 0310 	and.w	r3, r3, #16
 8017482:	2b10      	cmp	r3, #16
 8017484:	d122      	bne.n	80174cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	f003 0310 	and.w	r3, r3, #16
 8017490:	2b10      	cmp	r3, #16
 8017492:	d11b      	bne.n	80174cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	f06f 0210 	mvn.w	r2, #16
 801749c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	2208      	movs	r2, #8
 80174a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	69db      	ldr	r3, [r3, #28]
 80174aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d003      	beq.n	80174ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 f9fa 	bl	80178ac <HAL_TIM_IC_CaptureCallback>
 80174b8:	e005      	b.n	80174c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80174ba:	6878      	ldr	r0, [r7, #4]
 80174bc:	f000 f9ec 	bl	8017898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80174c0:	6878      	ldr	r0, [r7, #4]
 80174c2:	f000 f9fd 	bl	80178c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2200      	movs	r2, #0
 80174ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	691b      	ldr	r3, [r3, #16]
 80174d2:	f003 0301 	and.w	r3, r3, #1
 80174d6:	2b01      	cmp	r3, #1
 80174d8:	d10e      	bne.n	80174f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	68db      	ldr	r3, [r3, #12]
 80174e0:	f003 0301 	and.w	r3, r3, #1
 80174e4:	2b01      	cmp	r3, #1
 80174e6:	d107      	bne.n	80174f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	f06f 0201 	mvn.w	r2, #1
 80174f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80174f2:	6878      	ldr	r0, [r7, #4]
 80174f4:	f7f6 f92a 	bl	800d74c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	691b      	ldr	r3, [r3, #16]
 80174fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017502:	2b80      	cmp	r3, #128	; 0x80
 8017504:	d10e      	bne.n	8017524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017510:	2b80      	cmp	r3, #128	; 0x80
 8017512:	d107      	bne.n	8017524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801751c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fd78 	bl	8018014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	691b      	ldr	r3, [r3, #16]
 801752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801752e:	2b40      	cmp	r3, #64	; 0x40
 8017530:	d10e      	bne.n	8017550 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	68db      	ldr	r3, [r3, #12]
 8017538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801753c:	2b40      	cmp	r3, #64	; 0x40
 801753e:	d107      	bne.n	8017550 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801754a:	6878      	ldr	r0, [r7, #4]
 801754c:	f000 f9c2 	bl	80178d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	691b      	ldr	r3, [r3, #16]
 8017556:	f003 0320 	and.w	r3, r3, #32
 801755a:	2b20      	cmp	r3, #32
 801755c:	d10e      	bne.n	801757c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	68db      	ldr	r3, [r3, #12]
 8017564:	f003 0320 	and.w	r3, r3, #32
 8017568:	2b20      	cmp	r3, #32
 801756a:	d107      	bne.n	801757c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f06f 0220 	mvn.w	r2, #32
 8017574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f000 fd42 	bl	8018000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801757c:	bf00      	nop
 801757e:	3708      	adds	r7, #8
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	60f8      	str	r0, [r7, #12]
 801758c:	60b9      	str	r1, [r7, #8]
 801758e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017596:	2b01      	cmp	r3, #1
 8017598:	d101      	bne.n	801759e <HAL_TIM_PWM_ConfigChannel+0x1a>
 801759a:	2302      	movs	r3, #2
 801759c:	e0b4      	b.n	8017708 <HAL_TIM_PWM_ConfigChannel+0x184>
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	2201      	movs	r2, #1
 80175a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	2202      	movs	r2, #2
 80175aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2b0c      	cmp	r3, #12
 80175b2:	f200 809f 	bhi.w	80176f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80175b6:	a201      	add	r2, pc, #4	; (adr r2, 80175bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80175b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175bc:	080175f1 	.word	0x080175f1
 80175c0:	080176f5 	.word	0x080176f5
 80175c4:	080176f5 	.word	0x080176f5
 80175c8:	080176f5 	.word	0x080176f5
 80175cc:	08017631 	.word	0x08017631
 80175d0:	080176f5 	.word	0x080176f5
 80175d4:	080176f5 	.word	0x080176f5
 80175d8:	080176f5 	.word	0x080176f5
 80175dc:	08017673 	.word	0x08017673
 80175e0:	080176f5 	.word	0x080176f5
 80175e4:	080176f5 	.word	0x080176f5
 80175e8:	080176f5 	.word	0x080176f5
 80175ec:	080176b3 	.word	0x080176b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	68b9      	ldr	r1, [r7, #8]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f000 fa16 	bl	8017a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	699a      	ldr	r2, [r3, #24]
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	f042 0208 	orr.w	r2, r2, #8
 801760a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	699a      	ldr	r2, [r3, #24]
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	f022 0204 	bic.w	r2, r2, #4
 801761a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	6999      	ldr	r1, [r3, #24]
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	691a      	ldr	r2, [r3, #16]
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	430a      	orrs	r2, r1
 801762c:	619a      	str	r2, [r3, #24]
      break;
 801762e:	e062      	b.n	80176f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	68b9      	ldr	r1, [r7, #8]
 8017636:	4618      	mov	r0, r3
 8017638:	f000 fa66 	bl	8017b08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	699a      	ldr	r2, [r3, #24]
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801764a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	699a      	ldr	r2, [r3, #24]
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801765a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	6999      	ldr	r1, [r3, #24]
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	691b      	ldr	r3, [r3, #16]
 8017666:	021a      	lsls	r2, r3, #8
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	430a      	orrs	r2, r1
 801766e:	619a      	str	r2, [r3, #24]
      break;
 8017670:	e041      	b.n	80176f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	68b9      	ldr	r1, [r7, #8]
 8017678:	4618      	mov	r0, r3
 801767a:	f000 fabb 	bl	8017bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	69da      	ldr	r2, [r3, #28]
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	f042 0208 	orr.w	r2, r2, #8
 801768c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	69da      	ldr	r2, [r3, #28]
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	f022 0204 	bic.w	r2, r2, #4
 801769c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	69d9      	ldr	r1, [r3, #28]
 80176a4:	68bb      	ldr	r3, [r7, #8]
 80176a6:	691a      	ldr	r2, [r3, #16]
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	430a      	orrs	r2, r1
 80176ae:	61da      	str	r2, [r3, #28]
      break;
 80176b0:	e021      	b.n	80176f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	68b9      	ldr	r1, [r7, #8]
 80176b8:	4618      	mov	r0, r3
 80176ba:	f000 fb0f 	bl	8017cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	69da      	ldr	r2, [r3, #28]
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80176cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	69da      	ldr	r2, [r3, #28]
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80176dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	69d9      	ldr	r1, [r3, #28]
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	691b      	ldr	r3, [r3, #16]
 80176e8:	021a      	lsls	r2, r3, #8
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	430a      	orrs	r2, r1
 80176f0:	61da      	str	r2, [r3, #28]
      break;
 80176f2:	e000      	b.n	80176f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80176f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	2201      	movs	r2, #1
 80176fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	2200      	movs	r2, #0
 8017702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017706:	2300      	movs	r3, #0
}
 8017708:	4618      	mov	r0, r3
 801770a:	3710      	adds	r7, #16
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}

08017710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b084      	sub	sp, #16
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017720:	2b01      	cmp	r3, #1
 8017722:	d101      	bne.n	8017728 <HAL_TIM_ConfigClockSource+0x18>
 8017724:	2302      	movs	r3, #2
 8017726:	e0b3      	b.n	8017890 <HAL_TIM_ConfigClockSource+0x180>
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	2201      	movs	r2, #1
 801772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2202      	movs	r2, #2
 8017734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	689b      	ldr	r3, [r3, #8]
 801773e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8017746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801774e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	68fa      	ldr	r2, [r7, #12]
 8017756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017760:	d03e      	beq.n	80177e0 <HAL_TIM_ConfigClockSource+0xd0>
 8017762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017766:	f200 8087 	bhi.w	8017878 <HAL_TIM_ConfigClockSource+0x168>
 801776a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801776e:	f000 8085 	beq.w	801787c <HAL_TIM_ConfigClockSource+0x16c>
 8017772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017776:	d87f      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 8017778:	2b70      	cmp	r3, #112	; 0x70
 801777a:	d01a      	beq.n	80177b2 <HAL_TIM_ConfigClockSource+0xa2>
 801777c:	2b70      	cmp	r3, #112	; 0x70
 801777e:	d87b      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 8017780:	2b60      	cmp	r3, #96	; 0x60
 8017782:	d050      	beq.n	8017826 <HAL_TIM_ConfigClockSource+0x116>
 8017784:	2b60      	cmp	r3, #96	; 0x60
 8017786:	d877      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 8017788:	2b50      	cmp	r3, #80	; 0x50
 801778a:	d03c      	beq.n	8017806 <HAL_TIM_ConfigClockSource+0xf6>
 801778c:	2b50      	cmp	r3, #80	; 0x50
 801778e:	d873      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 8017790:	2b40      	cmp	r3, #64	; 0x40
 8017792:	d058      	beq.n	8017846 <HAL_TIM_ConfigClockSource+0x136>
 8017794:	2b40      	cmp	r3, #64	; 0x40
 8017796:	d86f      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 8017798:	2b30      	cmp	r3, #48	; 0x30
 801779a:	d064      	beq.n	8017866 <HAL_TIM_ConfigClockSource+0x156>
 801779c:	2b30      	cmp	r3, #48	; 0x30
 801779e:	d86b      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 80177a0:	2b20      	cmp	r3, #32
 80177a2:	d060      	beq.n	8017866 <HAL_TIM_ConfigClockSource+0x156>
 80177a4:	2b20      	cmp	r3, #32
 80177a6:	d867      	bhi.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d05c      	beq.n	8017866 <HAL_TIM_ConfigClockSource+0x156>
 80177ac:	2b10      	cmp	r3, #16
 80177ae:	d05a      	beq.n	8017866 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80177b0:	e062      	b.n	8017878 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	6818      	ldr	r0, [r3, #0]
 80177b6:	683b      	ldr	r3, [r7, #0]
 80177b8:	6899      	ldr	r1, [r3, #8]
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	685a      	ldr	r2, [r3, #4]
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	68db      	ldr	r3, [r3, #12]
 80177c2:	f000 fb5b 	bl	8017e7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	689b      	ldr	r3, [r3, #8]
 80177cc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80177d4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	68fa      	ldr	r2, [r7, #12]
 80177dc:	609a      	str	r2, [r3, #8]
      break;
 80177de:	e04e      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	6818      	ldr	r0, [r3, #0]
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	6899      	ldr	r1, [r3, #8]
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	685a      	ldr	r2, [r3, #4]
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	f000 fb44 	bl	8017e7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	689a      	ldr	r2, [r3, #8]
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8017802:	609a      	str	r2, [r3, #8]
      break;
 8017804:	e03b      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6818      	ldr	r0, [r3, #0]
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	6859      	ldr	r1, [r3, #4]
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	461a      	mov	r2, r3
 8017814:	f000 fab8 	bl	8017d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2150      	movs	r1, #80	; 0x50
 801781e:	4618      	mov	r0, r3
 8017820:	f000 fb11 	bl	8017e46 <TIM_ITRx_SetConfig>
      break;
 8017824:	e02b      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	6818      	ldr	r0, [r3, #0]
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	6859      	ldr	r1, [r3, #4]
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	461a      	mov	r2, r3
 8017834:	f000 fad7 	bl	8017de6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2160      	movs	r1, #96	; 0x60
 801783e:	4618      	mov	r0, r3
 8017840:	f000 fb01 	bl	8017e46 <TIM_ITRx_SetConfig>
      break;
 8017844:	e01b      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6818      	ldr	r0, [r3, #0]
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	6859      	ldr	r1, [r3, #4]
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	68db      	ldr	r3, [r3, #12]
 8017852:	461a      	mov	r2, r3
 8017854:	f000 fa98 	bl	8017d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	2140      	movs	r1, #64	; 0x40
 801785e:	4618      	mov	r0, r3
 8017860:	f000 faf1 	bl	8017e46 <TIM_ITRx_SetConfig>
      break;
 8017864:	e00b      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681a      	ldr	r2, [r3, #0]
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4619      	mov	r1, r3
 8017870:	4610      	mov	r0, r2
 8017872:	f000 fae8 	bl	8017e46 <TIM_ITRx_SetConfig>
      break;
 8017876:	e002      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8017878:	bf00      	nop
 801787a:	e000      	b.n	801787e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 801787c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	2201      	movs	r2, #1
 8017882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	2200      	movs	r2, #0
 801788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801788e:	2300      	movs	r3, #0
}
 8017890:	4618      	mov	r0, r3
 8017892:	3710      	adds	r7, #16
 8017894:	46bd      	mov	sp, r7
 8017896:	bd80      	pop	{r7, pc}

08017898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80178a0:	bf00      	nop
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr

080178ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80178b4:	bf00      	nop
 80178b6:	370c      	adds	r7, #12
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr

080178c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80178c0:	b480      	push	{r7}
 80178c2:	b083      	sub	sp, #12
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80178c8:	bf00      	nop
 80178ca:	370c      	adds	r7, #12
 80178cc:	46bd      	mov	sp, r7
 80178ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d2:	4770      	bx	lr

080178d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80178dc:	bf00      	nop
 80178de:	370c      	adds	r7, #12
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b085      	sub	sp, #20
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
 80178f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	4a40      	ldr	r2, [pc, #256]	; (80179fc <TIM_Base_SetConfig+0x114>)
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d013      	beq.n	8017928 <TIM_Base_SetConfig+0x40>
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017906:	d00f      	beq.n	8017928 <TIM_Base_SetConfig+0x40>
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	4a3d      	ldr	r2, [pc, #244]	; (8017a00 <TIM_Base_SetConfig+0x118>)
 801790c:	4293      	cmp	r3, r2
 801790e:	d00b      	beq.n	8017928 <TIM_Base_SetConfig+0x40>
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	4a3c      	ldr	r2, [pc, #240]	; (8017a04 <TIM_Base_SetConfig+0x11c>)
 8017914:	4293      	cmp	r3, r2
 8017916:	d007      	beq.n	8017928 <TIM_Base_SetConfig+0x40>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	4a3b      	ldr	r2, [pc, #236]	; (8017a08 <TIM_Base_SetConfig+0x120>)
 801791c:	4293      	cmp	r3, r2
 801791e:	d003      	beq.n	8017928 <TIM_Base_SetConfig+0x40>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	4a3a      	ldr	r2, [pc, #232]	; (8017a0c <TIM_Base_SetConfig+0x124>)
 8017924:	4293      	cmp	r3, r2
 8017926:	d108      	bne.n	801793a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801792e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	685b      	ldr	r3, [r3, #4]
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	4313      	orrs	r3, r2
 8017938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	4a2f      	ldr	r2, [pc, #188]	; (80179fc <TIM_Base_SetConfig+0x114>)
 801793e:	4293      	cmp	r3, r2
 8017940:	d02b      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017948:	d027      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4a2c      	ldr	r2, [pc, #176]	; (8017a00 <TIM_Base_SetConfig+0x118>)
 801794e:	4293      	cmp	r3, r2
 8017950:	d023      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	4a2b      	ldr	r2, [pc, #172]	; (8017a04 <TIM_Base_SetConfig+0x11c>)
 8017956:	4293      	cmp	r3, r2
 8017958:	d01f      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	4a2a      	ldr	r2, [pc, #168]	; (8017a08 <TIM_Base_SetConfig+0x120>)
 801795e:	4293      	cmp	r3, r2
 8017960:	d01b      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	4a29      	ldr	r2, [pc, #164]	; (8017a0c <TIM_Base_SetConfig+0x124>)
 8017966:	4293      	cmp	r3, r2
 8017968:	d017      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	4a28      	ldr	r2, [pc, #160]	; (8017a10 <TIM_Base_SetConfig+0x128>)
 801796e:	4293      	cmp	r3, r2
 8017970:	d013      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	4a27      	ldr	r2, [pc, #156]	; (8017a14 <TIM_Base_SetConfig+0x12c>)
 8017976:	4293      	cmp	r3, r2
 8017978:	d00f      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	4a26      	ldr	r2, [pc, #152]	; (8017a18 <TIM_Base_SetConfig+0x130>)
 801797e:	4293      	cmp	r3, r2
 8017980:	d00b      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	4a25      	ldr	r2, [pc, #148]	; (8017a1c <TIM_Base_SetConfig+0x134>)
 8017986:	4293      	cmp	r3, r2
 8017988:	d007      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	4a24      	ldr	r2, [pc, #144]	; (8017a20 <TIM_Base_SetConfig+0x138>)
 801798e:	4293      	cmp	r3, r2
 8017990:	d003      	beq.n	801799a <TIM_Base_SetConfig+0xb2>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	4a23      	ldr	r2, [pc, #140]	; (8017a24 <TIM_Base_SetConfig+0x13c>)
 8017996:	4293      	cmp	r3, r2
 8017998:	d108      	bne.n	80179ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80179a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80179a2:	683b      	ldr	r3, [r7, #0]
 80179a4:	68db      	ldr	r3, [r3, #12]
 80179a6:	68fa      	ldr	r2, [r7, #12]
 80179a8:	4313      	orrs	r3, r2
 80179aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	695b      	ldr	r3, [r3, #20]
 80179b6:	4313      	orrs	r3, r2
 80179b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	68fa      	ldr	r2, [r7, #12]
 80179be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	689a      	ldr	r2, [r3, #8]
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	4a0a      	ldr	r2, [pc, #40]	; (80179fc <TIM_Base_SetConfig+0x114>)
 80179d4:	4293      	cmp	r3, r2
 80179d6:	d003      	beq.n	80179e0 <TIM_Base_SetConfig+0xf8>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	4a0c      	ldr	r2, [pc, #48]	; (8017a0c <TIM_Base_SetConfig+0x124>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d103      	bne.n	80179e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	691a      	ldr	r2, [r3, #16]
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2201      	movs	r2, #1
 80179ec:	615a      	str	r2, [r3, #20]
}
 80179ee:	bf00      	nop
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f8:	4770      	bx	lr
 80179fa:	bf00      	nop
 80179fc:	40010000 	.word	0x40010000
 8017a00:	40000400 	.word	0x40000400
 8017a04:	40000800 	.word	0x40000800
 8017a08:	40000c00 	.word	0x40000c00
 8017a0c:	40010400 	.word	0x40010400
 8017a10:	40014000 	.word	0x40014000
 8017a14:	40014400 	.word	0x40014400
 8017a18:	40014800 	.word	0x40014800
 8017a1c:	40001800 	.word	0x40001800
 8017a20:	40001c00 	.word	0x40001c00
 8017a24:	40002000 	.word	0x40002000

08017a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017a28:	b480      	push	{r7}
 8017a2a:	b087      	sub	sp, #28
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6a1b      	ldr	r3, [r3, #32]
 8017a36:	f023 0201 	bic.w	r2, r3, #1
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6a1b      	ldr	r3, [r3, #32]
 8017a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	685b      	ldr	r3, [r3, #4]
 8017a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	699b      	ldr	r3, [r3, #24]
 8017a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	f023 0303 	bic.w	r3, r3, #3
 8017a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	68fa      	ldr	r2, [r7, #12]
 8017a66:	4313      	orrs	r3, r2
 8017a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	f023 0302 	bic.w	r3, r3, #2
 8017a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	689b      	ldr	r3, [r3, #8]
 8017a76:	697a      	ldr	r2, [r7, #20]
 8017a78:	4313      	orrs	r3, r2
 8017a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	4a20      	ldr	r2, [pc, #128]	; (8017b00 <TIM_OC1_SetConfig+0xd8>)
 8017a80:	4293      	cmp	r3, r2
 8017a82:	d003      	beq.n	8017a8c <TIM_OC1_SetConfig+0x64>
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	4a1f      	ldr	r2, [pc, #124]	; (8017b04 <TIM_OC1_SetConfig+0xdc>)
 8017a88:	4293      	cmp	r3, r2
 8017a8a:	d10c      	bne.n	8017aa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	f023 0308 	bic.w	r3, r3, #8
 8017a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	68db      	ldr	r3, [r3, #12]
 8017a98:	697a      	ldr	r2, [r7, #20]
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017a9e:	697b      	ldr	r3, [r7, #20]
 8017aa0:	f023 0304 	bic.w	r3, r3, #4
 8017aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	4a15      	ldr	r2, [pc, #84]	; (8017b00 <TIM_OC1_SetConfig+0xd8>)
 8017aaa:	4293      	cmp	r3, r2
 8017aac:	d003      	beq.n	8017ab6 <TIM_OC1_SetConfig+0x8e>
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4a14      	ldr	r2, [pc, #80]	; (8017b04 <TIM_OC1_SetConfig+0xdc>)
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	d111      	bne.n	8017ada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017ab6:	693b      	ldr	r3, [r7, #16]
 8017ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017abe:	693b      	ldr	r3, [r7, #16]
 8017ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	695b      	ldr	r3, [r3, #20]
 8017aca:	693a      	ldr	r2, [r7, #16]
 8017acc:	4313      	orrs	r3, r2
 8017ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	699b      	ldr	r3, [r3, #24]
 8017ad4:	693a      	ldr	r2, [r7, #16]
 8017ad6:	4313      	orrs	r3, r2
 8017ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	693a      	ldr	r2, [r7, #16]
 8017ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	68fa      	ldr	r2, [r7, #12]
 8017ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017ae6:	683b      	ldr	r3, [r7, #0]
 8017ae8:	685a      	ldr	r2, [r3, #4]
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	697a      	ldr	r2, [r7, #20]
 8017af2:	621a      	str	r2, [r3, #32]
}
 8017af4:	bf00      	nop
 8017af6:	371c      	adds	r7, #28
 8017af8:	46bd      	mov	sp, r7
 8017afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afe:	4770      	bx	lr
 8017b00:	40010000 	.word	0x40010000
 8017b04:	40010400 	.word	0x40010400

08017b08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b087      	sub	sp, #28
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
 8017b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6a1b      	ldr	r3, [r3, #32]
 8017b16:	f023 0210 	bic.w	r2, r3, #16
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	6a1b      	ldr	r3, [r3, #32]
 8017b22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	685b      	ldr	r3, [r3, #4]
 8017b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	699b      	ldr	r3, [r3, #24]
 8017b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017b30:	68fb      	ldr	r3, [r7, #12]
 8017b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	021b      	lsls	r3, r3, #8
 8017b46:	68fa      	ldr	r2, [r7, #12]
 8017b48:	4313      	orrs	r3, r2
 8017b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	f023 0320 	bic.w	r3, r3, #32
 8017b52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	689b      	ldr	r3, [r3, #8]
 8017b58:	011b      	lsls	r3, r3, #4
 8017b5a:	697a      	ldr	r2, [r7, #20]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	4a22      	ldr	r2, [pc, #136]	; (8017bec <TIM_OC2_SetConfig+0xe4>)
 8017b64:	4293      	cmp	r3, r2
 8017b66:	d003      	beq.n	8017b70 <TIM_OC2_SetConfig+0x68>
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	4a21      	ldr	r2, [pc, #132]	; (8017bf0 <TIM_OC2_SetConfig+0xe8>)
 8017b6c:	4293      	cmp	r3, r2
 8017b6e:	d10d      	bne.n	8017b8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017b70:	697b      	ldr	r3, [r7, #20]
 8017b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	011b      	lsls	r3, r3, #4
 8017b7e:	697a      	ldr	r2, [r7, #20]
 8017b80:	4313      	orrs	r3, r2
 8017b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	4a17      	ldr	r2, [pc, #92]	; (8017bec <TIM_OC2_SetConfig+0xe4>)
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d003      	beq.n	8017b9c <TIM_OC2_SetConfig+0x94>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	4a16      	ldr	r2, [pc, #88]	; (8017bf0 <TIM_OC2_SetConfig+0xe8>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d113      	bne.n	8017bc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017b9c:	693b      	ldr	r3, [r7, #16]
 8017b9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017ba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017baa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	695b      	ldr	r3, [r3, #20]
 8017bb0:	009b      	lsls	r3, r3, #2
 8017bb2:	693a      	ldr	r2, [r7, #16]
 8017bb4:	4313      	orrs	r3, r2
 8017bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017bb8:	683b      	ldr	r3, [r7, #0]
 8017bba:	699b      	ldr	r3, [r3, #24]
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	693a      	ldr	r2, [r7, #16]
 8017bc0:	4313      	orrs	r3, r2
 8017bc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	693a      	ldr	r2, [r7, #16]
 8017bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	68fa      	ldr	r2, [r7, #12]
 8017bce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	685a      	ldr	r2, [r3, #4]
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	697a      	ldr	r2, [r7, #20]
 8017bdc:	621a      	str	r2, [r3, #32]
}
 8017bde:	bf00      	nop
 8017be0:	371c      	adds	r7, #28
 8017be2:	46bd      	mov	sp, r7
 8017be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be8:	4770      	bx	lr
 8017bea:	bf00      	nop
 8017bec:	40010000 	.word	0x40010000
 8017bf0:	40010400 	.word	0x40010400

08017bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b087      	sub	sp, #28
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	6a1b      	ldr	r3, [r3, #32]
 8017c02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6a1b      	ldr	r3, [r3, #32]
 8017c0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	685b      	ldr	r3, [r3, #4]
 8017c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	69db      	ldr	r3, [r3, #28]
 8017c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	f023 0303 	bic.w	r3, r3, #3
 8017c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	68fa      	ldr	r2, [r7, #12]
 8017c32:	4313      	orrs	r3, r2
 8017c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017c3e:	683b      	ldr	r3, [r7, #0]
 8017c40:	689b      	ldr	r3, [r3, #8]
 8017c42:	021b      	lsls	r3, r3, #8
 8017c44:	697a      	ldr	r2, [r7, #20]
 8017c46:	4313      	orrs	r3, r2
 8017c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	4a21      	ldr	r2, [pc, #132]	; (8017cd4 <TIM_OC3_SetConfig+0xe0>)
 8017c4e:	4293      	cmp	r3, r2
 8017c50:	d003      	beq.n	8017c5a <TIM_OC3_SetConfig+0x66>
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	4a20      	ldr	r2, [pc, #128]	; (8017cd8 <TIM_OC3_SetConfig+0xe4>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d10d      	bne.n	8017c76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	68db      	ldr	r3, [r3, #12]
 8017c66:	021b      	lsls	r3, r3, #8
 8017c68:	697a      	ldr	r2, [r7, #20]
 8017c6a:	4313      	orrs	r3, r2
 8017c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	4a16      	ldr	r2, [pc, #88]	; (8017cd4 <TIM_OC3_SetConfig+0xe0>)
 8017c7a:	4293      	cmp	r3, r2
 8017c7c:	d003      	beq.n	8017c86 <TIM_OC3_SetConfig+0x92>
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	4a15      	ldr	r2, [pc, #84]	; (8017cd8 <TIM_OC3_SetConfig+0xe4>)
 8017c82:	4293      	cmp	r3, r2
 8017c84:	d113      	bne.n	8017cae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017c86:	693b      	ldr	r3, [r7, #16]
 8017c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	695b      	ldr	r3, [r3, #20]
 8017c9a:	011b      	lsls	r3, r3, #4
 8017c9c:	693a      	ldr	r2, [r7, #16]
 8017c9e:	4313      	orrs	r3, r2
 8017ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017ca2:	683b      	ldr	r3, [r7, #0]
 8017ca4:	699b      	ldr	r3, [r3, #24]
 8017ca6:	011b      	lsls	r3, r3, #4
 8017ca8:	693a      	ldr	r2, [r7, #16]
 8017caa:	4313      	orrs	r3, r2
 8017cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	693a      	ldr	r2, [r7, #16]
 8017cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	68fa      	ldr	r2, [r7, #12]
 8017cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	685a      	ldr	r2, [r3, #4]
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	697a      	ldr	r2, [r7, #20]
 8017cc6:	621a      	str	r2, [r3, #32]
}
 8017cc8:	bf00      	nop
 8017cca:	371c      	adds	r7, #28
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd2:	4770      	bx	lr
 8017cd4:	40010000 	.word	0x40010000
 8017cd8:	40010400 	.word	0x40010400

08017cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017cdc:	b480      	push	{r7}
 8017cde:	b087      	sub	sp, #28
 8017ce0:	af00      	add	r7, sp, #0
 8017ce2:	6078      	str	r0, [r7, #4]
 8017ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6a1b      	ldr	r3, [r3, #32]
 8017cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017cf2:	687b      	ldr	r3, [r7, #4]
 8017cf4:	6a1b      	ldr	r3, [r3, #32]
 8017cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	685b      	ldr	r3, [r3, #4]
 8017cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	69db      	ldr	r3, [r3, #28]
 8017d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	021b      	lsls	r3, r3, #8
 8017d1a:	68fa      	ldr	r2, [r7, #12]
 8017d1c:	4313      	orrs	r3, r2
 8017d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017d28:	683b      	ldr	r3, [r7, #0]
 8017d2a:	689b      	ldr	r3, [r3, #8]
 8017d2c:	031b      	lsls	r3, r3, #12
 8017d2e:	693a      	ldr	r2, [r7, #16]
 8017d30:	4313      	orrs	r3, r2
 8017d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	4a12      	ldr	r2, [pc, #72]	; (8017d80 <TIM_OC4_SetConfig+0xa4>)
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d003      	beq.n	8017d44 <TIM_OC4_SetConfig+0x68>
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	4a11      	ldr	r2, [pc, #68]	; (8017d84 <TIM_OC4_SetConfig+0xa8>)
 8017d40:	4293      	cmp	r3, r2
 8017d42:	d109      	bne.n	8017d58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017d44:	697b      	ldr	r3, [r7, #20]
 8017d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	695b      	ldr	r3, [r3, #20]
 8017d50:	019b      	lsls	r3, r3, #6
 8017d52:	697a      	ldr	r2, [r7, #20]
 8017d54:	4313      	orrs	r3, r2
 8017d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	697a      	ldr	r2, [r7, #20]
 8017d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	68fa      	ldr	r2, [r7, #12]
 8017d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	685a      	ldr	r2, [r3, #4]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	693a      	ldr	r2, [r7, #16]
 8017d70:	621a      	str	r2, [r3, #32]
}
 8017d72:	bf00      	nop
 8017d74:	371c      	adds	r7, #28
 8017d76:	46bd      	mov	sp, r7
 8017d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7c:	4770      	bx	lr
 8017d7e:	bf00      	nop
 8017d80:	40010000 	.word	0x40010000
 8017d84:	40010400 	.word	0x40010400

08017d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017d88:	b480      	push	{r7}
 8017d8a:	b087      	sub	sp, #28
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	60f8      	str	r0, [r7, #12]
 8017d90:	60b9      	str	r1, [r7, #8]
 8017d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	6a1b      	ldr	r3, [r3, #32]
 8017d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	6a1b      	ldr	r3, [r3, #32]
 8017d9e:	f023 0201 	bic.w	r2, r3, #1
 8017da2:	68fb      	ldr	r3, [r7, #12]
 8017da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017da6:	68fb      	ldr	r3, [r7, #12]
 8017da8:	699b      	ldr	r3, [r3, #24]
 8017daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	011b      	lsls	r3, r3, #4
 8017db8:	693a      	ldr	r2, [r7, #16]
 8017dba:	4313      	orrs	r3, r2
 8017dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8017dbe:	697b      	ldr	r3, [r7, #20]
 8017dc0:	f023 030a 	bic.w	r3, r3, #10
 8017dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017dc6:	697a      	ldr	r2, [r7, #20]
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	4313      	orrs	r3, r2
 8017dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	693a      	ldr	r2, [r7, #16]
 8017dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	697a      	ldr	r2, [r7, #20]
 8017dd8:	621a      	str	r2, [r3, #32]
}
 8017dda:	bf00      	nop
 8017ddc:	371c      	adds	r7, #28
 8017dde:	46bd      	mov	sp, r7
 8017de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de4:	4770      	bx	lr

08017de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017de6:	b480      	push	{r7}
 8017de8:	b087      	sub	sp, #28
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	60f8      	str	r0, [r7, #12]
 8017dee:	60b9      	str	r1, [r7, #8]
 8017df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	6a1b      	ldr	r3, [r3, #32]
 8017df6:	f023 0210 	bic.w	r2, r3, #16
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	699b      	ldr	r3, [r3, #24]
 8017e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	6a1b      	ldr	r3, [r3, #32]
 8017e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8017e0a:	697b      	ldr	r3, [r7, #20]
 8017e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8017e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	031b      	lsls	r3, r3, #12
 8017e16:	697a      	ldr	r2, [r7, #20]
 8017e18:	4313      	orrs	r3, r2
 8017e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8017e1c:	693b      	ldr	r3, [r7, #16]
 8017e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8017e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017e24:	68bb      	ldr	r3, [r7, #8]
 8017e26:	011b      	lsls	r3, r3, #4
 8017e28:	693a      	ldr	r2, [r7, #16]
 8017e2a:	4313      	orrs	r3, r2
 8017e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	697a      	ldr	r2, [r7, #20]
 8017e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	693a      	ldr	r2, [r7, #16]
 8017e38:	621a      	str	r2, [r3, #32]
}
 8017e3a:	bf00      	nop
 8017e3c:	371c      	adds	r7, #28
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e44:	4770      	bx	lr

08017e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8017e46:	b480      	push	{r7}
 8017e48:	b085      	sub	sp, #20
 8017e4a:	af00      	add	r7, sp, #0
 8017e4c:	6078      	str	r0, [r7, #4]
 8017e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	689b      	ldr	r3, [r3, #8]
 8017e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8017e5e:	683a      	ldr	r2, [r7, #0]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	4313      	orrs	r3, r2
 8017e64:	f043 0307 	orr.w	r3, r3, #7
 8017e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	68fa      	ldr	r2, [r7, #12]
 8017e6e:	609a      	str	r2, [r3, #8]
}
 8017e70:	bf00      	nop
 8017e72:	3714      	adds	r7, #20
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b087      	sub	sp, #28
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
 8017e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	689b      	ldr	r3, [r3, #8]
 8017e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	021a      	lsls	r2, r3, #8
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	431a      	orrs	r2, r3
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	4313      	orrs	r3, r2
 8017ea4:	697a      	ldr	r2, [r7, #20]
 8017ea6:	4313      	orrs	r3, r2
 8017ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	697a      	ldr	r2, [r7, #20]
 8017eae:	609a      	str	r2, [r3, #8]
}
 8017eb0:	bf00      	nop
 8017eb2:	371c      	adds	r7, #28
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eba:	4770      	bx	lr

08017ebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b087      	sub	sp, #28
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	60f8      	str	r0, [r7, #12]
 8017ec4:	60b9      	str	r1, [r7, #8]
 8017ec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	f003 031f 	and.w	r3, r3, #31
 8017ece:	2201      	movs	r2, #1
 8017ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	6a1a      	ldr	r2, [r3, #32]
 8017eda:	697b      	ldr	r3, [r7, #20]
 8017edc:	43db      	mvns	r3, r3
 8017ede:	401a      	ands	r2, r3
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	6a1a      	ldr	r2, [r3, #32]
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	f003 031f 	and.w	r3, r3, #31
 8017eee:	6879      	ldr	r1, [r7, #4]
 8017ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8017ef4:	431a      	orrs	r2, r3
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	621a      	str	r2, [r3, #32]
}
 8017efa:	bf00      	nop
 8017efc:	371c      	adds	r7, #28
 8017efe:	46bd      	mov	sp, r7
 8017f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f04:	4770      	bx	lr
	...

08017f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	b085      	sub	sp, #20
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d101      	bne.n	8017f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017f1c:	2302      	movs	r3, #2
 8017f1e:	e05a      	b.n	8017fd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2201      	movs	r2, #1
 8017f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	2202      	movs	r2, #2
 8017f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	689b      	ldr	r3, [r3, #8]
 8017f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	68fa      	ldr	r2, [r7, #12]
 8017f4e:	4313      	orrs	r3, r2
 8017f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	68fa      	ldr	r2, [r7, #12]
 8017f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	4a21      	ldr	r2, [pc, #132]	; (8017fe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d022      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017f6c:	d01d      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	4a1d      	ldr	r2, [pc, #116]	; (8017fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8017f74:	4293      	cmp	r3, r2
 8017f76:	d018      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	4a1b      	ldr	r2, [pc, #108]	; (8017fec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8017f7e:	4293      	cmp	r3, r2
 8017f80:	d013      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	4a1a      	ldr	r2, [pc, #104]	; (8017ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d00e      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	4a18      	ldr	r2, [pc, #96]	; (8017ff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8017f92:	4293      	cmp	r3, r2
 8017f94:	d009      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	4a17      	ldr	r2, [pc, #92]	; (8017ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8017f9c:	4293      	cmp	r3, r2
 8017f9e:	d004      	beq.n	8017faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	4a15      	ldr	r2, [pc, #84]	; (8017ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d10c      	bne.n	8017fc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	68ba      	ldr	r2, [r7, #8]
 8017fb8:	4313      	orrs	r3, r2
 8017fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	68ba      	ldr	r2, [r7, #8]
 8017fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2200      	movs	r2, #0
 8017fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017fd4:	2300      	movs	r3, #0
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3714      	adds	r7, #20
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe0:	4770      	bx	lr
 8017fe2:	bf00      	nop
 8017fe4:	40010000 	.word	0x40010000
 8017fe8:	40000400 	.word	0x40000400
 8017fec:	40000800 	.word	0x40000800
 8017ff0:	40000c00 	.word	0x40000c00
 8017ff4:	40010400 	.word	0x40010400
 8017ff8:	40014000 	.word	0x40014000
 8017ffc:	40001800 	.word	0x40001800

08018000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018000:	b480      	push	{r7}
 8018002:	b083      	sub	sp, #12
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018008:	bf00      	nop
 801800a:	370c      	adds	r7, #12
 801800c:	46bd      	mov	sp, r7
 801800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018012:	4770      	bx	lr

08018014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018014:	b480      	push	{r7}
 8018016:	b083      	sub	sp, #12
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801801c:	bf00      	nop
 801801e:	370c      	adds	r7, #12
 8018020:	46bd      	mov	sp, r7
 8018022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018026:	4770      	bx	lr

08018028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018028:	b580      	push	{r7, lr}
 801802a:	b082      	sub	sp, #8
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d101      	bne.n	801803a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018036:	2301      	movs	r3, #1
 8018038:	e03f      	b.n	80180ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8018040:	b2db      	uxtb	r3, r3
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	2200      	movs	r2, #0
 801804a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801804e:	6878      	ldr	r0, [r7, #4]
 8018050:	f7ea fe44 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2224      	movs	r2, #36	; 0x24
 8018058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	68da      	ldr	r2, [r3, #12]
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801806a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801806c:	6878      	ldr	r0, [r7, #4]
 801806e:	f000 fcc3 	bl	80189f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	691a      	ldr	r2, [r3, #16]
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	695a      	ldr	r2, [r3, #20]
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	68da      	ldr	r2, [r3, #12]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80180a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	2200      	movs	r2, #0
 80180a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2220      	movs	r2, #32
 80180ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2220      	movs	r2, #32
 80180b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80180b8:	2300      	movs	r3, #0
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3708      	adds	r7, #8
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}

080180c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80180c2:	b580      	push	{r7, lr}
 80180c4:	b088      	sub	sp, #32
 80180c6:	af02      	add	r7, sp, #8
 80180c8:	60f8      	str	r0, [r7, #12]
 80180ca:	60b9      	str	r1, [r7, #8]
 80180cc:	603b      	str	r3, [r7, #0]
 80180ce:	4613      	mov	r3, r2
 80180d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80180d2:	2300      	movs	r3, #0
 80180d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	2b20      	cmp	r3, #32
 80180e0:	f040 8083 	bne.w	80181ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80180e4:	68bb      	ldr	r3, [r7, #8]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d002      	beq.n	80180f0 <HAL_UART_Transmit+0x2e>
 80180ea:	88fb      	ldrh	r3, [r7, #6]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d101      	bne.n	80180f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80180f0:	2301      	movs	r3, #1
 80180f2:	e07b      	b.n	80181ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d101      	bne.n	8018102 <HAL_UART_Transmit+0x40>
 80180fe:	2302      	movs	r3, #2
 8018100:	e074      	b.n	80181ec <HAL_UART_Transmit+0x12a>
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	2201      	movs	r2, #1
 8018106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	2200      	movs	r2, #0
 801810e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	2221      	movs	r2, #33	; 0x21
 8018114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8018118:	f7f9 fbcc 	bl	80118b4 <HAL_GetTick>
 801811c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	88fa      	ldrh	r2, [r7, #6]
 8018122:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	88fa      	ldrh	r2, [r7, #6]
 8018128:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	2200      	movs	r2, #0
 801812e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8018132:	e042      	b.n	80181ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018138:	b29b      	uxth	r3, r3
 801813a:	3b01      	subs	r3, #1
 801813c:	b29a      	uxth	r2, r3
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	689b      	ldr	r3, [r3, #8]
 8018146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801814a:	d122      	bne.n	8018192 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	9300      	str	r3, [sp, #0]
 8018150:	697b      	ldr	r3, [r7, #20]
 8018152:	2200      	movs	r2, #0
 8018154:	2180      	movs	r1, #128	; 0x80
 8018156:	68f8      	ldr	r0, [r7, #12]
 8018158:	f000 facc 	bl	80186f4 <UART_WaitOnFlagUntilTimeout>
 801815c:	4603      	mov	r3, r0
 801815e:	2b00      	cmp	r3, #0
 8018160:	d001      	beq.n	8018166 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8018162:	2303      	movs	r3, #3
 8018164:	e042      	b.n	80181ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	881b      	ldrh	r3, [r3, #0]
 801816e:	461a      	mov	r2, r3
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018178:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	691b      	ldr	r3, [r3, #16]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d103      	bne.n	801818a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8018182:	68bb      	ldr	r3, [r7, #8]
 8018184:	3302      	adds	r3, #2
 8018186:	60bb      	str	r3, [r7, #8]
 8018188:	e017      	b.n	80181ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801818a:	68bb      	ldr	r3, [r7, #8]
 801818c:	3301      	adds	r3, #1
 801818e:	60bb      	str	r3, [r7, #8]
 8018190:	e013      	b.n	80181ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	9300      	str	r3, [sp, #0]
 8018196:	697b      	ldr	r3, [r7, #20]
 8018198:	2200      	movs	r2, #0
 801819a:	2180      	movs	r1, #128	; 0x80
 801819c:	68f8      	ldr	r0, [r7, #12]
 801819e:	f000 faa9 	bl	80186f4 <UART_WaitOnFlagUntilTimeout>
 80181a2:	4603      	mov	r3, r0
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d001      	beq.n	80181ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80181a8:	2303      	movs	r3, #3
 80181aa:	e01f      	b.n	80181ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	1c5a      	adds	r2, r3, #1
 80181b0:	60ba      	str	r2, [r7, #8]
 80181b2:	781a      	ldrb	r2, [r3, #0]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80181be:	b29b      	uxth	r3, r3
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d1b7      	bne.n	8018134 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	9300      	str	r3, [sp, #0]
 80181c8:	697b      	ldr	r3, [r7, #20]
 80181ca:	2200      	movs	r2, #0
 80181cc:	2140      	movs	r1, #64	; 0x40
 80181ce:	68f8      	ldr	r0, [r7, #12]
 80181d0:	f000 fa90 	bl	80186f4 <UART_WaitOnFlagUntilTimeout>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80181da:	2303      	movs	r3, #3
 80181dc:	e006      	b.n	80181ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2220      	movs	r2, #32
 80181e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80181e6:	2300      	movs	r3, #0
 80181e8:	e000      	b.n	80181ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80181ea:	2302      	movs	r3, #2
  }
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	3718      	adds	r7, #24
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}

080181f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80181f4:	b480      	push	{r7}
 80181f6:	b085      	sub	sp, #20
 80181f8:	af00      	add	r7, sp, #0
 80181fa:	60f8      	str	r0, [r7, #12]
 80181fc:	60b9      	str	r1, [r7, #8]
 80181fe:	4613      	mov	r3, r2
 8018200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8018208:	b2db      	uxtb	r3, r3
 801820a:	2b20      	cmp	r3, #32
 801820c:	d140      	bne.n	8018290 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 801820e:	68bb      	ldr	r3, [r7, #8]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d002      	beq.n	801821a <HAL_UART_Receive_IT+0x26>
 8018214:	88fb      	ldrh	r3, [r7, #6]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d101      	bne.n	801821e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801821a:	2301      	movs	r3, #1
 801821c:	e039      	b.n	8018292 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018224:	2b01      	cmp	r3, #1
 8018226:	d101      	bne.n	801822c <HAL_UART_Receive_IT+0x38>
 8018228:	2302      	movs	r3, #2
 801822a:	e032      	b.n	8018292 <HAL_UART_Receive_IT+0x9e>
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	2201      	movs	r2, #1
 8018230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	68ba      	ldr	r2, [r7, #8]
 8018238:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	88fa      	ldrh	r2, [r7, #6]
 801823e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	88fa      	ldrh	r2, [r7, #6]
 8018244:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	2200      	movs	r2, #0
 801824a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	2222      	movs	r2, #34	; 0x22
 8018250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	2200      	movs	r2, #0
 8018258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	68da      	ldr	r2, [r3, #12]
 8018262:	68fb      	ldr	r3, [r7, #12]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801826a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	695a      	ldr	r2, [r3, #20]
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	f042 0201 	orr.w	r2, r2, #1
 801827a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	681b      	ldr	r3, [r3, #0]
 8018280:	68da      	ldr	r2, [r3, #12]
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	f042 0220 	orr.w	r2, r2, #32
 801828a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801828c:	2300      	movs	r3, #0
 801828e:	e000      	b.n	8018292 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8018290:	2302      	movs	r3, #2
  }
}
 8018292:	4618      	mov	r0, r3
 8018294:	3714      	adds	r7, #20
 8018296:	46bd      	mov	sp, r7
 8018298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801829c:	4770      	bx	lr
	...

080182a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b086      	sub	sp, #24
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	60f8      	str	r0, [r7, #12]
 80182a8:	60b9      	str	r1, [r7, #8]
 80182aa:	4613      	mov	r3, r2
 80182ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80182b4:	b2db      	uxtb	r3, r3
 80182b6:	2b20      	cmp	r3, #32
 80182b8:	d166      	bne.n	8018388 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d002      	beq.n	80182c6 <HAL_UART_Receive_DMA+0x26>
 80182c0:	88fb      	ldrh	r3, [r7, #6]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d101      	bne.n	80182ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80182c6:	2301      	movs	r3, #1
 80182c8:	e05f      	b.n	801838a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80182d0:	2b01      	cmp	r3, #1
 80182d2:	d101      	bne.n	80182d8 <HAL_UART_Receive_DMA+0x38>
 80182d4:	2302      	movs	r3, #2
 80182d6:	e058      	b.n	801838a <HAL_UART_Receive_DMA+0xea>
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	2201      	movs	r2, #1
 80182dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80182e0:	68ba      	ldr	r2, [r7, #8]
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	88fa      	ldrh	r2, [r7, #6]
 80182ea:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	2200      	movs	r2, #0
 80182f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	2222      	movs	r2, #34	; 0x22
 80182f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182fe:	4a25      	ldr	r2, [pc, #148]	; (8018394 <HAL_UART_Receive_DMA+0xf4>)
 8018300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018306:	4a24      	ldr	r2, [pc, #144]	; (8018398 <HAL_UART_Receive_DMA+0xf8>)
 8018308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801830e:	4a23      	ldr	r2, [pc, #140]	; (801839c <HAL_UART_Receive_DMA+0xfc>)
 8018310:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018316:	2200      	movs	r2, #0
 8018318:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 801831a:	f107 0308 	add.w	r3, r7, #8
 801831e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	3304      	adds	r3, #4
 801832a:	4619      	mov	r1, r3
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	681a      	ldr	r2, [r3, #0]
 8018330:	88fb      	ldrh	r3, [r7, #6]
 8018332:	f7fa ffbd 	bl	80132b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8018336:	2300      	movs	r3, #0
 8018338:	613b      	str	r3, [r7, #16]
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	613b      	str	r3, [r7, #16]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	685b      	ldr	r3, [r3, #4]
 8018348:	613b      	str	r3, [r7, #16]
 801834a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	2200      	movs	r2, #0
 8018350:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	68da      	ldr	r2, [r3, #12]
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018362:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	695a      	ldr	r2, [r3, #20]
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	f042 0201 	orr.w	r2, r2, #1
 8018372:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	695a      	ldr	r2, [r3, #20]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018382:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8018384:	2300      	movs	r3, #0
 8018386:	e000      	b.n	801838a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8018388:	2302      	movs	r3, #2
  }
}
 801838a:	4618      	mov	r0, r3
 801838c:	3718      	adds	r7, #24
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	080185dd 	.word	0x080185dd
 8018398:	08018645 	.word	0x08018645
 801839c:	08018661 	.word	0x08018661

080183a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b088      	sub	sp, #32
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	68db      	ldr	r3, [r3, #12]
 80183b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	695b      	ldr	r3, [r3, #20]
 80183be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80183c0:	2300      	movs	r3, #0
 80183c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80183c4:	2300      	movs	r3, #0
 80183c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	f003 030f 	and.w	r3, r3, #15
 80183ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d10d      	bne.n	80183f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80183d6:	69fb      	ldr	r3, [r7, #28]
 80183d8:	f003 0320 	and.w	r3, r3, #32
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d008      	beq.n	80183f2 <HAL_UART_IRQHandler+0x52>
 80183e0:	69bb      	ldr	r3, [r7, #24]
 80183e2:	f003 0320 	and.w	r3, r3, #32
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d003      	beq.n	80183f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	f000 fa82 	bl	80188f4 <UART_Receive_IT>
      return;
 80183f0:	e0d0      	b.n	8018594 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80183f2:	693b      	ldr	r3, [r7, #16]
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	f000 80b0 	beq.w	801855a <HAL_UART_IRQHandler+0x1ba>
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	f003 0301 	and.w	r3, r3, #1
 8018400:	2b00      	cmp	r3, #0
 8018402:	d105      	bne.n	8018410 <HAL_UART_IRQHandler+0x70>
 8018404:	69bb      	ldr	r3, [r7, #24]
 8018406:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801840a:	2b00      	cmp	r3, #0
 801840c:	f000 80a5 	beq.w	801855a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	f003 0301 	and.w	r3, r3, #1
 8018416:	2b00      	cmp	r3, #0
 8018418:	d00a      	beq.n	8018430 <HAL_UART_IRQHandler+0x90>
 801841a:	69bb      	ldr	r3, [r7, #24]
 801841c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018420:	2b00      	cmp	r3, #0
 8018422:	d005      	beq.n	8018430 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018428:	f043 0201 	orr.w	r2, r3, #1
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	f003 0304 	and.w	r3, r3, #4
 8018436:	2b00      	cmp	r3, #0
 8018438:	d00a      	beq.n	8018450 <HAL_UART_IRQHandler+0xb0>
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	f003 0301 	and.w	r3, r3, #1
 8018440:	2b00      	cmp	r3, #0
 8018442:	d005      	beq.n	8018450 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018448:	f043 0202 	orr.w	r2, r3, #2
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8018450:	69fb      	ldr	r3, [r7, #28]
 8018452:	f003 0302 	and.w	r3, r3, #2
 8018456:	2b00      	cmp	r3, #0
 8018458:	d00a      	beq.n	8018470 <HAL_UART_IRQHandler+0xd0>
 801845a:	697b      	ldr	r3, [r7, #20]
 801845c:	f003 0301 	and.w	r3, r3, #1
 8018460:	2b00      	cmp	r3, #0
 8018462:	d005      	beq.n	8018470 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018468:	f043 0204 	orr.w	r2, r3, #4
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	f003 0308 	and.w	r3, r3, #8
 8018476:	2b00      	cmp	r3, #0
 8018478:	d00f      	beq.n	801849a <HAL_UART_IRQHandler+0xfa>
 801847a:	69bb      	ldr	r3, [r7, #24]
 801847c:	f003 0320 	and.w	r3, r3, #32
 8018480:	2b00      	cmp	r3, #0
 8018482:	d104      	bne.n	801848e <HAL_UART_IRQHandler+0xee>
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	f003 0301 	and.w	r3, r3, #1
 801848a:	2b00      	cmp	r3, #0
 801848c:	d005      	beq.n	801849a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018492:	f043 0208 	orr.w	r2, r3, #8
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d077      	beq.n	8018592 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	f003 0320 	and.w	r3, r3, #32
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d007      	beq.n	80184bc <HAL_UART_IRQHandler+0x11c>
 80184ac:	69bb      	ldr	r3, [r7, #24]
 80184ae:	f003 0320 	and.w	r3, r3, #32
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d002      	beq.n	80184bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80184b6:	6878      	ldr	r0, [r7, #4]
 80184b8:	f000 fa1c 	bl	80188f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	695b      	ldr	r3, [r3, #20]
 80184c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184c6:	2b40      	cmp	r3, #64	; 0x40
 80184c8:	bf0c      	ite	eq
 80184ca:	2301      	moveq	r3, #1
 80184cc:	2300      	movne	r3, #0
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184d6:	f003 0308 	and.w	r3, r3, #8
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d102      	bne.n	80184e4 <HAL_UART_IRQHandler+0x144>
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d031      	beq.n	8018548 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f000 f965 	bl	80187b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	695b      	ldr	r3, [r3, #20]
 80184f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184f4:	2b40      	cmp	r3, #64	; 0x40
 80184f6:	d123      	bne.n	8018540 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	695a      	ldr	r2, [r3, #20]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018506:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801850c:	2b00      	cmp	r3, #0
 801850e:	d013      	beq.n	8018538 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018514:	4a21      	ldr	r2, [pc, #132]	; (801859c <HAL_UART_IRQHandler+0x1fc>)
 8018516:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801851c:	4618      	mov	r0, r3
 801851e:	f7fa ff1f 	bl	8013360 <HAL_DMA_Abort_IT>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d016      	beq.n	8018556 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801852c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801852e:	687a      	ldr	r2, [r7, #4]
 8018530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8018532:	4610      	mov	r0, r2
 8018534:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018536:	e00e      	b.n	8018556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f000 f845 	bl	80185c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801853e:	e00a      	b.n	8018556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8018540:	6878      	ldr	r0, [r7, #4]
 8018542:	f000 f841 	bl	80185c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018546:	e006      	b.n	8018556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f000 f83d 	bl	80185c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2200      	movs	r2, #0
 8018552:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8018554:	e01d      	b.n	8018592 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018556:	bf00      	nop
    return;
 8018558:	e01b      	b.n	8018592 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801855a:	69fb      	ldr	r3, [r7, #28]
 801855c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018560:	2b00      	cmp	r3, #0
 8018562:	d008      	beq.n	8018576 <HAL_UART_IRQHandler+0x1d6>
 8018564:	69bb      	ldr	r3, [r7, #24]
 8018566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801856a:	2b00      	cmp	r3, #0
 801856c:	d003      	beq.n	8018576 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 801856e:	6878      	ldr	r0, [r7, #4]
 8018570:	f000 f952 	bl	8018818 <UART_Transmit_IT>
    return;
 8018574:	e00e      	b.n	8018594 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8018576:	69fb      	ldr	r3, [r7, #28]
 8018578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801857c:	2b00      	cmp	r3, #0
 801857e:	d009      	beq.n	8018594 <HAL_UART_IRQHandler+0x1f4>
 8018580:	69bb      	ldr	r3, [r7, #24]
 8018582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018586:	2b00      	cmp	r3, #0
 8018588:	d004      	beq.n	8018594 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 801858a:	6878      	ldr	r0, [r7, #4]
 801858c:	f000 f99a 	bl	80188c4 <UART_EndTransmit_IT>
    return;
 8018590:	e000      	b.n	8018594 <HAL_UART_IRQHandler+0x1f4>
    return;
 8018592:	bf00      	nop
  }
}
 8018594:	3720      	adds	r7, #32
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	080187f1 	.word	0x080187f1

080185a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80185a0:	b480      	push	{r7}
 80185a2:	b083      	sub	sp, #12
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80185a8:	bf00      	nop
 80185aa:	370c      	adds	r7, #12
 80185ac:	46bd      	mov	sp, r7
 80185ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b2:	4770      	bx	lr

080185b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80185b4:	b480      	push	{r7}
 80185b6:	b083      	sub	sp, #12
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80185bc:	bf00      	nop
 80185be:	370c      	adds	r7, #12
 80185c0:	46bd      	mov	sp, r7
 80185c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185c6:	4770      	bx	lr

080185c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80185c8:	b480      	push	{r7}
 80185ca:	b083      	sub	sp, #12
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80185d0:	bf00      	nop
 80185d2:	370c      	adds	r7, #12
 80185d4:	46bd      	mov	sp, r7
 80185d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185da:	4770      	bx	lr

080185dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80185e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d11e      	bne.n	8018636 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	2200      	movs	r2, #0
 80185fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	68da      	ldr	r2, [r3, #12]
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801860c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	695a      	ldr	r2, [r3, #20]
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	f022 0201 	bic.w	r2, r2, #1
 801861c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	695a      	ldr	r2, [r3, #20]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801862c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2220      	movs	r2, #32
 8018632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8018636:	68f8      	ldr	r0, [r7, #12]
 8018638:	f7ec fbfe 	bl	8004e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801863c:	bf00      	nop
 801863e:	3710      	adds	r7, #16
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}

08018644 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018644:	b580      	push	{r7, lr}
 8018646:	b084      	sub	sp, #16
 8018648:	af00      	add	r7, sp, #0
 801864a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018650:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8018652:	68f8      	ldr	r0, [r7, #12]
 8018654:	f7ff ffae 	bl	80185b4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018658:	bf00      	nop
 801865a:	3710      	adds	r7, #16
 801865c:	46bd      	mov	sp, r7
 801865e:	bd80      	pop	{r7, pc}

08018660 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b084      	sub	sp, #16
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8018668:	2300      	movs	r3, #0
 801866a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018670:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	695b      	ldr	r3, [r3, #20]
 8018678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801867c:	2b80      	cmp	r3, #128	; 0x80
 801867e:	bf0c      	ite	eq
 8018680:	2301      	moveq	r3, #1
 8018682:	2300      	movne	r3, #0
 8018684:	b2db      	uxtb	r3, r3
 8018686:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801868e:	b2db      	uxtb	r3, r3
 8018690:	2b21      	cmp	r3, #33	; 0x21
 8018692:	d108      	bne.n	80186a6 <UART_DMAError+0x46>
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d005      	beq.n	80186a6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	2200      	movs	r2, #0
 801869e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80186a0:	68b8      	ldr	r0, [r7, #8]
 80186a2:	f000 f871 	bl	8018788 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80186a6:	68bb      	ldr	r3, [r7, #8]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	695b      	ldr	r3, [r3, #20]
 80186ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80186b0:	2b40      	cmp	r3, #64	; 0x40
 80186b2:	bf0c      	ite	eq
 80186b4:	2301      	moveq	r3, #1
 80186b6:	2300      	movne	r3, #0
 80186b8:	b2db      	uxtb	r3, r3
 80186ba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80186c2:	b2db      	uxtb	r3, r3
 80186c4:	2b22      	cmp	r3, #34	; 0x22
 80186c6:	d108      	bne.n	80186da <UART_DMAError+0x7a>
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d005      	beq.n	80186da <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80186ce:	68bb      	ldr	r3, [r7, #8]
 80186d0:	2200      	movs	r2, #0
 80186d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80186d4:	68b8      	ldr	r0, [r7, #8]
 80186d6:	f000 f86d 	bl	80187b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80186de:	f043 0210 	orr.w	r2, r3, #16
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80186e6:	68b8      	ldr	r0, [r7, #8]
 80186e8:	f7ff ff6e 	bl	80185c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80186ec:	bf00      	nop
 80186ee:	3710      	adds	r7, #16
 80186f0:	46bd      	mov	sp, r7
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b084      	sub	sp, #16
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	60f8      	str	r0, [r7, #12]
 80186fc:	60b9      	str	r1, [r7, #8]
 80186fe:	603b      	str	r3, [r7, #0]
 8018700:	4613      	mov	r3, r2
 8018702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018704:	e02c      	b.n	8018760 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018706:	69bb      	ldr	r3, [r7, #24]
 8018708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801870c:	d028      	beq.n	8018760 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801870e:	69bb      	ldr	r3, [r7, #24]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d007      	beq.n	8018724 <UART_WaitOnFlagUntilTimeout+0x30>
 8018714:	f7f9 f8ce 	bl	80118b4 <HAL_GetTick>
 8018718:	4602      	mov	r2, r0
 801871a:	683b      	ldr	r3, [r7, #0]
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	69ba      	ldr	r2, [r7, #24]
 8018720:	429a      	cmp	r2, r3
 8018722:	d21d      	bcs.n	8018760 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	681b      	ldr	r3, [r3, #0]
 8018728:	68da      	ldr	r2, [r3, #12]
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8018732:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	695a      	ldr	r2, [r3, #20]
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f022 0201 	bic.w	r2, r2, #1
 8018742:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	2220      	movs	r2, #32
 8018748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	2220      	movs	r2, #32
 8018750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	2200      	movs	r2, #0
 8018758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801875c:	2303      	movs	r3, #3
 801875e:	e00f      	b.n	8018780 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018760:	68fb      	ldr	r3, [r7, #12]
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	681a      	ldr	r2, [r3, #0]
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	4013      	ands	r3, r2
 801876a:	68ba      	ldr	r2, [r7, #8]
 801876c:	429a      	cmp	r2, r3
 801876e:	bf0c      	ite	eq
 8018770:	2301      	moveq	r3, #1
 8018772:	2300      	movne	r3, #0
 8018774:	b2db      	uxtb	r3, r3
 8018776:	461a      	mov	r2, r3
 8018778:	79fb      	ldrb	r3, [r7, #7]
 801877a:	429a      	cmp	r2, r3
 801877c:	d0c3      	beq.n	8018706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801877e:	2300      	movs	r3, #0
}
 8018780:	4618      	mov	r0, r3
 8018782:	3710      	adds	r7, #16
 8018784:	46bd      	mov	sp, r7
 8018786:	bd80      	pop	{r7, pc}

08018788 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018788:	b480      	push	{r7}
 801878a:	b083      	sub	sp, #12
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	68da      	ldr	r2, [r3, #12]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801879e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	2220      	movs	r2, #32
 80187a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80187a8:	bf00      	nop
 80187aa:	370c      	adds	r7, #12
 80187ac:	46bd      	mov	sp, r7
 80187ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b2:	4770      	bx	lr

080187b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80187b4:	b480      	push	{r7}
 80187b6:	b083      	sub	sp, #12
 80187b8:	af00      	add	r7, sp, #0
 80187ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	68da      	ldr	r2, [r3, #12]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80187ca:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	695a      	ldr	r2, [r3, #20]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f022 0201 	bic.w	r2, r2, #1
 80187da:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	2220      	movs	r2, #32
 80187e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80187e4:	bf00      	nop
 80187e6:	370c      	adds	r7, #12
 80187e8:	46bd      	mov	sp, r7
 80187ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ee:	4770      	bx	lr

080187f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b084      	sub	sp, #16
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	2200      	movs	r2, #0
 8018802:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	2200      	movs	r2, #0
 8018808:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801880a:	68f8      	ldr	r0, [r7, #12]
 801880c:	f7ff fedc 	bl	80185c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018810:	bf00      	nop
 8018812:	3710      	adds	r7, #16
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}

08018818 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018818:	b480      	push	{r7}
 801881a:	b085      	sub	sp, #20
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8018826:	b2db      	uxtb	r3, r3
 8018828:	2b21      	cmp	r3, #33	; 0x21
 801882a:	d144      	bne.n	80188b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	689b      	ldr	r3, [r3, #8]
 8018830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018834:	d11a      	bne.n	801886c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	6a1b      	ldr	r3, [r3, #32]
 801883a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	881b      	ldrh	r3, [r3, #0]
 8018840:	461a      	mov	r2, r3
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801884a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	691b      	ldr	r3, [r3, #16]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d105      	bne.n	8018860 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6a1b      	ldr	r3, [r3, #32]
 8018858:	1c9a      	adds	r2, r3, #2
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	621a      	str	r2, [r3, #32]
 801885e:	e00e      	b.n	801887e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6a1b      	ldr	r3, [r3, #32]
 8018864:	1c5a      	adds	r2, r3, #1
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	621a      	str	r2, [r3, #32]
 801886a:	e008      	b.n	801887e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6a1b      	ldr	r3, [r3, #32]
 8018870:	1c59      	adds	r1, r3, #1
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	6211      	str	r1, [r2, #32]
 8018876:	781a      	ldrb	r2, [r3, #0]
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018882:	b29b      	uxth	r3, r3
 8018884:	3b01      	subs	r3, #1
 8018886:	b29b      	uxth	r3, r3
 8018888:	687a      	ldr	r2, [r7, #4]
 801888a:	4619      	mov	r1, r3
 801888c:	84d1      	strh	r1, [r2, #38]	; 0x26
 801888e:	2b00      	cmp	r3, #0
 8018890:	d10f      	bne.n	80188b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	68da      	ldr	r2, [r3, #12]
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80188a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	68da      	ldr	r2, [r3, #12]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80188b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80188b2:	2300      	movs	r3, #0
 80188b4:	e000      	b.n	80188b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80188b6:	2302      	movs	r3, #2
  }
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	3714      	adds	r7, #20
 80188bc:	46bd      	mov	sp, r7
 80188be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c2:	4770      	bx	lr

080188c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b082      	sub	sp, #8
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	68da      	ldr	r2, [r3, #12]
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80188da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2220      	movs	r2, #32
 80188e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	f7ff fe5b 	bl	80185a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80188ea:	2300      	movs	r3, #0
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	3708      	adds	r7, #8
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b084      	sub	sp, #16
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8018902:	b2db      	uxtb	r3, r3
 8018904:	2b22      	cmp	r3, #34	; 0x22
 8018906:	d171      	bne.n	80189ec <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	689b      	ldr	r3, [r3, #8]
 801890c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018910:	d123      	bne.n	801895a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018916:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	691b      	ldr	r3, [r3, #16]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d10e      	bne.n	801893e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	685b      	ldr	r3, [r3, #4]
 8018926:	b29b      	uxth	r3, r3
 8018928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801892c:	b29a      	uxth	r2, r3
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018936:	1c9a      	adds	r2, r3, #2
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	629a      	str	r2, [r3, #40]	; 0x28
 801893c:	e029      	b.n	8018992 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	b29b      	uxth	r3, r3
 8018946:	b2db      	uxtb	r3, r3
 8018948:	b29a      	uxth	r2, r3
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018952:	1c5a      	adds	r2, r3, #1
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	629a      	str	r2, [r3, #40]	; 0x28
 8018958:	e01b      	b.n	8018992 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	691b      	ldr	r3, [r3, #16]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d10a      	bne.n	8018978 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	6858      	ldr	r0, [r3, #4]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801896c:	1c59      	adds	r1, r3, #1
 801896e:	687a      	ldr	r2, [r7, #4]
 8018970:	6291      	str	r1, [r2, #40]	; 0x28
 8018972:	b2c2      	uxtb	r2, r0
 8018974:	701a      	strb	r2, [r3, #0]
 8018976:	e00c      	b.n	8018992 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	681b      	ldr	r3, [r3, #0]
 801897c:	685b      	ldr	r3, [r3, #4]
 801897e:	b2da      	uxtb	r2, r3
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018984:	1c58      	adds	r0, r3, #1
 8018986:	6879      	ldr	r1, [r7, #4]
 8018988:	6288      	str	r0, [r1, #40]	; 0x28
 801898a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801898e:	b2d2      	uxtb	r2, r2
 8018990:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8018996:	b29b      	uxth	r3, r3
 8018998:	3b01      	subs	r3, #1
 801899a:	b29b      	uxth	r3, r3
 801899c:	687a      	ldr	r2, [r7, #4]
 801899e:	4619      	mov	r1, r3
 80189a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d120      	bne.n	80189e8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	68da      	ldr	r2, [r3, #12]
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	f022 0220 	bic.w	r2, r2, #32
 80189b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	68da      	ldr	r2, [r3, #12]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80189c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	695a      	ldr	r2, [r3, #20]
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	681b      	ldr	r3, [r3, #0]
 80189d0:	f022 0201 	bic.w	r2, r2, #1
 80189d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2220      	movs	r2, #32
 80189da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f7ec fa2a 	bl	8004e38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80189e4:	2300      	movs	r3, #0
 80189e6:	e002      	b.n	80189ee <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80189e8:	2300      	movs	r3, #0
 80189ea:	e000      	b.n	80189ee <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80189ec:	2302      	movs	r3, #2
  }
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3710      	adds	r7, #16
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
	...

080189f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80189f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189fc:	b0bd      	sub	sp, #244	; 0xf4
 80189fe:	af00      	add	r7, sp, #0
 8018a00:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	691b      	ldr	r3, [r3, #16]
 8018a0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a14:	68d9      	ldr	r1, [r3, #12]
 8018a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a1a:	681a      	ldr	r2, [r3, #0]
 8018a1c:	ea40 0301 	orr.w	r3, r0, r1
 8018a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a26:	689a      	ldr	r2, [r3, #8]
 8018a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a2c:	691b      	ldr	r3, [r3, #16]
 8018a2e:	431a      	orrs	r2, r3
 8018a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a34:	695b      	ldr	r3, [r3, #20]
 8018a36:	431a      	orrs	r2, r3
 8018a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a3c:	69db      	ldr	r3, [r3, #28]
 8018a3e:	4313      	orrs	r3, r2
 8018a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8018a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018a50:	f021 010c 	bic.w	r1, r1, #12
 8018a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018a5e:	430b      	orrs	r3, r1
 8018a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	695b      	ldr	r3, [r3, #20]
 8018a6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8018a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a72:	6999      	ldr	r1, [r3, #24]
 8018a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a78:	681a      	ldr	r2, [r3, #0]
 8018a7a:	ea40 0301 	orr.w	r3, r0, r1
 8018a7e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a84:	69db      	ldr	r3, [r3, #28]
 8018a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018a8a:	f040 81a5 	bne.w	8018dd8 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a92:	681a      	ldr	r2, [r3, #0]
 8018a94:	4bcd      	ldr	r3, [pc, #820]	; (8018dcc <UART_SetConfig+0x3d4>)
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d006      	beq.n	8018aa8 <UART_SetConfig+0xb0>
 8018a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018a9e:	681a      	ldr	r2, [r3, #0]
 8018aa0:	4bcb      	ldr	r3, [pc, #812]	; (8018dd0 <UART_SetConfig+0x3d8>)
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	f040 80cb 	bne.w	8018c3e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018aa8:	f7fe f95a 	bl	8016d60 <HAL_RCC_GetPCLK2Freq>
 8018aac:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018ab0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018ab4:	461c      	mov	r4, r3
 8018ab6:	f04f 0500 	mov.w	r5, #0
 8018aba:	4622      	mov	r2, r4
 8018abc:	462b      	mov	r3, r5
 8018abe:	1891      	adds	r1, r2, r2
 8018ac0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8018ac4:	415b      	adcs	r3, r3
 8018ac6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018aca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8018ace:	1912      	adds	r2, r2, r4
 8018ad0:	eb45 0303 	adc.w	r3, r5, r3
 8018ad4:	f04f 0000 	mov.w	r0, #0
 8018ad8:	f04f 0100 	mov.w	r1, #0
 8018adc:	00d9      	lsls	r1, r3, #3
 8018ade:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018ae2:	00d0      	lsls	r0, r2, #3
 8018ae4:	4602      	mov	r2, r0
 8018ae6:	460b      	mov	r3, r1
 8018ae8:	1911      	adds	r1, r2, r4
 8018aea:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8018aee:	416b      	adcs	r3, r5
 8018af0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8018af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018af8:	685b      	ldr	r3, [r3, #4]
 8018afa:	461a      	mov	r2, r3
 8018afc:	f04f 0300 	mov.w	r3, #0
 8018b00:	1891      	adds	r1, r2, r2
 8018b02:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8018b06:	415b      	adcs	r3, r3
 8018b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018b0c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8018b10:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8018b14:	f7e8 f8b8 	bl	8000c88 <__aeabi_uldivmod>
 8018b18:	4602      	mov	r2, r0
 8018b1a:	460b      	mov	r3, r1
 8018b1c:	4bad      	ldr	r3, [pc, #692]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8018b22:	095b      	lsrs	r3, r3, #5
 8018b24:	011e      	lsls	r6, r3, #4
 8018b26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018b2a:	461c      	mov	r4, r3
 8018b2c:	f04f 0500 	mov.w	r5, #0
 8018b30:	4622      	mov	r2, r4
 8018b32:	462b      	mov	r3, r5
 8018b34:	1891      	adds	r1, r2, r2
 8018b36:	67b9      	str	r1, [r7, #120]	; 0x78
 8018b38:	415b      	adcs	r3, r3
 8018b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018b3c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8018b40:	1912      	adds	r2, r2, r4
 8018b42:	eb45 0303 	adc.w	r3, r5, r3
 8018b46:	f04f 0000 	mov.w	r0, #0
 8018b4a:	f04f 0100 	mov.w	r1, #0
 8018b4e:	00d9      	lsls	r1, r3, #3
 8018b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018b54:	00d0      	lsls	r0, r2, #3
 8018b56:	4602      	mov	r2, r0
 8018b58:	460b      	mov	r3, r1
 8018b5a:	1911      	adds	r1, r2, r4
 8018b5c:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8018b60:	416b      	adcs	r3, r5
 8018b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8018b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018b6a:	685b      	ldr	r3, [r3, #4]
 8018b6c:	461a      	mov	r2, r3
 8018b6e:	f04f 0300 	mov.w	r3, #0
 8018b72:	1891      	adds	r1, r2, r2
 8018b74:	6739      	str	r1, [r7, #112]	; 0x70
 8018b76:	415b      	adcs	r3, r3
 8018b78:	677b      	str	r3, [r7, #116]	; 0x74
 8018b7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8018b7e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8018b82:	f7e8 f881 	bl	8000c88 <__aeabi_uldivmod>
 8018b86:	4602      	mov	r2, r0
 8018b88:	460b      	mov	r3, r1
 8018b8a:	4b92      	ldr	r3, [pc, #584]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8018b90:	095b      	lsrs	r3, r3, #5
 8018b92:	2164      	movs	r1, #100	; 0x64
 8018b94:	fb01 f303 	mul.w	r3, r1, r3
 8018b98:	1ad3      	subs	r3, r2, r3
 8018b9a:	00db      	lsls	r3, r3, #3
 8018b9c:	3332      	adds	r3, #50	; 0x32
 8018b9e:	4a8d      	ldr	r2, [pc, #564]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8018ba4:	095b      	lsrs	r3, r3, #5
 8018ba6:	005b      	lsls	r3, r3, #1
 8018ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018bac:	441e      	add	r6, r3
 8018bae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f04f 0100 	mov.w	r1, #0
 8018bb8:	4602      	mov	r2, r0
 8018bba:	460b      	mov	r3, r1
 8018bbc:	1894      	adds	r4, r2, r2
 8018bbe:	66bc      	str	r4, [r7, #104]	; 0x68
 8018bc0:	415b      	adcs	r3, r3
 8018bc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018bc4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8018bc8:	1812      	adds	r2, r2, r0
 8018bca:	eb41 0303 	adc.w	r3, r1, r3
 8018bce:	f04f 0400 	mov.w	r4, #0
 8018bd2:	f04f 0500 	mov.w	r5, #0
 8018bd6:	00dd      	lsls	r5, r3, #3
 8018bd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018bdc:	00d4      	lsls	r4, r2, #3
 8018bde:	4622      	mov	r2, r4
 8018be0:	462b      	mov	r3, r5
 8018be2:	1814      	adds	r4, r2, r0
 8018be4:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8018be8:	414b      	adcs	r3, r1
 8018bea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018bf2:	685b      	ldr	r3, [r3, #4]
 8018bf4:	461a      	mov	r2, r3
 8018bf6:	f04f 0300 	mov.w	r3, #0
 8018bfa:	1891      	adds	r1, r2, r2
 8018bfc:	6639      	str	r1, [r7, #96]	; 0x60
 8018bfe:	415b      	adcs	r3, r3
 8018c00:	667b      	str	r3, [r7, #100]	; 0x64
 8018c02:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8018c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018c0a:	f7e8 f83d 	bl	8000c88 <__aeabi_uldivmod>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	460b      	mov	r3, r1
 8018c12:	4b70      	ldr	r3, [pc, #448]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018c14:	fba3 1302 	umull	r1, r3, r3, r2
 8018c18:	095b      	lsrs	r3, r3, #5
 8018c1a:	2164      	movs	r1, #100	; 0x64
 8018c1c:	fb01 f303 	mul.w	r3, r1, r3
 8018c20:	1ad3      	subs	r3, r2, r3
 8018c22:	00db      	lsls	r3, r3, #3
 8018c24:	3332      	adds	r3, #50	; 0x32
 8018c26:	4a6b      	ldr	r2, [pc, #428]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018c28:	fba2 2303 	umull	r2, r3, r2, r3
 8018c2c:	095b      	lsrs	r3, r3, #5
 8018c2e:	f003 0207 	and.w	r2, r3, #7
 8018c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	4432      	add	r2, r6
 8018c3a:	609a      	str	r2, [r3, #8]
 8018c3c:	e26d      	b.n	801911a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018c3e:	f7fe f87b 	bl	8016d38 <HAL_RCC_GetPCLK1Freq>
 8018c42:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018c4a:	461c      	mov	r4, r3
 8018c4c:	f04f 0500 	mov.w	r5, #0
 8018c50:	4622      	mov	r2, r4
 8018c52:	462b      	mov	r3, r5
 8018c54:	1891      	adds	r1, r2, r2
 8018c56:	65b9      	str	r1, [r7, #88]	; 0x58
 8018c58:	415b      	adcs	r3, r3
 8018c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018c5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018c60:	1912      	adds	r2, r2, r4
 8018c62:	eb45 0303 	adc.w	r3, r5, r3
 8018c66:	f04f 0000 	mov.w	r0, #0
 8018c6a:	f04f 0100 	mov.w	r1, #0
 8018c6e:	00d9      	lsls	r1, r3, #3
 8018c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018c74:	00d0      	lsls	r0, r2, #3
 8018c76:	4602      	mov	r2, r0
 8018c78:	460b      	mov	r3, r1
 8018c7a:	1911      	adds	r1, r2, r4
 8018c7c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8018c80:	416b      	adcs	r3, r5
 8018c82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	f04f 0300 	mov.w	r3, #0
 8018c92:	1891      	adds	r1, r2, r2
 8018c94:	6539      	str	r1, [r7, #80]	; 0x50
 8018c96:	415b      	adcs	r3, r3
 8018c98:	657b      	str	r3, [r7, #84]	; 0x54
 8018c9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8018c9e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8018ca2:	f7e7 fff1 	bl	8000c88 <__aeabi_uldivmod>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	460b      	mov	r3, r1
 8018caa:	4b4a      	ldr	r3, [pc, #296]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018cac:	fba3 2302 	umull	r2, r3, r3, r2
 8018cb0:	095b      	lsrs	r3, r3, #5
 8018cb2:	011e      	lsls	r6, r3, #4
 8018cb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018cb8:	461c      	mov	r4, r3
 8018cba:	f04f 0500 	mov.w	r5, #0
 8018cbe:	4622      	mov	r2, r4
 8018cc0:	462b      	mov	r3, r5
 8018cc2:	1891      	adds	r1, r2, r2
 8018cc4:	64b9      	str	r1, [r7, #72]	; 0x48
 8018cc6:	415b      	adcs	r3, r3
 8018cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018cca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018cce:	1912      	adds	r2, r2, r4
 8018cd0:	eb45 0303 	adc.w	r3, r5, r3
 8018cd4:	f04f 0000 	mov.w	r0, #0
 8018cd8:	f04f 0100 	mov.w	r1, #0
 8018cdc:	00d9      	lsls	r1, r3, #3
 8018cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018ce2:	00d0      	lsls	r0, r2, #3
 8018ce4:	4602      	mov	r2, r0
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	1911      	adds	r1, r2, r4
 8018cea:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8018cee:	416b      	adcs	r3, r5
 8018cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8018cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	f04f 0300 	mov.w	r3, #0
 8018d00:	1891      	adds	r1, r2, r2
 8018d02:	6439      	str	r1, [r7, #64]	; 0x40
 8018d04:	415b      	adcs	r3, r3
 8018d06:	647b      	str	r3, [r7, #68]	; 0x44
 8018d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018d0c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8018d10:	f7e7 ffba 	bl	8000c88 <__aeabi_uldivmod>
 8018d14:	4602      	mov	r2, r0
 8018d16:	460b      	mov	r3, r1
 8018d18:	4b2e      	ldr	r3, [pc, #184]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8018d1e:	095b      	lsrs	r3, r3, #5
 8018d20:	2164      	movs	r1, #100	; 0x64
 8018d22:	fb01 f303 	mul.w	r3, r1, r3
 8018d26:	1ad3      	subs	r3, r2, r3
 8018d28:	00db      	lsls	r3, r3, #3
 8018d2a:	3332      	adds	r3, #50	; 0x32
 8018d2c:	4a29      	ldr	r2, [pc, #164]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8018d32:	095b      	lsrs	r3, r3, #5
 8018d34:	005b      	lsls	r3, r3, #1
 8018d36:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018d3a:	441e      	add	r6, r3
 8018d3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018d40:	4618      	mov	r0, r3
 8018d42:	f04f 0100 	mov.w	r1, #0
 8018d46:	4602      	mov	r2, r0
 8018d48:	460b      	mov	r3, r1
 8018d4a:	1894      	adds	r4, r2, r2
 8018d4c:	63bc      	str	r4, [r7, #56]	; 0x38
 8018d4e:	415b      	adcs	r3, r3
 8018d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018d52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018d56:	1812      	adds	r2, r2, r0
 8018d58:	eb41 0303 	adc.w	r3, r1, r3
 8018d5c:	f04f 0400 	mov.w	r4, #0
 8018d60:	f04f 0500 	mov.w	r5, #0
 8018d64:	00dd      	lsls	r5, r3, #3
 8018d66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018d6a:	00d4      	lsls	r4, r2, #3
 8018d6c:	4622      	mov	r2, r4
 8018d6e:	462b      	mov	r3, r5
 8018d70:	1814      	adds	r4, r2, r0
 8018d72:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8018d76:	414b      	adcs	r3, r1
 8018d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	461a      	mov	r2, r3
 8018d84:	f04f 0300 	mov.w	r3, #0
 8018d88:	1891      	adds	r1, r2, r2
 8018d8a:	6339      	str	r1, [r7, #48]	; 0x30
 8018d8c:	415b      	adcs	r3, r3
 8018d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8018d90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8018d94:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8018d98:	f7e7 ff76 	bl	8000c88 <__aeabi_uldivmod>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	4b0c      	ldr	r3, [pc, #48]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018da2:	fba3 1302 	umull	r1, r3, r3, r2
 8018da6:	095b      	lsrs	r3, r3, #5
 8018da8:	2164      	movs	r1, #100	; 0x64
 8018daa:	fb01 f303 	mul.w	r3, r1, r3
 8018dae:	1ad3      	subs	r3, r2, r3
 8018db0:	00db      	lsls	r3, r3, #3
 8018db2:	3332      	adds	r3, #50	; 0x32
 8018db4:	4a07      	ldr	r2, [pc, #28]	; (8018dd4 <UART_SetConfig+0x3dc>)
 8018db6:	fba2 2303 	umull	r2, r3, r2, r3
 8018dba:	095b      	lsrs	r3, r3, #5
 8018dbc:	f003 0207 	and.w	r2, r3, #7
 8018dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4432      	add	r2, r6
 8018dc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8018dca:	e1a6      	b.n	801911a <UART_SetConfig+0x722>
 8018dcc:	40011000 	.word	0x40011000
 8018dd0:	40011400 	.word	0x40011400
 8018dd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018ddc:	681a      	ldr	r2, [r3, #0]
 8018dde:	4bd1      	ldr	r3, [pc, #836]	; (8019124 <UART_SetConfig+0x72c>)
 8018de0:	429a      	cmp	r2, r3
 8018de2:	d006      	beq.n	8018df2 <UART_SetConfig+0x3fa>
 8018de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018de8:	681a      	ldr	r2, [r3, #0]
 8018dea:	4bcf      	ldr	r3, [pc, #828]	; (8019128 <UART_SetConfig+0x730>)
 8018dec:	429a      	cmp	r2, r3
 8018dee:	f040 80ca 	bne.w	8018f86 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8018df2:	f7fd ffb5 	bl	8016d60 <HAL_RCC_GetPCLK2Freq>
 8018df6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018dfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018dfe:	461c      	mov	r4, r3
 8018e00:	f04f 0500 	mov.w	r5, #0
 8018e04:	4622      	mov	r2, r4
 8018e06:	462b      	mov	r3, r5
 8018e08:	1891      	adds	r1, r2, r2
 8018e0a:	62b9      	str	r1, [r7, #40]	; 0x28
 8018e0c:	415b      	adcs	r3, r3
 8018e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018e14:	1912      	adds	r2, r2, r4
 8018e16:	eb45 0303 	adc.w	r3, r5, r3
 8018e1a:	f04f 0000 	mov.w	r0, #0
 8018e1e:	f04f 0100 	mov.w	r1, #0
 8018e22:	00d9      	lsls	r1, r3, #3
 8018e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018e28:	00d0      	lsls	r0, r2, #3
 8018e2a:	4602      	mov	r2, r0
 8018e2c:	460b      	mov	r3, r1
 8018e2e:	eb12 0a04 	adds.w	sl, r2, r4
 8018e32:	eb43 0b05 	adc.w	fp, r3, r5
 8018e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018e3a:	685b      	ldr	r3, [r3, #4]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	f04f 0100 	mov.w	r1, #0
 8018e42:	f04f 0200 	mov.w	r2, #0
 8018e46:	f04f 0300 	mov.w	r3, #0
 8018e4a:	008b      	lsls	r3, r1, #2
 8018e4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018e50:	0082      	lsls	r2, r0, #2
 8018e52:	4650      	mov	r0, sl
 8018e54:	4659      	mov	r1, fp
 8018e56:	f7e7 ff17 	bl	8000c88 <__aeabi_uldivmod>
 8018e5a:	4602      	mov	r2, r0
 8018e5c:	460b      	mov	r3, r1
 8018e5e:	4bb3      	ldr	r3, [pc, #716]	; (801912c <UART_SetConfig+0x734>)
 8018e60:	fba3 2302 	umull	r2, r3, r3, r2
 8018e64:	095b      	lsrs	r3, r3, #5
 8018e66:	011e      	lsls	r6, r3, #4
 8018e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f04f 0100 	mov.w	r1, #0
 8018e72:	4602      	mov	r2, r0
 8018e74:	460b      	mov	r3, r1
 8018e76:	1894      	adds	r4, r2, r2
 8018e78:	623c      	str	r4, [r7, #32]
 8018e7a:	415b      	adcs	r3, r3
 8018e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8018e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8018e82:	1812      	adds	r2, r2, r0
 8018e84:	eb41 0303 	adc.w	r3, r1, r3
 8018e88:	f04f 0400 	mov.w	r4, #0
 8018e8c:	f04f 0500 	mov.w	r5, #0
 8018e90:	00dd      	lsls	r5, r3, #3
 8018e92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018e96:	00d4      	lsls	r4, r2, #3
 8018e98:	4622      	mov	r2, r4
 8018e9a:	462b      	mov	r3, r5
 8018e9c:	1814      	adds	r4, r2, r0
 8018e9e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8018ea2:	414b      	adcs	r3, r1
 8018ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018eac:	685b      	ldr	r3, [r3, #4]
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f04f 0100 	mov.w	r1, #0
 8018eb4:	f04f 0200 	mov.w	r2, #0
 8018eb8:	f04f 0300 	mov.w	r3, #0
 8018ebc:	008b      	lsls	r3, r1, #2
 8018ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018ec2:	0082      	lsls	r2, r0, #2
 8018ec4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8018ec8:	f7e7 fede 	bl	8000c88 <__aeabi_uldivmod>
 8018ecc:	4602      	mov	r2, r0
 8018ece:	460b      	mov	r3, r1
 8018ed0:	4b96      	ldr	r3, [pc, #600]	; (801912c <UART_SetConfig+0x734>)
 8018ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8018ed6:	095b      	lsrs	r3, r3, #5
 8018ed8:	2164      	movs	r1, #100	; 0x64
 8018eda:	fb01 f303 	mul.w	r3, r1, r3
 8018ede:	1ad3      	subs	r3, r2, r3
 8018ee0:	011b      	lsls	r3, r3, #4
 8018ee2:	3332      	adds	r3, #50	; 0x32
 8018ee4:	4a91      	ldr	r2, [pc, #580]	; (801912c <UART_SetConfig+0x734>)
 8018ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8018eea:	095b      	lsrs	r3, r3, #5
 8018eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018ef0:	441e      	add	r6, r3
 8018ef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	f04f 0100 	mov.w	r1, #0
 8018efc:	4602      	mov	r2, r0
 8018efe:	460b      	mov	r3, r1
 8018f00:	1894      	adds	r4, r2, r2
 8018f02:	61bc      	str	r4, [r7, #24]
 8018f04:	415b      	adcs	r3, r3
 8018f06:	61fb      	str	r3, [r7, #28]
 8018f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018f0c:	1812      	adds	r2, r2, r0
 8018f0e:	eb41 0303 	adc.w	r3, r1, r3
 8018f12:	f04f 0400 	mov.w	r4, #0
 8018f16:	f04f 0500 	mov.w	r5, #0
 8018f1a:	00dd      	lsls	r5, r3, #3
 8018f1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8018f20:	00d4      	lsls	r4, r2, #3
 8018f22:	4622      	mov	r2, r4
 8018f24:	462b      	mov	r3, r5
 8018f26:	1814      	adds	r4, r2, r0
 8018f28:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8018f2c:	414b      	adcs	r3, r1
 8018f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018f36:	685b      	ldr	r3, [r3, #4]
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f04f 0100 	mov.w	r1, #0
 8018f3e:	f04f 0200 	mov.w	r2, #0
 8018f42:	f04f 0300 	mov.w	r3, #0
 8018f46:	008b      	lsls	r3, r1, #2
 8018f48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018f4c:	0082      	lsls	r2, r0, #2
 8018f4e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8018f52:	f7e7 fe99 	bl	8000c88 <__aeabi_uldivmod>
 8018f56:	4602      	mov	r2, r0
 8018f58:	460b      	mov	r3, r1
 8018f5a:	4b74      	ldr	r3, [pc, #464]	; (801912c <UART_SetConfig+0x734>)
 8018f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8018f60:	095b      	lsrs	r3, r3, #5
 8018f62:	2164      	movs	r1, #100	; 0x64
 8018f64:	fb01 f303 	mul.w	r3, r1, r3
 8018f68:	1ad3      	subs	r3, r2, r3
 8018f6a:	011b      	lsls	r3, r3, #4
 8018f6c:	3332      	adds	r3, #50	; 0x32
 8018f6e:	4a6f      	ldr	r2, [pc, #444]	; (801912c <UART_SetConfig+0x734>)
 8018f70:	fba2 2303 	umull	r2, r3, r2, r3
 8018f74:	095b      	lsrs	r3, r3, #5
 8018f76:	f003 020f 	and.w	r2, r3, #15
 8018f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	4432      	add	r2, r6
 8018f82:	609a      	str	r2, [r3, #8]
 8018f84:	e0c9      	b.n	801911a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8018f86:	f7fd fed7 	bl	8016d38 <HAL_RCC_GetPCLK1Freq>
 8018f8a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018f92:	461c      	mov	r4, r3
 8018f94:	f04f 0500 	mov.w	r5, #0
 8018f98:	4622      	mov	r2, r4
 8018f9a:	462b      	mov	r3, r5
 8018f9c:	1891      	adds	r1, r2, r2
 8018f9e:	6139      	str	r1, [r7, #16]
 8018fa0:	415b      	adcs	r3, r3
 8018fa2:	617b      	str	r3, [r7, #20]
 8018fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8018fa8:	1912      	adds	r2, r2, r4
 8018faa:	eb45 0303 	adc.w	r3, r5, r3
 8018fae:	f04f 0000 	mov.w	r0, #0
 8018fb2:	f04f 0100 	mov.w	r1, #0
 8018fb6:	00d9      	lsls	r1, r3, #3
 8018fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8018fbc:	00d0      	lsls	r0, r2, #3
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	460b      	mov	r3, r1
 8018fc2:	eb12 0804 	adds.w	r8, r2, r4
 8018fc6:	eb43 0905 	adc.w	r9, r3, r5
 8018fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018fce:	685b      	ldr	r3, [r3, #4]
 8018fd0:	4618      	mov	r0, r3
 8018fd2:	f04f 0100 	mov.w	r1, #0
 8018fd6:	f04f 0200 	mov.w	r2, #0
 8018fda:	f04f 0300 	mov.w	r3, #0
 8018fde:	008b      	lsls	r3, r1, #2
 8018fe0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8018fe4:	0082      	lsls	r2, r0, #2
 8018fe6:	4640      	mov	r0, r8
 8018fe8:	4649      	mov	r1, r9
 8018fea:	f7e7 fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8018fee:	4602      	mov	r2, r0
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	4b4e      	ldr	r3, [pc, #312]	; (801912c <UART_SetConfig+0x734>)
 8018ff4:	fba3 2302 	umull	r2, r3, r3, r2
 8018ff8:	095b      	lsrs	r3, r3, #5
 8018ffa:	011e      	lsls	r6, r3, #4
 8018ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8019000:	4618      	mov	r0, r3
 8019002:	f04f 0100 	mov.w	r1, #0
 8019006:	4602      	mov	r2, r0
 8019008:	460b      	mov	r3, r1
 801900a:	1894      	adds	r4, r2, r2
 801900c:	60bc      	str	r4, [r7, #8]
 801900e:	415b      	adcs	r3, r3
 8019010:	60fb      	str	r3, [r7, #12]
 8019012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019016:	1812      	adds	r2, r2, r0
 8019018:	eb41 0303 	adc.w	r3, r1, r3
 801901c:	f04f 0400 	mov.w	r4, #0
 8019020:	f04f 0500 	mov.w	r5, #0
 8019024:	00dd      	lsls	r5, r3, #3
 8019026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801902a:	00d4      	lsls	r4, r2, #3
 801902c:	4622      	mov	r2, r4
 801902e:	462b      	mov	r3, r5
 8019030:	1814      	adds	r4, r2, r0
 8019032:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8019036:	414b      	adcs	r3, r1
 8019038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801903c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	4618      	mov	r0, r3
 8019044:	f04f 0100 	mov.w	r1, #0
 8019048:	f04f 0200 	mov.w	r2, #0
 801904c:	f04f 0300 	mov.w	r3, #0
 8019050:	008b      	lsls	r3, r1, #2
 8019052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8019056:	0082      	lsls	r2, r0, #2
 8019058:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801905c:	f7e7 fe14 	bl	8000c88 <__aeabi_uldivmod>
 8019060:	4602      	mov	r2, r0
 8019062:	460b      	mov	r3, r1
 8019064:	4b31      	ldr	r3, [pc, #196]	; (801912c <UART_SetConfig+0x734>)
 8019066:	fba3 1302 	umull	r1, r3, r3, r2
 801906a:	095b      	lsrs	r3, r3, #5
 801906c:	2164      	movs	r1, #100	; 0x64
 801906e:	fb01 f303 	mul.w	r3, r1, r3
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	011b      	lsls	r3, r3, #4
 8019076:	3332      	adds	r3, #50	; 0x32
 8019078:	4a2c      	ldr	r2, [pc, #176]	; (801912c <UART_SetConfig+0x734>)
 801907a:	fba2 2303 	umull	r2, r3, r2, r3
 801907e:	095b      	lsrs	r3, r3, #5
 8019080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019084:	441e      	add	r6, r3
 8019086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801908a:	4618      	mov	r0, r3
 801908c:	f04f 0100 	mov.w	r1, #0
 8019090:	4602      	mov	r2, r0
 8019092:	460b      	mov	r3, r1
 8019094:	1894      	adds	r4, r2, r2
 8019096:	603c      	str	r4, [r7, #0]
 8019098:	415b      	adcs	r3, r3
 801909a:	607b      	str	r3, [r7, #4]
 801909c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80190a0:	1812      	adds	r2, r2, r0
 80190a2:	eb41 0303 	adc.w	r3, r1, r3
 80190a6:	f04f 0400 	mov.w	r4, #0
 80190aa:	f04f 0500 	mov.w	r5, #0
 80190ae:	00dd      	lsls	r5, r3, #3
 80190b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80190b4:	00d4      	lsls	r4, r2, #3
 80190b6:	4622      	mov	r2, r4
 80190b8:	462b      	mov	r3, r5
 80190ba:	1814      	adds	r4, r2, r0
 80190bc:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80190c0:	414b      	adcs	r3, r1
 80190c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80190c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80190ca:	685b      	ldr	r3, [r3, #4]
 80190cc:	4618      	mov	r0, r3
 80190ce:	f04f 0100 	mov.w	r1, #0
 80190d2:	f04f 0200 	mov.w	r2, #0
 80190d6:	f04f 0300 	mov.w	r3, #0
 80190da:	008b      	lsls	r3, r1, #2
 80190dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80190e0:	0082      	lsls	r2, r0, #2
 80190e2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80190e6:	f7e7 fdcf 	bl	8000c88 <__aeabi_uldivmod>
 80190ea:	4602      	mov	r2, r0
 80190ec:	460b      	mov	r3, r1
 80190ee:	4b0f      	ldr	r3, [pc, #60]	; (801912c <UART_SetConfig+0x734>)
 80190f0:	fba3 1302 	umull	r1, r3, r3, r2
 80190f4:	095b      	lsrs	r3, r3, #5
 80190f6:	2164      	movs	r1, #100	; 0x64
 80190f8:	fb01 f303 	mul.w	r3, r1, r3
 80190fc:	1ad3      	subs	r3, r2, r3
 80190fe:	011b      	lsls	r3, r3, #4
 8019100:	3332      	adds	r3, #50	; 0x32
 8019102:	4a0a      	ldr	r2, [pc, #40]	; (801912c <UART_SetConfig+0x734>)
 8019104:	fba2 2303 	umull	r2, r3, r2, r3
 8019108:	095b      	lsrs	r3, r3, #5
 801910a:	f003 020f 	and.w	r2, r3, #15
 801910e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4432      	add	r2, r6
 8019116:	609a      	str	r2, [r3, #8]
}
 8019118:	e7ff      	b.n	801911a <UART_SetConfig+0x722>
 801911a:	bf00      	nop
 801911c:	37f4      	adds	r7, #244	; 0xf4
 801911e:	46bd      	mov	sp, r7
 8019120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019124:	40011000 	.word	0x40011000
 8019128:	40011400 	.word	0x40011400
 801912c:	51eb851f 	.word	0x51eb851f

08019130 <__NVIC_SetPriority>:
{
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	4603      	mov	r3, r0
 8019138:	6039      	str	r1, [r7, #0]
 801913a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801913c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019140:	2b00      	cmp	r3, #0
 8019142:	db0a      	blt.n	801915a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	b2da      	uxtb	r2, r3
 8019148:	490c      	ldr	r1, [pc, #48]	; (801917c <__NVIC_SetPriority+0x4c>)
 801914a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801914e:	0112      	lsls	r2, r2, #4
 8019150:	b2d2      	uxtb	r2, r2
 8019152:	440b      	add	r3, r1
 8019154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019158:	e00a      	b.n	8019170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801915a:	683b      	ldr	r3, [r7, #0]
 801915c:	b2da      	uxtb	r2, r3
 801915e:	4908      	ldr	r1, [pc, #32]	; (8019180 <__NVIC_SetPriority+0x50>)
 8019160:	79fb      	ldrb	r3, [r7, #7]
 8019162:	f003 030f 	and.w	r3, r3, #15
 8019166:	3b04      	subs	r3, #4
 8019168:	0112      	lsls	r2, r2, #4
 801916a:	b2d2      	uxtb	r2, r2
 801916c:	440b      	add	r3, r1
 801916e:	761a      	strb	r2, [r3, #24]
}
 8019170:	bf00      	nop
 8019172:	370c      	adds	r7, #12
 8019174:	46bd      	mov	sp, r7
 8019176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917a:	4770      	bx	lr
 801917c:	e000e100 	.word	0xe000e100
 8019180:	e000ed00 	.word	0xe000ed00

08019184 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8019184:	b580      	push	{r7, lr}
 8019186:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8019188:	4b05      	ldr	r3, [pc, #20]	; (80191a0 <SysTick_Handler+0x1c>)
 801918a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801918c:	f002 fa44 	bl	801b618 <xTaskGetSchedulerState>
 8019190:	4603      	mov	r3, r0
 8019192:	2b01      	cmp	r3, #1
 8019194:	d001      	beq.n	801919a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8019196:	f003 f927 	bl	801c3e8 <xPortSysTickHandler>
  }
}
 801919a:	bf00      	nop
 801919c:	bd80      	pop	{r7, pc}
 801919e:	bf00      	nop
 80191a0:	e000e010 	.word	0xe000e010

080191a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80191a4:	b580      	push	{r7, lr}
 80191a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80191a8:	2100      	movs	r1, #0
 80191aa:	f06f 0004 	mvn.w	r0, #4
 80191ae:	f7ff ffbf 	bl	8019130 <__NVIC_SetPriority>
#endif
}
 80191b2:	bf00      	nop
 80191b4:	bd80      	pop	{r7, pc}
	...

080191b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80191be:	f3ef 8305 	mrs	r3, IPSR
 80191c2:	603b      	str	r3, [r7, #0]
  return(result);
 80191c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d003      	beq.n	80191d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80191ca:	f06f 0305 	mvn.w	r3, #5
 80191ce:	607b      	str	r3, [r7, #4]
 80191d0:	e00c      	b.n	80191ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80191d2:	4b0a      	ldr	r3, [pc, #40]	; (80191fc <osKernelInitialize+0x44>)
 80191d4:	681b      	ldr	r3, [r3, #0]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d105      	bne.n	80191e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80191da:	4b08      	ldr	r3, [pc, #32]	; (80191fc <osKernelInitialize+0x44>)
 80191dc:	2201      	movs	r2, #1
 80191de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80191e0:	2300      	movs	r3, #0
 80191e2:	607b      	str	r3, [r7, #4]
 80191e4:	e002      	b.n	80191ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80191e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80191ec:	687b      	ldr	r3, [r7, #4]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	370c      	adds	r7, #12
 80191f2:	46bd      	mov	sp, r7
 80191f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop
 80191fc:	20001bc0 	.word	0x20001bc0

08019200 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019206:	f3ef 8305 	mrs	r3, IPSR
 801920a:	603b      	str	r3, [r7, #0]
  return(result);
 801920c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801920e:	2b00      	cmp	r3, #0
 8019210:	d003      	beq.n	801921a <osKernelStart+0x1a>
    stat = osErrorISR;
 8019212:	f06f 0305 	mvn.w	r3, #5
 8019216:	607b      	str	r3, [r7, #4]
 8019218:	e010      	b.n	801923c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801921a:	4b0b      	ldr	r3, [pc, #44]	; (8019248 <osKernelStart+0x48>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	2b01      	cmp	r3, #1
 8019220:	d109      	bne.n	8019236 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8019222:	f7ff ffbf 	bl	80191a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8019226:	4b08      	ldr	r3, [pc, #32]	; (8019248 <osKernelStart+0x48>)
 8019228:	2202      	movs	r2, #2
 801922a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801922c:	f001 fdac 	bl	801ad88 <vTaskStartScheduler>
      stat = osOK;
 8019230:	2300      	movs	r3, #0
 8019232:	607b      	str	r3, [r7, #4]
 8019234:	e002      	b.n	801923c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8019236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801923a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801923c:	687b      	ldr	r3, [r7, #4]
}
 801923e:	4618      	mov	r0, r3
 8019240:	3708      	adds	r7, #8
 8019242:	46bd      	mov	sp, r7
 8019244:	bd80      	pop	{r7, pc}
 8019246:	bf00      	nop
 8019248:	20001bc0 	.word	0x20001bc0

0801924c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801924c:	b580      	push	{r7, lr}
 801924e:	b08e      	sub	sp, #56	; 0x38
 8019250:	af04      	add	r7, sp, #16
 8019252:	60f8      	str	r0, [r7, #12]
 8019254:	60b9      	str	r1, [r7, #8]
 8019256:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8019258:	2300      	movs	r3, #0
 801925a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801925c:	f3ef 8305 	mrs	r3, IPSR
 8019260:	617b      	str	r3, [r7, #20]
  return(result);
 8019262:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8019264:	2b00      	cmp	r3, #0
 8019266:	d17e      	bne.n	8019366 <osThreadNew+0x11a>
 8019268:	68fb      	ldr	r3, [r7, #12]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d07b      	beq.n	8019366 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801926e:	2380      	movs	r3, #128	; 0x80
 8019270:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8019272:	2318      	movs	r3, #24
 8019274:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8019276:	2300      	movs	r3, #0
 8019278:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801927a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801927e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d045      	beq.n	8019312 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d002      	beq.n	8019294 <osThreadNew+0x48>
        name = attr->name;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	699b      	ldr	r3, [r3, #24]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d002      	beq.n	80192a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	699b      	ldr	r3, [r3, #24]
 80192a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80192a2:	69fb      	ldr	r3, [r7, #28]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d008      	beq.n	80192ba <osThreadNew+0x6e>
 80192a8:	69fb      	ldr	r3, [r7, #28]
 80192aa:	2b38      	cmp	r3, #56	; 0x38
 80192ac:	d805      	bhi.n	80192ba <osThreadNew+0x6e>
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	685b      	ldr	r3, [r3, #4]
 80192b2:	f003 0301 	and.w	r3, r3, #1
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d001      	beq.n	80192be <osThreadNew+0x72>
        return (NULL);
 80192ba:	2300      	movs	r3, #0
 80192bc:	e054      	b.n	8019368 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	695b      	ldr	r3, [r3, #20]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d003      	beq.n	80192ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	695b      	ldr	r3, [r3, #20]
 80192ca:	089b      	lsrs	r3, r3, #2
 80192cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	689b      	ldr	r3, [r3, #8]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d00e      	beq.n	80192f4 <osThreadNew+0xa8>
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	2b5b      	cmp	r3, #91	; 0x5b
 80192dc:	d90a      	bls.n	80192f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d006      	beq.n	80192f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	695b      	ldr	r3, [r3, #20]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d002      	beq.n	80192f4 <osThreadNew+0xa8>
        mem = 1;
 80192ee:	2301      	movs	r3, #1
 80192f0:	61bb      	str	r3, [r7, #24]
 80192f2:	e010      	b.n	8019316 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	689b      	ldr	r3, [r3, #8]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d10c      	bne.n	8019316 <osThreadNew+0xca>
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	68db      	ldr	r3, [r3, #12]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d108      	bne.n	8019316 <osThreadNew+0xca>
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	691b      	ldr	r3, [r3, #16]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d104      	bne.n	8019316 <osThreadNew+0xca>
          mem = 0;
 801930c:	2300      	movs	r3, #0
 801930e:	61bb      	str	r3, [r7, #24]
 8019310:	e001      	b.n	8019316 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8019312:	2300      	movs	r3, #0
 8019314:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8019316:	69bb      	ldr	r3, [r7, #24]
 8019318:	2b01      	cmp	r3, #1
 801931a:	d110      	bne.n	801933e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8019320:	687a      	ldr	r2, [r7, #4]
 8019322:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8019324:	9202      	str	r2, [sp, #8]
 8019326:	9301      	str	r3, [sp, #4]
 8019328:	69fb      	ldr	r3, [r7, #28]
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	68bb      	ldr	r3, [r7, #8]
 801932e:	6a3a      	ldr	r2, [r7, #32]
 8019330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019332:	68f8      	ldr	r0, [r7, #12]
 8019334:	f001 fa7a 	bl	801a82c <xTaskCreateStatic>
 8019338:	4603      	mov	r3, r0
 801933a:	613b      	str	r3, [r7, #16]
 801933c:	e013      	b.n	8019366 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801933e:	69bb      	ldr	r3, [r7, #24]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d110      	bne.n	8019366 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8019344:	6a3b      	ldr	r3, [r7, #32]
 8019346:	b29a      	uxth	r2, r3
 8019348:	f107 0310 	add.w	r3, r7, #16
 801934c:	9301      	str	r3, [sp, #4]
 801934e:	69fb      	ldr	r3, [r7, #28]
 8019350:	9300      	str	r3, [sp, #0]
 8019352:	68bb      	ldr	r3, [r7, #8]
 8019354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019356:	68f8      	ldr	r0, [r7, #12]
 8019358:	f001 fac5 	bl	801a8e6 <xTaskCreate>
 801935c:	4603      	mov	r3, r0
 801935e:	2b01      	cmp	r3, #1
 8019360:	d001      	beq.n	8019366 <osThreadNew+0x11a>
            hTask = NULL;
 8019362:	2300      	movs	r3, #0
 8019364:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8019366:	693b      	ldr	r3, [r7, #16]
}
 8019368:	4618      	mov	r0, r3
 801936a:	3728      	adds	r7, #40	; 0x28
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8019370:	b580      	push	{r7, lr}
 8019372:	b086      	sub	sp, #24
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801937c:	f3ef 8305 	mrs	r3, IPSR
 8019380:	60bb      	str	r3, [r7, #8]
  return(result);
 8019382:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8019384:	2b00      	cmp	r3, #0
 8019386:	d003      	beq.n	8019390 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8019388:	f06f 0305 	mvn.w	r3, #5
 801938c:	617b      	str	r3, [r7, #20]
 801938e:	e017      	b.n	80193c0 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8019390:	693b      	ldr	r3, [r7, #16]
 8019392:	2b00      	cmp	r3, #0
 8019394:	d103      	bne.n	801939e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8019396:	f06f 0303 	mvn.w	r3, #3
 801939a:	617b      	str	r3, [r7, #20]
 801939c:	e010      	b.n	80193c0 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801939e:	6938      	ldr	r0, [r7, #16]
 80193a0:	f001 fc8c 	bl	801acbc <eTaskGetState>
 80193a4:	4603      	mov	r3, r0
 80193a6:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80193a8:	7bfb      	ldrb	r3, [r7, #15]
 80193aa:	2b04      	cmp	r3, #4
 80193ac:	d005      	beq.n	80193ba <osThreadTerminate+0x4a>
      stat = osOK;
 80193ae:	2300      	movs	r3, #0
 80193b0:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80193b2:	6938      	ldr	r0, [r7, #16]
 80193b4:	f001 fbdc 	bl	801ab70 <vTaskDelete>
 80193b8:	e002      	b.n	80193c0 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80193ba:	f06f 0302 	mvn.w	r3, #2
 80193be:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80193c0:	697b      	ldr	r3, [r7, #20]
}
 80193c2:	4618      	mov	r0, r3
 80193c4:	3718      	adds	r7, #24
 80193c6:	46bd      	mov	sp, r7
 80193c8:	bd80      	pop	{r7, pc}

080193ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80193ca:	b580      	push	{r7, lr}
 80193cc:	b084      	sub	sp, #16
 80193ce:	af00      	add	r7, sp, #0
 80193d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80193d2:	f3ef 8305 	mrs	r3, IPSR
 80193d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80193d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d003      	beq.n	80193e6 <osDelay+0x1c>
    stat = osErrorISR;
 80193de:	f06f 0305 	mvn.w	r3, #5
 80193e2:	60fb      	str	r3, [r7, #12]
 80193e4:	e007      	b.n	80193f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80193e6:	2300      	movs	r3, #0
 80193e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d002      	beq.n	80193f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f001 fc2f 	bl	801ac54 <vTaskDelay>
    }
  }

  return (stat);
 80193f6:	68fb      	ldr	r3, [r7, #12]
}
 80193f8:	4618      	mov	r0, r3
 80193fa:	3710      	adds	r7, #16
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}

08019400 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8019400:	b580      	push	{r7, lr}
 8019402:	b08a      	sub	sp, #40	; 0x28
 8019404:	af02      	add	r7, sp, #8
 8019406:	60f8      	str	r0, [r7, #12]
 8019408:	60b9      	str	r1, [r7, #8]
 801940a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801940c:	2300      	movs	r3, #0
 801940e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019410:	f3ef 8305 	mrs	r3, IPSR
 8019414:	613b      	str	r3, [r7, #16]
  return(result);
 8019416:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8019418:	2b00      	cmp	r3, #0
 801941a:	d175      	bne.n	8019508 <osSemaphoreNew+0x108>
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d072      	beq.n	8019508 <osSemaphoreNew+0x108>
 8019422:	68ba      	ldr	r2, [r7, #8]
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	429a      	cmp	r2, r3
 8019428:	d86e      	bhi.n	8019508 <osSemaphoreNew+0x108>
    mem = -1;
 801942a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801942e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d015      	beq.n	8019462 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	689b      	ldr	r3, [r3, #8]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d006      	beq.n	801944c <osSemaphoreNew+0x4c>
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	68db      	ldr	r3, [r3, #12]
 8019442:	2b4f      	cmp	r3, #79	; 0x4f
 8019444:	d902      	bls.n	801944c <osSemaphoreNew+0x4c>
        mem = 1;
 8019446:	2301      	movs	r3, #1
 8019448:	61bb      	str	r3, [r7, #24]
 801944a:	e00c      	b.n	8019466 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	689b      	ldr	r3, [r3, #8]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d108      	bne.n	8019466 <osSemaphoreNew+0x66>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	68db      	ldr	r3, [r3, #12]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d104      	bne.n	8019466 <osSemaphoreNew+0x66>
          mem = 0;
 801945c:	2300      	movs	r3, #0
 801945e:	61bb      	str	r3, [r7, #24]
 8019460:	e001      	b.n	8019466 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8019462:	2300      	movs	r3, #0
 8019464:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801946c:	d04c      	beq.n	8019508 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801946e:	68fb      	ldr	r3, [r7, #12]
 8019470:	2b01      	cmp	r3, #1
 8019472:	d128      	bne.n	80194c6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8019474:	69bb      	ldr	r3, [r7, #24]
 8019476:	2b01      	cmp	r3, #1
 8019478:	d10a      	bne.n	8019490 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	689b      	ldr	r3, [r3, #8]
 801947e:	2203      	movs	r2, #3
 8019480:	9200      	str	r2, [sp, #0]
 8019482:	2200      	movs	r2, #0
 8019484:	2100      	movs	r1, #0
 8019486:	2001      	movs	r0, #1
 8019488:	f000 fa2a 	bl	80198e0 <xQueueGenericCreateStatic>
 801948c:	61f8      	str	r0, [r7, #28]
 801948e:	e005      	b.n	801949c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8019490:	2203      	movs	r2, #3
 8019492:	2100      	movs	r1, #0
 8019494:	2001      	movs	r0, #1
 8019496:	f000 fa9b 	bl	80199d0 <xQueueGenericCreate>
 801949a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801949c:	69fb      	ldr	r3, [r7, #28]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d022      	beq.n	80194e8 <osSemaphoreNew+0xe8>
 80194a2:	68bb      	ldr	r3, [r7, #8]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d01f      	beq.n	80194e8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80194a8:	2300      	movs	r3, #0
 80194aa:	2200      	movs	r2, #0
 80194ac:	2100      	movs	r1, #0
 80194ae:	69f8      	ldr	r0, [r7, #28]
 80194b0:	f000 fb56 	bl	8019b60 <xQueueGenericSend>
 80194b4:	4603      	mov	r3, r0
 80194b6:	2b01      	cmp	r3, #1
 80194b8:	d016      	beq.n	80194e8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80194ba:	69f8      	ldr	r0, [r7, #28]
 80194bc:	f000 ffe2 	bl	801a484 <vQueueDelete>
            hSemaphore = NULL;
 80194c0:	2300      	movs	r3, #0
 80194c2:	61fb      	str	r3, [r7, #28]
 80194c4:	e010      	b.n	80194e8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	2b01      	cmp	r3, #1
 80194ca:	d108      	bne.n	80194de <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	689b      	ldr	r3, [r3, #8]
 80194d0:	461a      	mov	r2, r3
 80194d2:	68b9      	ldr	r1, [r7, #8]
 80194d4:	68f8      	ldr	r0, [r7, #12]
 80194d6:	f000 fad8 	bl	8019a8a <xQueueCreateCountingSemaphoreStatic>
 80194da:	61f8      	str	r0, [r7, #28]
 80194dc:	e004      	b.n	80194e8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80194de:	68b9      	ldr	r1, [r7, #8]
 80194e0:	68f8      	ldr	r0, [r7, #12]
 80194e2:	f000 fb09 	bl	8019af8 <xQueueCreateCountingSemaphore>
 80194e6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80194e8:	69fb      	ldr	r3, [r7, #28]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d00c      	beq.n	8019508 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d003      	beq.n	80194fc <osSemaphoreNew+0xfc>
          name = attr->name;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	617b      	str	r3, [r7, #20]
 80194fa:	e001      	b.n	8019500 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80194fc:	2300      	movs	r3, #0
 80194fe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8019500:	6979      	ldr	r1, [r7, #20]
 8019502:	69f8      	ldr	r0, [r7, #28]
 8019504:	f001 f90a 	bl	801a71c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8019508:	69fb      	ldr	r3, [r7, #28]
}
 801950a:	4618      	mov	r0, r3
 801950c:	3720      	adds	r7, #32
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}
	...

08019514 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8019514:	b580      	push	{r7, lr}
 8019516:	b086      	sub	sp, #24
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8019522:	2300      	movs	r3, #0
 8019524:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8019526:	693b      	ldr	r3, [r7, #16]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d103      	bne.n	8019534 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801952c:	f06f 0303 	mvn.w	r3, #3
 8019530:	617b      	str	r3, [r7, #20]
 8019532:	e039      	b.n	80195a8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8019534:	f3ef 8305 	mrs	r3, IPSR
 8019538:	60fb      	str	r3, [r7, #12]
  return(result);
 801953a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801953c:	2b00      	cmp	r3, #0
 801953e:	d022      	beq.n	8019586 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d003      	beq.n	801954e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8019546:	f06f 0303 	mvn.w	r3, #3
 801954a:	617b      	str	r3, [r7, #20]
 801954c:	e02c      	b.n	80195a8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801954e:	2300      	movs	r3, #0
 8019550:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8019552:	f107 0308 	add.w	r3, r7, #8
 8019556:	461a      	mov	r2, r3
 8019558:	2100      	movs	r1, #0
 801955a:	6938      	ldr	r0, [r7, #16]
 801955c:	f000 ff12 	bl	801a384 <xQueueReceiveFromISR>
 8019560:	4603      	mov	r3, r0
 8019562:	2b01      	cmp	r3, #1
 8019564:	d003      	beq.n	801956e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8019566:	f06f 0302 	mvn.w	r3, #2
 801956a:	617b      	str	r3, [r7, #20]
 801956c:	e01c      	b.n	80195a8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801956e:	68bb      	ldr	r3, [r7, #8]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d019      	beq.n	80195a8 <osSemaphoreAcquire+0x94>
 8019574:	4b0f      	ldr	r3, [pc, #60]	; (80195b4 <osSemaphoreAcquire+0xa0>)
 8019576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801957a:	601a      	str	r2, [r3, #0]
 801957c:	f3bf 8f4f 	dsb	sy
 8019580:	f3bf 8f6f 	isb	sy
 8019584:	e010      	b.n	80195a8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8019586:	6839      	ldr	r1, [r7, #0]
 8019588:	6938      	ldr	r0, [r7, #16]
 801958a:	f000 fdef 	bl	801a16c <xQueueSemaphoreTake>
 801958e:	4603      	mov	r3, r0
 8019590:	2b01      	cmp	r3, #1
 8019592:	d009      	beq.n	80195a8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d003      	beq.n	80195a2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801959a:	f06f 0301 	mvn.w	r3, #1
 801959e:	617b      	str	r3, [r7, #20]
 80195a0:	e002      	b.n	80195a8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80195a2:	f06f 0302 	mvn.w	r3, #2
 80195a6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80195a8:	697b      	ldr	r3, [r7, #20]
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	3718      	adds	r7, #24
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
 80195b2:	bf00      	nop
 80195b4:	e000ed04 	.word	0xe000ed04

080195b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b086      	sub	sp, #24
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80195c4:	2300      	movs	r3, #0
 80195c6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80195c8:	693b      	ldr	r3, [r7, #16]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d103      	bne.n	80195d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80195ce:	f06f 0303 	mvn.w	r3, #3
 80195d2:	617b      	str	r3, [r7, #20]
 80195d4:	e02c      	b.n	8019630 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80195d6:	f3ef 8305 	mrs	r3, IPSR
 80195da:	60fb      	str	r3, [r7, #12]
  return(result);
 80195dc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d01a      	beq.n	8019618 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80195e2:	2300      	movs	r3, #0
 80195e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80195e6:	f107 0308 	add.w	r3, r7, #8
 80195ea:	4619      	mov	r1, r3
 80195ec:	6938      	ldr	r0, [r7, #16]
 80195ee:	f000 fc50 	bl	8019e92 <xQueueGiveFromISR>
 80195f2:	4603      	mov	r3, r0
 80195f4:	2b01      	cmp	r3, #1
 80195f6:	d003      	beq.n	8019600 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80195f8:	f06f 0302 	mvn.w	r3, #2
 80195fc:	617b      	str	r3, [r7, #20]
 80195fe:	e017      	b.n	8019630 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d014      	beq.n	8019630 <osSemaphoreRelease+0x78>
 8019606:	4b0d      	ldr	r3, [pc, #52]	; (801963c <osSemaphoreRelease+0x84>)
 8019608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801960c:	601a      	str	r2, [r3, #0]
 801960e:	f3bf 8f4f 	dsb	sy
 8019612:	f3bf 8f6f 	isb	sy
 8019616:	e00b      	b.n	8019630 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8019618:	2300      	movs	r3, #0
 801961a:	2200      	movs	r2, #0
 801961c:	2100      	movs	r1, #0
 801961e:	6938      	ldr	r0, [r7, #16]
 8019620:	f000 fa9e 	bl	8019b60 <xQueueGenericSend>
 8019624:	4603      	mov	r3, r0
 8019626:	2b01      	cmp	r3, #1
 8019628:	d002      	beq.n	8019630 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801962a:	f06f 0302 	mvn.w	r3, #2
 801962e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8019630:	697b      	ldr	r3, [r7, #20]
}
 8019632:	4618      	mov	r0, r3
 8019634:	3718      	adds	r7, #24
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop
 801963c:	e000ed04 	.word	0xe000ed04

08019640 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8019640:	b480      	push	{r7}
 8019642:	b085      	sub	sp, #20
 8019644:	af00      	add	r7, sp, #0
 8019646:	60f8      	str	r0, [r7, #12]
 8019648:	60b9      	str	r1, [r7, #8]
 801964a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	4a07      	ldr	r2, [pc, #28]	; (801966c <vApplicationGetIdleTaskMemory+0x2c>)
 8019650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8019652:	68bb      	ldr	r3, [r7, #8]
 8019654:	4a06      	ldr	r2, [pc, #24]	; (8019670 <vApplicationGetIdleTaskMemory+0x30>)
 8019656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2280      	movs	r2, #128	; 0x80
 801965c:	601a      	str	r2, [r3, #0]
}
 801965e:	bf00      	nop
 8019660:	3714      	adds	r7, #20
 8019662:	46bd      	mov	sp, r7
 8019664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019668:	4770      	bx	lr
 801966a:	bf00      	nop
 801966c:	20001bc4 	.word	0x20001bc4
 8019670:	20001c20 	.word	0x20001c20

08019674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8019674:	b480      	push	{r7}
 8019676:	b085      	sub	sp, #20
 8019678:	af00      	add	r7, sp, #0
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	4a07      	ldr	r2, [pc, #28]	; (80196a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8019684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8019686:	68bb      	ldr	r3, [r7, #8]
 8019688:	4a06      	ldr	r2, [pc, #24]	; (80196a4 <vApplicationGetTimerTaskMemory+0x30>)
 801968a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019692:	601a      	str	r2, [r3, #0]
}
 8019694:	bf00      	nop
 8019696:	3714      	adds	r7, #20
 8019698:	46bd      	mov	sp, r7
 801969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969e:	4770      	bx	lr
 80196a0:	20001e20 	.word	0x20001e20
 80196a4:	20001e7c 	.word	0x20001e7c

080196a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80196a8:	b480      	push	{r7}
 80196aa:	b083      	sub	sp, #12
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f103 0208 	add.w	r2, r3, #8
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80196c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	f103 0208 	add.w	r2, r3, #8
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	f103 0208 	add.w	r2, r3, #8
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2200      	movs	r2, #0
 80196da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80196dc:	bf00      	nop
 80196de:	370c      	adds	r7, #12
 80196e0:	46bd      	mov	sp, r7
 80196e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e6:	4770      	bx	lr

080196e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80196e8:	b480      	push	{r7}
 80196ea:	b083      	sub	sp, #12
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	2200      	movs	r2, #0
 80196f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80196f6:	bf00      	nop
 80196f8:	370c      	adds	r7, #12
 80196fa:	46bd      	mov	sp, r7
 80196fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019700:	4770      	bx	lr

08019702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019702:	b480      	push	{r7}
 8019704:	b085      	sub	sp, #20
 8019706:	af00      	add	r7, sp, #0
 8019708:	6078      	str	r0, [r7, #4]
 801970a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	685b      	ldr	r3, [r3, #4]
 8019710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	68fa      	ldr	r2, [r7, #12]
 8019716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	689a      	ldr	r2, [r3, #8]
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	689b      	ldr	r3, [r3, #8]
 8019724:	683a      	ldr	r2, [r7, #0]
 8019726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	683a      	ldr	r2, [r7, #0]
 801972c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801972e:	683b      	ldr	r3, [r7, #0]
 8019730:	687a      	ldr	r2, [r7, #4]
 8019732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	1c5a      	adds	r2, r3, #1
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	601a      	str	r2, [r3, #0]
}
 801973e:	bf00      	nop
 8019740:	3714      	adds	r7, #20
 8019742:	46bd      	mov	sp, r7
 8019744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019748:	4770      	bx	lr

0801974a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801974a:	b480      	push	{r7}
 801974c:	b085      	sub	sp, #20
 801974e:	af00      	add	r7, sp, #0
 8019750:	6078      	str	r0, [r7, #4]
 8019752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8019754:	683b      	ldr	r3, [r7, #0]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801975a:	68bb      	ldr	r3, [r7, #8]
 801975c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019760:	d103      	bne.n	801976a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	691b      	ldr	r3, [r3, #16]
 8019766:	60fb      	str	r3, [r7, #12]
 8019768:	e00c      	b.n	8019784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	3308      	adds	r3, #8
 801976e:	60fb      	str	r3, [r7, #12]
 8019770:	e002      	b.n	8019778 <vListInsert+0x2e>
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	685b      	ldr	r3, [r3, #4]
 8019776:	60fb      	str	r3, [r7, #12]
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	68ba      	ldr	r2, [r7, #8]
 8019780:	429a      	cmp	r2, r3
 8019782:	d2f6      	bcs.n	8019772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	685a      	ldr	r2, [r3, #4]
 8019788:	683b      	ldr	r3, [r7, #0]
 801978a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	683a      	ldr	r2, [r7, #0]
 8019792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019794:	683b      	ldr	r3, [r7, #0]
 8019796:	68fa      	ldr	r2, [r7, #12]
 8019798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	683a      	ldr	r2, [r7, #0]
 801979e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80197a0:	683b      	ldr	r3, [r7, #0]
 80197a2:	687a      	ldr	r2, [r7, #4]
 80197a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	1c5a      	adds	r2, r3, #1
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	601a      	str	r2, [r3, #0]
}
 80197b0:	bf00      	nop
 80197b2:	3714      	adds	r7, #20
 80197b4:	46bd      	mov	sp, r7
 80197b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ba:	4770      	bx	lr

080197bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80197bc:	b480      	push	{r7}
 80197be:	b085      	sub	sp, #20
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	691b      	ldr	r3, [r3, #16]
 80197c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	685b      	ldr	r3, [r3, #4]
 80197ce:	687a      	ldr	r2, [r7, #4]
 80197d0:	6892      	ldr	r2, [r2, #8]
 80197d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	689b      	ldr	r3, [r3, #8]
 80197d8:	687a      	ldr	r2, [r7, #4]
 80197da:	6852      	ldr	r2, [r2, #4]
 80197dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	685b      	ldr	r3, [r3, #4]
 80197e2:	687a      	ldr	r2, [r7, #4]
 80197e4:	429a      	cmp	r2, r3
 80197e6:	d103      	bne.n	80197f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	689a      	ldr	r2, [r3, #8]
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	2200      	movs	r2, #0
 80197f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	681b      	ldr	r3, [r3, #0]
 80197fa:	1e5a      	subs	r2, r3, #1
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	681b      	ldr	r3, [r3, #0]
}
 8019804:	4618      	mov	r0, r3
 8019806:	3714      	adds	r7, #20
 8019808:	46bd      	mov	sp, r7
 801980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801980e:	4770      	bx	lr

08019810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b084      	sub	sp, #16
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
 8019818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801981e:	68fb      	ldr	r3, [r7, #12]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d10a      	bne.n	801983a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8019824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019828:	f383 8811 	msr	BASEPRI, r3
 801982c:	f3bf 8f6f 	isb	sy
 8019830:	f3bf 8f4f 	dsb	sy
 8019834:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8019836:	bf00      	nop
 8019838:	e7fe      	b.n	8019838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801983a:	f002 fd43 	bl	801c2c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	681a      	ldr	r2, [r3, #0]
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019846:	68f9      	ldr	r1, [r7, #12]
 8019848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801984a:	fb01 f303 	mul.w	r3, r1, r3
 801984e:	441a      	add	r2, r3
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	2200      	movs	r2, #0
 8019858:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	681a      	ldr	r2, [r3, #0]
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	681a      	ldr	r2, [r3, #0]
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801986a:	3b01      	subs	r3, #1
 801986c:	68f9      	ldr	r1, [r7, #12]
 801986e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019870:	fb01 f303 	mul.w	r3, r1, r3
 8019874:	441a      	add	r2, r3
 8019876:	68fb      	ldr	r3, [r7, #12]
 8019878:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	22ff      	movs	r2, #255	; 0xff
 801987e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	22ff      	movs	r2, #255	; 0xff
 8019886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d114      	bne.n	80198ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	691b      	ldr	r3, [r3, #16]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d01a      	beq.n	80198ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	3310      	adds	r3, #16
 801989c:	4618      	mov	r0, r3
 801989e:	f001 fcfd 	bl	801b29c <xTaskRemoveFromEventList>
 80198a2:	4603      	mov	r3, r0
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d012      	beq.n	80198ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80198a8:	4b0c      	ldr	r3, [pc, #48]	; (80198dc <xQueueGenericReset+0xcc>)
 80198aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80198ae:	601a      	str	r2, [r3, #0]
 80198b0:	f3bf 8f4f 	dsb	sy
 80198b4:	f3bf 8f6f 	isb	sy
 80198b8:	e009      	b.n	80198ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	3310      	adds	r3, #16
 80198be:	4618      	mov	r0, r3
 80198c0:	f7ff fef2 	bl	80196a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	3324      	adds	r3, #36	; 0x24
 80198c8:	4618      	mov	r0, r3
 80198ca:	f7ff feed 	bl	80196a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80198ce:	f002 fd29 	bl	801c324 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80198d2:	2301      	movs	r3, #1
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3710      	adds	r7, #16
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd80      	pop	{r7, pc}
 80198dc:	e000ed04 	.word	0xe000ed04

080198e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b08e      	sub	sp, #56	; 0x38
 80198e4:	af02      	add	r7, sp, #8
 80198e6:	60f8      	str	r0, [r7, #12]
 80198e8:	60b9      	str	r1, [r7, #8]
 80198ea:	607a      	str	r2, [r7, #4]
 80198ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10a      	bne.n	801990a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80198f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198f8:	f383 8811 	msr	BASEPRI, r3
 80198fc:	f3bf 8f6f 	isb	sy
 8019900:	f3bf 8f4f 	dsb	sy
 8019904:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019906:	bf00      	nop
 8019908:	e7fe      	b.n	8019908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	2b00      	cmp	r3, #0
 801990e:	d10a      	bne.n	8019926 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8019910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019914:	f383 8811 	msr	BASEPRI, r3
 8019918:	f3bf 8f6f 	isb	sy
 801991c:	f3bf 8f4f 	dsb	sy
 8019920:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019922:	bf00      	nop
 8019924:	e7fe      	b.n	8019924 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	2b00      	cmp	r3, #0
 801992a:	d002      	beq.n	8019932 <xQueueGenericCreateStatic+0x52>
 801992c:	68bb      	ldr	r3, [r7, #8]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d001      	beq.n	8019936 <xQueueGenericCreateStatic+0x56>
 8019932:	2301      	movs	r3, #1
 8019934:	e000      	b.n	8019938 <xQueueGenericCreateStatic+0x58>
 8019936:	2300      	movs	r3, #0
 8019938:	2b00      	cmp	r3, #0
 801993a:	d10a      	bne.n	8019952 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019940:	f383 8811 	msr	BASEPRI, r3
 8019944:	f3bf 8f6f 	isb	sy
 8019948:	f3bf 8f4f 	dsb	sy
 801994c:	623b      	str	r3, [r7, #32]
}
 801994e:	bf00      	nop
 8019950:	e7fe      	b.n	8019950 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	2b00      	cmp	r3, #0
 8019956:	d102      	bne.n	801995e <xQueueGenericCreateStatic+0x7e>
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d101      	bne.n	8019962 <xQueueGenericCreateStatic+0x82>
 801995e:	2301      	movs	r3, #1
 8019960:	e000      	b.n	8019964 <xQueueGenericCreateStatic+0x84>
 8019962:	2300      	movs	r3, #0
 8019964:	2b00      	cmp	r3, #0
 8019966:	d10a      	bne.n	801997e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8019968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801996c:	f383 8811 	msr	BASEPRI, r3
 8019970:	f3bf 8f6f 	isb	sy
 8019974:	f3bf 8f4f 	dsb	sy
 8019978:	61fb      	str	r3, [r7, #28]
}
 801997a:	bf00      	nop
 801997c:	e7fe      	b.n	801997c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801997e:	2350      	movs	r3, #80	; 0x50
 8019980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019982:	697b      	ldr	r3, [r7, #20]
 8019984:	2b50      	cmp	r3, #80	; 0x50
 8019986:	d00a      	beq.n	801999e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8019988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801998c:	f383 8811 	msr	BASEPRI, r3
 8019990:	f3bf 8f6f 	isb	sy
 8019994:	f3bf 8f4f 	dsb	sy
 8019998:	61bb      	str	r3, [r7, #24]
}
 801999a:	bf00      	nop
 801999c:	e7fe      	b.n	801999c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801999e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80199a0:	683b      	ldr	r3, [r7, #0]
 80199a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80199a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d00d      	beq.n	80199c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80199aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ac:	2201      	movs	r2, #1
 80199ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80199b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80199b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b8:	9300      	str	r3, [sp, #0]
 80199ba:	4613      	mov	r3, r2
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	68b9      	ldr	r1, [r7, #8]
 80199c0:	68f8      	ldr	r0, [r7, #12]
 80199c2:	f000 f83f 	bl	8019a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80199c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80199c8:	4618      	mov	r0, r3
 80199ca:	3730      	adds	r7, #48	; 0x30
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd80      	pop	{r7, pc}

080199d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b08a      	sub	sp, #40	; 0x28
 80199d4:	af02      	add	r7, sp, #8
 80199d6:	60f8      	str	r0, [r7, #12]
 80199d8:	60b9      	str	r1, [r7, #8]
 80199da:	4613      	mov	r3, r2
 80199dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d10a      	bne.n	80199fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80199e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199e8:	f383 8811 	msr	BASEPRI, r3
 80199ec:	f3bf 8f6f 	isb	sy
 80199f0:	f3bf 8f4f 	dsb	sy
 80199f4:	613b      	str	r3, [r7, #16]
}
 80199f6:	bf00      	nop
 80199f8:	e7fe      	b.n	80199f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	68ba      	ldr	r2, [r7, #8]
 80199fe:	fb02 f303 	mul.w	r3, r2, r3
 8019a02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019a04:	69fb      	ldr	r3, [r7, #28]
 8019a06:	3350      	adds	r3, #80	; 0x50
 8019a08:	4618      	mov	r0, r3
 8019a0a:	f002 fd7d 	bl	801c508 <pvPortMalloc>
 8019a0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8019a10:	69bb      	ldr	r3, [r7, #24]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d011      	beq.n	8019a3a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	3350      	adds	r3, #80	; 0x50
 8019a1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	2200      	movs	r2, #0
 8019a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019a28:	79fa      	ldrb	r2, [r7, #7]
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	9300      	str	r3, [sp, #0]
 8019a2e:	4613      	mov	r3, r2
 8019a30:	697a      	ldr	r2, [r7, #20]
 8019a32:	68b9      	ldr	r1, [r7, #8]
 8019a34:	68f8      	ldr	r0, [r7, #12]
 8019a36:	f000 f805 	bl	8019a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8019a3a:	69bb      	ldr	r3, [r7, #24]
	}
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	3720      	adds	r7, #32
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}

08019a44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b084      	sub	sp, #16
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	60f8      	str	r0, [r7, #12]
 8019a4c:	60b9      	str	r1, [r7, #8]
 8019a4e:	607a      	str	r2, [r7, #4]
 8019a50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8019a52:	68bb      	ldr	r3, [r7, #8]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d103      	bne.n	8019a60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8019a58:	69bb      	ldr	r3, [r7, #24]
 8019a5a:	69ba      	ldr	r2, [r7, #24]
 8019a5c:	601a      	str	r2, [r3, #0]
 8019a5e:	e002      	b.n	8019a66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8019a60:	69bb      	ldr	r3, [r7, #24]
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	68fa      	ldr	r2, [r7, #12]
 8019a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019a6c:	69bb      	ldr	r3, [r7, #24]
 8019a6e:	68ba      	ldr	r2, [r7, #8]
 8019a70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019a72:	2101      	movs	r1, #1
 8019a74:	69b8      	ldr	r0, [r7, #24]
 8019a76:	f7ff fecb 	bl	8019810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8019a7a:	69bb      	ldr	r3, [r7, #24]
 8019a7c:	78fa      	ldrb	r2, [r7, #3]
 8019a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019a82:	bf00      	nop
 8019a84:	3710      	adds	r7, #16
 8019a86:	46bd      	mov	sp, r7
 8019a88:	bd80      	pop	{r7, pc}

08019a8a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8019a8a:	b580      	push	{r7, lr}
 8019a8c:	b08a      	sub	sp, #40	; 0x28
 8019a8e:	af02      	add	r7, sp, #8
 8019a90:	60f8      	str	r0, [r7, #12]
 8019a92:	60b9      	str	r1, [r7, #8]
 8019a94:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d10a      	bne.n	8019ab2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8019a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aa0:	f383 8811 	msr	BASEPRI, r3
 8019aa4:	f3bf 8f6f 	isb	sy
 8019aa8:	f3bf 8f4f 	dsb	sy
 8019aac:	61bb      	str	r3, [r7, #24]
}
 8019aae:	bf00      	nop
 8019ab0:	e7fe      	b.n	8019ab0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019ab2:	68ba      	ldr	r2, [r7, #8]
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d90a      	bls.n	8019ad0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8019aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019abe:	f383 8811 	msr	BASEPRI, r3
 8019ac2:	f3bf 8f6f 	isb	sy
 8019ac6:	f3bf 8f4f 	dsb	sy
 8019aca:	617b      	str	r3, [r7, #20]
}
 8019acc:	bf00      	nop
 8019ace:	e7fe      	b.n	8019ace <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019ad0:	2302      	movs	r3, #2
 8019ad2:	9300      	str	r3, [sp, #0]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	2100      	movs	r1, #0
 8019ada:	68f8      	ldr	r0, [r7, #12]
 8019adc:	f7ff ff00 	bl	80198e0 <xQueueGenericCreateStatic>
 8019ae0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d002      	beq.n	8019aee <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8019ae8:	69fb      	ldr	r3, [r7, #28]
 8019aea:	68ba      	ldr	r2, [r7, #8]
 8019aec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019aee:	69fb      	ldr	r3, [r7, #28]
	}
 8019af0:	4618      	mov	r0, r3
 8019af2:	3720      	adds	r7, #32
 8019af4:	46bd      	mov	sp, r7
 8019af6:	bd80      	pop	{r7, pc}

08019af8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b086      	sub	sp, #24
 8019afc:	af00      	add	r7, sp, #0
 8019afe:	6078      	str	r0, [r7, #4]
 8019b00:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d10a      	bne.n	8019b1e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8019b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b0c:	f383 8811 	msr	BASEPRI, r3
 8019b10:	f3bf 8f6f 	isb	sy
 8019b14:	f3bf 8f4f 	dsb	sy
 8019b18:	613b      	str	r3, [r7, #16]
}
 8019b1a:	bf00      	nop
 8019b1c:	e7fe      	b.n	8019b1c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8019b1e:	683a      	ldr	r2, [r7, #0]
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	429a      	cmp	r2, r3
 8019b24:	d90a      	bls.n	8019b3c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8019b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b2a:	f383 8811 	msr	BASEPRI, r3
 8019b2e:	f3bf 8f6f 	isb	sy
 8019b32:	f3bf 8f4f 	dsb	sy
 8019b36:	60fb      	str	r3, [r7, #12]
}
 8019b38:	bf00      	nop
 8019b3a:	e7fe      	b.n	8019b3a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8019b3c:	2202      	movs	r2, #2
 8019b3e:	2100      	movs	r1, #0
 8019b40:	6878      	ldr	r0, [r7, #4]
 8019b42:	f7ff ff45 	bl	80199d0 <xQueueGenericCreate>
 8019b46:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8019b48:	697b      	ldr	r3, [r7, #20]
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d002      	beq.n	8019b54 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8019b4e:	697b      	ldr	r3, [r7, #20]
 8019b50:	683a      	ldr	r2, [r7, #0]
 8019b52:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8019b54:	697b      	ldr	r3, [r7, #20]
	}
 8019b56:	4618      	mov	r0, r3
 8019b58:	3718      	adds	r7, #24
 8019b5a:	46bd      	mov	sp, r7
 8019b5c:	bd80      	pop	{r7, pc}
	...

08019b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b08e      	sub	sp, #56	; 0x38
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
 8019b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d10a      	bne.n	8019b92 <xQueueGenericSend+0x32>
	__asm volatile
 8019b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b80:	f383 8811 	msr	BASEPRI, r3
 8019b84:	f3bf 8f6f 	isb	sy
 8019b88:	f3bf 8f4f 	dsb	sy
 8019b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019b8e:	bf00      	nop
 8019b90:	e7fe      	b.n	8019b90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019b92:	68bb      	ldr	r3, [r7, #8]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d103      	bne.n	8019ba0 <xQueueGenericSend+0x40>
 8019b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d101      	bne.n	8019ba4 <xQueueGenericSend+0x44>
 8019ba0:	2301      	movs	r3, #1
 8019ba2:	e000      	b.n	8019ba6 <xQueueGenericSend+0x46>
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d10a      	bne.n	8019bc0 <xQueueGenericSend+0x60>
	__asm volatile
 8019baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bae:	f383 8811 	msr	BASEPRI, r3
 8019bb2:	f3bf 8f6f 	isb	sy
 8019bb6:	f3bf 8f4f 	dsb	sy
 8019bba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019bbc:	bf00      	nop
 8019bbe:	e7fe      	b.n	8019bbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019bc0:	683b      	ldr	r3, [r7, #0]
 8019bc2:	2b02      	cmp	r3, #2
 8019bc4:	d103      	bne.n	8019bce <xQueueGenericSend+0x6e>
 8019bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bca:	2b01      	cmp	r3, #1
 8019bcc:	d101      	bne.n	8019bd2 <xQueueGenericSend+0x72>
 8019bce:	2301      	movs	r3, #1
 8019bd0:	e000      	b.n	8019bd4 <xQueueGenericSend+0x74>
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d10a      	bne.n	8019bee <xQueueGenericSend+0x8e>
	__asm volatile
 8019bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bdc:	f383 8811 	msr	BASEPRI, r3
 8019be0:	f3bf 8f6f 	isb	sy
 8019be4:	f3bf 8f4f 	dsb	sy
 8019be8:	623b      	str	r3, [r7, #32]
}
 8019bea:	bf00      	nop
 8019bec:	e7fe      	b.n	8019bec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019bee:	f001 fd13 	bl	801b618 <xTaskGetSchedulerState>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d102      	bne.n	8019bfe <xQueueGenericSend+0x9e>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d101      	bne.n	8019c02 <xQueueGenericSend+0xa2>
 8019bfe:	2301      	movs	r3, #1
 8019c00:	e000      	b.n	8019c04 <xQueueGenericSend+0xa4>
 8019c02:	2300      	movs	r3, #0
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d10a      	bne.n	8019c1e <xQueueGenericSend+0xbe>
	__asm volatile
 8019c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c0c:	f383 8811 	msr	BASEPRI, r3
 8019c10:	f3bf 8f6f 	isb	sy
 8019c14:	f3bf 8f4f 	dsb	sy
 8019c18:	61fb      	str	r3, [r7, #28]
}
 8019c1a:	bf00      	nop
 8019c1c:	e7fe      	b.n	8019c1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019c1e:	f002 fb51 	bl	801c2c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c2a:	429a      	cmp	r2, r3
 8019c2c:	d302      	bcc.n	8019c34 <xQueueGenericSend+0xd4>
 8019c2e:	683b      	ldr	r3, [r7, #0]
 8019c30:	2b02      	cmp	r3, #2
 8019c32:	d129      	bne.n	8019c88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019c34:	683a      	ldr	r2, [r7, #0]
 8019c36:	68b9      	ldr	r1, [r7, #8]
 8019c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019c3a:	f000 fc5e 	bl	801a4fa <prvCopyDataToQueue>
 8019c3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d010      	beq.n	8019c6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019c4a:	3324      	adds	r3, #36	; 0x24
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f001 fb25 	bl	801b29c <xTaskRemoveFromEventList>
 8019c52:	4603      	mov	r3, r0
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d013      	beq.n	8019c80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019c58:	4b3f      	ldr	r3, [pc, #252]	; (8019d58 <xQueueGenericSend+0x1f8>)
 8019c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c5e:	601a      	str	r2, [r3, #0]
 8019c60:	f3bf 8f4f 	dsb	sy
 8019c64:	f3bf 8f6f 	isb	sy
 8019c68:	e00a      	b.n	8019c80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d007      	beq.n	8019c80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019c70:	4b39      	ldr	r3, [pc, #228]	; (8019d58 <xQueueGenericSend+0x1f8>)
 8019c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c76:	601a      	str	r2, [r3, #0]
 8019c78:	f3bf 8f4f 	dsb	sy
 8019c7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019c80:	f002 fb50 	bl	801c324 <vPortExitCritical>
				return pdPASS;
 8019c84:	2301      	movs	r3, #1
 8019c86:	e063      	b.n	8019d50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d103      	bne.n	8019c96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019c8e:	f002 fb49 	bl	801c324 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019c92:	2300      	movs	r3, #0
 8019c94:	e05c      	b.n	8019d50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d106      	bne.n	8019caa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019c9c:	f107 0314 	add.w	r3, r7, #20
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	f001 fb5f 	bl	801b364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019caa:	f002 fb3b 	bl	801c324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019cae:	f001 f8d1 	bl	801ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019cb2:	f002 fb07 	bl	801c2c4 <vPortEnterCritical>
 8019cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019cbc:	b25b      	sxtb	r3, r3
 8019cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019cc2:	d103      	bne.n	8019ccc <xQueueGenericSend+0x16c>
 8019cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019cd2:	b25b      	sxtb	r3, r3
 8019cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019cd8:	d103      	bne.n	8019ce2 <xQueueGenericSend+0x182>
 8019cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cdc:	2200      	movs	r2, #0
 8019cde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019ce2:	f002 fb1f 	bl	801c324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019ce6:	1d3a      	adds	r2, r7, #4
 8019ce8:	f107 0314 	add.w	r3, r7, #20
 8019cec:	4611      	mov	r1, r2
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f001 fb4e 	bl	801b390 <xTaskCheckForTimeOut>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d124      	bne.n	8019d44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8019cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019cfc:	f000 fcf5 	bl	801a6ea <prvIsQueueFull>
 8019d00:	4603      	mov	r3, r0
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d018      	beq.n	8019d38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8019d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d08:	3310      	adds	r3, #16
 8019d0a:	687a      	ldr	r2, [r7, #4]
 8019d0c:	4611      	mov	r1, r2
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f001 fa74 	bl	801b1fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8019d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d16:	f000 fc80 	bl	801a61a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8019d1a:	f001 f8a9 	bl	801ae70 <xTaskResumeAll>
 8019d1e:	4603      	mov	r3, r0
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	f47f af7c 	bne.w	8019c1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8019d26:	4b0c      	ldr	r3, [pc, #48]	; (8019d58 <xQueueGenericSend+0x1f8>)
 8019d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019d2c:	601a      	str	r2, [r3, #0]
 8019d2e:	f3bf 8f4f 	dsb	sy
 8019d32:	f3bf 8f6f 	isb	sy
 8019d36:	e772      	b.n	8019c1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d3a:	f000 fc6e 	bl	801a61a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019d3e:	f001 f897 	bl	801ae70 <xTaskResumeAll>
 8019d42:	e76c      	b.n	8019c1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d46:	f000 fc68 	bl	801a61a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019d4a:	f001 f891 	bl	801ae70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019d4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	3738      	adds	r7, #56	; 0x38
 8019d54:	46bd      	mov	sp, r7
 8019d56:	bd80      	pop	{r7, pc}
 8019d58:	e000ed04 	.word	0xe000ed04

08019d5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019d5c:	b580      	push	{r7, lr}
 8019d5e:	b090      	sub	sp, #64	; 0x40
 8019d60:	af00      	add	r7, sp, #0
 8019d62:	60f8      	str	r0, [r7, #12]
 8019d64:	60b9      	str	r1, [r7, #8]
 8019d66:	607a      	str	r2, [r7, #4]
 8019d68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8019d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d10a      	bne.n	8019d8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d78:	f383 8811 	msr	BASEPRI, r3
 8019d7c:	f3bf 8f6f 	isb	sy
 8019d80:	f3bf 8f4f 	dsb	sy
 8019d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019d86:	bf00      	nop
 8019d88:	e7fe      	b.n	8019d88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d103      	bne.n	8019d98 <xQueueGenericSendFromISR+0x3c>
 8019d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d101      	bne.n	8019d9c <xQueueGenericSendFromISR+0x40>
 8019d98:	2301      	movs	r3, #1
 8019d9a:	e000      	b.n	8019d9e <xQueueGenericSendFromISR+0x42>
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d10a      	bne.n	8019db8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019da6:	f383 8811 	msr	BASEPRI, r3
 8019daa:	f3bf 8f6f 	isb	sy
 8019dae:	f3bf 8f4f 	dsb	sy
 8019db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019db4:	bf00      	nop
 8019db6:	e7fe      	b.n	8019db6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	2b02      	cmp	r3, #2
 8019dbc:	d103      	bne.n	8019dc6 <xQueueGenericSendFromISR+0x6a>
 8019dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dc2:	2b01      	cmp	r3, #1
 8019dc4:	d101      	bne.n	8019dca <xQueueGenericSendFromISR+0x6e>
 8019dc6:	2301      	movs	r3, #1
 8019dc8:	e000      	b.n	8019dcc <xQueueGenericSendFromISR+0x70>
 8019dca:	2300      	movs	r3, #0
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d10a      	bne.n	8019de6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dd4:	f383 8811 	msr	BASEPRI, r3
 8019dd8:	f3bf 8f6f 	isb	sy
 8019ddc:	f3bf 8f4f 	dsb	sy
 8019de0:	623b      	str	r3, [r7, #32]
}
 8019de2:	bf00      	nop
 8019de4:	e7fe      	b.n	8019de4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019de6:	f002 fb4f 	bl	801c488 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019dea:	f3ef 8211 	mrs	r2, BASEPRI
 8019dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df2:	f383 8811 	msr	BASEPRI, r3
 8019df6:	f3bf 8f6f 	isb	sy
 8019dfa:	f3bf 8f4f 	dsb	sy
 8019dfe:	61fa      	str	r2, [r7, #28]
 8019e00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019e02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019e04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e0e:	429a      	cmp	r2, r3
 8019e10:	d302      	bcc.n	8019e18 <xQueueGenericSendFromISR+0xbc>
 8019e12:	683b      	ldr	r3, [r7, #0]
 8019e14:	2b02      	cmp	r3, #2
 8019e16:	d12f      	bne.n	8019e78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019e28:	683a      	ldr	r2, [r7, #0]
 8019e2a:	68b9      	ldr	r1, [r7, #8]
 8019e2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019e2e:	f000 fb64 	bl	801a4fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019e32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8019e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019e3a:	d112      	bne.n	8019e62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d016      	beq.n	8019e72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e46:	3324      	adds	r3, #36	; 0x24
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f001 fa27 	bl	801b29c <xTaskRemoveFromEventList>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d00e      	beq.n	8019e72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d00b      	beq.n	8019e72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	2201      	movs	r2, #1
 8019e5e:	601a      	str	r2, [r3, #0]
 8019e60:	e007      	b.n	8019e72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019e62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019e66:	3301      	adds	r3, #1
 8019e68:	b2db      	uxtb	r3, r3
 8019e6a:	b25a      	sxtb	r2, r3
 8019e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019e72:	2301      	movs	r3, #1
 8019e74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8019e76:	e001      	b.n	8019e7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019e78:	2300      	movs	r3, #0
 8019e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019e86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3740      	adds	r7, #64	; 0x40
 8019e8e:	46bd      	mov	sp, r7
 8019e90:	bd80      	pop	{r7, pc}

08019e92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019e92:	b580      	push	{r7, lr}
 8019e94:	b08e      	sub	sp, #56	; 0x38
 8019e96:	af00      	add	r7, sp, #0
 8019e98:	6078      	str	r0, [r7, #4]
 8019e9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8019ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d10a      	bne.n	8019ebc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8019ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eaa:	f383 8811 	msr	BASEPRI, r3
 8019eae:	f3bf 8f6f 	isb	sy
 8019eb2:	f3bf 8f4f 	dsb	sy
 8019eb6:	623b      	str	r3, [r7, #32]
}
 8019eb8:	bf00      	nop
 8019eba:	e7fe      	b.n	8019eba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8019ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d00a      	beq.n	8019eda <xQueueGiveFromISR+0x48>
	__asm volatile
 8019ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ec8:	f383 8811 	msr	BASEPRI, r3
 8019ecc:	f3bf 8f6f 	isb	sy
 8019ed0:	f3bf 8f4f 	dsb	sy
 8019ed4:	61fb      	str	r3, [r7, #28]
}
 8019ed6:	bf00      	nop
 8019ed8:	e7fe      	b.n	8019ed8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8019eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d103      	bne.n	8019eea <xQueueGiveFromISR+0x58>
 8019ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ee4:	689b      	ldr	r3, [r3, #8]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d101      	bne.n	8019eee <xQueueGiveFromISR+0x5c>
 8019eea:	2301      	movs	r3, #1
 8019eec:	e000      	b.n	8019ef0 <xQueueGiveFromISR+0x5e>
 8019eee:	2300      	movs	r3, #0
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	d10a      	bne.n	8019f0a <xQueueGiveFromISR+0x78>
	__asm volatile
 8019ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ef8:	f383 8811 	msr	BASEPRI, r3
 8019efc:	f3bf 8f6f 	isb	sy
 8019f00:	f3bf 8f4f 	dsb	sy
 8019f04:	61bb      	str	r3, [r7, #24]
}
 8019f06:	bf00      	nop
 8019f08:	e7fe      	b.n	8019f08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019f0a:	f002 fabd 	bl	801c488 <vPortValidateInterruptPriority>
	__asm volatile
 8019f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8019f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f16:	f383 8811 	msr	BASEPRI, r3
 8019f1a:	f3bf 8f6f 	isb	sy
 8019f1e:	f3bf 8f4f 	dsb	sy
 8019f22:	617a      	str	r2, [r7, #20]
 8019f24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8019f26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8019f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f36:	429a      	cmp	r2, r3
 8019f38:	d22b      	bcs.n	8019f92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f46:	1c5a      	adds	r2, r3, #1
 8019f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019f4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019f54:	d112      	bne.n	8019f7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d016      	beq.n	8019f8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f60:	3324      	adds	r3, #36	; 0x24
 8019f62:	4618      	mov	r0, r3
 8019f64:	f001 f99a 	bl	801b29c <xTaskRemoveFromEventList>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d00e      	beq.n	8019f8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d00b      	beq.n	8019f8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	2201      	movs	r2, #1
 8019f78:	601a      	str	r2, [r3, #0]
 8019f7a:	e007      	b.n	8019f8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f80:	3301      	adds	r3, #1
 8019f82:	b2db      	uxtb	r3, r3
 8019f84:	b25a      	sxtb	r2, r3
 8019f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019f8c:	2301      	movs	r3, #1
 8019f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8019f90:	e001      	b.n	8019f96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019f92:	2300      	movs	r3, #0
 8019f94:	637b      	str	r3, [r7, #52]	; 0x34
 8019f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	f383 8811 	msr	BASEPRI, r3
}
 8019fa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	3738      	adds	r7, #56	; 0x38
 8019fa8:	46bd      	mov	sp, r7
 8019faa:	bd80      	pop	{r7, pc}

08019fac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019fac:	b580      	push	{r7, lr}
 8019fae:	b08c      	sub	sp, #48	; 0x30
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	60f8      	str	r0, [r7, #12]
 8019fb4:	60b9      	str	r1, [r7, #8]
 8019fb6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019fb8:	2300      	movs	r3, #0
 8019fba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d10a      	bne.n	8019fdc <xQueueReceive+0x30>
	__asm volatile
 8019fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019fca:	f383 8811 	msr	BASEPRI, r3
 8019fce:	f3bf 8f6f 	isb	sy
 8019fd2:	f3bf 8f4f 	dsb	sy
 8019fd6:	623b      	str	r3, [r7, #32]
}
 8019fd8:	bf00      	nop
 8019fda:	e7fe      	b.n	8019fda <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d103      	bne.n	8019fea <xQueueReceive+0x3e>
 8019fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d101      	bne.n	8019fee <xQueueReceive+0x42>
 8019fea:	2301      	movs	r3, #1
 8019fec:	e000      	b.n	8019ff0 <xQueueReceive+0x44>
 8019fee:	2300      	movs	r3, #0
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d10a      	bne.n	801a00a <xQueueReceive+0x5e>
	__asm volatile
 8019ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ff8:	f383 8811 	msr	BASEPRI, r3
 8019ffc:	f3bf 8f6f 	isb	sy
 801a000:	f3bf 8f4f 	dsb	sy
 801a004:	61fb      	str	r3, [r7, #28]
}
 801a006:	bf00      	nop
 801a008:	e7fe      	b.n	801a008 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a00a:	f001 fb05 	bl	801b618 <xTaskGetSchedulerState>
 801a00e:	4603      	mov	r3, r0
 801a010:	2b00      	cmp	r3, #0
 801a012:	d102      	bne.n	801a01a <xQueueReceive+0x6e>
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d101      	bne.n	801a01e <xQueueReceive+0x72>
 801a01a:	2301      	movs	r3, #1
 801a01c:	e000      	b.n	801a020 <xQueueReceive+0x74>
 801a01e:	2300      	movs	r3, #0
 801a020:	2b00      	cmp	r3, #0
 801a022:	d10a      	bne.n	801a03a <xQueueReceive+0x8e>
	__asm volatile
 801a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a028:	f383 8811 	msr	BASEPRI, r3
 801a02c:	f3bf 8f6f 	isb	sy
 801a030:	f3bf 8f4f 	dsb	sy
 801a034:	61bb      	str	r3, [r7, #24]
}
 801a036:	bf00      	nop
 801a038:	e7fe      	b.n	801a038 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a03a:	f002 f943 	bl	801c2c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a042:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a046:	2b00      	cmp	r3, #0
 801a048:	d01f      	beq.n	801a08a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a04a:	68b9      	ldr	r1, [r7, #8]
 801a04c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a04e:	f000 fabe 	bl	801a5ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a054:	1e5a      	subs	r2, r3, #1
 801a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a058:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05c:	691b      	ldr	r3, [r3, #16]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d00f      	beq.n	801a082 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a064:	3310      	adds	r3, #16
 801a066:	4618      	mov	r0, r3
 801a068:	f001 f918 	bl	801b29c <xTaskRemoveFromEventList>
 801a06c:	4603      	mov	r3, r0
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d007      	beq.n	801a082 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a072:	4b3d      	ldr	r3, [pc, #244]	; (801a168 <xQueueReceive+0x1bc>)
 801a074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a078:	601a      	str	r2, [r3, #0]
 801a07a:	f3bf 8f4f 	dsb	sy
 801a07e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a082:	f002 f94f 	bl	801c324 <vPortExitCritical>
				return pdPASS;
 801a086:	2301      	movs	r3, #1
 801a088:	e069      	b.n	801a15e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d103      	bne.n	801a098 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801a090:	f002 f948 	bl	801c324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a094:	2300      	movs	r3, #0
 801a096:	e062      	b.n	801a15e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d106      	bne.n	801a0ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a09e:	f107 0310 	add.w	r3, r7, #16
 801a0a2:	4618      	mov	r0, r3
 801a0a4:	f001 f95e 	bl	801b364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a0ac:	f002 f93a 	bl	801c324 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a0b0:	f000 fed0 	bl	801ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a0b4:	f002 f906 	bl	801c2c4 <vPortEnterCritical>
 801a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a0be:	b25b      	sxtb	r3, r3
 801a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a0c4:	d103      	bne.n	801a0ce <xQueueReceive+0x122>
 801a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a0d4:	b25b      	sxtb	r3, r3
 801a0d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a0da:	d103      	bne.n	801a0e4 <xQueueReceive+0x138>
 801a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0de:	2200      	movs	r2, #0
 801a0e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0e4:	f002 f91e 	bl	801c324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a0e8:	1d3a      	adds	r2, r7, #4
 801a0ea:	f107 0310 	add.w	r3, r7, #16
 801a0ee:	4611      	mov	r1, r2
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f001 f94d 	bl	801b390 <xTaskCheckForTimeOut>
 801a0f6:	4603      	mov	r3, r0
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d123      	bne.n	801a144 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0fe:	f000 fade 	bl	801a6be <prvIsQueueEmpty>
 801a102:	4603      	mov	r3, r0
 801a104:	2b00      	cmp	r3, #0
 801a106:	d017      	beq.n	801a138 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a10a:	3324      	adds	r3, #36	; 0x24
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	4611      	mov	r1, r2
 801a110:	4618      	mov	r0, r3
 801a112:	f001 f873 	bl	801b1fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a118:	f000 fa7f 	bl	801a61a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a11c:	f000 fea8 	bl	801ae70 <xTaskResumeAll>
 801a120:	4603      	mov	r3, r0
 801a122:	2b00      	cmp	r3, #0
 801a124:	d189      	bne.n	801a03a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801a126:	4b10      	ldr	r3, [pc, #64]	; (801a168 <xQueueReceive+0x1bc>)
 801a128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a12c:	601a      	str	r2, [r3, #0]
 801a12e:	f3bf 8f4f 	dsb	sy
 801a132:	f3bf 8f6f 	isb	sy
 801a136:	e780      	b.n	801a03a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801a138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a13a:	f000 fa6e 	bl	801a61a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a13e:	f000 fe97 	bl	801ae70 <xTaskResumeAll>
 801a142:	e77a      	b.n	801a03a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801a144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a146:	f000 fa68 	bl	801a61a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a14a:	f000 fe91 	bl	801ae70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a14e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a150:	f000 fab5 	bl	801a6be <prvIsQueueEmpty>
 801a154:	4603      	mov	r3, r0
 801a156:	2b00      	cmp	r3, #0
 801a158:	f43f af6f 	beq.w	801a03a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a15c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a15e:	4618      	mov	r0, r3
 801a160:	3730      	adds	r7, #48	; 0x30
 801a162:	46bd      	mov	sp, r7
 801a164:	bd80      	pop	{r7, pc}
 801a166:	bf00      	nop
 801a168:	e000ed04 	.word	0xe000ed04

0801a16c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b08e      	sub	sp, #56	; 0x38
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
 801a174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801a176:	2300      	movs	r3, #0
 801a178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801a17e:	2300      	movs	r3, #0
 801a180:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a184:	2b00      	cmp	r3, #0
 801a186:	d10a      	bne.n	801a19e <xQueueSemaphoreTake+0x32>
	__asm volatile
 801a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a18c:	f383 8811 	msr	BASEPRI, r3
 801a190:	f3bf 8f6f 	isb	sy
 801a194:	f3bf 8f4f 	dsb	sy
 801a198:	623b      	str	r3, [r7, #32]
}
 801a19a:	bf00      	nop
 801a19c:	e7fe      	b.n	801a19c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801a19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d00a      	beq.n	801a1bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 801a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1aa:	f383 8811 	msr	BASEPRI, r3
 801a1ae:	f3bf 8f6f 	isb	sy
 801a1b2:	f3bf 8f4f 	dsb	sy
 801a1b6:	61fb      	str	r3, [r7, #28]
}
 801a1b8:	bf00      	nop
 801a1ba:	e7fe      	b.n	801a1ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801a1bc:	f001 fa2c 	bl	801b618 <xTaskGetSchedulerState>
 801a1c0:	4603      	mov	r3, r0
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d102      	bne.n	801a1cc <xQueueSemaphoreTake+0x60>
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d101      	bne.n	801a1d0 <xQueueSemaphoreTake+0x64>
 801a1cc:	2301      	movs	r3, #1
 801a1ce:	e000      	b.n	801a1d2 <xQueueSemaphoreTake+0x66>
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d10a      	bne.n	801a1ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 801a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1da:	f383 8811 	msr	BASEPRI, r3
 801a1de:	f3bf 8f6f 	isb	sy
 801a1e2:	f3bf 8f4f 	dsb	sy
 801a1e6:	61bb      	str	r3, [r7, #24]
}
 801a1e8:	bf00      	nop
 801a1ea:	e7fe      	b.n	801a1ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801a1ec:	f002 f86a 	bl	801c2c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801a1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d024      	beq.n	801a246 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1fe:	1e5a      	subs	r2, r3, #1
 801a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a202:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d104      	bne.n	801a216 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801a20c:	f001 fb7a 	bl	801b904 <pvTaskIncrementMutexHeldCount>
 801a210:	4602      	mov	r2, r0
 801a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a214:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a218:	691b      	ldr	r3, [r3, #16]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d00f      	beq.n	801a23e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a220:	3310      	adds	r3, #16
 801a222:	4618      	mov	r0, r3
 801a224:	f001 f83a 	bl	801b29c <xTaskRemoveFromEventList>
 801a228:	4603      	mov	r3, r0
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d007      	beq.n	801a23e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801a22e:	4b54      	ldr	r3, [pc, #336]	; (801a380 <xQueueSemaphoreTake+0x214>)
 801a230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a234:	601a      	str	r2, [r3, #0]
 801a236:	f3bf 8f4f 	dsb	sy
 801a23a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801a23e:	f002 f871 	bl	801c324 <vPortExitCritical>
				return pdPASS;
 801a242:	2301      	movs	r3, #1
 801a244:	e097      	b.n	801a376 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801a246:	683b      	ldr	r3, [r7, #0]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d111      	bne.n	801a270 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801a24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d00a      	beq.n	801a268 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a256:	f383 8811 	msr	BASEPRI, r3
 801a25a:	f3bf 8f6f 	isb	sy
 801a25e:	f3bf 8f4f 	dsb	sy
 801a262:	617b      	str	r3, [r7, #20]
}
 801a264:	bf00      	nop
 801a266:	e7fe      	b.n	801a266 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801a268:	f002 f85c 	bl	801c324 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801a26c:	2300      	movs	r3, #0
 801a26e:	e082      	b.n	801a376 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a272:	2b00      	cmp	r3, #0
 801a274:	d106      	bne.n	801a284 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801a276:	f107 030c 	add.w	r3, r7, #12
 801a27a:	4618      	mov	r0, r3
 801a27c:	f001 f872 	bl	801b364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801a280:	2301      	movs	r3, #1
 801a282:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801a284:	f002 f84e 	bl	801c324 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801a288:	f000 fde4 	bl	801ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801a28c:	f002 f81a 	bl	801c2c4 <vPortEnterCritical>
 801a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a296:	b25b      	sxtb	r3, r3
 801a298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a29c:	d103      	bne.n	801a2a6 <xQueueSemaphoreTake+0x13a>
 801a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a2ac:	b25b      	sxtb	r3, r3
 801a2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a2b2:	d103      	bne.n	801a2bc <xQueueSemaphoreTake+0x150>
 801a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b6:	2200      	movs	r2, #0
 801a2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a2bc:	f002 f832 	bl	801c324 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801a2c0:	463a      	mov	r2, r7
 801a2c2:	f107 030c 	add.w	r3, r7, #12
 801a2c6:	4611      	mov	r1, r2
 801a2c8:	4618      	mov	r0, r3
 801a2ca:	f001 f861 	bl	801b390 <xTaskCheckForTimeOut>
 801a2ce:	4603      	mov	r3, r0
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d132      	bne.n	801a33a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a2d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a2d6:	f000 f9f2 	bl	801a6be <prvIsQueueEmpty>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d026      	beq.n	801a32e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d109      	bne.n	801a2fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801a2e8:	f001 ffec 	bl	801c2c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ee:	689b      	ldr	r3, [r3, #8]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f001 f9af 	bl	801b654 <xTaskPriorityInherit>
 801a2f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801a2f8:	f002 f814 	bl	801c324 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fe:	3324      	adds	r3, #36	; 0x24
 801a300:	683a      	ldr	r2, [r7, #0]
 801a302:	4611      	mov	r1, r2
 801a304:	4618      	mov	r0, r3
 801a306:	f000 ff79 	bl	801b1fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801a30a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a30c:	f000 f985 	bl	801a61a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801a310:	f000 fdae 	bl	801ae70 <xTaskResumeAll>
 801a314:	4603      	mov	r3, r0
 801a316:	2b00      	cmp	r3, #0
 801a318:	f47f af68 	bne.w	801a1ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801a31c:	4b18      	ldr	r3, [pc, #96]	; (801a380 <xQueueSemaphoreTake+0x214>)
 801a31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a322:	601a      	str	r2, [r3, #0]
 801a324:	f3bf 8f4f 	dsb	sy
 801a328:	f3bf 8f6f 	isb	sy
 801a32c:	e75e      	b.n	801a1ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801a32e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a330:	f000 f973 	bl	801a61a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801a334:	f000 fd9c 	bl	801ae70 <xTaskResumeAll>
 801a338:	e758      	b.n	801a1ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801a33a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a33c:	f000 f96d 	bl	801a61a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801a340:	f000 fd96 	bl	801ae70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801a344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a346:	f000 f9ba 	bl	801a6be <prvIsQueueEmpty>
 801a34a:	4603      	mov	r3, r0
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	f43f af4d 	beq.w	801a1ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a354:	2b00      	cmp	r3, #0
 801a356:	d00d      	beq.n	801a374 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801a358:	f001 ffb4 	bl	801c2c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801a35c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a35e:	f000 f8b4 	bl	801a4ca <prvGetDisinheritPriorityAfterTimeout>
 801a362:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a366:	689b      	ldr	r3, [r3, #8]
 801a368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a36a:	4618      	mov	r0, r3
 801a36c:	f001 fa48 	bl	801b800 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801a370:	f001 ffd8 	bl	801c324 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801a374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801a376:	4618      	mov	r0, r3
 801a378:	3738      	adds	r7, #56	; 0x38
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bd80      	pop	{r7, pc}
 801a37e:	bf00      	nop
 801a380:	e000ed04 	.word	0xe000ed04

0801a384 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801a384:	b580      	push	{r7, lr}
 801a386:	b08e      	sub	sp, #56	; 0x38
 801a388:	af00      	add	r7, sp, #0
 801a38a:	60f8      	str	r0, [r7, #12]
 801a38c:	60b9      	str	r1, [r7, #8]
 801a38e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a396:	2b00      	cmp	r3, #0
 801a398:	d10a      	bne.n	801a3b0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a39e:	f383 8811 	msr	BASEPRI, r3
 801a3a2:	f3bf 8f6f 	isb	sy
 801a3a6:	f3bf 8f4f 	dsb	sy
 801a3aa:	623b      	str	r3, [r7, #32]
}
 801a3ac:	bf00      	nop
 801a3ae:	e7fe      	b.n	801a3ae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801a3b0:	68bb      	ldr	r3, [r7, #8]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d103      	bne.n	801a3be <xQueueReceiveFromISR+0x3a>
 801a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d101      	bne.n	801a3c2 <xQueueReceiveFromISR+0x3e>
 801a3be:	2301      	movs	r3, #1
 801a3c0:	e000      	b.n	801a3c4 <xQueueReceiveFromISR+0x40>
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d10a      	bne.n	801a3de <xQueueReceiveFromISR+0x5a>
	__asm volatile
 801a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3cc:	f383 8811 	msr	BASEPRI, r3
 801a3d0:	f3bf 8f6f 	isb	sy
 801a3d4:	f3bf 8f4f 	dsb	sy
 801a3d8:	61fb      	str	r3, [r7, #28]
}
 801a3da:	bf00      	nop
 801a3dc:	e7fe      	b.n	801a3dc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801a3de:	f002 f853 	bl	801c488 <vPortValidateInterruptPriority>
	__asm volatile
 801a3e2:	f3ef 8211 	mrs	r2, BASEPRI
 801a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3ea:	f383 8811 	msr	BASEPRI, r3
 801a3ee:	f3bf 8f6f 	isb	sy
 801a3f2:	f3bf 8f4f 	dsb	sy
 801a3f6:	61ba      	str	r2, [r7, #24]
 801a3f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801a3fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a402:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a406:	2b00      	cmp	r3, #0
 801a408:	d02f      	beq.n	801a46a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a40c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801a414:	68b9      	ldr	r1, [r7, #8]
 801a416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a418:	f000 f8d9 	bl	801a5ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a41e:	1e5a      	subs	r2, r3, #1
 801a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a422:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801a424:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a42c:	d112      	bne.n	801a454 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a430:	691b      	ldr	r3, [r3, #16]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d016      	beq.n	801a464 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a438:	3310      	adds	r3, #16
 801a43a:	4618      	mov	r0, r3
 801a43c:	f000 ff2e 	bl	801b29c <xTaskRemoveFromEventList>
 801a440:	4603      	mov	r3, r0
 801a442:	2b00      	cmp	r3, #0
 801a444:	d00e      	beq.n	801a464 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d00b      	beq.n	801a464 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	2201      	movs	r2, #1
 801a450:	601a      	str	r2, [r3, #0]
 801a452:	e007      	b.n	801a464 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801a454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a458:	3301      	adds	r3, #1
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	b25a      	sxtb	r2, r3
 801a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801a464:	2301      	movs	r3, #1
 801a466:	637b      	str	r3, [r7, #52]	; 0x34
 801a468:	e001      	b.n	801a46e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801a46a:	2300      	movs	r3, #0
 801a46c:	637b      	str	r3, [r7, #52]	; 0x34
 801a46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a470:	613b      	str	r3, [r7, #16]
	__asm volatile
 801a472:	693b      	ldr	r3, [r7, #16]
 801a474:	f383 8811 	msr	BASEPRI, r3
}
 801a478:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801a47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801a47c:	4618      	mov	r0, r3
 801a47e:	3738      	adds	r7, #56	; 0x38
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}

0801a484 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d10a      	bne.n	801a4ac <vQueueDelete+0x28>
	__asm volatile
 801a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a49a:	f383 8811 	msr	BASEPRI, r3
 801a49e:	f3bf 8f6f 	isb	sy
 801a4a2:	f3bf 8f4f 	dsb	sy
 801a4a6:	60bb      	str	r3, [r7, #8]
}
 801a4a8:	bf00      	nop
 801a4aa:	e7fe      	b.n	801a4aa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801a4ac:	68f8      	ldr	r0, [r7, #12]
 801a4ae:	f000 f95f 	bl	801a770 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d102      	bne.n	801a4c2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801a4bc:	68f8      	ldr	r0, [r7, #12]
 801a4be:	f002 f8ef 	bl	801c6a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801a4c2:	bf00      	nop
 801a4c4:	3710      	adds	r7, #16
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}

0801a4ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801a4ca:	b480      	push	{r7}
 801a4cc:	b085      	sub	sp, #20
 801a4ce:	af00      	add	r7, sp, #0
 801a4d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d006      	beq.n	801a4e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801a4e4:	60fb      	str	r3, [r7, #12]
 801a4e6:	e001      	b.n	801a4ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
	}
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	3714      	adds	r7, #20
 801a4f2:	46bd      	mov	sp, r7
 801a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f8:	4770      	bx	lr

0801a4fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801a4fa:	b580      	push	{r7, lr}
 801a4fc:	b086      	sub	sp, #24
 801a4fe:	af00      	add	r7, sp, #0
 801a500:	60f8      	str	r0, [r7, #12]
 801a502:	60b9      	str	r1, [r7, #8]
 801a504:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801a506:	2300      	movs	r3, #0
 801a508:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a50e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a514:	2b00      	cmp	r3, #0
 801a516:	d10d      	bne.n	801a534 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d14d      	bne.n	801a5bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	689b      	ldr	r3, [r3, #8]
 801a524:	4618      	mov	r0, r3
 801a526:	f001 f8fd 	bl	801b724 <xTaskPriorityDisinherit>
 801a52a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	2200      	movs	r2, #0
 801a530:	609a      	str	r2, [r3, #8]
 801a532:	e043      	b.n	801a5bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d119      	bne.n	801a56e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	6858      	ldr	r0, [r3, #4]
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a542:	461a      	mov	r2, r3
 801a544:	68b9      	ldr	r1, [r7, #8]
 801a546:	f002 fa03 	bl	801c950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	685a      	ldr	r2, [r3, #4]
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a552:	441a      	add	r2, r3
 801a554:	68fb      	ldr	r3, [r7, #12]
 801a556:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	685a      	ldr	r2, [r3, #4]
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	689b      	ldr	r3, [r3, #8]
 801a560:	429a      	cmp	r2, r3
 801a562:	d32b      	bcc.n	801a5bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	681a      	ldr	r2, [r3, #0]
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	605a      	str	r2, [r3, #4]
 801a56c:	e026      	b.n	801a5bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	68d8      	ldr	r0, [r3, #12]
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a576:	461a      	mov	r2, r3
 801a578:	68b9      	ldr	r1, [r7, #8]
 801a57a:	f002 f9e9 	bl	801c950 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	68da      	ldr	r2, [r3, #12]
 801a582:	68fb      	ldr	r3, [r7, #12]
 801a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a586:	425b      	negs	r3, r3
 801a588:	441a      	add	r2, r3
 801a58a:	68fb      	ldr	r3, [r7, #12]
 801a58c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801a58e:	68fb      	ldr	r3, [r7, #12]
 801a590:	68da      	ldr	r2, [r3, #12]
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	429a      	cmp	r2, r3
 801a598:	d207      	bcs.n	801a5aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801a59a:	68fb      	ldr	r3, [r7, #12]
 801a59c:	689a      	ldr	r2, [r3, #8]
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5a2:	425b      	negs	r3, r3
 801a5a4:	441a      	add	r2, r3
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2b02      	cmp	r3, #2
 801a5ae:	d105      	bne.n	801a5bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801a5b0:	693b      	ldr	r3, [r7, #16]
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d002      	beq.n	801a5bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801a5b6:	693b      	ldr	r3, [r7, #16]
 801a5b8:	3b01      	subs	r3, #1
 801a5ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801a5bc:	693b      	ldr	r3, [r7, #16]
 801a5be:	1c5a      	adds	r2, r3, #1
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801a5c4:	697b      	ldr	r3, [r7, #20]
}
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	3718      	adds	r7, #24
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}

0801a5ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801a5ce:	b580      	push	{r7, lr}
 801a5d0:	b082      	sub	sp, #8
 801a5d2:	af00      	add	r7, sp, #0
 801a5d4:	6078      	str	r0, [r7, #4]
 801a5d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d018      	beq.n	801a612 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	68da      	ldr	r2, [r3, #12]
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5e8:	441a      	add	r2, r3
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	68da      	ldr	r2, [r3, #12]
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	689b      	ldr	r3, [r3, #8]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d303      	bcc.n	801a602 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	681a      	ldr	r2, [r3, #0]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	68d9      	ldr	r1, [r3, #12]
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a60a:	461a      	mov	r2, r3
 801a60c:	6838      	ldr	r0, [r7, #0]
 801a60e:	f002 f99f 	bl	801c950 <memcpy>
	}
}
 801a612:	bf00      	nop
 801a614:	3708      	adds	r7, #8
 801a616:	46bd      	mov	sp, r7
 801a618:	bd80      	pop	{r7, pc}

0801a61a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801a61a:	b580      	push	{r7, lr}
 801a61c:	b084      	sub	sp, #16
 801a61e:	af00      	add	r7, sp, #0
 801a620:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801a622:	f001 fe4f 	bl	801c2c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a62c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a62e:	e011      	b.n	801a654 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a634:	2b00      	cmp	r3, #0
 801a636:	d012      	beq.n	801a65e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	3324      	adds	r3, #36	; 0x24
 801a63c:	4618      	mov	r0, r3
 801a63e:	f000 fe2d 	bl	801b29c <xTaskRemoveFromEventList>
 801a642:	4603      	mov	r3, r0
 801a644:	2b00      	cmp	r3, #0
 801a646:	d001      	beq.n	801a64c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801a648:	f000 ff04 	bl	801b454 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801a64c:	7bfb      	ldrb	r3, [r7, #15]
 801a64e:	3b01      	subs	r3, #1
 801a650:	b2db      	uxtb	r3, r3
 801a652:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801a654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	dce9      	bgt.n	801a630 <prvUnlockQueue+0x16>
 801a65c:	e000      	b.n	801a660 <prvUnlockQueue+0x46>
					break;
 801a65e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	22ff      	movs	r2, #255	; 0xff
 801a664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801a668:	f001 fe5c 	bl	801c324 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801a66c:	f001 fe2a 	bl	801c2c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a676:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a678:	e011      	b.n	801a69e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	691b      	ldr	r3, [r3, #16]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d012      	beq.n	801a6a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	3310      	adds	r3, #16
 801a686:	4618      	mov	r0, r3
 801a688:	f000 fe08 	bl	801b29c <xTaskRemoveFromEventList>
 801a68c:	4603      	mov	r3, r0
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d001      	beq.n	801a696 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801a692:	f000 fedf 	bl	801b454 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801a696:	7bbb      	ldrb	r3, [r7, #14]
 801a698:	3b01      	subs	r3, #1
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801a69e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	dce9      	bgt.n	801a67a <prvUnlockQueue+0x60>
 801a6a6:	e000      	b.n	801a6aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801a6a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	22ff      	movs	r2, #255	; 0xff
 801a6ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801a6b2:	f001 fe37 	bl	801c324 <vPortExitCritical>
}
 801a6b6:	bf00      	nop
 801a6b8:	3710      	adds	r7, #16
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	bd80      	pop	{r7, pc}

0801a6be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801a6be:	b580      	push	{r7, lr}
 801a6c0:	b084      	sub	sp, #16
 801a6c2:	af00      	add	r7, sp, #0
 801a6c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6c6:	f001 fdfd 	bl	801c2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d102      	bne.n	801a6d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801a6d2:	2301      	movs	r3, #1
 801a6d4:	60fb      	str	r3, [r7, #12]
 801a6d6:	e001      	b.n	801a6dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801a6d8:	2300      	movs	r3, #0
 801a6da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a6dc:	f001 fe22 	bl	801c324 <vPortExitCritical>

	return xReturn;
 801a6e0:	68fb      	ldr	r3, [r7, #12]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3710      	adds	r7, #16
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd80      	pop	{r7, pc}

0801a6ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a6ea:	b580      	push	{r7, lr}
 801a6ec:	b084      	sub	sp, #16
 801a6ee:	af00      	add	r7, sp, #0
 801a6f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a6f2:	f001 fde7 	bl	801c2c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6fe:	429a      	cmp	r2, r3
 801a700:	d102      	bne.n	801a708 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a702:	2301      	movs	r3, #1
 801a704:	60fb      	str	r3, [r7, #12]
 801a706:	e001      	b.n	801a70c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a708:	2300      	movs	r3, #0
 801a70a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a70c:	f001 fe0a 	bl	801c324 <vPortExitCritical>

	return xReturn;
 801a710:	68fb      	ldr	r3, [r7, #12]
}
 801a712:	4618      	mov	r0, r3
 801a714:	3710      	adds	r7, #16
 801a716:	46bd      	mov	sp, r7
 801a718:	bd80      	pop	{r7, pc}
	...

0801a71c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a71c:	b480      	push	{r7}
 801a71e:	b085      	sub	sp, #20
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
 801a724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a726:	2300      	movs	r3, #0
 801a728:	60fb      	str	r3, [r7, #12]
 801a72a:	e014      	b.n	801a756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a72c:	4a0f      	ldr	r2, [pc, #60]	; (801a76c <vQueueAddToRegistry+0x50>)
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d10b      	bne.n	801a750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a738:	490c      	ldr	r1, [pc, #48]	; (801a76c <vQueueAddToRegistry+0x50>)
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	683a      	ldr	r2, [r7, #0]
 801a73e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a742:	4a0a      	ldr	r2, [pc, #40]	; (801a76c <vQueueAddToRegistry+0x50>)
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	00db      	lsls	r3, r3, #3
 801a748:	4413      	add	r3, r2
 801a74a:	687a      	ldr	r2, [r7, #4]
 801a74c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a74e:	e006      	b.n	801a75e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	3301      	adds	r3, #1
 801a754:	60fb      	str	r3, [r7, #12]
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	2b07      	cmp	r3, #7
 801a75a:	d9e7      	bls.n	801a72c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a75c:	bf00      	nop
 801a75e:	bf00      	nop
 801a760:	3714      	adds	r7, #20
 801a762:	46bd      	mov	sp, r7
 801a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a768:	4770      	bx	lr
 801a76a:	bf00      	nop
 801a76c:	2000a794 	.word	0x2000a794

0801a770 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801a770:	b480      	push	{r7}
 801a772:	b085      	sub	sp, #20
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a778:	2300      	movs	r3, #0
 801a77a:	60fb      	str	r3, [r7, #12]
 801a77c:	e016      	b.n	801a7ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801a77e:	4a10      	ldr	r2, [pc, #64]	; (801a7c0 <vQueueUnregisterQueue+0x50>)
 801a780:	68fb      	ldr	r3, [r7, #12]
 801a782:	00db      	lsls	r3, r3, #3
 801a784:	4413      	add	r3, r2
 801a786:	685b      	ldr	r3, [r3, #4]
 801a788:	687a      	ldr	r2, [r7, #4]
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d10b      	bne.n	801a7a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801a78e:	4a0c      	ldr	r2, [pc, #48]	; (801a7c0 <vQueueUnregisterQueue+0x50>)
 801a790:	68fb      	ldr	r3, [r7, #12]
 801a792:	2100      	movs	r1, #0
 801a794:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801a798:	4a09      	ldr	r2, [pc, #36]	; (801a7c0 <vQueueUnregisterQueue+0x50>)
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	00db      	lsls	r3, r3, #3
 801a79e:	4413      	add	r3, r2
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	605a      	str	r2, [r3, #4]
				break;
 801a7a4:	e006      	b.n	801a7b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	3301      	adds	r3, #1
 801a7aa:	60fb      	str	r3, [r7, #12]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	2b07      	cmp	r3, #7
 801a7b0:	d9e5      	bls.n	801a77e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801a7b2:	bf00      	nop
 801a7b4:	bf00      	nop
 801a7b6:	3714      	adds	r7, #20
 801a7b8:	46bd      	mov	sp, r7
 801a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7be:	4770      	bx	lr
 801a7c0:	2000a794 	.word	0x2000a794

0801a7c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a7c4:	b580      	push	{r7, lr}
 801a7c6:	b086      	sub	sp, #24
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	60f8      	str	r0, [r7, #12]
 801a7cc:	60b9      	str	r1, [r7, #8]
 801a7ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a7d4:	f001 fd76 	bl	801c2c4 <vPortEnterCritical>
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a7de:	b25b      	sxtb	r3, r3
 801a7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a7e4:	d103      	bne.n	801a7ee <vQueueWaitForMessageRestricted+0x2a>
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a7ee:	697b      	ldr	r3, [r7, #20]
 801a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a7f4:	b25b      	sxtb	r3, r3
 801a7f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a7fa:	d103      	bne.n	801a804 <vQueueWaitForMessageRestricted+0x40>
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	2200      	movs	r2, #0
 801a800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a804:	f001 fd8e 	bl	801c324 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a808:	697b      	ldr	r3, [r7, #20]
 801a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d106      	bne.n	801a81e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a810:	697b      	ldr	r3, [r7, #20]
 801a812:	3324      	adds	r3, #36	; 0x24
 801a814:	687a      	ldr	r2, [r7, #4]
 801a816:	68b9      	ldr	r1, [r7, #8]
 801a818:	4618      	mov	r0, r3
 801a81a:	f000 fd13 	bl	801b244 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a81e:	6978      	ldr	r0, [r7, #20]
 801a820:	f7ff fefb 	bl	801a61a <prvUnlockQueue>
	}
 801a824:	bf00      	nop
 801a826:	3718      	adds	r7, #24
 801a828:	46bd      	mov	sp, r7
 801a82a:	bd80      	pop	{r7, pc}

0801a82c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b08e      	sub	sp, #56	; 0x38
 801a830:	af04      	add	r7, sp, #16
 801a832:	60f8      	str	r0, [r7, #12]
 801a834:	60b9      	str	r1, [r7, #8]
 801a836:	607a      	str	r2, [r7, #4]
 801a838:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d10a      	bne.n	801a856 <xTaskCreateStatic+0x2a>
	__asm volatile
 801a840:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a844:	f383 8811 	msr	BASEPRI, r3
 801a848:	f3bf 8f6f 	isb	sy
 801a84c:	f3bf 8f4f 	dsb	sy
 801a850:	623b      	str	r3, [r7, #32]
}
 801a852:	bf00      	nop
 801a854:	e7fe      	b.n	801a854 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d10a      	bne.n	801a872 <xTaskCreateStatic+0x46>
	__asm volatile
 801a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a860:	f383 8811 	msr	BASEPRI, r3
 801a864:	f3bf 8f6f 	isb	sy
 801a868:	f3bf 8f4f 	dsb	sy
 801a86c:	61fb      	str	r3, [r7, #28]
}
 801a86e:	bf00      	nop
 801a870:	e7fe      	b.n	801a870 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a872:	235c      	movs	r3, #92	; 0x5c
 801a874:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a876:	693b      	ldr	r3, [r7, #16]
 801a878:	2b5c      	cmp	r3, #92	; 0x5c
 801a87a:	d00a      	beq.n	801a892 <xTaskCreateStatic+0x66>
	__asm volatile
 801a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a880:	f383 8811 	msr	BASEPRI, r3
 801a884:	f3bf 8f6f 	isb	sy
 801a888:	f3bf 8f4f 	dsb	sy
 801a88c:	61bb      	str	r3, [r7, #24]
}
 801a88e:	bf00      	nop
 801a890:	e7fe      	b.n	801a890 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a892:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a896:	2b00      	cmp	r3, #0
 801a898:	d01e      	beq.n	801a8d8 <xTaskCreateStatic+0xac>
 801a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d01b      	beq.n	801a8d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a8a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8ac:	2202      	movs	r2, #2
 801a8ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	9303      	str	r3, [sp, #12]
 801a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a8b8:	9302      	str	r3, [sp, #8]
 801a8ba:	f107 0314 	add.w	r3, r7, #20
 801a8be:	9301      	str	r3, [sp, #4]
 801a8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8c2:	9300      	str	r3, [sp, #0]
 801a8c4:	683b      	ldr	r3, [r7, #0]
 801a8c6:	687a      	ldr	r2, [r7, #4]
 801a8c8:	68b9      	ldr	r1, [r7, #8]
 801a8ca:	68f8      	ldr	r0, [r7, #12]
 801a8cc:	f000 f850 	bl	801a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a8d2:	f000 f8dd 	bl	801aa90 <prvAddNewTaskToReadyList>
 801a8d6:	e001      	b.n	801a8dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801a8d8:	2300      	movs	r3, #0
 801a8da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a8dc:	697b      	ldr	r3, [r7, #20]
	}
 801a8de:	4618      	mov	r0, r3
 801a8e0:	3728      	adds	r7, #40	; 0x28
 801a8e2:	46bd      	mov	sp, r7
 801a8e4:	bd80      	pop	{r7, pc}

0801a8e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a8e6:	b580      	push	{r7, lr}
 801a8e8:	b08c      	sub	sp, #48	; 0x30
 801a8ea:	af04      	add	r7, sp, #16
 801a8ec:	60f8      	str	r0, [r7, #12]
 801a8ee:	60b9      	str	r1, [r7, #8]
 801a8f0:	603b      	str	r3, [r7, #0]
 801a8f2:	4613      	mov	r3, r2
 801a8f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a8f6:	88fb      	ldrh	r3, [r7, #6]
 801a8f8:	009b      	lsls	r3, r3, #2
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f001 fe04 	bl	801c508 <pvPortMalloc>
 801a900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d00e      	beq.n	801a926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a908:	205c      	movs	r0, #92	; 0x5c
 801a90a:	f001 fdfd 	bl	801c508 <pvPortMalloc>
 801a90e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a910:	69fb      	ldr	r3, [r7, #28]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d003      	beq.n	801a91e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a916:	69fb      	ldr	r3, [r7, #28]
 801a918:	697a      	ldr	r2, [r7, #20]
 801a91a:	631a      	str	r2, [r3, #48]	; 0x30
 801a91c:	e005      	b.n	801a92a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a91e:	6978      	ldr	r0, [r7, #20]
 801a920:	f001 febe 	bl	801c6a0 <vPortFree>
 801a924:	e001      	b.n	801a92a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a926:	2300      	movs	r3, #0
 801a928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a92a:	69fb      	ldr	r3, [r7, #28]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d017      	beq.n	801a960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a930:	69fb      	ldr	r3, [r7, #28]
 801a932:	2200      	movs	r2, #0
 801a934:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a938:	88fa      	ldrh	r2, [r7, #6]
 801a93a:	2300      	movs	r3, #0
 801a93c:	9303      	str	r3, [sp, #12]
 801a93e:	69fb      	ldr	r3, [r7, #28]
 801a940:	9302      	str	r3, [sp, #8]
 801a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a944:	9301      	str	r3, [sp, #4]
 801a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a948:	9300      	str	r3, [sp, #0]
 801a94a:	683b      	ldr	r3, [r7, #0]
 801a94c:	68b9      	ldr	r1, [r7, #8]
 801a94e:	68f8      	ldr	r0, [r7, #12]
 801a950:	f000 f80e 	bl	801a970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a954:	69f8      	ldr	r0, [r7, #28]
 801a956:	f000 f89b 	bl	801aa90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a95a:	2301      	movs	r3, #1
 801a95c:	61bb      	str	r3, [r7, #24]
 801a95e:	e002      	b.n	801a966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a966:	69bb      	ldr	r3, [r7, #24]
	}
 801a968:	4618      	mov	r0, r3
 801a96a:	3720      	adds	r7, #32
 801a96c:	46bd      	mov	sp, r7
 801a96e:	bd80      	pop	{r7, pc}

0801a970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a970:	b580      	push	{r7, lr}
 801a972:	b088      	sub	sp, #32
 801a974:	af00      	add	r7, sp, #0
 801a976:	60f8      	str	r0, [r7, #12]
 801a978:	60b9      	str	r1, [r7, #8]
 801a97a:	607a      	str	r2, [r7, #4]
 801a97c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a980:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	461a      	mov	r2, r3
 801a988:	21a5      	movs	r1, #165	; 0xa5
 801a98a:	f001 ffef 	bl	801c96c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a998:	3b01      	subs	r3, #1
 801a99a:	009b      	lsls	r3, r3, #2
 801a99c:	4413      	add	r3, r2
 801a99e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a9a0:	69bb      	ldr	r3, [r7, #24]
 801a9a2:	f023 0307 	bic.w	r3, r3, #7
 801a9a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	f003 0307 	and.w	r3, r3, #7
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d00a      	beq.n	801a9c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 801a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a9b6:	f383 8811 	msr	BASEPRI, r3
 801a9ba:	f3bf 8f6f 	isb	sy
 801a9be:	f3bf 8f4f 	dsb	sy
 801a9c2:	617b      	str	r3, [r7, #20]
}
 801a9c4:	bf00      	nop
 801a9c6:	e7fe      	b.n	801a9c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a9c8:	68bb      	ldr	r3, [r7, #8]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d01f      	beq.n	801aa0e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a9ce:	2300      	movs	r3, #0
 801a9d0:	61fb      	str	r3, [r7, #28]
 801a9d2:	e012      	b.n	801a9fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a9d4:	68ba      	ldr	r2, [r7, #8]
 801a9d6:	69fb      	ldr	r3, [r7, #28]
 801a9d8:	4413      	add	r3, r2
 801a9da:	7819      	ldrb	r1, [r3, #0]
 801a9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9de:	69fb      	ldr	r3, [r7, #28]
 801a9e0:	4413      	add	r3, r2
 801a9e2:	3334      	adds	r3, #52	; 0x34
 801a9e4:	460a      	mov	r2, r1
 801a9e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a9e8:	68ba      	ldr	r2, [r7, #8]
 801a9ea:	69fb      	ldr	r3, [r7, #28]
 801a9ec:	4413      	add	r3, r2
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d006      	beq.n	801aa02 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a9f4:	69fb      	ldr	r3, [r7, #28]
 801a9f6:	3301      	adds	r3, #1
 801a9f8:	61fb      	str	r3, [r7, #28]
 801a9fa:	69fb      	ldr	r3, [r7, #28]
 801a9fc:	2b0f      	cmp	r3, #15
 801a9fe:	d9e9      	bls.n	801a9d4 <prvInitialiseNewTask+0x64>
 801aa00:	e000      	b.n	801aa04 <prvInitialiseNewTask+0x94>
			{
				break;
 801aa02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa06:	2200      	movs	r2, #0
 801aa08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801aa0c:	e003      	b.n	801aa16 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa10:	2200      	movs	r2, #0
 801aa12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa18:	2b37      	cmp	r3, #55	; 0x37
 801aa1a:	d901      	bls.n	801aa20 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801aa1c:	2337      	movs	r3, #55	; 0x37
 801aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa24:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aa2a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa2e:	2200      	movs	r2, #0
 801aa30:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa34:	3304      	adds	r3, #4
 801aa36:	4618      	mov	r0, r3
 801aa38:	f7fe fe56 	bl	80196e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801aa3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa3e:	3318      	adds	r3, #24
 801aa40:	4618      	mov	r0, r3
 801aa42:	f7fe fe51 	bl	80196e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa5e:	2200      	movs	r2, #0
 801aa60:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa64:	2200      	movs	r2, #0
 801aa66:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801aa6a:	683a      	ldr	r2, [r7, #0]
 801aa6c:	68f9      	ldr	r1, [r7, #12]
 801aa6e:	69b8      	ldr	r0, [r7, #24]
 801aa70:	f001 fafe 	bl	801c070 <pxPortInitialiseStack>
 801aa74:	4602      	mov	r2, r0
 801aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d002      	beq.n	801aa86 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801aa80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801aa86:	bf00      	nop
 801aa88:	3720      	adds	r7, #32
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}
	...

0801aa90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b082      	sub	sp, #8
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801aa98:	f001 fc14 	bl	801c2c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801aa9c:	4b2d      	ldr	r3, [pc, #180]	; (801ab54 <prvAddNewTaskToReadyList+0xc4>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	3301      	adds	r3, #1
 801aaa2:	4a2c      	ldr	r2, [pc, #176]	; (801ab54 <prvAddNewTaskToReadyList+0xc4>)
 801aaa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801aaa6:	4b2c      	ldr	r3, [pc, #176]	; (801ab58 <prvAddNewTaskToReadyList+0xc8>)
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d109      	bne.n	801aac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801aaae:	4a2a      	ldr	r2, [pc, #168]	; (801ab58 <prvAddNewTaskToReadyList+0xc8>)
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801aab4:	4b27      	ldr	r3, [pc, #156]	; (801ab54 <prvAddNewTaskToReadyList+0xc4>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2b01      	cmp	r3, #1
 801aaba:	d110      	bne.n	801aade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801aabc:	f000 fcee 	bl	801b49c <prvInitialiseTaskLists>
 801aac0:	e00d      	b.n	801aade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801aac2:	4b26      	ldr	r3, [pc, #152]	; (801ab5c <prvAddNewTaskToReadyList+0xcc>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d109      	bne.n	801aade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801aaca:	4b23      	ldr	r3, [pc, #140]	; (801ab58 <prvAddNewTaskToReadyList+0xc8>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aad4:	429a      	cmp	r2, r3
 801aad6:	d802      	bhi.n	801aade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801aad8:	4a1f      	ldr	r2, [pc, #124]	; (801ab58 <prvAddNewTaskToReadyList+0xc8>)
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801aade:	4b20      	ldr	r3, [pc, #128]	; (801ab60 <prvAddNewTaskToReadyList+0xd0>)
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	3301      	adds	r3, #1
 801aae4:	4a1e      	ldr	r2, [pc, #120]	; (801ab60 <prvAddNewTaskToReadyList+0xd0>)
 801aae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801aae8:	4b1d      	ldr	r3, [pc, #116]	; (801ab60 <prvAddNewTaskToReadyList+0xd0>)
 801aaea:	681a      	ldr	r2, [r3, #0]
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aaf4:	4b1b      	ldr	r3, [pc, #108]	; (801ab64 <prvAddNewTaskToReadyList+0xd4>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	429a      	cmp	r2, r3
 801aafa:	d903      	bls.n	801ab04 <prvAddNewTaskToReadyList+0x74>
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab00:	4a18      	ldr	r2, [pc, #96]	; (801ab64 <prvAddNewTaskToReadyList+0xd4>)
 801ab02:	6013      	str	r3, [r2, #0]
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab08:	4613      	mov	r3, r2
 801ab0a:	009b      	lsls	r3, r3, #2
 801ab0c:	4413      	add	r3, r2
 801ab0e:	009b      	lsls	r3, r3, #2
 801ab10:	4a15      	ldr	r2, [pc, #84]	; (801ab68 <prvAddNewTaskToReadyList+0xd8>)
 801ab12:	441a      	add	r2, r3
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	3304      	adds	r3, #4
 801ab18:	4619      	mov	r1, r3
 801ab1a:	4610      	mov	r0, r2
 801ab1c:	f7fe fdf1 	bl	8019702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801ab20:	f001 fc00 	bl	801c324 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801ab24:	4b0d      	ldr	r3, [pc, #52]	; (801ab5c <prvAddNewTaskToReadyList+0xcc>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d00e      	beq.n	801ab4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801ab2c:	4b0a      	ldr	r3, [pc, #40]	; (801ab58 <prvAddNewTaskToReadyList+0xc8>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab36:	429a      	cmp	r2, r3
 801ab38:	d207      	bcs.n	801ab4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801ab3a:	4b0c      	ldr	r3, [pc, #48]	; (801ab6c <prvAddNewTaskToReadyList+0xdc>)
 801ab3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ab40:	601a      	str	r2, [r3, #0]
 801ab42:	f3bf 8f4f 	dsb	sy
 801ab46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801ab4a:	bf00      	nop
 801ab4c:	3708      	adds	r7, #8
 801ab4e:	46bd      	mov	sp, r7
 801ab50:	bd80      	pop	{r7, pc}
 801ab52:	bf00      	nop
 801ab54:	20002750 	.word	0x20002750
 801ab58:	2000227c 	.word	0x2000227c
 801ab5c:	2000275c 	.word	0x2000275c
 801ab60:	2000276c 	.word	0x2000276c
 801ab64:	20002758 	.word	0x20002758
 801ab68:	20002280 	.word	0x20002280
 801ab6c:	e000ed04 	.word	0xe000ed04

0801ab70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801ab70:	b580      	push	{r7, lr}
 801ab72:	b084      	sub	sp, #16
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801ab78:	f001 fba4 	bl	801c2c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d102      	bne.n	801ab88 <vTaskDelete+0x18>
 801ab82:	4b2c      	ldr	r3, [pc, #176]	; (801ac34 <vTaskDelete+0xc4>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	e000      	b.n	801ab8a <vTaskDelete+0x1a>
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	3304      	adds	r3, #4
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7fe fe13 	bl	80197bc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d004      	beq.n	801aba8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	3318      	adds	r3, #24
 801aba2:	4618      	mov	r0, r3
 801aba4:	f7fe fe0a 	bl	80197bc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801aba8:	4b23      	ldr	r3, [pc, #140]	; (801ac38 <vTaskDelete+0xc8>)
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	3301      	adds	r3, #1
 801abae:	4a22      	ldr	r2, [pc, #136]	; (801ac38 <vTaskDelete+0xc8>)
 801abb0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801abb2:	4b20      	ldr	r3, [pc, #128]	; (801ac34 <vTaskDelete+0xc4>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	68fa      	ldr	r2, [r7, #12]
 801abb8:	429a      	cmp	r2, r3
 801abba:	d10b      	bne.n	801abd4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	3304      	adds	r3, #4
 801abc0:	4619      	mov	r1, r3
 801abc2:	481e      	ldr	r0, [pc, #120]	; (801ac3c <vTaskDelete+0xcc>)
 801abc4:	f7fe fd9d 	bl	8019702 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801abc8:	4b1d      	ldr	r3, [pc, #116]	; (801ac40 <vTaskDelete+0xd0>)
 801abca:	681b      	ldr	r3, [r3, #0]
 801abcc:	3301      	adds	r3, #1
 801abce:	4a1c      	ldr	r2, [pc, #112]	; (801ac40 <vTaskDelete+0xd0>)
 801abd0:	6013      	str	r3, [r2, #0]
 801abd2:	e009      	b.n	801abe8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801abd4:	4b1b      	ldr	r3, [pc, #108]	; (801ac44 <vTaskDelete+0xd4>)
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	3b01      	subs	r3, #1
 801abda:	4a1a      	ldr	r2, [pc, #104]	; (801ac44 <vTaskDelete+0xd4>)
 801abdc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801abde:	68f8      	ldr	r0, [r7, #12]
 801abe0:	f000 fcca 	bl	801b578 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801abe4:	f000 fcf8 	bl	801b5d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801abe8:	f001 fb9c 	bl	801c324 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801abec:	4b16      	ldr	r3, [pc, #88]	; (801ac48 <vTaskDelete+0xd8>)
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d01b      	beq.n	801ac2c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 801abf4:	4b0f      	ldr	r3, [pc, #60]	; (801ac34 <vTaskDelete+0xc4>)
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	68fa      	ldr	r2, [r7, #12]
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d116      	bne.n	801ac2c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801abfe:	4b13      	ldr	r3, [pc, #76]	; (801ac4c <vTaskDelete+0xdc>)
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d00a      	beq.n	801ac1c <vTaskDelete+0xac>
	__asm volatile
 801ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac0a:	f383 8811 	msr	BASEPRI, r3
 801ac0e:	f3bf 8f6f 	isb	sy
 801ac12:	f3bf 8f4f 	dsb	sy
 801ac16:	60bb      	str	r3, [r7, #8]
}
 801ac18:	bf00      	nop
 801ac1a:	e7fe      	b.n	801ac1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801ac1c:	4b0c      	ldr	r3, [pc, #48]	; (801ac50 <vTaskDelete+0xe0>)
 801ac1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ac22:	601a      	str	r2, [r3, #0]
 801ac24:	f3bf 8f4f 	dsb	sy
 801ac28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801ac2c:	bf00      	nop
 801ac2e:	3710      	adds	r7, #16
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	2000227c 	.word	0x2000227c
 801ac38:	2000276c 	.word	0x2000276c
 801ac3c:	20002724 	.word	0x20002724
 801ac40:	20002738 	.word	0x20002738
 801ac44:	20002750 	.word	0x20002750
 801ac48:	2000275c 	.word	0x2000275c
 801ac4c:	20002778 	.word	0x20002778
 801ac50:	e000ed04 	.word	0xe000ed04

0801ac54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b084      	sub	sp, #16
 801ac58:	af00      	add	r7, sp, #0
 801ac5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d017      	beq.n	801ac96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801ac66:	4b13      	ldr	r3, [pc, #76]	; (801acb4 <vTaskDelay+0x60>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d00a      	beq.n	801ac84 <vTaskDelay+0x30>
	__asm volatile
 801ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac72:	f383 8811 	msr	BASEPRI, r3
 801ac76:	f3bf 8f6f 	isb	sy
 801ac7a:	f3bf 8f4f 	dsb	sy
 801ac7e:	60bb      	str	r3, [r7, #8]
}
 801ac80:	bf00      	nop
 801ac82:	e7fe      	b.n	801ac82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801ac84:	f000 f8e6 	bl	801ae54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801ac88:	2100      	movs	r1, #0
 801ac8a:	6878      	ldr	r0, [r7, #4]
 801ac8c:	f000 fe4e 	bl	801b92c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801ac90:	f000 f8ee 	bl	801ae70 <xTaskResumeAll>
 801ac94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d107      	bne.n	801acac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801ac9c:	4b06      	ldr	r3, [pc, #24]	; (801acb8 <vTaskDelay+0x64>)
 801ac9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aca2:	601a      	str	r2, [r3, #0]
 801aca4:	f3bf 8f4f 	dsb	sy
 801aca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801acac:	bf00      	nop
 801acae:	3710      	adds	r7, #16
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bd80      	pop	{r7, pc}
 801acb4:	20002778 	.word	0x20002778
 801acb8:	e000ed04 	.word	0xe000ed04

0801acbc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b088      	sub	sp, #32
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801acc8:	69bb      	ldr	r3, [r7, #24]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d10a      	bne.n	801ace4 <eTaskGetState+0x28>
	__asm volatile
 801acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acd2:	f383 8811 	msr	BASEPRI, r3
 801acd6:	f3bf 8f6f 	isb	sy
 801acda:	f3bf 8f4f 	dsb	sy
 801acde:	60bb      	str	r3, [r7, #8]
}
 801ace0:	bf00      	nop
 801ace2:	e7fe      	b.n	801ace2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801ace4:	4b23      	ldr	r3, [pc, #140]	; (801ad74 <eTaskGetState+0xb8>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	69ba      	ldr	r2, [r7, #24]
 801acea:	429a      	cmp	r2, r3
 801acec:	d102      	bne.n	801acf4 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 801acee:	2300      	movs	r3, #0
 801acf0:	77fb      	strb	r3, [r7, #31]
 801acf2:	e03a      	b.n	801ad6a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801acf4:	f001 fae6 	bl	801c2c4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801acf8:	69bb      	ldr	r3, [r7, #24]
 801acfa:	695b      	ldr	r3, [r3, #20]
 801acfc:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801acfe:	4b1e      	ldr	r3, [pc, #120]	; (801ad78 <eTaskGetState+0xbc>)
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801ad04:	4b1d      	ldr	r3, [pc, #116]	; (801ad7c <eTaskGetState+0xc0>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801ad0a:	f001 fb0b 	bl	801c324 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801ad0e:	697a      	ldr	r2, [r7, #20]
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d003      	beq.n	801ad1e <eTaskGetState+0x62>
 801ad16:	697a      	ldr	r2, [r7, #20]
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d102      	bne.n	801ad24 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801ad1e:	2302      	movs	r3, #2
 801ad20:	77fb      	strb	r3, [r7, #31]
 801ad22:	e022      	b.n	801ad6a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801ad24:	697b      	ldr	r3, [r7, #20]
 801ad26:	4a16      	ldr	r2, [pc, #88]	; (801ad80 <eTaskGetState+0xc4>)
 801ad28:	4293      	cmp	r3, r2
 801ad2a:	d112      	bne.n	801ad52 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 801ad2c:	69bb      	ldr	r3, [r7, #24]
 801ad2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d10b      	bne.n	801ad4c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801ad34:	69bb      	ldr	r3, [r7, #24]
 801ad36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ad3a:	b2db      	uxtb	r3, r3
 801ad3c:	2b01      	cmp	r3, #1
 801ad3e:	d102      	bne.n	801ad46 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801ad40:	2302      	movs	r3, #2
 801ad42:	77fb      	strb	r3, [r7, #31]
 801ad44:	e011      	b.n	801ad6a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801ad46:	2303      	movs	r3, #3
 801ad48:	77fb      	strb	r3, [r7, #31]
 801ad4a:	e00e      	b.n	801ad6a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 801ad4c:	2302      	movs	r3, #2
 801ad4e:	77fb      	strb	r3, [r7, #31]
 801ad50:	e00b      	b.n	801ad6a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801ad52:	697b      	ldr	r3, [r7, #20]
 801ad54:	4a0b      	ldr	r2, [pc, #44]	; (801ad84 <eTaskGetState+0xc8>)
 801ad56:	4293      	cmp	r3, r2
 801ad58:	d002      	beq.n	801ad60 <eTaskGetState+0xa4>
 801ad5a:	697b      	ldr	r3, [r7, #20]
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	d102      	bne.n	801ad66 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801ad60:	2304      	movs	r3, #4
 801ad62:	77fb      	strb	r3, [r7, #31]
 801ad64:	e001      	b.n	801ad6a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801ad66:	2301      	movs	r3, #1
 801ad68:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801ad6a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3720      	adds	r7, #32
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	2000227c 	.word	0x2000227c
 801ad78:	20002708 	.word	0x20002708
 801ad7c:	2000270c 	.word	0x2000270c
 801ad80:	2000273c 	.word	0x2000273c
 801ad84:	20002724 	.word	0x20002724

0801ad88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b08a      	sub	sp, #40	; 0x28
 801ad8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801ad8e:	2300      	movs	r3, #0
 801ad90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801ad92:	2300      	movs	r3, #0
 801ad94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801ad96:	463a      	mov	r2, r7
 801ad98:	1d39      	adds	r1, r7, #4
 801ad9a:	f107 0308 	add.w	r3, r7, #8
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f7fe fc4e 	bl	8019640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801ada4:	6839      	ldr	r1, [r7, #0]
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	68ba      	ldr	r2, [r7, #8]
 801adaa:	9202      	str	r2, [sp, #8]
 801adac:	9301      	str	r3, [sp, #4]
 801adae:	2300      	movs	r3, #0
 801adb0:	9300      	str	r3, [sp, #0]
 801adb2:	2300      	movs	r3, #0
 801adb4:	460a      	mov	r2, r1
 801adb6:	4921      	ldr	r1, [pc, #132]	; (801ae3c <vTaskStartScheduler+0xb4>)
 801adb8:	4821      	ldr	r0, [pc, #132]	; (801ae40 <vTaskStartScheduler+0xb8>)
 801adba:	f7ff fd37 	bl	801a82c <xTaskCreateStatic>
 801adbe:	4603      	mov	r3, r0
 801adc0:	4a20      	ldr	r2, [pc, #128]	; (801ae44 <vTaskStartScheduler+0xbc>)
 801adc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801adc4:	4b1f      	ldr	r3, [pc, #124]	; (801ae44 <vTaskStartScheduler+0xbc>)
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d002      	beq.n	801add2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801adcc:	2301      	movs	r3, #1
 801adce:	617b      	str	r3, [r7, #20]
 801add0:	e001      	b.n	801add6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801add2:	2300      	movs	r3, #0
 801add4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801add6:	697b      	ldr	r3, [r7, #20]
 801add8:	2b01      	cmp	r3, #1
 801adda:	d102      	bne.n	801ade2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801addc:	f000 fdfa 	bl	801b9d4 <xTimerCreateTimerTask>
 801ade0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	2b01      	cmp	r3, #1
 801ade6:	d116      	bne.n	801ae16 <vTaskStartScheduler+0x8e>
	__asm volatile
 801ade8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801adec:	f383 8811 	msr	BASEPRI, r3
 801adf0:	f3bf 8f6f 	isb	sy
 801adf4:	f3bf 8f4f 	dsb	sy
 801adf8:	613b      	str	r3, [r7, #16]
}
 801adfa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801adfc:	4b12      	ldr	r3, [pc, #72]	; (801ae48 <vTaskStartScheduler+0xc0>)
 801adfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ae02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801ae04:	4b11      	ldr	r3, [pc, #68]	; (801ae4c <vTaskStartScheduler+0xc4>)
 801ae06:	2201      	movs	r2, #1
 801ae08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801ae0a:	4b11      	ldr	r3, [pc, #68]	; (801ae50 <vTaskStartScheduler+0xc8>)
 801ae0c:	2200      	movs	r2, #0
 801ae0e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801ae10:	f001 f9b6 	bl	801c180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801ae14:	e00e      	b.n	801ae34 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801ae16:	697b      	ldr	r3, [r7, #20]
 801ae18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ae1c:	d10a      	bne.n	801ae34 <vTaskStartScheduler+0xac>
	__asm volatile
 801ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae22:	f383 8811 	msr	BASEPRI, r3
 801ae26:	f3bf 8f6f 	isb	sy
 801ae2a:	f3bf 8f4f 	dsb	sy
 801ae2e:	60fb      	str	r3, [r7, #12]
}
 801ae30:	bf00      	nop
 801ae32:	e7fe      	b.n	801ae32 <vTaskStartScheduler+0xaa>
}
 801ae34:	bf00      	nop
 801ae36:	3718      	adds	r7, #24
 801ae38:	46bd      	mov	sp, r7
 801ae3a:	bd80      	pop	{r7, pc}
 801ae3c:	0802270c 	.word	0x0802270c
 801ae40:	0801b46d 	.word	0x0801b46d
 801ae44:	20002774 	.word	0x20002774
 801ae48:	20002770 	.word	0x20002770
 801ae4c:	2000275c 	.word	0x2000275c
 801ae50:	20002754 	.word	0x20002754

0801ae54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801ae54:	b480      	push	{r7}
 801ae56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801ae58:	4b04      	ldr	r3, [pc, #16]	; (801ae6c <vTaskSuspendAll+0x18>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	4a03      	ldr	r2, [pc, #12]	; (801ae6c <vTaskSuspendAll+0x18>)
 801ae60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801ae62:	bf00      	nop
 801ae64:	46bd      	mov	sp, r7
 801ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6a:	4770      	bx	lr
 801ae6c:	20002778 	.word	0x20002778

0801ae70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801ae76:	2300      	movs	r3, #0
 801ae78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801ae7e:	4b42      	ldr	r3, [pc, #264]	; (801af88 <xTaskResumeAll+0x118>)
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d10a      	bne.n	801ae9c <xTaskResumeAll+0x2c>
	__asm volatile
 801ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae8a:	f383 8811 	msr	BASEPRI, r3
 801ae8e:	f3bf 8f6f 	isb	sy
 801ae92:	f3bf 8f4f 	dsb	sy
 801ae96:	603b      	str	r3, [r7, #0]
}
 801ae98:	bf00      	nop
 801ae9a:	e7fe      	b.n	801ae9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801ae9c:	f001 fa12 	bl	801c2c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801aea0:	4b39      	ldr	r3, [pc, #228]	; (801af88 <xTaskResumeAll+0x118>)
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	3b01      	subs	r3, #1
 801aea6:	4a38      	ldr	r2, [pc, #224]	; (801af88 <xTaskResumeAll+0x118>)
 801aea8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801aeaa:	4b37      	ldr	r3, [pc, #220]	; (801af88 <xTaskResumeAll+0x118>)
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d162      	bne.n	801af78 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801aeb2:	4b36      	ldr	r3, [pc, #216]	; (801af8c <xTaskResumeAll+0x11c>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d05e      	beq.n	801af78 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801aeba:	e02f      	b.n	801af1c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aebc:	4b34      	ldr	r3, [pc, #208]	; (801af90 <xTaskResumeAll+0x120>)
 801aebe:	68db      	ldr	r3, [r3, #12]
 801aec0:	68db      	ldr	r3, [r3, #12]
 801aec2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	3318      	adds	r3, #24
 801aec8:	4618      	mov	r0, r3
 801aeca:	f7fe fc77 	bl	80197bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	3304      	adds	r3, #4
 801aed2:	4618      	mov	r0, r3
 801aed4:	f7fe fc72 	bl	80197bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aedc:	4b2d      	ldr	r3, [pc, #180]	; (801af94 <xTaskResumeAll+0x124>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d903      	bls.n	801aeec <xTaskResumeAll+0x7c>
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801aee8:	4a2a      	ldr	r2, [pc, #168]	; (801af94 <xTaskResumeAll+0x124>)
 801aeea:	6013      	str	r3, [r2, #0]
 801aeec:	68fb      	ldr	r3, [r7, #12]
 801aeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aef0:	4613      	mov	r3, r2
 801aef2:	009b      	lsls	r3, r3, #2
 801aef4:	4413      	add	r3, r2
 801aef6:	009b      	lsls	r3, r3, #2
 801aef8:	4a27      	ldr	r2, [pc, #156]	; (801af98 <xTaskResumeAll+0x128>)
 801aefa:	441a      	add	r2, r3
 801aefc:	68fb      	ldr	r3, [r7, #12]
 801aefe:	3304      	adds	r3, #4
 801af00:	4619      	mov	r1, r3
 801af02:	4610      	mov	r0, r2
 801af04:	f7fe fbfd 	bl	8019702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801af0c:	4b23      	ldr	r3, [pc, #140]	; (801af9c <xTaskResumeAll+0x12c>)
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af12:	429a      	cmp	r2, r3
 801af14:	d302      	bcc.n	801af1c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801af16:	4b22      	ldr	r3, [pc, #136]	; (801afa0 <xTaskResumeAll+0x130>)
 801af18:	2201      	movs	r2, #1
 801af1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801af1c:	4b1c      	ldr	r3, [pc, #112]	; (801af90 <xTaskResumeAll+0x120>)
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	d1cb      	bne.n	801aebc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	2b00      	cmp	r3, #0
 801af28:	d001      	beq.n	801af2e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801af2a:	f000 fb55 	bl	801b5d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801af2e:	4b1d      	ldr	r3, [pc, #116]	; (801afa4 <xTaskResumeAll+0x134>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d010      	beq.n	801af5c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801af3a:	f000 f847 	bl	801afcc <xTaskIncrementTick>
 801af3e:	4603      	mov	r3, r0
 801af40:	2b00      	cmp	r3, #0
 801af42:	d002      	beq.n	801af4a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801af44:	4b16      	ldr	r3, [pc, #88]	; (801afa0 <xTaskResumeAll+0x130>)
 801af46:	2201      	movs	r2, #1
 801af48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	3b01      	subs	r3, #1
 801af4e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d1f1      	bne.n	801af3a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801af56:	4b13      	ldr	r3, [pc, #76]	; (801afa4 <xTaskResumeAll+0x134>)
 801af58:	2200      	movs	r2, #0
 801af5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801af5c:	4b10      	ldr	r3, [pc, #64]	; (801afa0 <xTaskResumeAll+0x130>)
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d009      	beq.n	801af78 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801af64:	2301      	movs	r3, #1
 801af66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801af68:	4b0f      	ldr	r3, [pc, #60]	; (801afa8 <xTaskResumeAll+0x138>)
 801af6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af6e:	601a      	str	r2, [r3, #0]
 801af70:	f3bf 8f4f 	dsb	sy
 801af74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801af78:	f001 f9d4 	bl	801c324 <vPortExitCritical>

	return xAlreadyYielded;
 801af7c:	68bb      	ldr	r3, [r7, #8]
}
 801af7e:	4618      	mov	r0, r3
 801af80:	3710      	adds	r7, #16
 801af82:	46bd      	mov	sp, r7
 801af84:	bd80      	pop	{r7, pc}
 801af86:	bf00      	nop
 801af88:	20002778 	.word	0x20002778
 801af8c:	20002750 	.word	0x20002750
 801af90:	20002710 	.word	0x20002710
 801af94:	20002758 	.word	0x20002758
 801af98:	20002280 	.word	0x20002280
 801af9c:	2000227c 	.word	0x2000227c
 801afa0:	20002764 	.word	0x20002764
 801afa4:	20002760 	.word	0x20002760
 801afa8:	e000ed04 	.word	0xe000ed04

0801afac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801afac:	b480      	push	{r7}
 801afae:	b083      	sub	sp, #12
 801afb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801afb2:	4b05      	ldr	r3, [pc, #20]	; (801afc8 <xTaskGetTickCount+0x1c>)
 801afb4:	681b      	ldr	r3, [r3, #0]
 801afb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801afb8:	687b      	ldr	r3, [r7, #4]
}
 801afba:	4618      	mov	r0, r3
 801afbc:	370c      	adds	r7, #12
 801afbe:	46bd      	mov	sp, r7
 801afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop
 801afc8:	20002754 	.word	0x20002754

0801afcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b086      	sub	sp, #24
 801afd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801afd2:	2300      	movs	r3, #0
 801afd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801afd6:	4b4f      	ldr	r3, [pc, #316]	; (801b114 <xTaskIncrementTick+0x148>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	2b00      	cmp	r3, #0
 801afdc:	f040 808f 	bne.w	801b0fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801afe0:	4b4d      	ldr	r3, [pc, #308]	; (801b118 <xTaskIncrementTick+0x14c>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	3301      	adds	r3, #1
 801afe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801afe8:	4a4b      	ldr	r2, [pc, #300]	; (801b118 <xTaskIncrementTick+0x14c>)
 801afea:	693b      	ldr	r3, [r7, #16]
 801afec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801afee:	693b      	ldr	r3, [r7, #16]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d120      	bne.n	801b036 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801aff4:	4b49      	ldr	r3, [pc, #292]	; (801b11c <xTaskIncrementTick+0x150>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d00a      	beq.n	801b014 <xTaskIncrementTick+0x48>
	__asm volatile
 801affe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b002:	f383 8811 	msr	BASEPRI, r3
 801b006:	f3bf 8f6f 	isb	sy
 801b00a:	f3bf 8f4f 	dsb	sy
 801b00e:	603b      	str	r3, [r7, #0]
}
 801b010:	bf00      	nop
 801b012:	e7fe      	b.n	801b012 <xTaskIncrementTick+0x46>
 801b014:	4b41      	ldr	r3, [pc, #260]	; (801b11c <xTaskIncrementTick+0x150>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	60fb      	str	r3, [r7, #12]
 801b01a:	4b41      	ldr	r3, [pc, #260]	; (801b120 <xTaskIncrementTick+0x154>)
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4a3f      	ldr	r2, [pc, #252]	; (801b11c <xTaskIncrementTick+0x150>)
 801b020:	6013      	str	r3, [r2, #0]
 801b022:	4a3f      	ldr	r2, [pc, #252]	; (801b120 <xTaskIncrementTick+0x154>)
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	6013      	str	r3, [r2, #0]
 801b028:	4b3e      	ldr	r3, [pc, #248]	; (801b124 <xTaskIncrementTick+0x158>)
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	3301      	adds	r3, #1
 801b02e:	4a3d      	ldr	r2, [pc, #244]	; (801b124 <xTaskIncrementTick+0x158>)
 801b030:	6013      	str	r3, [r2, #0]
 801b032:	f000 fad1 	bl	801b5d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801b036:	4b3c      	ldr	r3, [pc, #240]	; (801b128 <xTaskIncrementTick+0x15c>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	693a      	ldr	r2, [r7, #16]
 801b03c:	429a      	cmp	r2, r3
 801b03e:	d349      	bcc.n	801b0d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b040:	4b36      	ldr	r3, [pc, #216]	; (801b11c <xTaskIncrementTick+0x150>)
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d104      	bne.n	801b054 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b04a:	4b37      	ldr	r3, [pc, #220]	; (801b128 <xTaskIncrementTick+0x15c>)
 801b04c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b050:	601a      	str	r2, [r3, #0]
					break;
 801b052:	e03f      	b.n	801b0d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b054:	4b31      	ldr	r3, [pc, #196]	; (801b11c <xTaskIncrementTick+0x150>)
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	68db      	ldr	r3, [r3, #12]
 801b05a:	68db      	ldr	r3, [r3, #12]
 801b05c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	685b      	ldr	r3, [r3, #4]
 801b062:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801b064:	693a      	ldr	r2, [r7, #16]
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	429a      	cmp	r2, r3
 801b06a:	d203      	bcs.n	801b074 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801b06c:	4a2e      	ldr	r2, [pc, #184]	; (801b128 <xTaskIncrementTick+0x15c>)
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801b072:	e02f      	b.n	801b0d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b074:	68bb      	ldr	r3, [r7, #8]
 801b076:	3304      	adds	r3, #4
 801b078:	4618      	mov	r0, r3
 801b07a:	f7fe fb9f 	bl	80197bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801b07e:	68bb      	ldr	r3, [r7, #8]
 801b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b082:	2b00      	cmp	r3, #0
 801b084:	d004      	beq.n	801b090 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b086:	68bb      	ldr	r3, [r7, #8]
 801b088:	3318      	adds	r3, #24
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7fe fb96 	bl	80197bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801b090:	68bb      	ldr	r3, [r7, #8]
 801b092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b094:	4b25      	ldr	r3, [pc, #148]	; (801b12c <xTaskIncrementTick+0x160>)
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	429a      	cmp	r2, r3
 801b09a:	d903      	bls.n	801b0a4 <xTaskIncrementTick+0xd8>
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0a0:	4a22      	ldr	r2, [pc, #136]	; (801b12c <xTaskIncrementTick+0x160>)
 801b0a2:	6013      	str	r3, [r2, #0]
 801b0a4:	68bb      	ldr	r3, [r7, #8]
 801b0a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0a8:	4613      	mov	r3, r2
 801b0aa:	009b      	lsls	r3, r3, #2
 801b0ac:	4413      	add	r3, r2
 801b0ae:	009b      	lsls	r3, r3, #2
 801b0b0:	4a1f      	ldr	r2, [pc, #124]	; (801b130 <xTaskIncrementTick+0x164>)
 801b0b2:	441a      	add	r2, r3
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	3304      	adds	r3, #4
 801b0b8:	4619      	mov	r1, r3
 801b0ba:	4610      	mov	r0, r2
 801b0bc:	f7fe fb21 	bl	8019702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b0c0:	68bb      	ldr	r3, [r7, #8]
 801b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0c4:	4b1b      	ldr	r3, [pc, #108]	; (801b134 <xTaskIncrementTick+0x168>)
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d3b8      	bcc.n	801b040 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801b0ce:	2301      	movs	r3, #1
 801b0d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b0d2:	e7b5      	b.n	801b040 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801b0d4:	4b17      	ldr	r3, [pc, #92]	; (801b134 <xTaskIncrementTick+0x168>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b0da:	4915      	ldr	r1, [pc, #84]	; (801b130 <xTaskIncrementTick+0x164>)
 801b0dc:	4613      	mov	r3, r2
 801b0de:	009b      	lsls	r3, r3, #2
 801b0e0:	4413      	add	r3, r2
 801b0e2:	009b      	lsls	r3, r3, #2
 801b0e4:	440b      	add	r3, r1
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	2b01      	cmp	r3, #1
 801b0ea:	d901      	bls.n	801b0f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801b0ec:	2301      	movs	r3, #1
 801b0ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801b0f0:	4b11      	ldr	r3, [pc, #68]	; (801b138 <xTaskIncrementTick+0x16c>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	d007      	beq.n	801b108 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801b0f8:	2301      	movs	r3, #1
 801b0fa:	617b      	str	r3, [r7, #20]
 801b0fc:	e004      	b.n	801b108 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801b0fe:	4b0f      	ldr	r3, [pc, #60]	; (801b13c <xTaskIncrementTick+0x170>)
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	3301      	adds	r3, #1
 801b104:	4a0d      	ldr	r2, [pc, #52]	; (801b13c <xTaskIncrementTick+0x170>)
 801b106:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801b108:	697b      	ldr	r3, [r7, #20]
}
 801b10a:	4618      	mov	r0, r3
 801b10c:	3718      	adds	r7, #24
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}
 801b112:	bf00      	nop
 801b114:	20002778 	.word	0x20002778
 801b118:	20002754 	.word	0x20002754
 801b11c:	20002708 	.word	0x20002708
 801b120:	2000270c 	.word	0x2000270c
 801b124:	20002768 	.word	0x20002768
 801b128:	20002770 	.word	0x20002770
 801b12c:	20002758 	.word	0x20002758
 801b130:	20002280 	.word	0x20002280
 801b134:	2000227c 	.word	0x2000227c
 801b138:	20002764 	.word	0x20002764
 801b13c:	20002760 	.word	0x20002760

0801b140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801b140:	b480      	push	{r7}
 801b142:	b085      	sub	sp, #20
 801b144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801b146:	4b28      	ldr	r3, [pc, #160]	; (801b1e8 <vTaskSwitchContext+0xa8>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d003      	beq.n	801b156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801b14e:	4b27      	ldr	r3, [pc, #156]	; (801b1ec <vTaskSwitchContext+0xac>)
 801b150:	2201      	movs	r2, #1
 801b152:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801b154:	e041      	b.n	801b1da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801b156:	4b25      	ldr	r3, [pc, #148]	; (801b1ec <vTaskSwitchContext+0xac>)
 801b158:	2200      	movs	r2, #0
 801b15a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b15c:	4b24      	ldr	r3, [pc, #144]	; (801b1f0 <vTaskSwitchContext+0xb0>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	60fb      	str	r3, [r7, #12]
 801b162:	e010      	b.n	801b186 <vTaskSwitchContext+0x46>
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d10a      	bne.n	801b180 <vTaskSwitchContext+0x40>
	__asm volatile
 801b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b16e:	f383 8811 	msr	BASEPRI, r3
 801b172:	f3bf 8f6f 	isb	sy
 801b176:	f3bf 8f4f 	dsb	sy
 801b17a:	607b      	str	r3, [r7, #4]
}
 801b17c:	bf00      	nop
 801b17e:	e7fe      	b.n	801b17e <vTaskSwitchContext+0x3e>
 801b180:	68fb      	ldr	r3, [r7, #12]
 801b182:	3b01      	subs	r3, #1
 801b184:	60fb      	str	r3, [r7, #12]
 801b186:	491b      	ldr	r1, [pc, #108]	; (801b1f4 <vTaskSwitchContext+0xb4>)
 801b188:	68fa      	ldr	r2, [r7, #12]
 801b18a:	4613      	mov	r3, r2
 801b18c:	009b      	lsls	r3, r3, #2
 801b18e:	4413      	add	r3, r2
 801b190:	009b      	lsls	r3, r3, #2
 801b192:	440b      	add	r3, r1
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d0e4      	beq.n	801b164 <vTaskSwitchContext+0x24>
 801b19a:	68fa      	ldr	r2, [r7, #12]
 801b19c:	4613      	mov	r3, r2
 801b19e:	009b      	lsls	r3, r3, #2
 801b1a0:	4413      	add	r3, r2
 801b1a2:	009b      	lsls	r3, r3, #2
 801b1a4:	4a13      	ldr	r2, [pc, #76]	; (801b1f4 <vTaskSwitchContext+0xb4>)
 801b1a6:	4413      	add	r3, r2
 801b1a8:	60bb      	str	r3, [r7, #8]
 801b1aa:	68bb      	ldr	r3, [r7, #8]
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	685a      	ldr	r2, [r3, #4]
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	605a      	str	r2, [r3, #4]
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	685a      	ldr	r2, [r3, #4]
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	3308      	adds	r3, #8
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d104      	bne.n	801b1ca <vTaskSwitchContext+0x8a>
 801b1c0:	68bb      	ldr	r3, [r7, #8]
 801b1c2:	685b      	ldr	r3, [r3, #4]
 801b1c4:	685a      	ldr	r2, [r3, #4]
 801b1c6:	68bb      	ldr	r3, [r7, #8]
 801b1c8:	605a      	str	r2, [r3, #4]
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	685b      	ldr	r3, [r3, #4]
 801b1ce:	68db      	ldr	r3, [r3, #12]
 801b1d0:	4a09      	ldr	r2, [pc, #36]	; (801b1f8 <vTaskSwitchContext+0xb8>)
 801b1d2:	6013      	str	r3, [r2, #0]
 801b1d4:	4a06      	ldr	r2, [pc, #24]	; (801b1f0 <vTaskSwitchContext+0xb0>)
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	6013      	str	r3, [r2, #0]
}
 801b1da:	bf00      	nop
 801b1dc:	3714      	adds	r7, #20
 801b1de:	46bd      	mov	sp, r7
 801b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e4:	4770      	bx	lr
 801b1e6:	bf00      	nop
 801b1e8:	20002778 	.word	0x20002778
 801b1ec:	20002764 	.word	0x20002764
 801b1f0:	20002758 	.word	0x20002758
 801b1f4:	20002280 	.word	0x20002280
 801b1f8:	2000227c 	.word	0x2000227c

0801b1fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801b1fc:	b580      	push	{r7, lr}
 801b1fe:	b084      	sub	sp, #16
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	d10a      	bne.n	801b222 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801b20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b210:	f383 8811 	msr	BASEPRI, r3
 801b214:	f3bf 8f6f 	isb	sy
 801b218:	f3bf 8f4f 	dsb	sy
 801b21c:	60fb      	str	r3, [r7, #12]
}
 801b21e:	bf00      	nop
 801b220:	e7fe      	b.n	801b220 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b222:	4b07      	ldr	r3, [pc, #28]	; (801b240 <vTaskPlaceOnEventList+0x44>)
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	3318      	adds	r3, #24
 801b228:	4619      	mov	r1, r3
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f7fe fa8d 	bl	801974a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801b230:	2101      	movs	r1, #1
 801b232:	6838      	ldr	r0, [r7, #0]
 801b234:	f000 fb7a 	bl	801b92c <prvAddCurrentTaskToDelayedList>
}
 801b238:	bf00      	nop
 801b23a:	3710      	adds	r7, #16
 801b23c:	46bd      	mov	sp, r7
 801b23e:	bd80      	pop	{r7, pc}
 801b240:	2000227c 	.word	0x2000227c

0801b244 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801b244:	b580      	push	{r7, lr}
 801b246:	b086      	sub	sp, #24
 801b248:	af00      	add	r7, sp, #0
 801b24a:	60f8      	str	r0, [r7, #12]
 801b24c:	60b9      	str	r1, [r7, #8]
 801b24e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801b250:	68fb      	ldr	r3, [r7, #12]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d10a      	bne.n	801b26c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b25a:	f383 8811 	msr	BASEPRI, r3
 801b25e:	f3bf 8f6f 	isb	sy
 801b262:	f3bf 8f4f 	dsb	sy
 801b266:	617b      	str	r3, [r7, #20]
}
 801b268:	bf00      	nop
 801b26a:	e7fe      	b.n	801b26a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801b26c:	4b0a      	ldr	r3, [pc, #40]	; (801b298 <vTaskPlaceOnEventListRestricted+0x54>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	3318      	adds	r3, #24
 801b272:	4619      	mov	r1, r3
 801b274:	68f8      	ldr	r0, [r7, #12]
 801b276:	f7fe fa44 	bl	8019702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	d002      	beq.n	801b286 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801b280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b284:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801b286:	6879      	ldr	r1, [r7, #4]
 801b288:	68b8      	ldr	r0, [r7, #8]
 801b28a:	f000 fb4f 	bl	801b92c <prvAddCurrentTaskToDelayedList>
	}
 801b28e:	bf00      	nop
 801b290:	3718      	adds	r7, #24
 801b292:	46bd      	mov	sp, r7
 801b294:	bd80      	pop	{r7, pc}
 801b296:	bf00      	nop
 801b298:	2000227c 	.word	0x2000227c

0801b29c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b086      	sub	sp, #24
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	68db      	ldr	r3, [r3, #12]
 801b2a8:	68db      	ldr	r3, [r3, #12]
 801b2aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801b2ac:	693b      	ldr	r3, [r7, #16]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d10a      	bne.n	801b2c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2b6:	f383 8811 	msr	BASEPRI, r3
 801b2ba:	f3bf 8f6f 	isb	sy
 801b2be:	f3bf 8f4f 	dsb	sy
 801b2c2:	60fb      	str	r3, [r7, #12]
}
 801b2c4:	bf00      	nop
 801b2c6:	e7fe      	b.n	801b2c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801b2c8:	693b      	ldr	r3, [r7, #16]
 801b2ca:	3318      	adds	r3, #24
 801b2cc:	4618      	mov	r0, r3
 801b2ce:	f7fe fa75 	bl	80197bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b2d2:	4b1e      	ldr	r3, [pc, #120]	; (801b34c <xTaskRemoveFromEventList+0xb0>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d11d      	bne.n	801b316 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801b2da:	693b      	ldr	r3, [r7, #16]
 801b2dc:	3304      	adds	r3, #4
 801b2de:	4618      	mov	r0, r3
 801b2e0:	f7fe fa6c 	bl	80197bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801b2e4:	693b      	ldr	r3, [r7, #16]
 801b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2e8:	4b19      	ldr	r3, [pc, #100]	; (801b350 <xTaskRemoveFromEventList+0xb4>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	429a      	cmp	r2, r3
 801b2ee:	d903      	bls.n	801b2f8 <xTaskRemoveFromEventList+0x5c>
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b2f4:	4a16      	ldr	r2, [pc, #88]	; (801b350 <xTaskRemoveFromEventList+0xb4>)
 801b2f6:	6013      	str	r3, [r2, #0]
 801b2f8:	693b      	ldr	r3, [r7, #16]
 801b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	009b      	lsls	r3, r3, #2
 801b300:	4413      	add	r3, r2
 801b302:	009b      	lsls	r3, r3, #2
 801b304:	4a13      	ldr	r2, [pc, #76]	; (801b354 <xTaskRemoveFromEventList+0xb8>)
 801b306:	441a      	add	r2, r3
 801b308:	693b      	ldr	r3, [r7, #16]
 801b30a:	3304      	adds	r3, #4
 801b30c:	4619      	mov	r1, r3
 801b30e:	4610      	mov	r0, r2
 801b310:	f7fe f9f7 	bl	8019702 <vListInsertEnd>
 801b314:	e005      	b.n	801b322 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801b316:	693b      	ldr	r3, [r7, #16]
 801b318:	3318      	adds	r3, #24
 801b31a:	4619      	mov	r1, r3
 801b31c:	480e      	ldr	r0, [pc, #56]	; (801b358 <xTaskRemoveFromEventList+0xbc>)
 801b31e:	f7fe f9f0 	bl	8019702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801b322:	693b      	ldr	r3, [r7, #16]
 801b324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b326:	4b0d      	ldr	r3, [pc, #52]	; (801b35c <xTaskRemoveFromEventList+0xc0>)
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b32c:	429a      	cmp	r2, r3
 801b32e:	d905      	bls.n	801b33c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801b330:	2301      	movs	r3, #1
 801b332:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801b334:	4b0a      	ldr	r3, [pc, #40]	; (801b360 <xTaskRemoveFromEventList+0xc4>)
 801b336:	2201      	movs	r2, #1
 801b338:	601a      	str	r2, [r3, #0]
 801b33a:	e001      	b.n	801b340 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801b33c:	2300      	movs	r3, #0
 801b33e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801b340:	697b      	ldr	r3, [r7, #20]
}
 801b342:	4618      	mov	r0, r3
 801b344:	3718      	adds	r7, #24
 801b346:	46bd      	mov	sp, r7
 801b348:	bd80      	pop	{r7, pc}
 801b34a:	bf00      	nop
 801b34c:	20002778 	.word	0x20002778
 801b350:	20002758 	.word	0x20002758
 801b354:	20002280 	.word	0x20002280
 801b358:	20002710 	.word	0x20002710
 801b35c:	2000227c 	.word	0x2000227c
 801b360:	20002764 	.word	0x20002764

0801b364 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801b364:	b480      	push	{r7}
 801b366:	b083      	sub	sp, #12
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801b36c:	4b06      	ldr	r3, [pc, #24]	; (801b388 <vTaskInternalSetTimeOutState+0x24>)
 801b36e:	681a      	ldr	r2, [r3, #0]
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801b374:	4b05      	ldr	r3, [pc, #20]	; (801b38c <vTaskInternalSetTimeOutState+0x28>)
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	605a      	str	r2, [r3, #4]
}
 801b37c:	bf00      	nop
 801b37e:	370c      	adds	r7, #12
 801b380:	46bd      	mov	sp, r7
 801b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b386:	4770      	bx	lr
 801b388:	20002768 	.word	0x20002768
 801b38c:	20002754 	.word	0x20002754

0801b390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801b390:	b580      	push	{r7, lr}
 801b392:	b088      	sub	sp, #32
 801b394:	af00      	add	r7, sp, #0
 801b396:	6078      	str	r0, [r7, #4]
 801b398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2b00      	cmp	r3, #0
 801b39e:	d10a      	bne.n	801b3b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3a4:	f383 8811 	msr	BASEPRI, r3
 801b3a8:	f3bf 8f6f 	isb	sy
 801b3ac:	f3bf 8f4f 	dsb	sy
 801b3b0:	613b      	str	r3, [r7, #16]
}
 801b3b2:	bf00      	nop
 801b3b4:	e7fe      	b.n	801b3b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d10a      	bne.n	801b3d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3c0:	f383 8811 	msr	BASEPRI, r3
 801b3c4:	f3bf 8f6f 	isb	sy
 801b3c8:	f3bf 8f4f 	dsb	sy
 801b3cc:	60fb      	str	r3, [r7, #12]
}
 801b3ce:	bf00      	nop
 801b3d0:	e7fe      	b.n	801b3d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801b3d2:	f000 ff77 	bl	801c2c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801b3d6:	4b1d      	ldr	r3, [pc, #116]	; (801b44c <xTaskCheckForTimeOut+0xbc>)
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	685b      	ldr	r3, [r3, #4]
 801b3e0:	69ba      	ldr	r2, [r7, #24]
 801b3e2:	1ad3      	subs	r3, r2, r3
 801b3e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801b3e6:	683b      	ldr	r3, [r7, #0]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b3ee:	d102      	bne.n	801b3f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	61fb      	str	r3, [r7, #28]
 801b3f4:	e023      	b.n	801b43e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681a      	ldr	r2, [r3, #0]
 801b3fa:	4b15      	ldr	r3, [pc, #84]	; (801b450 <xTaskCheckForTimeOut+0xc0>)
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d007      	beq.n	801b412 <xTaskCheckForTimeOut+0x82>
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	685b      	ldr	r3, [r3, #4]
 801b406:	69ba      	ldr	r2, [r7, #24]
 801b408:	429a      	cmp	r2, r3
 801b40a:	d302      	bcc.n	801b412 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801b40c:	2301      	movs	r3, #1
 801b40e:	61fb      	str	r3, [r7, #28]
 801b410:	e015      	b.n	801b43e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	697a      	ldr	r2, [r7, #20]
 801b418:	429a      	cmp	r2, r3
 801b41a:	d20b      	bcs.n	801b434 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801b41c:	683b      	ldr	r3, [r7, #0]
 801b41e:	681a      	ldr	r2, [r3, #0]
 801b420:	697b      	ldr	r3, [r7, #20]
 801b422:	1ad2      	subs	r2, r2, r3
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801b428:	6878      	ldr	r0, [r7, #4]
 801b42a:	f7ff ff9b 	bl	801b364 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801b42e:	2300      	movs	r3, #0
 801b430:	61fb      	str	r3, [r7, #28]
 801b432:	e004      	b.n	801b43e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801b434:	683b      	ldr	r3, [r7, #0]
 801b436:	2200      	movs	r2, #0
 801b438:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801b43a:	2301      	movs	r3, #1
 801b43c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801b43e:	f000 ff71 	bl	801c324 <vPortExitCritical>

	return xReturn;
 801b442:	69fb      	ldr	r3, [r7, #28]
}
 801b444:	4618      	mov	r0, r3
 801b446:	3720      	adds	r7, #32
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	20002754 	.word	0x20002754
 801b450:	20002768 	.word	0x20002768

0801b454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801b454:	b480      	push	{r7}
 801b456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801b458:	4b03      	ldr	r3, [pc, #12]	; (801b468 <vTaskMissedYield+0x14>)
 801b45a:	2201      	movs	r2, #1
 801b45c:	601a      	str	r2, [r3, #0]
}
 801b45e:	bf00      	nop
 801b460:	46bd      	mov	sp, r7
 801b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b466:	4770      	bx	lr
 801b468:	20002764 	.word	0x20002764

0801b46c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801b46c:	b580      	push	{r7, lr}
 801b46e:	b082      	sub	sp, #8
 801b470:	af00      	add	r7, sp, #0
 801b472:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801b474:	f000 f852 	bl	801b51c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801b478:	4b06      	ldr	r3, [pc, #24]	; (801b494 <prvIdleTask+0x28>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	2b01      	cmp	r3, #1
 801b47e:	d9f9      	bls.n	801b474 <prvIdleTask+0x8>
			{
				taskYIELD();
 801b480:	4b05      	ldr	r3, [pc, #20]	; (801b498 <prvIdleTask+0x2c>)
 801b482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b486:	601a      	str	r2, [r3, #0]
 801b488:	f3bf 8f4f 	dsb	sy
 801b48c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801b490:	e7f0      	b.n	801b474 <prvIdleTask+0x8>
 801b492:	bf00      	nop
 801b494:	20002280 	.word	0x20002280
 801b498:	e000ed04 	.word	0xe000ed04

0801b49c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b082      	sub	sp, #8
 801b4a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b4a2:	2300      	movs	r3, #0
 801b4a4:	607b      	str	r3, [r7, #4]
 801b4a6:	e00c      	b.n	801b4c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	4613      	mov	r3, r2
 801b4ac:	009b      	lsls	r3, r3, #2
 801b4ae:	4413      	add	r3, r2
 801b4b0:	009b      	lsls	r3, r3, #2
 801b4b2:	4a12      	ldr	r2, [pc, #72]	; (801b4fc <prvInitialiseTaskLists+0x60>)
 801b4b4:	4413      	add	r3, r2
 801b4b6:	4618      	mov	r0, r3
 801b4b8:	f7fe f8f6 	bl	80196a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	3301      	adds	r3, #1
 801b4c0:	607b      	str	r3, [r7, #4]
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	2b37      	cmp	r3, #55	; 0x37
 801b4c6:	d9ef      	bls.n	801b4a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801b4c8:	480d      	ldr	r0, [pc, #52]	; (801b500 <prvInitialiseTaskLists+0x64>)
 801b4ca:	f7fe f8ed 	bl	80196a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801b4ce:	480d      	ldr	r0, [pc, #52]	; (801b504 <prvInitialiseTaskLists+0x68>)
 801b4d0:	f7fe f8ea 	bl	80196a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801b4d4:	480c      	ldr	r0, [pc, #48]	; (801b508 <prvInitialiseTaskLists+0x6c>)
 801b4d6:	f7fe f8e7 	bl	80196a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801b4da:	480c      	ldr	r0, [pc, #48]	; (801b50c <prvInitialiseTaskLists+0x70>)
 801b4dc:	f7fe f8e4 	bl	80196a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801b4e0:	480b      	ldr	r0, [pc, #44]	; (801b510 <prvInitialiseTaskLists+0x74>)
 801b4e2:	f7fe f8e1 	bl	80196a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801b4e6:	4b0b      	ldr	r3, [pc, #44]	; (801b514 <prvInitialiseTaskLists+0x78>)
 801b4e8:	4a05      	ldr	r2, [pc, #20]	; (801b500 <prvInitialiseTaskLists+0x64>)
 801b4ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801b4ec:	4b0a      	ldr	r3, [pc, #40]	; (801b518 <prvInitialiseTaskLists+0x7c>)
 801b4ee:	4a05      	ldr	r2, [pc, #20]	; (801b504 <prvInitialiseTaskLists+0x68>)
 801b4f0:	601a      	str	r2, [r3, #0]
}
 801b4f2:	bf00      	nop
 801b4f4:	3708      	adds	r7, #8
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	20002280 	.word	0x20002280
 801b500:	200026e0 	.word	0x200026e0
 801b504:	200026f4 	.word	0x200026f4
 801b508:	20002710 	.word	0x20002710
 801b50c:	20002724 	.word	0x20002724
 801b510:	2000273c 	.word	0x2000273c
 801b514:	20002708 	.word	0x20002708
 801b518:	2000270c 	.word	0x2000270c

0801b51c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b082      	sub	sp, #8
 801b520:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b522:	e019      	b.n	801b558 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801b524:	f000 fece 	bl	801c2c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b528:	4b10      	ldr	r3, [pc, #64]	; (801b56c <prvCheckTasksWaitingTermination+0x50>)
 801b52a:	68db      	ldr	r3, [r3, #12]
 801b52c:	68db      	ldr	r3, [r3, #12]
 801b52e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	3304      	adds	r3, #4
 801b534:	4618      	mov	r0, r3
 801b536:	f7fe f941 	bl	80197bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801b53a:	4b0d      	ldr	r3, [pc, #52]	; (801b570 <prvCheckTasksWaitingTermination+0x54>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	3b01      	subs	r3, #1
 801b540:	4a0b      	ldr	r2, [pc, #44]	; (801b570 <prvCheckTasksWaitingTermination+0x54>)
 801b542:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801b544:	4b0b      	ldr	r3, [pc, #44]	; (801b574 <prvCheckTasksWaitingTermination+0x58>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	3b01      	subs	r3, #1
 801b54a:	4a0a      	ldr	r2, [pc, #40]	; (801b574 <prvCheckTasksWaitingTermination+0x58>)
 801b54c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801b54e:	f000 fee9 	bl	801c324 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f000 f810 	bl	801b578 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801b558:	4b06      	ldr	r3, [pc, #24]	; (801b574 <prvCheckTasksWaitingTermination+0x58>)
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d1e1      	bne.n	801b524 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801b560:	bf00      	nop
 801b562:	bf00      	nop
 801b564:	3708      	adds	r7, #8
 801b566:	46bd      	mov	sp, r7
 801b568:	bd80      	pop	{r7, pc}
 801b56a:	bf00      	nop
 801b56c:	20002724 	.word	0x20002724
 801b570:	20002750 	.word	0x20002750
 801b574:	20002738 	.word	0x20002738

0801b578 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b084      	sub	sp, #16
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b586:	2b00      	cmp	r3, #0
 801b588:	d108      	bne.n	801b59c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b58e:	4618      	mov	r0, r3
 801b590:	f001 f886 	bl	801c6a0 <vPortFree>
				vPortFree( pxTCB );
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	f001 f883 	bl	801c6a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b59a:	e018      	b.n	801b5ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b5a2:	2b01      	cmp	r3, #1
 801b5a4:	d103      	bne.n	801b5ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b5a6:	6878      	ldr	r0, [r7, #4]
 801b5a8:	f001 f87a 	bl	801c6a0 <vPortFree>
	}
 801b5ac:	e00f      	b.n	801b5ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b5b4:	2b02      	cmp	r3, #2
 801b5b6:	d00a      	beq.n	801b5ce <prvDeleteTCB+0x56>
	__asm volatile
 801b5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5bc:	f383 8811 	msr	BASEPRI, r3
 801b5c0:	f3bf 8f6f 	isb	sy
 801b5c4:	f3bf 8f4f 	dsb	sy
 801b5c8:	60fb      	str	r3, [r7, #12]
}
 801b5ca:	bf00      	nop
 801b5cc:	e7fe      	b.n	801b5cc <prvDeleteTCB+0x54>
	}
 801b5ce:	bf00      	nop
 801b5d0:	3710      	adds	r7, #16
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	bd80      	pop	{r7, pc}
	...

0801b5d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b5d8:	b480      	push	{r7}
 801b5da:	b083      	sub	sp, #12
 801b5dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b5de:	4b0c      	ldr	r3, [pc, #48]	; (801b610 <prvResetNextTaskUnblockTime+0x38>)
 801b5e0:	681b      	ldr	r3, [r3, #0]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d104      	bne.n	801b5f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b5e8:	4b0a      	ldr	r3, [pc, #40]	; (801b614 <prvResetNextTaskUnblockTime+0x3c>)
 801b5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b5ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b5f0:	e008      	b.n	801b604 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b5f2:	4b07      	ldr	r3, [pc, #28]	; (801b610 <prvResetNextTaskUnblockTime+0x38>)
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	68db      	ldr	r3, [r3, #12]
 801b5f8:	68db      	ldr	r3, [r3, #12]
 801b5fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	685b      	ldr	r3, [r3, #4]
 801b600:	4a04      	ldr	r2, [pc, #16]	; (801b614 <prvResetNextTaskUnblockTime+0x3c>)
 801b602:	6013      	str	r3, [r2, #0]
}
 801b604:	bf00      	nop
 801b606:	370c      	adds	r7, #12
 801b608:	46bd      	mov	sp, r7
 801b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b60e:	4770      	bx	lr
 801b610:	20002708 	.word	0x20002708
 801b614:	20002770 	.word	0x20002770

0801b618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b618:	b480      	push	{r7}
 801b61a:	b083      	sub	sp, #12
 801b61c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b61e:	4b0b      	ldr	r3, [pc, #44]	; (801b64c <xTaskGetSchedulerState+0x34>)
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	2b00      	cmp	r3, #0
 801b624:	d102      	bne.n	801b62c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b626:	2301      	movs	r3, #1
 801b628:	607b      	str	r3, [r7, #4]
 801b62a:	e008      	b.n	801b63e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b62c:	4b08      	ldr	r3, [pc, #32]	; (801b650 <xTaskGetSchedulerState+0x38>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d102      	bne.n	801b63a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b634:	2302      	movs	r3, #2
 801b636:	607b      	str	r3, [r7, #4]
 801b638:	e001      	b.n	801b63e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b63a:	2300      	movs	r3, #0
 801b63c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b63e:	687b      	ldr	r3, [r7, #4]
	}
 801b640:	4618      	mov	r0, r3
 801b642:	370c      	adds	r7, #12
 801b644:	46bd      	mov	sp, r7
 801b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b64a:	4770      	bx	lr
 801b64c:	2000275c 	.word	0x2000275c
 801b650:	20002778 	.word	0x20002778

0801b654 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801b654:	b580      	push	{r7, lr}
 801b656:	b084      	sub	sp, #16
 801b658:	af00      	add	r7, sp, #0
 801b65a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801b660:	2300      	movs	r3, #0
 801b662:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d051      	beq.n	801b70e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b66e:	4b2a      	ldr	r3, [pc, #168]	; (801b718 <xTaskPriorityInherit+0xc4>)
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b674:	429a      	cmp	r2, r3
 801b676:	d241      	bcs.n	801b6fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	699b      	ldr	r3, [r3, #24]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	db06      	blt.n	801b68e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b680:	4b25      	ldr	r3, [pc, #148]	; (801b718 <xTaskPriorityInherit+0xc4>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b686:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b68a:	68bb      	ldr	r3, [r7, #8]
 801b68c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	6959      	ldr	r1, [r3, #20]
 801b692:	68bb      	ldr	r3, [r7, #8]
 801b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b696:	4613      	mov	r3, r2
 801b698:	009b      	lsls	r3, r3, #2
 801b69a:	4413      	add	r3, r2
 801b69c:	009b      	lsls	r3, r3, #2
 801b69e:	4a1f      	ldr	r2, [pc, #124]	; (801b71c <xTaskPriorityInherit+0xc8>)
 801b6a0:	4413      	add	r3, r2
 801b6a2:	4299      	cmp	r1, r3
 801b6a4:	d122      	bne.n	801b6ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b6a6:	68bb      	ldr	r3, [r7, #8]
 801b6a8:	3304      	adds	r3, #4
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f7fe f886 	bl	80197bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b6b0:	4b19      	ldr	r3, [pc, #100]	; (801b718 <xTaskPriorityInherit+0xc4>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801b6ba:	68bb      	ldr	r3, [r7, #8]
 801b6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6be:	4b18      	ldr	r3, [pc, #96]	; (801b720 <xTaskPriorityInherit+0xcc>)
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d903      	bls.n	801b6ce <xTaskPriorityInherit+0x7a>
 801b6c6:	68bb      	ldr	r3, [r7, #8]
 801b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ca:	4a15      	ldr	r2, [pc, #84]	; (801b720 <xTaskPriorityInherit+0xcc>)
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6d2:	4613      	mov	r3, r2
 801b6d4:	009b      	lsls	r3, r3, #2
 801b6d6:	4413      	add	r3, r2
 801b6d8:	009b      	lsls	r3, r3, #2
 801b6da:	4a10      	ldr	r2, [pc, #64]	; (801b71c <xTaskPriorityInherit+0xc8>)
 801b6dc:	441a      	add	r2, r3
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	3304      	adds	r3, #4
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	4610      	mov	r0, r2
 801b6e6:	f7fe f80c 	bl	8019702 <vListInsertEnd>
 801b6ea:	e004      	b.n	801b6f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801b6ec:	4b0a      	ldr	r3, [pc, #40]	; (801b718 <xTaskPriorityInherit+0xc4>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b6f2:	68bb      	ldr	r3, [r7, #8]
 801b6f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801b6f6:	2301      	movs	r3, #1
 801b6f8:	60fb      	str	r3, [r7, #12]
 801b6fa:	e008      	b.n	801b70e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b700:	4b05      	ldr	r3, [pc, #20]	; (801b718 <xTaskPriorityInherit+0xc4>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b706:	429a      	cmp	r2, r3
 801b708:	d201      	bcs.n	801b70e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801b70a:	2301      	movs	r3, #1
 801b70c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b70e:	68fb      	ldr	r3, [r7, #12]
	}
 801b710:	4618      	mov	r0, r3
 801b712:	3710      	adds	r7, #16
 801b714:	46bd      	mov	sp, r7
 801b716:	bd80      	pop	{r7, pc}
 801b718:	2000227c 	.word	0x2000227c
 801b71c:	20002280 	.word	0x20002280
 801b720:	20002758 	.word	0x20002758

0801b724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b724:	b580      	push	{r7, lr}
 801b726:	b086      	sub	sp, #24
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b730:	2300      	movs	r3, #0
 801b732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d056      	beq.n	801b7e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b73a:	4b2e      	ldr	r3, [pc, #184]	; (801b7f4 <xTaskPriorityDisinherit+0xd0>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	693a      	ldr	r2, [r7, #16]
 801b740:	429a      	cmp	r2, r3
 801b742:	d00a      	beq.n	801b75a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b748:	f383 8811 	msr	BASEPRI, r3
 801b74c:	f3bf 8f6f 	isb	sy
 801b750:	f3bf 8f4f 	dsb	sy
 801b754:	60fb      	str	r3, [r7, #12]
}
 801b756:	bf00      	nop
 801b758:	e7fe      	b.n	801b758 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b75a:	693b      	ldr	r3, [r7, #16]
 801b75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d10a      	bne.n	801b778 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b762:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b766:	f383 8811 	msr	BASEPRI, r3
 801b76a:	f3bf 8f6f 	isb	sy
 801b76e:	f3bf 8f4f 	dsb	sy
 801b772:	60bb      	str	r3, [r7, #8]
}
 801b774:	bf00      	nop
 801b776:	e7fe      	b.n	801b776 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b778:	693b      	ldr	r3, [r7, #16]
 801b77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b77c:	1e5a      	subs	r2, r3, #1
 801b77e:	693b      	ldr	r3, [r7, #16]
 801b780:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b782:	693b      	ldr	r3, [r7, #16]
 801b784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b786:	693b      	ldr	r3, [r7, #16]
 801b788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d02c      	beq.n	801b7e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b78e:	693b      	ldr	r3, [r7, #16]
 801b790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b792:	2b00      	cmp	r3, #0
 801b794:	d128      	bne.n	801b7e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	3304      	adds	r3, #4
 801b79a:	4618      	mov	r0, r3
 801b79c:	f7fe f80e 	bl	80197bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b7a0:	693b      	ldr	r3, [r7, #16]
 801b7a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b7a4:	693b      	ldr	r3, [r7, #16]
 801b7a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b7a8:	693b      	ldr	r3, [r7, #16]
 801b7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b7b0:	693b      	ldr	r3, [r7, #16]
 801b7b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b7b4:	693b      	ldr	r3, [r7, #16]
 801b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7b8:	4b0f      	ldr	r3, [pc, #60]	; (801b7f8 <xTaskPriorityDisinherit+0xd4>)
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	d903      	bls.n	801b7c8 <xTaskPriorityDisinherit+0xa4>
 801b7c0:	693b      	ldr	r3, [r7, #16]
 801b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7c4:	4a0c      	ldr	r2, [pc, #48]	; (801b7f8 <xTaskPriorityDisinherit+0xd4>)
 801b7c6:	6013      	str	r3, [r2, #0]
 801b7c8:	693b      	ldr	r3, [r7, #16]
 801b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7cc:	4613      	mov	r3, r2
 801b7ce:	009b      	lsls	r3, r3, #2
 801b7d0:	4413      	add	r3, r2
 801b7d2:	009b      	lsls	r3, r3, #2
 801b7d4:	4a09      	ldr	r2, [pc, #36]	; (801b7fc <xTaskPriorityDisinherit+0xd8>)
 801b7d6:	441a      	add	r2, r3
 801b7d8:	693b      	ldr	r3, [r7, #16]
 801b7da:	3304      	adds	r3, #4
 801b7dc:	4619      	mov	r1, r3
 801b7de:	4610      	mov	r0, r2
 801b7e0:	f7fd ff8f 	bl	8019702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b7e8:	697b      	ldr	r3, [r7, #20]
	}
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	3718      	adds	r7, #24
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	bd80      	pop	{r7, pc}
 801b7f2:	bf00      	nop
 801b7f4:	2000227c 	.word	0x2000227c
 801b7f8:	20002758 	.word	0x20002758
 801b7fc:	20002280 	.word	0x20002280

0801b800 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801b800:	b580      	push	{r7, lr}
 801b802:	b088      	sub	sp, #32
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
 801b808:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801b80e:	2301      	movs	r3, #1
 801b810:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d06a      	beq.n	801b8ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801b818:	69bb      	ldr	r3, [r7, #24]
 801b81a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d10a      	bne.n	801b836 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b824:	f383 8811 	msr	BASEPRI, r3
 801b828:	f3bf 8f6f 	isb	sy
 801b82c:	f3bf 8f4f 	dsb	sy
 801b830:	60fb      	str	r3, [r7, #12]
}
 801b832:	bf00      	nop
 801b834:	e7fe      	b.n	801b834 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801b836:	69bb      	ldr	r3, [r7, #24]
 801b838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b83a:	683a      	ldr	r2, [r7, #0]
 801b83c:	429a      	cmp	r2, r3
 801b83e:	d902      	bls.n	801b846 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801b840:	683b      	ldr	r3, [r7, #0]
 801b842:	61fb      	str	r3, [r7, #28]
 801b844:	e002      	b.n	801b84c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801b846:	69bb      	ldr	r3, [r7, #24]
 801b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b84a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801b84c:	69bb      	ldr	r3, [r7, #24]
 801b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b850:	69fa      	ldr	r2, [r7, #28]
 801b852:	429a      	cmp	r2, r3
 801b854:	d04b      	beq.n	801b8ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b85a:	697a      	ldr	r2, [r7, #20]
 801b85c:	429a      	cmp	r2, r3
 801b85e:	d146      	bne.n	801b8ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801b860:	4b25      	ldr	r3, [pc, #148]	; (801b8f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	69ba      	ldr	r2, [r7, #24]
 801b866:	429a      	cmp	r2, r3
 801b868:	d10a      	bne.n	801b880 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801b86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b86e:	f383 8811 	msr	BASEPRI, r3
 801b872:	f3bf 8f6f 	isb	sy
 801b876:	f3bf 8f4f 	dsb	sy
 801b87a:	60bb      	str	r3, [r7, #8]
}
 801b87c:	bf00      	nop
 801b87e:	e7fe      	b.n	801b87e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801b880:	69bb      	ldr	r3, [r7, #24]
 801b882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b884:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801b886:	69bb      	ldr	r3, [r7, #24]
 801b888:	69fa      	ldr	r2, [r7, #28]
 801b88a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801b88c:	69bb      	ldr	r3, [r7, #24]
 801b88e:	699b      	ldr	r3, [r3, #24]
 801b890:	2b00      	cmp	r3, #0
 801b892:	db04      	blt.n	801b89e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b894:	69fb      	ldr	r3, [r7, #28]
 801b896:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b89a:	69bb      	ldr	r3, [r7, #24]
 801b89c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801b89e:	69bb      	ldr	r3, [r7, #24]
 801b8a0:	6959      	ldr	r1, [r3, #20]
 801b8a2:	693a      	ldr	r2, [r7, #16]
 801b8a4:	4613      	mov	r3, r2
 801b8a6:	009b      	lsls	r3, r3, #2
 801b8a8:	4413      	add	r3, r2
 801b8aa:	009b      	lsls	r3, r3, #2
 801b8ac:	4a13      	ldr	r2, [pc, #76]	; (801b8fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b8ae:	4413      	add	r3, r2
 801b8b0:	4299      	cmp	r1, r3
 801b8b2:	d11c      	bne.n	801b8ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b8b4:	69bb      	ldr	r3, [r7, #24]
 801b8b6:	3304      	adds	r3, #4
 801b8b8:	4618      	mov	r0, r3
 801b8ba:	f7fd ff7f 	bl	80197bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801b8be:	69bb      	ldr	r3, [r7, #24]
 801b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8c2:	4b0f      	ldr	r3, [pc, #60]	; (801b900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d903      	bls.n	801b8d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801b8ca:	69bb      	ldr	r3, [r7, #24]
 801b8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b8ce:	4a0c      	ldr	r2, [pc, #48]	; (801b900 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801b8d0:	6013      	str	r3, [r2, #0]
 801b8d2:	69bb      	ldr	r3, [r7, #24]
 801b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b8d6:	4613      	mov	r3, r2
 801b8d8:	009b      	lsls	r3, r3, #2
 801b8da:	4413      	add	r3, r2
 801b8dc:	009b      	lsls	r3, r3, #2
 801b8de:	4a07      	ldr	r2, [pc, #28]	; (801b8fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801b8e0:	441a      	add	r2, r3
 801b8e2:	69bb      	ldr	r3, [r7, #24]
 801b8e4:	3304      	adds	r3, #4
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	4610      	mov	r0, r2
 801b8ea:	f7fd ff0a 	bl	8019702 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b8ee:	bf00      	nop
 801b8f0:	3720      	adds	r7, #32
 801b8f2:	46bd      	mov	sp, r7
 801b8f4:	bd80      	pop	{r7, pc}
 801b8f6:	bf00      	nop
 801b8f8:	2000227c 	.word	0x2000227c
 801b8fc:	20002280 	.word	0x20002280
 801b900:	20002758 	.word	0x20002758

0801b904 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801b904:	b480      	push	{r7}
 801b906:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801b908:	4b07      	ldr	r3, [pc, #28]	; (801b928 <pvTaskIncrementMutexHeldCount+0x24>)
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d004      	beq.n	801b91a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801b910:	4b05      	ldr	r3, [pc, #20]	; (801b928 <pvTaskIncrementMutexHeldCount+0x24>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b916:	3201      	adds	r2, #1
 801b918:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801b91a:	4b03      	ldr	r3, [pc, #12]	; (801b928 <pvTaskIncrementMutexHeldCount+0x24>)
 801b91c:	681b      	ldr	r3, [r3, #0]
	}
 801b91e:	4618      	mov	r0, r3
 801b920:	46bd      	mov	sp, r7
 801b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b926:	4770      	bx	lr
 801b928:	2000227c 	.word	0x2000227c

0801b92c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b92c:	b580      	push	{r7, lr}
 801b92e:	b084      	sub	sp, #16
 801b930:	af00      	add	r7, sp, #0
 801b932:	6078      	str	r0, [r7, #4]
 801b934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b936:	4b21      	ldr	r3, [pc, #132]	; (801b9bc <prvAddCurrentTaskToDelayedList+0x90>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b93c:	4b20      	ldr	r3, [pc, #128]	; (801b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	3304      	adds	r3, #4
 801b942:	4618      	mov	r0, r3
 801b944:	f7fd ff3a 	bl	80197bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b94e:	d10a      	bne.n	801b966 <prvAddCurrentTaskToDelayedList+0x3a>
 801b950:	683b      	ldr	r3, [r7, #0]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d007      	beq.n	801b966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b956:	4b1a      	ldr	r3, [pc, #104]	; (801b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	3304      	adds	r3, #4
 801b95c:	4619      	mov	r1, r3
 801b95e:	4819      	ldr	r0, [pc, #100]	; (801b9c4 <prvAddCurrentTaskToDelayedList+0x98>)
 801b960:	f7fd fecf 	bl	8019702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b964:	e026      	b.n	801b9b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b966:	68fa      	ldr	r2, [r7, #12]
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	4413      	add	r3, r2
 801b96c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b96e:	4b14      	ldr	r3, [pc, #80]	; (801b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	68ba      	ldr	r2, [r7, #8]
 801b974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b976:	68ba      	ldr	r2, [r7, #8]
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d209      	bcs.n	801b992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b97e:	4b12      	ldr	r3, [pc, #72]	; (801b9c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 801b980:	681a      	ldr	r2, [r3, #0]
 801b982:	4b0f      	ldr	r3, [pc, #60]	; (801b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801b984:	681b      	ldr	r3, [r3, #0]
 801b986:	3304      	adds	r3, #4
 801b988:	4619      	mov	r1, r3
 801b98a:	4610      	mov	r0, r2
 801b98c:	f7fd fedd 	bl	801974a <vListInsert>
}
 801b990:	e010      	b.n	801b9b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b992:	4b0e      	ldr	r3, [pc, #56]	; (801b9cc <prvAddCurrentTaskToDelayedList+0xa0>)
 801b994:	681a      	ldr	r2, [r3, #0]
 801b996:	4b0a      	ldr	r3, [pc, #40]	; (801b9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	3304      	adds	r3, #4
 801b99c:	4619      	mov	r1, r3
 801b99e:	4610      	mov	r0, r2
 801b9a0:	f7fd fed3 	bl	801974a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b9a4:	4b0a      	ldr	r3, [pc, #40]	; (801b9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	68ba      	ldr	r2, [r7, #8]
 801b9aa:	429a      	cmp	r2, r3
 801b9ac:	d202      	bcs.n	801b9b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b9ae:	4a08      	ldr	r2, [pc, #32]	; (801b9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 801b9b0:	68bb      	ldr	r3, [r7, #8]
 801b9b2:	6013      	str	r3, [r2, #0]
}
 801b9b4:	bf00      	nop
 801b9b6:	3710      	adds	r7, #16
 801b9b8:	46bd      	mov	sp, r7
 801b9ba:	bd80      	pop	{r7, pc}
 801b9bc:	20002754 	.word	0x20002754
 801b9c0:	2000227c 	.word	0x2000227c
 801b9c4:	2000273c 	.word	0x2000273c
 801b9c8:	2000270c 	.word	0x2000270c
 801b9cc:	20002708 	.word	0x20002708
 801b9d0:	20002770 	.word	0x20002770

0801b9d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b08a      	sub	sp, #40	; 0x28
 801b9d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b9de:	f000 fb07 	bl	801bff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b9e2:	4b1c      	ldr	r3, [pc, #112]	; (801ba54 <xTimerCreateTimerTask+0x80>)
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d021      	beq.n	801ba2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b9ea:	2300      	movs	r3, #0
 801b9ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b9f2:	1d3a      	adds	r2, r7, #4
 801b9f4:	f107 0108 	add.w	r1, r7, #8
 801b9f8:	f107 030c 	add.w	r3, r7, #12
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	f7fd fe39 	bl	8019674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801ba02:	6879      	ldr	r1, [r7, #4]
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	9202      	str	r2, [sp, #8]
 801ba0a:	9301      	str	r3, [sp, #4]
 801ba0c:	2302      	movs	r3, #2
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	2300      	movs	r3, #0
 801ba12:	460a      	mov	r2, r1
 801ba14:	4910      	ldr	r1, [pc, #64]	; (801ba58 <xTimerCreateTimerTask+0x84>)
 801ba16:	4811      	ldr	r0, [pc, #68]	; (801ba5c <xTimerCreateTimerTask+0x88>)
 801ba18:	f7fe ff08 	bl	801a82c <xTaskCreateStatic>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	4a10      	ldr	r2, [pc, #64]	; (801ba60 <xTimerCreateTimerTask+0x8c>)
 801ba20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801ba22:	4b0f      	ldr	r3, [pc, #60]	; (801ba60 <xTimerCreateTimerTask+0x8c>)
 801ba24:	681b      	ldr	r3, [r3, #0]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d001      	beq.n	801ba2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801ba2a:	2301      	movs	r3, #1
 801ba2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801ba2e:	697b      	ldr	r3, [r7, #20]
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	d10a      	bne.n	801ba4a <xTimerCreateTimerTask+0x76>
	__asm volatile
 801ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba38:	f383 8811 	msr	BASEPRI, r3
 801ba3c:	f3bf 8f6f 	isb	sy
 801ba40:	f3bf 8f4f 	dsb	sy
 801ba44:	613b      	str	r3, [r7, #16]
}
 801ba46:	bf00      	nop
 801ba48:	e7fe      	b.n	801ba48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801ba4a:	697b      	ldr	r3, [r7, #20]
}
 801ba4c:	4618      	mov	r0, r3
 801ba4e:	3718      	adds	r7, #24
 801ba50:	46bd      	mov	sp, r7
 801ba52:	bd80      	pop	{r7, pc}
 801ba54:	200027ac 	.word	0x200027ac
 801ba58:	08022714 	.word	0x08022714
 801ba5c:	0801bb99 	.word	0x0801bb99
 801ba60:	200027b0 	.word	0x200027b0

0801ba64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801ba64:	b580      	push	{r7, lr}
 801ba66:	b08a      	sub	sp, #40	; 0x28
 801ba68:	af00      	add	r7, sp, #0
 801ba6a:	60f8      	str	r0, [r7, #12]
 801ba6c:	60b9      	str	r1, [r7, #8]
 801ba6e:	607a      	str	r2, [r7, #4]
 801ba70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801ba72:	2300      	movs	r3, #0
 801ba74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d10a      	bne.n	801ba92 <xTimerGenericCommand+0x2e>
	__asm volatile
 801ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba80:	f383 8811 	msr	BASEPRI, r3
 801ba84:	f3bf 8f6f 	isb	sy
 801ba88:	f3bf 8f4f 	dsb	sy
 801ba8c:	623b      	str	r3, [r7, #32]
}
 801ba8e:	bf00      	nop
 801ba90:	e7fe      	b.n	801ba90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801ba92:	4b1a      	ldr	r3, [pc, #104]	; (801bafc <xTimerGenericCommand+0x98>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d02a      	beq.n	801baf0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801baa6:	68bb      	ldr	r3, [r7, #8]
 801baa8:	2b05      	cmp	r3, #5
 801baaa:	dc18      	bgt.n	801bade <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801baac:	f7ff fdb4 	bl	801b618 <xTaskGetSchedulerState>
 801bab0:	4603      	mov	r3, r0
 801bab2:	2b02      	cmp	r3, #2
 801bab4:	d109      	bne.n	801baca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801bab6:	4b11      	ldr	r3, [pc, #68]	; (801bafc <xTimerGenericCommand+0x98>)
 801bab8:	6818      	ldr	r0, [r3, #0]
 801baba:	f107 0110 	add.w	r1, r7, #16
 801babe:	2300      	movs	r3, #0
 801bac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bac2:	f7fe f84d 	bl	8019b60 <xQueueGenericSend>
 801bac6:	6278      	str	r0, [r7, #36]	; 0x24
 801bac8:	e012      	b.n	801baf0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801baca:	4b0c      	ldr	r3, [pc, #48]	; (801bafc <xTimerGenericCommand+0x98>)
 801bacc:	6818      	ldr	r0, [r3, #0]
 801bace:	f107 0110 	add.w	r1, r7, #16
 801bad2:	2300      	movs	r3, #0
 801bad4:	2200      	movs	r2, #0
 801bad6:	f7fe f843 	bl	8019b60 <xQueueGenericSend>
 801bada:	6278      	str	r0, [r7, #36]	; 0x24
 801badc:	e008      	b.n	801baf0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801bade:	4b07      	ldr	r3, [pc, #28]	; (801bafc <xTimerGenericCommand+0x98>)
 801bae0:	6818      	ldr	r0, [r3, #0]
 801bae2:	f107 0110 	add.w	r1, r7, #16
 801bae6:	2300      	movs	r3, #0
 801bae8:	683a      	ldr	r2, [r7, #0]
 801baea:	f7fe f937 	bl	8019d5c <xQueueGenericSendFromISR>
 801baee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801baf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	3728      	adds	r7, #40	; 0x28
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bd80      	pop	{r7, pc}
 801bafa:	bf00      	nop
 801bafc:	200027ac 	.word	0x200027ac

0801bb00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b088      	sub	sp, #32
 801bb04:	af02      	add	r7, sp, #8
 801bb06:	6078      	str	r0, [r7, #4]
 801bb08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb0a:	4b22      	ldr	r3, [pc, #136]	; (801bb94 <prvProcessExpiredTimer+0x94>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	68db      	ldr	r3, [r3, #12]
 801bb10:	68db      	ldr	r3, [r3, #12]
 801bb12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bb14:	697b      	ldr	r3, [r7, #20]
 801bb16:	3304      	adds	r3, #4
 801bb18:	4618      	mov	r0, r3
 801bb1a:	f7fd fe4f 	bl	80197bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bb1e:	697b      	ldr	r3, [r7, #20]
 801bb20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bb24:	f003 0304 	and.w	r3, r3, #4
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d022      	beq.n	801bb72 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801bb2c:	697b      	ldr	r3, [r7, #20]
 801bb2e:	699a      	ldr	r2, [r3, #24]
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	18d1      	adds	r1, r2, r3
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	6978      	ldr	r0, [r7, #20]
 801bb3a:	f000 f8d1 	bl	801bce0 <prvInsertTimerInActiveList>
 801bb3e:	4603      	mov	r3, r0
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d01f      	beq.n	801bb84 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bb44:	2300      	movs	r3, #0
 801bb46:	9300      	str	r3, [sp, #0]
 801bb48:	2300      	movs	r3, #0
 801bb4a:	687a      	ldr	r2, [r7, #4]
 801bb4c:	2100      	movs	r1, #0
 801bb4e:	6978      	ldr	r0, [r7, #20]
 801bb50:	f7ff ff88 	bl	801ba64 <xTimerGenericCommand>
 801bb54:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d113      	bne.n	801bb84 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb60:	f383 8811 	msr	BASEPRI, r3
 801bb64:	f3bf 8f6f 	isb	sy
 801bb68:	f3bf 8f4f 	dsb	sy
 801bb6c:	60fb      	str	r3, [r7, #12]
}
 801bb6e:	bf00      	nop
 801bb70:	e7fe      	b.n	801bb70 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bb78:	f023 0301 	bic.w	r3, r3, #1
 801bb7c:	b2da      	uxtb	r2, r3
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	6a1b      	ldr	r3, [r3, #32]
 801bb88:	6978      	ldr	r0, [r7, #20]
 801bb8a:	4798      	blx	r3
}
 801bb8c:	bf00      	nop
 801bb8e:	3718      	adds	r7, #24
 801bb90:	46bd      	mov	sp, r7
 801bb92:	bd80      	pop	{r7, pc}
 801bb94:	200027a4 	.word	0x200027a4

0801bb98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801bb98:	b580      	push	{r7, lr}
 801bb9a:	b084      	sub	sp, #16
 801bb9c:	af00      	add	r7, sp, #0
 801bb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bba0:	f107 0308 	add.w	r3, r7, #8
 801bba4:	4618      	mov	r0, r3
 801bba6:	f000 f857 	bl	801bc58 <prvGetNextExpireTime>
 801bbaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801bbac:	68bb      	ldr	r3, [r7, #8]
 801bbae:	4619      	mov	r1, r3
 801bbb0:	68f8      	ldr	r0, [r7, #12]
 801bbb2:	f000 f803 	bl	801bbbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801bbb6:	f000 f8d5 	bl	801bd64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801bbba:	e7f1      	b.n	801bba0 <prvTimerTask+0x8>

0801bbbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b084      	sub	sp, #16
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801bbc6:	f7ff f945 	bl	801ae54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bbca:	f107 0308 	add.w	r3, r7, #8
 801bbce:	4618      	mov	r0, r3
 801bbd0:	f000 f866 	bl	801bca0 <prvSampleTimeNow>
 801bbd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801bbd6:	68bb      	ldr	r3, [r7, #8]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d130      	bne.n	801bc3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801bbdc:	683b      	ldr	r3, [r7, #0]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d10a      	bne.n	801bbf8 <prvProcessTimerOrBlockTask+0x3c>
 801bbe2:	687a      	ldr	r2, [r7, #4]
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	429a      	cmp	r2, r3
 801bbe8:	d806      	bhi.n	801bbf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801bbea:	f7ff f941 	bl	801ae70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801bbee:	68f9      	ldr	r1, [r7, #12]
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f7ff ff85 	bl	801bb00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801bbf6:	e024      	b.n	801bc42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801bbf8:	683b      	ldr	r3, [r7, #0]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d008      	beq.n	801bc10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801bbfe:	4b13      	ldr	r3, [pc, #76]	; (801bc4c <prvProcessTimerOrBlockTask+0x90>)
 801bc00:	681b      	ldr	r3, [r3, #0]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d101      	bne.n	801bc0c <prvProcessTimerOrBlockTask+0x50>
 801bc08:	2301      	movs	r3, #1
 801bc0a:	e000      	b.n	801bc0e <prvProcessTimerOrBlockTask+0x52>
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801bc10:	4b0f      	ldr	r3, [pc, #60]	; (801bc50 <prvProcessTimerOrBlockTask+0x94>)
 801bc12:	6818      	ldr	r0, [r3, #0]
 801bc14:	687a      	ldr	r2, [r7, #4]
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	1ad3      	subs	r3, r2, r3
 801bc1a:	683a      	ldr	r2, [r7, #0]
 801bc1c:	4619      	mov	r1, r3
 801bc1e:	f7fe fdd1 	bl	801a7c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801bc22:	f7ff f925 	bl	801ae70 <xTaskResumeAll>
 801bc26:	4603      	mov	r3, r0
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d10a      	bne.n	801bc42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801bc2c:	4b09      	ldr	r3, [pc, #36]	; (801bc54 <prvProcessTimerOrBlockTask+0x98>)
 801bc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bc32:	601a      	str	r2, [r3, #0]
 801bc34:	f3bf 8f4f 	dsb	sy
 801bc38:	f3bf 8f6f 	isb	sy
}
 801bc3c:	e001      	b.n	801bc42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801bc3e:	f7ff f917 	bl	801ae70 <xTaskResumeAll>
}
 801bc42:	bf00      	nop
 801bc44:	3710      	adds	r7, #16
 801bc46:	46bd      	mov	sp, r7
 801bc48:	bd80      	pop	{r7, pc}
 801bc4a:	bf00      	nop
 801bc4c:	200027a8 	.word	0x200027a8
 801bc50:	200027ac 	.word	0x200027ac
 801bc54:	e000ed04 	.word	0xe000ed04

0801bc58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801bc58:	b480      	push	{r7}
 801bc5a:	b085      	sub	sp, #20
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801bc60:	4b0e      	ldr	r3, [pc, #56]	; (801bc9c <prvGetNextExpireTime+0x44>)
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d101      	bne.n	801bc6e <prvGetNextExpireTime+0x16>
 801bc6a:	2201      	movs	r2, #1
 801bc6c:	e000      	b.n	801bc70 <prvGetNextExpireTime+0x18>
 801bc6e:	2200      	movs	r2, #0
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d105      	bne.n	801bc88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bc7c:	4b07      	ldr	r3, [pc, #28]	; (801bc9c <prvGetNextExpireTime+0x44>)
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	68db      	ldr	r3, [r3, #12]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	60fb      	str	r3, [r7, #12]
 801bc86:	e001      	b.n	801bc8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801bc88:	2300      	movs	r3, #0
 801bc8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801bc8c:	68fb      	ldr	r3, [r7, #12]
}
 801bc8e:	4618      	mov	r0, r3
 801bc90:	3714      	adds	r7, #20
 801bc92:	46bd      	mov	sp, r7
 801bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc98:	4770      	bx	lr
 801bc9a:	bf00      	nop
 801bc9c:	200027a4 	.word	0x200027a4

0801bca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801bca0:	b580      	push	{r7, lr}
 801bca2:	b084      	sub	sp, #16
 801bca4:	af00      	add	r7, sp, #0
 801bca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801bca8:	f7ff f980 	bl	801afac <xTaskGetTickCount>
 801bcac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801bcae:	4b0b      	ldr	r3, [pc, #44]	; (801bcdc <prvSampleTimeNow+0x3c>)
 801bcb0:	681b      	ldr	r3, [r3, #0]
 801bcb2:	68fa      	ldr	r2, [r7, #12]
 801bcb4:	429a      	cmp	r2, r3
 801bcb6:	d205      	bcs.n	801bcc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801bcb8:	f000 f936 	bl	801bf28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	2201      	movs	r2, #1
 801bcc0:	601a      	str	r2, [r3, #0]
 801bcc2:	e002      	b.n	801bcca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801bcca:	4a04      	ldr	r2, [pc, #16]	; (801bcdc <prvSampleTimeNow+0x3c>)
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801bcd0:	68fb      	ldr	r3, [r7, #12]
}
 801bcd2:	4618      	mov	r0, r3
 801bcd4:	3710      	adds	r7, #16
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd80      	pop	{r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	200027b4 	.word	0x200027b4

0801bce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b086      	sub	sp, #24
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	60f8      	str	r0, [r7, #12]
 801bce8:	60b9      	str	r1, [r7, #8]
 801bcea:	607a      	str	r2, [r7, #4]
 801bcec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801bcee:	2300      	movs	r3, #0
 801bcf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801bcf2:	68fb      	ldr	r3, [r7, #12]
 801bcf4:	68ba      	ldr	r2, [r7, #8]
 801bcf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bcf8:	68fb      	ldr	r3, [r7, #12]
 801bcfa:	68fa      	ldr	r2, [r7, #12]
 801bcfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801bcfe:	68ba      	ldr	r2, [r7, #8]
 801bd00:	687b      	ldr	r3, [r7, #4]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	d812      	bhi.n	801bd2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801bd06:	687a      	ldr	r2, [r7, #4]
 801bd08:	683b      	ldr	r3, [r7, #0]
 801bd0a:	1ad2      	subs	r2, r2, r3
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	699b      	ldr	r3, [r3, #24]
 801bd10:	429a      	cmp	r2, r3
 801bd12:	d302      	bcc.n	801bd1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801bd14:	2301      	movs	r3, #1
 801bd16:	617b      	str	r3, [r7, #20]
 801bd18:	e01b      	b.n	801bd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801bd1a:	4b10      	ldr	r3, [pc, #64]	; (801bd5c <prvInsertTimerInActiveList+0x7c>)
 801bd1c:	681a      	ldr	r2, [r3, #0]
 801bd1e:	68fb      	ldr	r3, [r7, #12]
 801bd20:	3304      	adds	r3, #4
 801bd22:	4619      	mov	r1, r3
 801bd24:	4610      	mov	r0, r2
 801bd26:	f7fd fd10 	bl	801974a <vListInsert>
 801bd2a:	e012      	b.n	801bd52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801bd2c:	687a      	ldr	r2, [r7, #4]
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	429a      	cmp	r2, r3
 801bd32:	d206      	bcs.n	801bd42 <prvInsertTimerInActiveList+0x62>
 801bd34:	68ba      	ldr	r2, [r7, #8]
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	429a      	cmp	r2, r3
 801bd3a:	d302      	bcc.n	801bd42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801bd3c:	2301      	movs	r3, #1
 801bd3e:	617b      	str	r3, [r7, #20]
 801bd40:	e007      	b.n	801bd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bd42:	4b07      	ldr	r3, [pc, #28]	; (801bd60 <prvInsertTimerInActiveList+0x80>)
 801bd44:	681a      	ldr	r2, [r3, #0]
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	3304      	adds	r3, #4
 801bd4a:	4619      	mov	r1, r3
 801bd4c:	4610      	mov	r0, r2
 801bd4e:	f7fd fcfc 	bl	801974a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801bd52:	697b      	ldr	r3, [r7, #20]
}
 801bd54:	4618      	mov	r0, r3
 801bd56:	3718      	adds	r7, #24
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	bd80      	pop	{r7, pc}
 801bd5c:	200027a8 	.word	0x200027a8
 801bd60:	200027a4 	.word	0x200027a4

0801bd64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b08e      	sub	sp, #56	; 0x38
 801bd68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bd6a:	e0ca      	b.n	801bf02 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	da18      	bge.n	801bda4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801bd72:	1d3b      	adds	r3, r7, #4
 801bd74:	3304      	adds	r3, #4
 801bd76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd7a:	2b00      	cmp	r3, #0
 801bd7c:	d10a      	bne.n	801bd94 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801bd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bd82:	f383 8811 	msr	BASEPRI, r3
 801bd86:	f3bf 8f6f 	isb	sy
 801bd8a:	f3bf 8f4f 	dsb	sy
 801bd8e:	61fb      	str	r3, [r7, #28]
}
 801bd90:	bf00      	nop
 801bd92:	e7fe      	b.n	801bd92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd9a:	6850      	ldr	r0, [r2, #4]
 801bd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd9e:	6892      	ldr	r2, [r2, #8]
 801bda0:	4611      	mov	r1, r2
 801bda2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	f2c0 80aa 	blt.w	801bf00 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801bdac:	68fb      	ldr	r3, [r7, #12]
 801bdae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdb2:	695b      	ldr	r3, [r3, #20]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d004      	beq.n	801bdc2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdba:	3304      	adds	r3, #4
 801bdbc:	4618      	mov	r0, r3
 801bdbe:	f7fd fcfd 	bl	80197bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801bdc2:	463b      	mov	r3, r7
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	f7ff ff6b 	bl	801bca0 <prvSampleTimeNow>
 801bdca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	2b09      	cmp	r3, #9
 801bdd0:	f200 8097 	bhi.w	801bf02 <prvProcessReceivedCommands+0x19e>
 801bdd4:	a201      	add	r2, pc, #4	; (adr r2, 801bddc <prvProcessReceivedCommands+0x78>)
 801bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdda:	bf00      	nop
 801bddc:	0801be05 	.word	0x0801be05
 801bde0:	0801be05 	.word	0x0801be05
 801bde4:	0801be05 	.word	0x0801be05
 801bde8:	0801be79 	.word	0x0801be79
 801bdec:	0801be8d 	.word	0x0801be8d
 801bdf0:	0801bed7 	.word	0x0801bed7
 801bdf4:	0801be05 	.word	0x0801be05
 801bdf8:	0801be05 	.word	0x0801be05
 801bdfc:	0801be79 	.word	0x0801be79
 801be00:	0801be8d 	.word	0x0801be8d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be0a:	f043 0301 	orr.w	r3, r3, #1
 801be0e:	b2da      	uxtb	r2, r3
 801be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801be16:	68ba      	ldr	r2, [r7, #8]
 801be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be1a:	699b      	ldr	r3, [r3, #24]
 801be1c:	18d1      	adds	r1, r2, r3
 801be1e:	68bb      	ldr	r3, [r7, #8]
 801be20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be24:	f7ff ff5c 	bl	801bce0 <prvInsertTimerInActiveList>
 801be28:	4603      	mov	r3, r0
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d069      	beq.n	801bf02 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be30:	6a1b      	ldr	r3, [r3, #32]
 801be32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be3c:	f003 0304 	and.w	r3, r3, #4
 801be40:	2b00      	cmp	r3, #0
 801be42:	d05e      	beq.n	801bf02 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801be44:	68ba      	ldr	r2, [r7, #8]
 801be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be48:	699b      	ldr	r3, [r3, #24]
 801be4a:	441a      	add	r2, r3
 801be4c:	2300      	movs	r3, #0
 801be4e:	9300      	str	r3, [sp, #0]
 801be50:	2300      	movs	r3, #0
 801be52:	2100      	movs	r1, #0
 801be54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801be56:	f7ff fe05 	bl	801ba64 <xTimerGenericCommand>
 801be5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801be5c:	6a3b      	ldr	r3, [r7, #32]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d14f      	bne.n	801bf02 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be66:	f383 8811 	msr	BASEPRI, r3
 801be6a:	f3bf 8f6f 	isb	sy
 801be6e:	f3bf 8f4f 	dsb	sy
 801be72:	61bb      	str	r3, [r7, #24]
}
 801be74:	bf00      	nop
 801be76:	e7fe      	b.n	801be76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be7e:	f023 0301 	bic.w	r3, r3, #1
 801be82:	b2da      	uxtb	r2, r3
 801be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801be8a:	e03a      	b.n	801bf02 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801be8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801be92:	f043 0301 	orr.w	r3, r3, #1
 801be96:	b2da      	uxtb	r2, r3
 801be98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801be9e:	68ba      	ldr	r2, [r7, #8]
 801bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bea2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bea6:	699b      	ldr	r3, [r3, #24]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d10a      	bne.n	801bec2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beb0:	f383 8811 	msr	BASEPRI, r3
 801beb4:	f3bf 8f6f 	isb	sy
 801beb8:	f3bf 8f4f 	dsb	sy
 801bebc:	617b      	str	r3, [r7, #20]
}
 801bebe:	bf00      	nop
 801bec0:	e7fe      	b.n	801bec0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801bec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bec4:	699a      	ldr	r2, [r3, #24]
 801bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bec8:	18d1      	adds	r1, r2, r3
 801beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801becc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bed0:	f7ff ff06 	bl	801bce0 <prvInsertTimerInActiveList>
					break;
 801bed4:	e015      	b.n	801bf02 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bed8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bedc:	f003 0302 	and.w	r3, r3, #2
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d103      	bne.n	801beec <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801bee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bee6:	f000 fbdb 	bl	801c6a0 <vPortFree>
 801beea:	e00a      	b.n	801bf02 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801beee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bef2:	f023 0301 	bic.w	r3, r3, #1
 801bef6:	b2da      	uxtb	r2, r3
 801bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801befa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801befe:	e000      	b.n	801bf02 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801bf00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801bf02:	4b08      	ldr	r3, [pc, #32]	; (801bf24 <prvProcessReceivedCommands+0x1c0>)
 801bf04:	681b      	ldr	r3, [r3, #0]
 801bf06:	1d39      	adds	r1, r7, #4
 801bf08:	2200      	movs	r2, #0
 801bf0a:	4618      	mov	r0, r3
 801bf0c:	f7fe f84e 	bl	8019fac <xQueueReceive>
 801bf10:	4603      	mov	r3, r0
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	f47f af2a 	bne.w	801bd6c <prvProcessReceivedCommands+0x8>
	}
}
 801bf18:	bf00      	nop
 801bf1a:	bf00      	nop
 801bf1c:	3730      	adds	r7, #48	; 0x30
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	bd80      	pop	{r7, pc}
 801bf22:	bf00      	nop
 801bf24:	200027ac 	.word	0x200027ac

0801bf28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b088      	sub	sp, #32
 801bf2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bf2e:	e048      	b.n	801bfc2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801bf30:	4b2d      	ldr	r3, [pc, #180]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bf32:	681b      	ldr	r3, [r3, #0]
 801bf34:	68db      	ldr	r3, [r3, #12]
 801bf36:	681b      	ldr	r3, [r3, #0]
 801bf38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bf3a:	4b2b      	ldr	r3, [pc, #172]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	68db      	ldr	r3, [r3, #12]
 801bf40:	68db      	ldr	r3, [r3, #12]
 801bf42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	3304      	adds	r3, #4
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f7fd fc37 	bl	80197bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801bf4e:	68fb      	ldr	r3, [r7, #12]
 801bf50:	6a1b      	ldr	r3, [r3, #32]
 801bf52:	68f8      	ldr	r0, [r7, #12]
 801bf54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801bf5c:	f003 0304 	and.w	r3, r3, #4
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	d02e      	beq.n	801bfc2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	699b      	ldr	r3, [r3, #24]
 801bf68:	693a      	ldr	r2, [r7, #16]
 801bf6a:	4413      	add	r3, r2
 801bf6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801bf6e:	68ba      	ldr	r2, [r7, #8]
 801bf70:	693b      	ldr	r3, [r7, #16]
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d90e      	bls.n	801bf94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	68ba      	ldr	r2, [r7, #8]
 801bf7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	68fa      	ldr	r2, [r7, #12]
 801bf80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801bf82:	4b19      	ldr	r3, [pc, #100]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bf84:	681a      	ldr	r2, [r3, #0]
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	3304      	adds	r3, #4
 801bf8a:	4619      	mov	r1, r3
 801bf8c:	4610      	mov	r0, r2
 801bf8e:	f7fd fbdc 	bl	801974a <vListInsert>
 801bf92:	e016      	b.n	801bfc2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801bf94:	2300      	movs	r3, #0
 801bf96:	9300      	str	r3, [sp, #0]
 801bf98:	2300      	movs	r3, #0
 801bf9a:	693a      	ldr	r2, [r7, #16]
 801bf9c:	2100      	movs	r1, #0
 801bf9e:	68f8      	ldr	r0, [r7, #12]
 801bfa0:	f7ff fd60 	bl	801ba64 <xTimerGenericCommand>
 801bfa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d10a      	bne.n	801bfc2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfb0:	f383 8811 	msr	BASEPRI, r3
 801bfb4:	f3bf 8f6f 	isb	sy
 801bfb8:	f3bf 8f4f 	dsb	sy
 801bfbc:	603b      	str	r3, [r7, #0]
}
 801bfbe:	bf00      	nop
 801bfc0:	e7fe      	b.n	801bfc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801bfc2:	4b09      	ldr	r3, [pc, #36]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	2b00      	cmp	r3, #0
 801bfca:	d1b1      	bne.n	801bf30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801bfcc:	4b06      	ldr	r3, [pc, #24]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801bfd2:	4b06      	ldr	r3, [pc, #24]	; (801bfec <prvSwitchTimerLists+0xc4>)
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	4a04      	ldr	r2, [pc, #16]	; (801bfe8 <prvSwitchTimerLists+0xc0>)
 801bfd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801bfda:	4a04      	ldr	r2, [pc, #16]	; (801bfec <prvSwitchTimerLists+0xc4>)
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	6013      	str	r3, [r2, #0]
}
 801bfe0:	bf00      	nop
 801bfe2:	3718      	adds	r7, #24
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}
 801bfe8:	200027a4 	.word	0x200027a4
 801bfec:	200027a8 	.word	0x200027a8

0801bff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b082      	sub	sp, #8
 801bff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801bff6:	f000 f965 	bl	801c2c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801bffa:	4b15      	ldr	r3, [pc, #84]	; (801c050 <prvCheckForValidListAndQueue+0x60>)
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d120      	bne.n	801c044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801c002:	4814      	ldr	r0, [pc, #80]	; (801c054 <prvCheckForValidListAndQueue+0x64>)
 801c004:	f7fd fb50 	bl	80196a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801c008:	4813      	ldr	r0, [pc, #76]	; (801c058 <prvCheckForValidListAndQueue+0x68>)
 801c00a:	f7fd fb4d 	bl	80196a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801c00e:	4b13      	ldr	r3, [pc, #76]	; (801c05c <prvCheckForValidListAndQueue+0x6c>)
 801c010:	4a10      	ldr	r2, [pc, #64]	; (801c054 <prvCheckForValidListAndQueue+0x64>)
 801c012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801c014:	4b12      	ldr	r3, [pc, #72]	; (801c060 <prvCheckForValidListAndQueue+0x70>)
 801c016:	4a10      	ldr	r2, [pc, #64]	; (801c058 <prvCheckForValidListAndQueue+0x68>)
 801c018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801c01a:	2300      	movs	r3, #0
 801c01c:	9300      	str	r3, [sp, #0]
 801c01e:	4b11      	ldr	r3, [pc, #68]	; (801c064 <prvCheckForValidListAndQueue+0x74>)
 801c020:	4a11      	ldr	r2, [pc, #68]	; (801c068 <prvCheckForValidListAndQueue+0x78>)
 801c022:	2110      	movs	r1, #16
 801c024:	200a      	movs	r0, #10
 801c026:	f7fd fc5b 	bl	80198e0 <xQueueGenericCreateStatic>
 801c02a:	4603      	mov	r3, r0
 801c02c:	4a08      	ldr	r2, [pc, #32]	; (801c050 <prvCheckForValidListAndQueue+0x60>)
 801c02e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801c030:	4b07      	ldr	r3, [pc, #28]	; (801c050 <prvCheckForValidListAndQueue+0x60>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	2b00      	cmp	r3, #0
 801c036:	d005      	beq.n	801c044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801c038:	4b05      	ldr	r3, [pc, #20]	; (801c050 <prvCheckForValidListAndQueue+0x60>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	490b      	ldr	r1, [pc, #44]	; (801c06c <prvCheckForValidListAndQueue+0x7c>)
 801c03e:	4618      	mov	r0, r3
 801c040:	f7fe fb6c 	bl	801a71c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801c044:	f000 f96e 	bl	801c324 <vPortExitCritical>
}
 801c048:	bf00      	nop
 801c04a:	46bd      	mov	sp, r7
 801c04c:	bd80      	pop	{r7, pc}
 801c04e:	bf00      	nop
 801c050:	200027ac 	.word	0x200027ac
 801c054:	2000277c 	.word	0x2000277c
 801c058:	20002790 	.word	0x20002790
 801c05c:	200027a4 	.word	0x200027a4
 801c060:	200027a8 	.word	0x200027a8
 801c064:	20002858 	.word	0x20002858
 801c068:	200027b8 	.word	0x200027b8
 801c06c:	0802271c 	.word	0x0802271c

0801c070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801c070:	b480      	push	{r7}
 801c072:	b085      	sub	sp, #20
 801c074:	af00      	add	r7, sp, #0
 801c076:	60f8      	str	r0, [r7, #12]
 801c078:	60b9      	str	r1, [r7, #8]
 801c07a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801c07c:	68fb      	ldr	r3, [r7, #12]
 801c07e:	3b04      	subs	r3, #4
 801c080:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c08a:	68fb      	ldr	r3, [r7, #12]
 801c08c:	3b04      	subs	r3, #4
 801c08e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801c090:	68bb      	ldr	r3, [r7, #8]
 801c092:	f023 0201 	bic.w	r2, r3, #1
 801c096:	68fb      	ldr	r3, [r7, #12]
 801c098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	3b04      	subs	r3, #4
 801c09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801c0a0:	4a0c      	ldr	r2, [pc, #48]	; (801c0d4 <pxPortInitialiseStack+0x64>)
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	3b14      	subs	r3, #20
 801c0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801c0ac:	687a      	ldr	r2, [r7, #4]
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	3b04      	subs	r3, #4
 801c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	f06f 0202 	mvn.w	r2, #2
 801c0be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	3b20      	subs	r3, #32
 801c0c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801c0c6:	68fb      	ldr	r3, [r7, #12]
}
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	3714      	adds	r7, #20
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d2:	4770      	bx	lr
 801c0d4:	0801c0d9 	.word	0x0801c0d9

0801c0d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801c0d8:	b480      	push	{r7}
 801c0da:	b085      	sub	sp, #20
 801c0dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801c0de:	2300      	movs	r3, #0
 801c0e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801c0e2:	4b12      	ldr	r3, [pc, #72]	; (801c12c <prvTaskExitError+0x54>)
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c0ea:	d00a      	beq.n	801c102 <prvTaskExitError+0x2a>
	__asm volatile
 801c0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c0f0:	f383 8811 	msr	BASEPRI, r3
 801c0f4:	f3bf 8f6f 	isb	sy
 801c0f8:	f3bf 8f4f 	dsb	sy
 801c0fc:	60fb      	str	r3, [r7, #12]
}
 801c0fe:	bf00      	nop
 801c100:	e7fe      	b.n	801c100 <prvTaskExitError+0x28>
	__asm volatile
 801c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c106:	f383 8811 	msr	BASEPRI, r3
 801c10a:	f3bf 8f6f 	isb	sy
 801c10e:	f3bf 8f4f 	dsb	sy
 801c112:	60bb      	str	r3, [r7, #8]
}
 801c114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801c116:	bf00      	nop
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d0fc      	beq.n	801c118 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801c11e:	bf00      	nop
 801c120:	bf00      	nop
 801c122:	3714      	adds	r7, #20
 801c124:	46bd      	mov	sp, r7
 801c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c12a:	4770      	bx	lr
 801c12c:	200005bc 	.word	0x200005bc

0801c130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801c130:	4b07      	ldr	r3, [pc, #28]	; (801c150 <pxCurrentTCBConst2>)
 801c132:	6819      	ldr	r1, [r3, #0]
 801c134:	6808      	ldr	r0, [r1, #0]
 801c136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c13a:	f380 8809 	msr	PSP, r0
 801c13e:	f3bf 8f6f 	isb	sy
 801c142:	f04f 0000 	mov.w	r0, #0
 801c146:	f380 8811 	msr	BASEPRI, r0
 801c14a:	4770      	bx	lr
 801c14c:	f3af 8000 	nop.w

0801c150 <pxCurrentTCBConst2>:
 801c150:	2000227c 	.word	0x2000227c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801c154:	bf00      	nop
 801c156:	bf00      	nop

0801c158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801c158:	4808      	ldr	r0, [pc, #32]	; (801c17c <prvPortStartFirstTask+0x24>)
 801c15a:	6800      	ldr	r0, [r0, #0]
 801c15c:	6800      	ldr	r0, [r0, #0]
 801c15e:	f380 8808 	msr	MSP, r0
 801c162:	f04f 0000 	mov.w	r0, #0
 801c166:	f380 8814 	msr	CONTROL, r0
 801c16a:	b662      	cpsie	i
 801c16c:	b661      	cpsie	f
 801c16e:	f3bf 8f4f 	dsb	sy
 801c172:	f3bf 8f6f 	isb	sy
 801c176:	df00      	svc	0
 801c178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801c17a:	bf00      	nop
 801c17c:	e000ed08 	.word	0xe000ed08

0801c180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801c180:	b580      	push	{r7, lr}
 801c182:	b086      	sub	sp, #24
 801c184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801c186:	4b46      	ldr	r3, [pc, #280]	; (801c2a0 <xPortStartScheduler+0x120>)
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	4a46      	ldr	r2, [pc, #280]	; (801c2a4 <xPortStartScheduler+0x124>)
 801c18c:	4293      	cmp	r3, r2
 801c18e:	d10a      	bne.n	801c1a6 <xPortStartScheduler+0x26>
	__asm volatile
 801c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c194:	f383 8811 	msr	BASEPRI, r3
 801c198:	f3bf 8f6f 	isb	sy
 801c19c:	f3bf 8f4f 	dsb	sy
 801c1a0:	613b      	str	r3, [r7, #16]
}
 801c1a2:	bf00      	nop
 801c1a4:	e7fe      	b.n	801c1a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801c1a6:	4b3e      	ldr	r3, [pc, #248]	; (801c2a0 <xPortStartScheduler+0x120>)
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	4a3f      	ldr	r2, [pc, #252]	; (801c2a8 <xPortStartScheduler+0x128>)
 801c1ac:	4293      	cmp	r3, r2
 801c1ae:	d10a      	bne.n	801c1c6 <xPortStartScheduler+0x46>
	__asm volatile
 801c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c1b4:	f383 8811 	msr	BASEPRI, r3
 801c1b8:	f3bf 8f6f 	isb	sy
 801c1bc:	f3bf 8f4f 	dsb	sy
 801c1c0:	60fb      	str	r3, [r7, #12]
}
 801c1c2:	bf00      	nop
 801c1c4:	e7fe      	b.n	801c1c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801c1c6:	4b39      	ldr	r3, [pc, #228]	; (801c2ac <xPortStartScheduler+0x12c>)
 801c1c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801c1ca:	697b      	ldr	r3, [r7, #20]
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	b2db      	uxtb	r3, r3
 801c1d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801c1d2:	697b      	ldr	r3, [r7, #20]
 801c1d4:	22ff      	movs	r2, #255	; 0xff
 801c1d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801c1d8:	697b      	ldr	r3, [r7, #20]
 801c1da:	781b      	ldrb	r3, [r3, #0]
 801c1dc:	b2db      	uxtb	r3, r3
 801c1de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801c1e0:	78fb      	ldrb	r3, [r7, #3]
 801c1e2:	b2db      	uxtb	r3, r3
 801c1e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801c1e8:	b2da      	uxtb	r2, r3
 801c1ea:	4b31      	ldr	r3, [pc, #196]	; (801c2b0 <xPortStartScheduler+0x130>)
 801c1ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801c1ee:	4b31      	ldr	r3, [pc, #196]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c1f0:	2207      	movs	r2, #7
 801c1f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c1f4:	e009      	b.n	801c20a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801c1f6:	4b2f      	ldr	r3, [pc, #188]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	3b01      	subs	r3, #1
 801c1fc:	4a2d      	ldr	r2, [pc, #180]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c1fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801c200:	78fb      	ldrb	r3, [r7, #3]
 801c202:	b2db      	uxtb	r3, r3
 801c204:	005b      	lsls	r3, r3, #1
 801c206:	b2db      	uxtb	r3, r3
 801c208:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801c20a:	78fb      	ldrb	r3, [r7, #3]
 801c20c:	b2db      	uxtb	r3, r3
 801c20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c212:	2b80      	cmp	r3, #128	; 0x80
 801c214:	d0ef      	beq.n	801c1f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801c216:	4b27      	ldr	r3, [pc, #156]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	f1c3 0307 	rsb	r3, r3, #7
 801c21e:	2b04      	cmp	r3, #4
 801c220:	d00a      	beq.n	801c238 <xPortStartScheduler+0xb8>
	__asm volatile
 801c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c226:	f383 8811 	msr	BASEPRI, r3
 801c22a:	f3bf 8f6f 	isb	sy
 801c22e:	f3bf 8f4f 	dsb	sy
 801c232:	60bb      	str	r3, [r7, #8]
}
 801c234:	bf00      	nop
 801c236:	e7fe      	b.n	801c236 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801c238:	4b1e      	ldr	r3, [pc, #120]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	021b      	lsls	r3, r3, #8
 801c23e:	4a1d      	ldr	r2, [pc, #116]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c240:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801c242:	4b1c      	ldr	r3, [pc, #112]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801c24a:	4a1a      	ldr	r2, [pc, #104]	; (801c2b4 <xPortStartScheduler+0x134>)
 801c24c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	b2da      	uxtb	r2, r3
 801c252:	697b      	ldr	r3, [r7, #20]
 801c254:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801c256:	4b18      	ldr	r3, [pc, #96]	; (801c2b8 <xPortStartScheduler+0x138>)
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	4a17      	ldr	r2, [pc, #92]	; (801c2b8 <xPortStartScheduler+0x138>)
 801c25c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801c260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c262:	4b15      	ldr	r3, [pc, #84]	; (801c2b8 <xPortStartScheduler+0x138>)
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	4a14      	ldr	r2, [pc, #80]	; (801c2b8 <xPortStartScheduler+0x138>)
 801c268:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801c26c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c26e:	f000 f8dd 	bl	801c42c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c272:	4b12      	ldr	r3, [pc, #72]	; (801c2bc <xPortStartScheduler+0x13c>)
 801c274:	2200      	movs	r2, #0
 801c276:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c278:	f000 f8fc 	bl	801c474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c27c:	4b10      	ldr	r3, [pc, #64]	; (801c2c0 <xPortStartScheduler+0x140>)
 801c27e:	681b      	ldr	r3, [r3, #0]
 801c280:	4a0f      	ldr	r2, [pc, #60]	; (801c2c0 <xPortStartScheduler+0x140>)
 801c282:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801c286:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c288:	f7ff ff66 	bl	801c158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c28c:	f7fe ff58 	bl	801b140 <vTaskSwitchContext>
	prvTaskExitError();
 801c290:	f7ff ff22 	bl	801c0d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c294:	2300      	movs	r3, #0
}
 801c296:	4618      	mov	r0, r3
 801c298:	3718      	adds	r7, #24
 801c29a:	46bd      	mov	sp, r7
 801c29c:	bd80      	pop	{r7, pc}
 801c29e:	bf00      	nop
 801c2a0:	e000ed00 	.word	0xe000ed00
 801c2a4:	410fc271 	.word	0x410fc271
 801c2a8:	410fc270 	.word	0x410fc270
 801c2ac:	e000e400 	.word	0xe000e400
 801c2b0:	200028a8 	.word	0x200028a8
 801c2b4:	200028ac 	.word	0x200028ac
 801c2b8:	e000ed20 	.word	0xe000ed20
 801c2bc:	200005bc 	.word	0x200005bc
 801c2c0:	e000ef34 	.word	0xe000ef34

0801c2c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c2c4:	b480      	push	{r7}
 801c2c6:	b083      	sub	sp, #12
 801c2c8:	af00      	add	r7, sp, #0
	__asm volatile
 801c2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2ce:	f383 8811 	msr	BASEPRI, r3
 801c2d2:	f3bf 8f6f 	isb	sy
 801c2d6:	f3bf 8f4f 	dsb	sy
 801c2da:	607b      	str	r3, [r7, #4]
}
 801c2dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c2de:	4b0f      	ldr	r3, [pc, #60]	; (801c31c <vPortEnterCritical+0x58>)
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	3301      	adds	r3, #1
 801c2e4:	4a0d      	ldr	r2, [pc, #52]	; (801c31c <vPortEnterCritical+0x58>)
 801c2e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c2e8:	4b0c      	ldr	r3, [pc, #48]	; (801c31c <vPortEnterCritical+0x58>)
 801c2ea:	681b      	ldr	r3, [r3, #0]
 801c2ec:	2b01      	cmp	r3, #1
 801c2ee:	d10f      	bne.n	801c310 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c2f0:	4b0b      	ldr	r3, [pc, #44]	; (801c320 <vPortEnterCritical+0x5c>)
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	b2db      	uxtb	r3, r3
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d00a      	beq.n	801c310 <vPortEnterCritical+0x4c>
	__asm volatile
 801c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c2fe:	f383 8811 	msr	BASEPRI, r3
 801c302:	f3bf 8f6f 	isb	sy
 801c306:	f3bf 8f4f 	dsb	sy
 801c30a:	603b      	str	r3, [r7, #0]
}
 801c30c:	bf00      	nop
 801c30e:	e7fe      	b.n	801c30e <vPortEnterCritical+0x4a>
	}
}
 801c310:	bf00      	nop
 801c312:	370c      	adds	r7, #12
 801c314:	46bd      	mov	sp, r7
 801c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c31a:	4770      	bx	lr
 801c31c:	200005bc 	.word	0x200005bc
 801c320:	e000ed04 	.word	0xe000ed04

0801c324 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c324:	b480      	push	{r7}
 801c326:	b083      	sub	sp, #12
 801c328:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c32a:	4b12      	ldr	r3, [pc, #72]	; (801c374 <vPortExitCritical+0x50>)
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d10a      	bne.n	801c348 <vPortExitCritical+0x24>
	__asm volatile
 801c332:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c336:	f383 8811 	msr	BASEPRI, r3
 801c33a:	f3bf 8f6f 	isb	sy
 801c33e:	f3bf 8f4f 	dsb	sy
 801c342:	607b      	str	r3, [r7, #4]
}
 801c344:	bf00      	nop
 801c346:	e7fe      	b.n	801c346 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c348:	4b0a      	ldr	r3, [pc, #40]	; (801c374 <vPortExitCritical+0x50>)
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	3b01      	subs	r3, #1
 801c34e:	4a09      	ldr	r2, [pc, #36]	; (801c374 <vPortExitCritical+0x50>)
 801c350:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c352:	4b08      	ldr	r3, [pc, #32]	; (801c374 <vPortExitCritical+0x50>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d105      	bne.n	801c366 <vPortExitCritical+0x42>
 801c35a:	2300      	movs	r3, #0
 801c35c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	f383 8811 	msr	BASEPRI, r3
}
 801c364:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c366:	bf00      	nop
 801c368:	370c      	adds	r7, #12
 801c36a:	46bd      	mov	sp, r7
 801c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c370:	4770      	bx	lr
 801c372:	bf00      	nop
 801c374:	200005bc 	.word	0x200005bc
	...

0801c380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c380:	f3ef 8009 	mrs	r0, PSP
 801c384:	f3bf 8f6f 	isb	sy
 801c388:	4b15      	ldr	r3, [pc, #84]	; (801c3e0 <pxCurrentTCBConst>)
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	f01e 0f10 	tst.w	lr, #16
 801c390:	bf08      	it	eq
 801c392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c39a:	6010      	str	r0, [r2, #0]
 801c39c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c3a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801c3a4:	f380 8811 	msr	BASEPRI, r0
 801c3a8:	f3bf 8f4f 	dsb	sy
 801c3ac:	f3bf 8f6f 	isb	sy
 801c3b0:	f7fe fec6 	bl	801b140 <vTaskSwitchContext>
 801c3b4:	f04f 0000 	mov.w	r0, #0
 801c3b8:	f380 8811 	msr	BASEPRI, r0
 801c3bc:	bc09      	pop	{r0, r3}
 801c3be:	6819      	ldr	r1, [r3, #0]
 801c3c0:	6808      	ldr	r0, [r1, #0]
 801c3c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3c6:	f01e 0f10 	tst.w	lr, #16
 801c3ca:	bf08      	it	eq
 801c3cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c3d0:	f380 8809 	msr	PSP, r0
 801c3d4:	f3bf 8f6f 	isb	sy
 801c3d8:	4770      	bx	lr
 801c3da:	bf00      	nop
 801c3dc:	f3af 8000 	nop.w

0801c3e0 <pxCurrentTCBConst>:
 801c3e0:	2000227c 	.word	0x2000227c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c3e4:	bf00      	nop
 801c3e6:	bf00      	nop

0801c3e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c3e8:	b580      	push	{r7, lr}
 801c3ea:	b082      	sub	sp, #8
 801c3ec:	af00      	add	r7, sp, #0
	__asm volatile
 801c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c3f2:	f383 8811 	msr	BASEPRI, r3
 801c3f6:	f3bf 8f6f 	isb	sy
 801c3fa:	f3bf 8f4f 	dsb	sy
 801c3fe:	607b      	str	r3, [r7, #4]
}
 801c400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c402:	f7fe fde3 	bl	801afcc <xTaskIncrementTick>
 801c406:	4603      	mov	r3, r0
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d003      	beq.n	801c414 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c40c:	4b06      	ldr	r3, [pc, #24]	; (801c428 <xPortSysTickHandler+0x40>)
 801c40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801c412:	601a      	str	r2, [r3, #0]
 801c414:	2300      	movs	r3, #0
 801c416:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c418:	683b      	ldr	r3, [r7, #0]
 801c41a:	f383 8811 	msr	BASEPRI, r3
}
 801c41e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c420:	bf00      	nop
 801c422:	3708      	adds	r7, #8
 801c424:	46bd      	mov	sp, r7
 801c426:	bd80      	pop	{r7, pc}
 801c428:	e000ed04 	.word	0xe000ed04

0801c42c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c42c:	b480      	push	{r7}
 801c42e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c430:	4b0b      	ldr	r3, [pc, #44]	; (801c460 <vPortSetupTimerInterrupt+0x34>)
 801c432:	2200      	movs	r2, #0
 801c434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c436:	4b0b      	ldr	r3, [pc, #44]	; (801c464 <vPortSetupTimerInterrupt+0x38>)
 801c438:	2200      	movs	r2, #0
 801c43a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c43c:	4b0a      	ldr	r3, [pc, #40]	; (801c468 <vPortSetupTimerInterrupt+0x3c>)
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	4a0a      	ldr	r2, [pc, #40]	; (801c46c <vPortSetupTimerInterrupt+0x40>)
 801c442:	fba2 2303 	umull	r2, r3, r2, r3
 801c446:	099b      	lsrs	r3, r3, #6
 801c448:	4a09      	ldr	r2, [pc, #36]	; (801c470 <vPortSetupTimerInterrupt+0x44>)
 801c44a:	3b01      	subs	r3, #1
 801c44c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c44e:	4b04      	ldr	r3, [pc, #16]	; (801c460 <vPortSetupTimerInterrupt+0x34>)
 801c450:	2207      	movs	r2, #7
 801c452:	601a      	str	r2, [r3, #0]
}
 801c454:	bf00      	nop
 801c456:	46bd      	mov	sp, r7
 801c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c45c:	4770      	bx	lr
 801c45e:	bf00      	nop
 801c460:	e000e010 	.word	0xe000e010
 801c464:	e000e018 	.word	0xe000e018
 801c468:	20000538 	.word	0x20000538
 801c46c:	10624dd3 	.word	0x10624dd3
 801c470:	e000e014 	.word	0xe000e014

0801c474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c474:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801c484 <vPortEnableVFP+0x10>
 801c478:	6801      	ldr	r1, [r0, #0]
 801c47a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801c47e:	6001      	str	r1, [r0, #0]
 801c480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c482:	bf00      	nop
 801c484:	e000ed88 	.word	0xe000ed88

0801c488 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801c488:	b480      	push	{r7}
 801c48a:	b085      	sub	sp, #20
 801c48c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801c48e:	f3ef 8305 	mrs	r3, IPSR
 801c492:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	2b0f      	cmp	r3, #15
 801c498:	d914      	bls.n	801c4c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801c49a:	4a17      	ldr	r2, [pc, #92]	; (801c4f8 <vPortValidateInterruptPriority+0x70>)
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	4413      	add	r3, r2
 801c4a0:	781b      	ldrb	r3, [r3, #0]
 801c4a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801c4a4:	4b15      	ldr	r3, [pc, #84]	; (801c4fc <vPortValidateInterruptPriority+0x74>)
 801c4a6:	781b      	ldrb	r3, [r3, #0]
 801c4a8:	7afa      	ldrb	r2, [r7, #11]
 801c4aa:	429a      	cmp	r2, r3
 801c4ac:	d20a      	bcs.n	801c4c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4b2:	f383 8811 	msr	BASEPRI, r3
 801c4b6:	f3bf 8f6f 	isb	sy
 801c4ba:	f3bf 8f4f 	dsb	sy
 801c4be:	607b      	str	r3, [r7, #4]
}
 801c4c0:	bf00      	nop
 801c4c2:	e7fe      	b.n	801c4c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801c4c4:	4b0e      	ldr	r3, [pc, #56]	; (801c500 <vPortValidateInterruptPriority+0x78>)
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801c4cc:	4b0d      	ldr	r3, [pc, #52]	; (801c504 <vPortValidateInterruptPriority+0x7c>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	429a      	cmp	r2, r3
 801c4d2:	d90a      	bls.n	801c4ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c4d8:	f383 8811 	msr	BASEPRI, r3
 801c4dc:	f3bf 8f6f 	isb	sy
 801c4e0:	f3bf 8f4f 	dsb	sy
 801c4e4:	603b      	str	r3, [r7, #0]
}
 801c4e6:	bf00      	nop
 801c4e8:	e7fe      	b.n	801c4e8 <vPortValidateInterruptPriority+0x60>
	}
 801c4ea:	bf00      	nop
 801c4ec:	3714      	adds	r7, #20
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4f4:	4770      	bx	lr
 801c4f6:	bf00      	nop
 801c4f8:	e000e3f0 	.word	0xe000e3f0
 801c4fc:	200028a8 	.word	0x200028a8
 801c500:	e000ed0c 	.word	0xe000ed0c
 801c504:	200028ac 	.word	0x200028ac

0801c508 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c508:	b580      	push	{r7, lr}
 801c50a:	b08a      	sub	sp, #40	; 0x28
 801c50c:	af00      	add	r7, sp, #0
 801c50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801c510:	2300      	movs	r3, #0
 801c512:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801c514:	f7fe fc9e 	bl	801ae54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801c518:	4b5b      	ldr	r3, [pc, #364]	; (801c688 <pvPortMalloc+0x180>)
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d101      	bne.n	801c524 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801c520:	f000 f920 	bl	801c764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801c524:	4b59      	ldr	r3, [pc, #356]	; (801c68c <pvPortMalloc+0x184>)
 801c526:	681a      	ldr	r2, [r3, #0]
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	4013      	ands	r3, r2
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	f040 8093 	bne.w	801c658 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d01d      	beq.n	801c574 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801c538:	2208      	movs	r2, #8
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	4413      	add	r3, r2
 801c53e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	f003 0307 	and.w	r3, r3, #7
 801c546:	2b00      	cmp	r3, #0
 801c548:	d014      	beq.n	801c574 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	f023 0307 	bic.w	r3, r3, #7
 801c550:	3308      	adds	r3, #8
 801c552:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	f003 0307 	and.w	r3, r3, #7
 801c55a:	2b00      	cmp	r3, #0
 801c55c:	d00a      	beq.n	801c574 <pvPortMalloc+0x6c>
	__asm volatile
 801c55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c562:	f383 8811 	msr	BASEPRI, r3
 801c566:	f3bf 8f6f 	isb	sy
 801c56a:	f3bf 8f4f 	dsb	sy
 801c56e:	617b      	str	r3, [r7, #20]
}
 801c570:	bf00      	nop
 801c572:	e7fe      	b.n	801c572 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d06e      	beq.n	801c658 <pvPortMalloc+0x150>
 801c57a:	4b45      	ldr	r3, [pc, #276]	; (801c690 <pvPortMalloc+0x188>)
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	687a      	ldr	r2, [r7, #4]
 801c580:	429a      	cmp	r2, r3
 801c582:	d869      	bhi.n	801c658 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801c584:	4b43      	ldr	r3, [pc, #268]	; (801c694 <pvPortMalloc+0x18c>)
 801c586:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801c588:	4b42      	ldr	r3, [pc, #264]	; (801c694 <pvPortMalloc+0x18c>)
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c58e:	e004      	b.n	801c59a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c592:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801c59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c59c:	685b      	ldr	r3, [r3, #4]
 801c59e:	687a      	ldr	r2, [r7, #4]
 801c5a0:	429a      	cmp	r2, r3
 801c5a2:	d903      	bls.n	801c5ac <pvPortMalloc+0xa4>
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d1f1      	bne.n	801c590 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801c5ac:	4b36      	ldr	r3, [pc, #216]	; (801c688 <pvPortMalloc+0x180>)
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5b2:	429a      	cmp	r2, r3
 801c5b4:	d050      	beq.n	801c658 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801c5b6:	6a3b      	ldr	r3, [r7, #32]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	2208      	movs	r2, #8
 801c5bc:	4413      	add	r3, r2
 801c5be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5c2:	681a      	ldr	r2, [r3, #0]
 801c5c4:	6a3b      	ldr	r3, [r7, #32]
 801c5c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801c5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c5ca:	685a      	ldr	r2, [r3, #4]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	1ad2      	subs	r2, r2, r3
 801c5d0:	2308      	movs	r3, #8
 801c5d2:	005b      	lsls	r3, r3, #1
 801c5d4:	429a      	cmp	r2, r3
 801c5d6:	d91f      	bls.n	801c618 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801c5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	4413      	add	r3, r2
 801c5de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801c5e0:	69bb      	ldr	r3, [r7, #24]
 801c5e2:	f003 0307 	and.w	r3, r3, #7
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d00a      	beq.n	801c600 <pvPortMalloc+0xf8>
	__asm volatile
 801c5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c5ee:	f383 8811 	msr	BASEPRI, r3
 801c5f2:	f3bf 8f6f 	isb	sy
 801c5f6:	f3bf 8f4f 	dsb	sy
 801c5fa:	613b      	str	r3, [r7, #16]
}
 801c5fc:	bf00      	nop
 801c5fe:	e7fe      	b.n	801c5fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c602:	685a      	ldr	r2, [r3, #4]
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	1ad2      	subs	r2, r2, r3
 801c608:	69bb      	ldr	r3, [r7, #24]
 801c60a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801c612:	69b8      	ldr	r0, [r7, #24]
 801c614:	f000 f908 	bl	801c828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801c618:	4b1d      	ldr	r3, [pc, #116]	; (801c690 <pvPortMalloc+0x188>)
 801c61a:	681a      	ldr	r2, [r3, #0]
 801c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c61e:	685b      	ldr	r3, [r3, #4]
 801c620:	1ad3      	subs	r3, r2, r3
 801c622:	4a1b      	ldr	r2, [pc, #108]	; (801c690 <pvPortMalloc+0x188>)
 801c624:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801c626:	4b1a      	ldr	r3, [pc, #104]	; (801c690 <pvPortMalloc+0x188>)
 801c628:	681a      	ldr	r2, [r3, #0]
 801c62a:	4b1b      	ldr	r3, [pc, #108]	; (801c698 <pvPortMalloc+0x190>)
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d203      	bcs.n	801c63a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801c632:	4b17      	ldr	r3, [pc, #92]	; (801c690 <pvPortMalloc+0x188>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	4a18      	ldr	r2, [pc, #96]	; (801c698 <pvPortMalloc+0x190>)
 801c638:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c63c:	685a      	ldr	r2, [r3, #4]
 801c63e:	4b13      	ldr	r3, [pc, #76]	; (801c68c <pvPortMalloc+0x184>)
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	431a      	orrs	r2, r3
 801c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c646:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c64a:	2200      	movs	r2, #0
 801c64c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801c64e:	4b13      	ldr	r3, [pc, #76]	; (801c69c <pvPortMalloc+0x194>)
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	3301      	adds	r3, #1
 801c654:	4a11      	ldr	r2, [pc, #68]	; (801c69c <pvPortMalloc+0x194>)
 801c656:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c658:	f7fe fc0a 	bl	801ae70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801c65c:	69fb      	ldr	r3, [r7, #28]
 801c65e:	f003 0307 	and.w	r3, r3, #7
 801c662:	2b00      	cmp	r3, #0
 801c664:	d00a      	beq.n	801c67c <pvPortMalloc+0x174>
	__asm volatile
 801c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c66a:	f383 8811 	msr	BASEPRI, r3
 801c66e:	f3bf 8f6f 	isb	sy
 801c672:	f3bf 8f4f 	dsb	sy
 801c676:	60fb      	str	r3, [r7, #12]
}
 801c678:	bf00      	nop
 801c67a:	e7fe      	b.n	801c67a <pvPortMalloc+0x172>
	return pvReturn;
 801c67c:	69fb      	ldr	r3, [r7, #28]
}
 801c67e:	4618      	mov	r0, r3
 801c680:	3728      	adds	r7, #40	; 0x28
 801c682:	46bd      	mov	sp, r7
 801c684:	bd80      	pop	{r7, pc}
 801c686:	bf00      	nop
 801c688:	200064b8 	.word	0x200064b8
 801c68c:	200064cc 	.word	0x200064cc
 801c690:	200064bc 	.word	0x200064bc
 801c694:	200064b0 	.word	0x200064b0
 801c698:	200064c0 	.word	0x200064c0
 801c69c:	200064c4 	.word	0x200064c4

0801c6a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b086      	sub	sp, #24
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d04d      	beq.n	801c74e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801c6b2:	2308      	movs	r3, #8
 801c6b4:	425b      	negs	r3, r3
 801c6b6:	697a      	ldr	r2, [r7, #20]
 801c6b8:	4413      	add	r3, r2
 801c6ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801c6bc:	697b      	ldr	r3, [r7, #20]
 801c6be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801c6c0:	693b      	ldr	r3, [r7, #16]
 801c6c2:	685a      	ldr	r2, [r3, #4]
 801c6c4:	4b24      	ldr	r3, [pc, #144]	; (801c758 <vPortFree+0xb8>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	4013      	ands	r3, r2
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d10a      	bne.n	801c6e4 <vPortFree+0x44>
	__asm volatile
 801c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6d2:	f383 8811 	msr	BASEPRI, r3
 801c6d6:	f3bf 8f6f 	isb	sy
 801c6da:	f3bf 8f4f 	dsb	sy
 801c6de:	60fb      	str	r3, [r7, #12]
}
 801c6e0:	bf00      	nop
 801c6e2:	e7fe      	b.n	801c6e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801c6e4:	693b      	ldr	r3, [r7, #16]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d00a      	beq.n	801c702 <vPortFree+0x62>
	__asm volatile
 801c6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801c6f0:	f383 8811 	msr	BASEPRI, r3
 801c6f4:	f3bf 8f6f 	isb	sy
 801c6f8:	f3bf 8f4f 	dsb	sy
 801c6fc:	60bb      	str	r3, [r7, #8]
}
 801c6fe:	bf00      	nop
 801c700:	e7fe      	b.n	801c700 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c702:	693b      	ldr	r3, [r7, #16]
 801c704:	685a      	ldr	r2, [r3, #4]
 801c706:	4b14      	ldr	r3, [pc, #80]	; (801c758 <vPortFree+0xb8>)
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	4013      	ands	r3, r2
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d01e      	beq.n	801c74e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c710:	693b      	ldr	r3, [r7, #16]
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d11a      	bne.n	801c74e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c718:	693b      	ldr	r3, [r7, #16]
 801c71a:	685a      	ldr	r2, [r3, #4]
 801c71c:	4b0e      	ldr	r3, [pc, #56]	; (801c758 <vPortFree+0xb8>)
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	43db      	mvns	r3, r3
 801c722:	401a      	ands	r2, r3
 801c724:	693b      	ldr	r3, [r7, #16]
 801c726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c728:	f7fe fb94 	bl	801ae54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c72c:	693b      	ldr	r3, [r7, #16]
 801c72e:	685a      	ldr	r2, [r3, #4]
 801c730:	4b0a      	ldr	r3, [pc, #40]	; (801c75c <vPortFree+0xbc>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	4413      	add	r3, r2
 801c736:	4a09      	ldr	r2, [pc, #36]	; (801c75c <vPortFree+0xbc>)
 801c738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c73a:	6938      	ldr	r0, [r7, #16]
 801c73c:	f000 f874 	bl	801c828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c740:	4b07      	ldr	r3, [pc, #28]	; (801c760 <vPortFree+0xc0>)
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	3301      	adds	r3, #1
 801c746:	4a06      	ldr	r2, [pc, #24]	; (801c760 <vPortFree+0xc0>)
 801c748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c74a:	f7fe fb91 	bl	801ae70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c74e:	bf00      	nop
 801c750:	3718      	adds	r7, #24
 801c752:	46bd      	mov	sp, r7
 801c754:	bd80      	pop	{r7, pc}
 801c756:	bf00      	nop
 801c758:	200064cc 	.word	0x200064cc
 801c75c:	200064bc 	.word	0x200064bc
 801c760:	200064c8 	.word	0x200064c8

0801c764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c764:	b480      	push	{r7}
 801c766:	b085      	sub	sp, #20
 801c768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c76a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801c76e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c770:	4b27      	ldr	r3, [pc, #156]	; (801c810 <prvHeapInit+0xac>)
 801c772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	f003 0307 	and.w	r3, r3, #7
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d00c      	beq.n	801c798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	3307      	adds	r3, #7
 801c782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	f023 0307 	bic.w	r3, r3, #7
 801c78a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c78c:	68ba      	ldr	r2, [r7, #8]
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	1ad3      	subs	r3, r2, r3
 801c792:	4a1f      	ldr	r2, [pc, #124]	; (801c810 <prvHeapInit+0xac>)
 801c794:	4413      	add	r3, r2
 801c796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c79c:	4a1d      	ldr	r2, [pc, #116]	; (801c814 <prvHeapInit+0xb0>)
 801c79e:	687b      	ldr	r3, [r7, #4]
 801c7a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c7a2:	4b1c      	ldr	r3, [pc, #112]	; (801c814 <prvHeapInit+0xb0>)
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	68ba      	ldr	r2, [r7, #8]
 801c7ac:	4413      	add	r3, r2
 801c7ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c7b0:	2208      	movs	r2, #8
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	1a9b      	subs	r3, r3, r2
 801c7b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	f023 0307 	bic.w	r3, r3, #7
 801c7be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	4a15      	ldr	r2, [pc, #84]	; (801c818 <prvHeapInit+0xb4>)
 801c7c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c7c6:	4b14      	ldr	r3, [pc, #80]	; (801c818 <prvHeapInit+0xb4>)
 801c7c8:	681b      	ldr	r3, [r3, #0]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c7ce:	4b12      	ldr	r3, [pc, #72]	; (801c818 <prvHeapInit+0xb4>)
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	2200      	movs	r2, #0
 801c7d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c7da:	683b      	ldr	r3, [r7, #0]
 801c7dc:	68fa      	ldr	r2, [r7, #12]
 801c7de:	1ad2      	subs	r2, r2, r3
 801c7e0:	683b      	ldr	r3, [r7, #0]
 801c7e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c7e4:	4b0c      	ldr	r3, [pc, #48]	; (801c818 <prvHeapInit+0xb4>)
 801c7e6:	681a      	ldr	r2, [r3, #0]
 801c7e8:	683b      	ldr	r3, [r7, #0]
 801c7ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c7ec:	683b      	ldr	r3, [r7, #0]
 801c7ee:	685b      	ldr	r3, [r3, #4]
 801c7f0:	4a0a      	ldr	r2, [pc, #40]	; (801c81c <prvHeapInit+0xb8>)
 801c7f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c7f4:	683b      	ldr	r3, [r7, #0]
 801c7f6:	685b      	ldr	r3, [r3, #4]
 801c7f8:	4a09      	ldr	r2, [pc, #36]	; (801c820 <prvHeapInit+0xbc>)
 801c7fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c7fc:	4b09      	ldr	r3, [pc, #36]	; (801c824 <prvHeapInit+0xc0>)
 801c7fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c802:	601a      	str	r2, [r3, #0]
}
 801c804:	bf00      	nop
 801c806:	3714      	adds	r7, #20
 801c808:	46bd      	mov	sp, r7
 801c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c80e:	4770      	bx	lr
 801c810:	200028b0 	.word	0x200028b0
 801c814:	200064b0 	.word	0x200064b0
 801c818:	200064b8 	.word	0x200064b8
 801c81c:	200064c0 	.word	0x200064c0
 801c820:	200064bc 	.word	0x200064bc
 801c824:	200064cc 	.word	0x200064cc

0801c828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c828:	b480      	push	{r7}
 801c82a:	b085      	sub	sp, #20
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c830:	4b28      	ldr	r3, [pc, #160]	; (801c8d4 <prvInsertBlockIntoFreeList+0xac>)
 801c832:	60fb      	str	r3, [r7, #12]
 801c834:	e002      	b.n	801c83c <prvInsertBlockIntoFreeList+0x14>
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	60fb      	str	r3, [r7, #12]
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	687a      	ldr	r2, [r7, #4]
 801c842:	429a      	cmp	r2, r3
 801c844:	d8f7      	bhi.n	801c836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c846:	68fb      	ldr	r3, [r7, #12]
 801c848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	68ba      	ldr	r2, [r7, #8]
 801c850:	4413      	add	r3, r2
 801c852:	687a      	ldr	r2, [r7, #4]
 801c854:	429a      	cmp	r2, r3
 801c856:	d108      	bne.n	801c86a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	685a      	ldr	r2, [r3, #4]
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	685b      	ldr	r3, [r3, #4]
 801c860:	441a      	add	r2, r3
 801c862:	68fb      	ldr	r3, [r7, #12]
 801c864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c866:	68fb      	ldr	r3, [r7, #12]
 801c868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	68ba      	ldr	r2, [r7, #8]
 801c874:	441a      	add	r2, r3
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	429a      	cmp	r2, r3
 801c87c:	d118      	bne.n	801c8b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	681a      	ldr	r2, [r3, #0]
 801c882:	4b15      	ldr	r3, [pc, #84]	; (801c8d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	429a      	cmp	r2, r3
 801c888:	d00d      	beq.n	801c8a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	685a      	ldr	r2, [r3, #4]
 801c88e:	68fb      	ldr	r3, [r7, #12]
 801c890:	681b      	ldr	r3, [r3, #0]
 801c892:	685b      	ldr	r3, [r3, #4]
 801c894:	441a      	add	r2, r3
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	681a      	ldr	r2, [r3, #0]
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	601a      	str	r2, [r3, #0]
 801c8a4:	e008      	b.n	801c8b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c8a6:	4b0c      	ldr	r3, [pc, #48]	; (801c8d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c8a8:	681a      	ldr	r2, [r3, #0]
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	601a      	str	r2, [r3, #0]
 801c8ae:	e003      	b.n	801c8b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c8b0:	68fb      	ldr	r3, [r7, #12]
 801c8b2:	681a      	ldr	r2, [r3, #0]
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c8b8:	68fa      	ldr	r2, [r7, #12]
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	429a      	cmp	r2, r3
 801c8be:	d002      	beq.n	801c8c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c8c0:	68fb      	ldr	r3, [r7, #12]
 801c8c2:	687a      	ldr	r2, [r7, #4]
 801c8c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c8c6:	bf00      	nop
 801c8c8:	3714      	adds	r7, #20
 801c8ca:	46bd      	mov	sp, r7
 801c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8d0:	4770      	bx	lr
 801c8d2:	bf00      	nop
 801c8d4:	200064b0 	.word	0x200064b0
 801c8d8:	200064b8 	.word	0x200064b8

0801c8dc <__errno>:
 801c8dc:	4b01      	ldr	r3, [pc, #4]	; (801c8e4 <__errno+0x8>)
 801c8de:	6818      	ldr	r0, [r3, #0]
 801c8e0:	4770      	bx	lr
 801c8e2:	bf00      	nop
 801c8e4:	200005c0 	.word	0x200005c0

0801c8e8 <__libc_init_array>:
 801c8e8:	b570      	push	{r4, r5, r6, lr}
 801c8ea:	4d0d      	ldr	r5, [pc, #52]	; (801c920 <__libc_init_array+0x38>)
 801c8ec:	4c0d      	ldr	r4, [pc, #52]	; (801c924 <__libc_init_array+0x3c>)
 801c8ee:	1b64      	subs	r4, r4, r5
 801c8f0:	10a4      	asrs	r4, r4, #2
 801c8f2:	2600      	movs	r6, #0
 801c8f4:	42a6      	cmp	r6, r4
 801c8f6:	d109      	bne.n	801c90c <__libc_init_array+0x24>
 801c8f8:	4d0b      	ldr	r5, [pc, #44]	; (801c928 <__libc_init_array+0x40>)
 801c8fa:	4c0c      	ldr	r4, [pc, #48]	; (801c92c <__libc_init_array+0x44>)
 801c8fc:	f005 fa32 	bl	8021d64 <_init>
 801c900:	1b64      	subs	r4, r4, r5
 801c902:	10a4      	asrs	r4, r4, #2
 801c904:	2600      	movs	r6, #0
 801c906:	42a6      	cmp	r6, r4
 801c908:	d105      	bne.n	801c916 <__libc_init_array+0x2e>
 801c90a:	bd70      	pop	{r4, r5, r6, pc}
 801c90c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c910:	4798      	blx	r3
 801c912:	3601      	adds	r6, #1
 801c914:	e7ee      	b.n	801c8f4 <__libc_init_array+0xc>
 801c916:	f855 3b04 	ldr.w	r3, [r5], #4
 801c91a:	4798      	blx	r3
 801c91c:	3601      	adds	r6, #1
 801c91e:	e7f2      	b.n	801c906 <__libc_init_array+0x1e>
 801c920:	080231d4 	.word	0x080231d4
 801c924:	080231d4 	.word	0x080231d4
 801c928:	080231d4 	.word	0x080231d4
 801c92c:	080231d8 	.word	0x080231d8

0801c930 <malloc>:
 801c930:	4b02      	ldr	r3, [pc, #8]	; (801c93c <malloc+0xc>)
 801c932:	4601      	mov	r1, r0
 801c934:	6818      	ldr	r0, [r3, #0]
 801c936:	f000 b871 	b.w	801ca1c <_malloc_r>
 801c93a:	bf00      	nop
 801c93c:	200005c0 	.word	0x200005c0

0801c940 <free>:
 801c940:	4b02      	ldr	r3, [pc, #8]	; (801c94c <free+0xc>)
 801c942:	4601      	mov	r1, r0
 801c944:	6818      	ldr	r0, [r3, #0]
 801c946:	f000 b819 	b.w	801c97c <_free_r>
 801c94a:	bf00      	nop
 801c94c:	200005c0 	.word	0x200005c0

0801c950 <memcpy>:
 801c950:	440a      	add	r2, r1
 801c952:	4291      	cmp	r1, r2
 801c954:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c958:	d100      	bne.n	801c95c <memcpy+0xc>
 801c95a:	4770      	bx	lr
 801c95c:	b510      	push	{r4, lr}
 801c95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c962:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c966:	4291      	cmp	r1, r2
 801c968:	d1f9      	bne.n	801c95e <memcpy+0xe>
 801c96a:	bd10      	pop	{r4, pc}

0801c96c <memset>:
 801c96c:	4402      	add	r2, r0
 801c96e:	4603      	mov	r3, r0
 801c970:	4293      	cmp	r3, r2
 801c972:	d100      	bne.n	801c976 <memset+0xa>
 801c974:	4770      	bx	lr
 801c976:	f803 1b01 	strb.w	r1, [r3], #1
 801c97a:	e7f9      	b.n	801c970 <memset+0x4>

0801c97c <_free_r>:
 801c97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c97e:	2900      	cmp	r1, #0
 801c980:	d048      	beq.n	801ca14 <_free_r+0x98>
 801c982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c986:	9001      	str	r0, [sp, #4]
 801c988:	2b00      	cmp	r3, #0
 801c98a:	f1a1 0404 	sub.w	r4, r1, #4
 801c98e:	bfb8      	it	lt
 801c990:	18e4      	addlt	r4, r4, r3
 801c992:	f003 f915 	bl	801fbc0 <__malloc_lock>
 801c996:	4a20      	ldr	r2, [pc, #128]	; (801ca18 <_free_r+0x9c>)
 801c998:	9801      	ldr	r0, [sp, #4]
 801c99a:	6813      	ldr	r3, [r2, #0]
 801c99c:	4615      	mov	r5, r2
 801c99e:	b933      	cbnz	r3, 801c9ae <_free_r+0x32>
 801c9a0:	6063      	str	r3, [r4, #4]
 801c9a2:	6014      	str	r4, [r2, #0]
 801c9a4:	b003      	add	sp, #12
 801c9a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9aa:	f003 b90f 	b.w	801fbcc <__malloc_unlock>
 801c9ae:	42a3      	cmp	r3, r4
 801c9b0:	d90b      	bls.n	801c9ca <_free_r+0x4e>
 801c9b2:	6821      	ldr	r1, [r4, #0]
 801c9b4:	1862      	adds	r2, r4, r1
 801c9b6:	4293      	cmp	r3, r2
 801c9b8:	bf04      	itt	eq
 801c9ba:	681a      	ldreq	r2, [r3, #0]
 801c9bc:	685b      	ldreq	r3, [r3, #4]
 801c9be:	6063      	str	r3, [r4, #4]
 801c9c0:	bf04      	itt	eq
 801c9c2:	1852      	addeq	r2, r2, r1
 801c9c4:	6022      	streq	r2, [r4, #0]
 801c9c6:	602c      	str	r4, [r5, #0]
 801c9c8:	e7ec      	b.n	801c9a4 <_free_r+0x28>
 801c9ca:	461a      	mov	r2, r3
 801c9cc:	685b      	ldr	r3, [r3, #4]
 801c9ce:	b10b      	cbz	r3, 801c9d4 <_free_r+0x58>
 801c9d0:	42a3      	cmp	r3, r4
 801c9d2:	d9fa      	bls.n	801c9ca <_free_r+0x4e>
 801c9d4:	6811      	ldr	r1, [r2, #0]
 801c9d6:	1855      	adds	r5, r2, r1
 801c9d8:	42a5      	cmp	r5, r4
 801c9da:	d10b      	bne.n	801c9f4 <_free_r+0x78>
 801c9dc:	6824      	ldr	r4, [r4, #0]
 801c9de:	4421      	add	r1, r4
 801c9e0:	1854      	adds	r4, r2, r1
 801c9e2:	42a3      	cmp	r3, r4
 801c9e4:	6011      	str	r1, [r2, #0]
 801c9e6:	d1dd      	bne.n	801c9a4 <_free_r+0x28>
 801c9e8:	681c      	ldr	r4, [r3, #0]
 801c9ea:	685b      	ldr	r3, [r3, #4]
 801c9ec:	6053      	str	r3, [r2, #4]
 801c9ee:	4421      	add	r1, r4
 801c9f0:	6011      	str	r1, [r2, #0]
 801c9f2:	e7d7      	b.n	801c9a4 <_free_r+0x28>
 801c9f4:	d902      	bls.n	801c9fc <_free_r+0x80>
 801c9f6:	230c      	movs	r3, #12
 801c9f8:	6003      	str	r3, [r0, #0]
 801c9fa:	e7d3      	b.n	801c9a4 <_free_r+0x28>
 801c9fc:	6825      	ldr	r5, [r4, #0]
 801c9fe:	1961      	adds	r1, r4, r5
 801ca00:	428b      	cmp	r3, r1
 801ca02:	bf04      	itt	eq
 801ca04:	6819      	ldreq	r1, [r3, #0]
 801ca06:	685b      	ldreq	r3, [r3, #4]
 801ca08:	6063      	str	r3, [r4, #4]
 801ca0a:	bf04      	itt	eq
 801ca0c:	1949      	addeq	r1, r1, r5
 801ca0e:	6021      	streq	r1, [r4, #0]
 801ca10:	6054      	str	r4, [r2, #4]
 801ca12:	e7c7      	b.n	801c9a4 <_free_r+0x28>
 801ca14:	b003      	add	sp, #12
 801ca16:	bd30      	pop	{r4, r5, pc}
 801ca18:	200064d0 	.word	0x200064d0

0801ca1c <_malloc_r>:
 801ca1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca1e:	1ccd      	adds	r5, r1, #3
 801ca20:	f025 0503 	bic.w	r5, r5, #3
 801ca24:	3508      	adds	r5, #8
 801ca26:	2d0c      	cmp	r5, #12
 801ca28:	bf38      	it	cc
 801ca2a:	250c      	movcc	r5, #12
 801ca2c:	2d00      	cmp	r5, #0
 801ca2e:	4606      	mov	r6, r0
 801ca30:	db01      	blt.n	801ca36 <_malloc_r+0x1a>
 801ca32:	42a9      	cmp	r1, r5
 801ca34:	d903      	bls.n	801ca3e <_malloc_r+0x22>
 801ca36:	230c      	movs	r3, #12
 801ca38:	6033      	str	r3, [r6, #0]
 801ca3a:	2000      	movs	r0, #0
 801ca3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca3e:	f003 f8bf 	bl	801fbc0 <__malloc_lock>
 801ca42:	4921      	ldr	r1, [pc, #132]	; (801cac8 <_malloc_r+0xac>)
 801ca44:	680a      	ldr	r2, [r1, #0]
 801ca46:	4614      	mov	r4, r2
 801ca48:	b99c      	cbnz	r4, 801ca72 <_malloc_r+0x56>
 801ca4a:	4f20      	ldr	r7, [pc, #128]	; (801cacc <_malloc_r+0xb0>)
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	b923      	cbnz	r3, 801ca5a <_malloc_r+0x3e>
 801ca50:	4621      	mov	r1, r4
 801ca52:	4630      	mov	r0, r6
 801ca54:	f000 febe 	bl	801d7d4 <_sbrk_r>
 801ca58:	6038      	str	r0, [r7, #0]
 801ca5a:	4629      	mov	r1, r5
 801ca5c:	4630      	mov	r0, r6
 801ca5e:	f000 feb9 	bl	801d7d4 <_sbrk_r>
 801ca62:	1c43      	adds	r3, r0, #1
 801ca64:	d123      	bne.n	801caae <_malloc_r+0x92>
 801ca66:	230c      	movs	r3, #12
 801ca68:	6033      	str	r3, [r6, #0]
 801ca6a:	4630      	mov	r0, r6
 801ca6c:	f003 f8ae 	bl	801fbcc <__malloc_unlock>
 801ca70:	e7e3      	b.n	801ca3a <_malloc_r+0x1e>
 801ca72:	6823      	ldr	r3, [r4, #0]
 801ca74:	1b5b      	subs	r3, r3, r5
 801ca76:	d417      	bmi.n	801caa8 <_malloc_r+0x8c>
 801ca78:	2b0b      	cmp	r3, #11
 801ca7a:	d903      	bls.n	801ca84 <_malloc_r+0x68>
 801ca7c:	6023      	str	r3, [r4, #0]
 801ca7e:	441c      	add	r4, r3
 801ca80:	6025      	str	r5, [r4, #0]
 801ca82:	e004      	b.n	801ca8e <_malloc_r+0x72>
 801ca84:	6863      	ldr	r3, [r4, #4]
 801ca86:	42a2      	cmp	r2, r4
 801ca88:	bf0c      	ite	eq
 801ca8a:	600b      	streq	r3, [r1, #0]
 801ca8c:	6053      	strne	r3, [r2, #4]
 801ca8e:	4630      	mov	r0, r6
 801ca90:	f003 f89c 	bl	801fbcc <__malloc_unlock>
 801ca94:	f104 000b 	add.w	r0, r4, #11
 801ca98:	1d23      	adds	r3, r4, #4
 801ca9a:	f020 0007 	bic.w	r0, r0, #7
 801ca9e:	1ac2      	subs	r2, r0, r3
 801caa0:	d0cc      	beq.n	801ca3c <_malloc_r+0x20>
 801caa2:	1a1b      	subs	r3, r3, r0
 801caa4:	50a3      	str	r3, [r4, r2]
 801caa6:	e7c9      	b.n	801ca3c <_malloc_r+0x20>
 801caa8:	4622      	mov	r2, r4
 801caaa:	6864      	ldr	r4, [r4, #4]
 801caac:	e7cc      	b.n	801ca48 <_malloc_r+0x2c>
 801caae:	1cc4      	adds	r4, r0, #3
 801cab0:	f024 0403 	bic.w	r4, r4, #3
 801cab4:	42a0      	cmp	r0, r4
 801cab6:	d0e3      	beq.n	801ca80 <_malloc_r+0x64>
 801cab8:	1a21      	subs	r1, r4, r0
 801caba:	4630      	mov	r0, r6
 801cabc:	f000 fe8a 	bl	801d7d4 <_sbrk_r>
 801cac0:	3001      	adds	r0, #1
 801cac2:	d1dd      	bne.n	801ca80 <_malloc_r+0x64>
 801cac4:	e7cf      	b.n	801ca66 <_malloc_r+0x4a>
 801cac6:	bf00      	nop
 801cac8:	200064d0 	.word	0x200064d0
 801cacc:	200064d4 	.word	0x200064d4

0801cad0 <__cvt>:
 801cad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cad4:	ec55 4b10 	vmov	r4, r5, d0
 801cad8:	2d00      	cmp	r5, #0
 801cada:	460e      	mov	r6, r1
 801cadc:	4619      	mov	r1, r3
 801cade:	462b      	mov	r3, r5
 801cae0:	bfbb      	ittet	lt
 801cae2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801cae6:	461d      	movlt	r5, r3
 801cae8:	2300      	movge	r3, #0
 801caea:	232d      	movlt	r3, #45	; 0x2d
 801caec:	700b      	strb	r3, [r1, #0]
 801caee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801caf0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801caf4:	4691      	mov	r9, r2
 801caf6:	f023 0820 	bic.w	r8, r3, #32
 801cafa:	bfbc      	itt	lt
 801cafc:	4622      	movlt	r2, r4
 801cafe:	4614      	movlt	r4, r2
 801cb00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cb04:	d005      	beq.n	801cb12 <__cvt+0x42>
 801cb06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801cb0a:	d100      	bne.n	801cb0e <__cvt+0x3e>
 801cb0c:	3601      	adds	r6, #1
 801cb0e:	2102      	movs	r1, #2
 801cb10:	e000      	b.n	801cb14 <__cvt+0x44>
 801cb12:	2103      	movs	r1, #3
 801cb14:	ab03      	add	r3, sp, #12
 801cb16:	9301      	str	r3, [sp, #4]
 801cb18:	ab02      	add	r3, sp, #8
 801cb1a:	9300      	str	r3, [sp, #0]
 801cb1c:	ec45 4b10 	vmov	d0, r4, r5
 801cb20:	4653      	mov	r3, sl
 801cb22:	4632      	mov	r2, r6
 801cb24:	f001 fec8 	bl	801e8b8 <_dtoa_r>
 801cb28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801cb2c:	4607      	mov	r7, r0
 801cb2e:	d102      	bne.n	801cb36 <__cvt+0x66>
 801cb30:	f019 0f01 	tst.w	r9, #1
 801cb34:	d022      	beq.n	801cb7c <__cvt+0xac>
 801cb36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801cb3a:	eb07 0906 	add.w	r9, r7, r6
 801cb3e:	d110      	bne.n	801cb62 <__cvt+0x92>
 801cb40:	783b      	ldrb	r3, [r7, #0]
 801cb42:	2b30      	cmp	r3, #48	; 0x30
 801cb44:	d10a      	bne.n	801cb5c <__cvt+0x8c>
 801cb46:	2200      	movs	r2, #0
 801cb48:	2300      	movs	r3, #0
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	4629      	mov	r1, r5
 801cb4e:	f7e3 ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 801cb52:	b918      	cbnz	r0, 801cb5c <__cvt+0x8c>
 801cb54:	f1c6 0601 	rsb	r6, r6, #1
 801cb58:	f8ca 6000 	str.w	r6, [sl]
 801cb5c:	f8da 3000 	ldr.w	r3, [sl]
 801cb60:	4499      	add	r9, r3
 801cb62:	2200      	movs	r2, #0
 801cb64:	2300      	movs	r3, #0
 801cb66:	4620      	mov	r0, r4
 801cb68:	4629      	mov	r1, r5
 801cb6a:	f7e3 ffad 	bl	8000ac8 <__aeabi_dcmpeq>
 801cb6e:	b108      	cbz	r0, 801cb74 <__cvt+0xa4>
 801cb70:	f8cd 900c 	str.w	r9, [sp, #12]
 801cb74:	2230      	movs	r2, #48	; 0x30
 801cb76:	9b03      	ldr	r3, [sp, #12]
 801cb78:	454b      	cmp	r3, r9
 801cb7a:	d307      	bcc.n	801cb8c <__cvt+0xbc>
 801cb7c:	9b03      	ldr	r3, [sp, #12]
 801cb7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb80:	1bdb      	subs	r3, r3, r7
 801cb82:	4638      	mov	r0, r7
 801cb84:	6013      	str	r3, [r2, #0]
 801cb86:	b004      	add	sp, #16
 801cb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb8c:	1c59      	adds	r1, r3, #1
 801cb8e:	9103      	str	r1, [sp, #12]
 801cb90:	701a      	strb	r2, [r3, #0]
 801cb92:	e7f0      	b.n	801cb76 <__cvt+0xa6>

0801cb94 <__exponent>:
 801cb94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb96:	4603      	mov	r3, r0
 801cb98:	2900      	cmp	r1, #0
 801cb9a:	bfb8      	it	lt
 801cb9c:	4249      	neglt	r1, r1
 801cb9e:	f803 2b02 	strb.w	r2, [r3], #2
 801cba2:	bfb4      	ite	lt
 801cba4:	222d      	movlt	r2, #45	; 0x2d
 801cba6:	222b      	movge	r2, #43	; 0x2b
 801cba8:	2909      	cmp	r1, #9
 801cbaa:	7042      	strb	r2, [r0, #1]
 801cbac:	dd2a      	ble.n	801cc04 <__exponent+0x70>
 801cbae:	f10d 0407 	add.w	r4, sp, #7
 801cbb2:	46a4      	mov	ip, r4
 801cbb4:	270a      	movs	r7, #10
 801cbb6:	46a6      	mov	lr, r4
 801cbb8:	460a      	mov	r2, r1
 801cbba:	fb91 f6f7 	sdiv	r6, r1, r7
 801cbbe:	fb07 1516 	mls	r5, r7, r6, r1
 801cbc2:	3530      	adds	r5, #48	; 0x30
 801cbc4:	2a63      	cmp	r2, #99	; 0x63
 801cbc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801cbca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801cbce:	4631      	mov	r1, r6
 801cbd0:	dcf1      	bgt.n	801cbb6 <__exponent+0x22>
 801cbd2:	3130      	adds	r1, #48	; 0x30
 801cbd4:	f1ae 0502 	sub.w	r5, lr, #2
 801cbd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801cbdc:	1c44      	adds	r4, r0, #1
 801cbde:	4629      	mov	r1, r5
 801cbe0:	4561      	cmp	r1, ip
 801cbe2:	d30a      	bcc.n	801cbfa <__exponent+0x66>
 801cbe4:	f10d 0209 	add.w	r2, sp, #9
 801cbe8:	eba2 020e 	sub.w	r2, r2, lr
 801cbec:	4565      	cmp	r5, ip
 801cbee:	bf88      	it	hi
 801cbf0:	2200      	movhi	r2, #0
 801cbf2:	4413      	add	r3, r2
 801cbf4:	1a18      	subs	r0, r3, r0
 801cbf6:	b003      	add	sp, #12
 801cbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cbfe:	f804 2f01 	strb.w	r2, [r4, #1]!
 801cc02:	e7ed      	b.n	801cbe0 <__exponent+0x4c>
 801cc04:	2330      	movs	r3, #48	; 0x30
 801cc06:	3130      	adds	r1, #48	; 0x30
 801cc08:	7083      	strb	r3, [r0, #2]
 801cc0a:	70c1      	strb	r1, [r0, #3]
 801cc0c:	1d03      	adds	r3, r0, #4
 801cc0e:	e7f1      	b.n	801cbf4 <__exponent+0x60>

0801cc10 <_printf_float>:
 801cc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc14:	ed2d 8b02 	vpush	{d8}
 801cc18:	b08d      	sub	sp, #52	; 0x34
 801cc1a:	460c      	mov	r4, r1
 801cc1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801cc20:	4616      	mov	r6, r2
 801cc22:	461f      	mov	r7, r3
 801cc24:	4605      	mov	r5, r0
 801cc26:	f002 ffa3 	bl	801fb70 <_localeconv_r>
 801cc2a:	f8d0 a000 	ldr.w	sl, [r0]
 801cc2e:	4650      	mov	r0, sl
 801cc30:	f7e3 face 	bl	80001d0 <strlen>
 801cc34:	2300      	movs	r3, #0
 801cc36:	930a      	str	r3, [sp, #40]	; 0x28
 801cc38:	6823      	ldr	r3, [r4, #0]
 801cc3a:	9305      	str	r3, [sp, #20]
 801cc3c:	f8d8 3000 	ldr.w	r3, [r8]
 801cc40:	f894 b018 	ldrb.w	fp, [r4, #24]
 801cc44:	3307      	adds	r3, #7
 801cc46:	f023 0307 	bic.w	r3, r3, #7
 801cc4a:	f103 0208 	add.w	r2, r3, #8
 801cc4e:	f8c8 2000 	str.w	r2, [r8]
 801cc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801cc5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801cc5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801cc62:	9307      	str	r3, [sp, #28]
 801cc64:	f8cd 8018 	str.w	r8, [sp, #24]
 801cc68:	ee08 0a10 	vmov	s16, r0
 801cc6c:	4b9f      	ldr	r3, [pc, #636]	; (801ceec <_printf_float+0x2dc>)
 801cc6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cc76:	f7e3 ff59 	bl	8000b2c <__aeabi_dcmpun>
 801cc7a:	bb88      	cbnz	r0, 801cce0 <_printf_float+0xd0>
 801cc7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cc80:	4b9a      	ldr	r3, [pc, #616]	; (801ceec <_printf_float+0x2dc>)
 801cc82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cc86:	f7e3 ff33 	bl	8000af0 <__aeabi_dcmple>
 801cc8a:	bb48      	cbnz	r0, 801cce0 <_printf_float+0xd0>
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	2300      	movs	r3, #0
 801cc90:	4640      	mov	r0, r8
 801cc92:	4649      	mov	r1, r9
 801cc94:	f7e3 ff22 	bl	8000adc <__aeabi_dcmplt>
 801cc98:	b110      	cbz	r0, 801cca0 <_printf_float+0x90>
 801cc9a:	232d      	movs	r3, #45	; 0x2d
 801cc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cca0:	4b93      	ldr	r3, [pc, #588]	; (801cef0 <_printf_float+0x2e0>)
 801cca2:	4894      	ldr	r0, [pc, #592]	; (801cef4 <_printf_float+0x2e4>)
 801cca4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801cca8:	bf94      	ite	ls
 801ccaa:	4698      	movls	r8, r3
 801ccac:	4680      	movhi	r8, r0
 801ccae:	2303      	movs	r3, #3
 801ccb0:	6123      	str	r3, [r4, #16]
 801ccb2:	9b05      	ldr	r3, [sp, #20]
 801ccb4:	f023 0204 	bic.w	r2, r3, #4
 801ccb8:	6022      	str	r2, [r4, #0]
 801ccba:	f04f 0900 	mov.w	r9, #0
 801ccbe:	9700      	str	r7, [sp, #0]
 801ccc0:	4633      	mov	r3, r6
 801ccc2:	aa0b      	add	r2, sp, #44	; 0x2c
 801ccc4:	4621      	mov	r1, r4
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	f000 f9d8 	bl	801d07c <_printf_common>
 801cccc:	3001      	adds	r0, #1
 801ccce:	f040 8090 	bne.w	801cdf2 <_printf_float+0x1e2>
 801ccd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ccd6:	b00d      	add	sp, #52	; 0x34
 801ccd8:	ecbd 8b02 	vpop	{d8}
 801ccdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cce0:	4642      	mov	r2, r8
 801cce2:	464b      	mov	r3, r9
 801cce4:	4640      	mov	r0, r8
 801cce6:	4649      	mov	r1, r9
 801cce8:	f7e3 ff20 	bl	8000b2c <__aeabi_dcmpun>
 801ccec:	b140      	cbz	r0, 801cd00 <_printf_float+0xf0>
 801ccee:	464b      	mov	r3, r9
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	bfbc      	itt	lt
 801ccf4:	232d      	movlt	r3, #45	; 0x2d
 801ccf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ccfa:	487f      	ldr	r0, [pc, #508]	; (801cef8 <_printf_float+0x2e8>)
 801ccfc:	4b7f      	ldr	r3, [pc, #508]	; (801cefc <_printf_float+0x2ec>)
 801ccfe:	e7d1      	b.n	801cca4 <_printf_float+0x94>
 801cd00:	6863      	ldr	r3, [r4, #4]
 801cd02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801cd06:	9206      	str	r2, [sp, #24]
 801cd08:	1c5a      	adds	r2, r3, #1
 801cd0a:	d13f      	bne.n	801cd8c <_printf_float+0x17c>
 801cd0c:	2306      	movs	r3, #6
 801cd0e:	6063      	str	r3, [r4, #4]
 801cd10:	9b05      	ldr	r3, [sp, #20]
 801cd12:	6861      	ldr	r1, [r4, #4]
 801cd14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801cd18:	2300      	movs	r3, #0
 801cd1a:	9303      	str	r3, [sp, #12]
 801cd1c:	ab0a      	add	r3, sp, #40	; 0x28
 801cd1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801cd22:	ab09      	add	r3, sp, #36	; 0x24
 801cd24:	ec49 8b10 	vmov	d0, r8, r9
 801cd28:	9300      	str	r3, [sp, #0]
 801cd2a:	6022      	str	r2, [r4, #0]
 801cd2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801cd30:	4628      	mov	r0, r5
 801cd32:	f7ff fecd 	bl	801cad0 <__cvt>
 801cd36:	9b06      	ldr	r3, [sp, #24]
 801cd38:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cd3a:	2b47      	cmp	r3, #71	; 0x47
 801cd3c:	4680      	mov	r8, r0
 801cd3e:	d108      	bne.n	801cd52 <_printf_float+0x142>
 801cd40:	1cc8      	adds	r0, r1, #3
 801cd42:	db02      	blt.n	801cd4a <_printf_float+0x13a>
 801cd44:	6863      	ldr	r3, [r4, #4]
 801cd46:	4299      	cmp	r1, r3
 801cd48:	dd41      	ble.n	801cdce <_printf_float+0x1be>
 801cd4a:	f1ab 0b02 	sub.w	fp, fp, #2
 801cd4e:	fa5f fb8b 	uxtb.w	fp, fp
 801cd52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801cd56:	d820      	bhi.n	801cd9a <_printf_float+0x18a>
 801cd58:	3901      	subs	r1, #1
 801cd5a:	465a      	mov	r2, fp
 801cd5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cd60:	9109      	str	r1, [sp, #36]	; 0x24
 801cd62:	f7ff ff17 	bl	801cb94 <__exponent>
 801cd66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd68:	1813      	adds	r3, r2, r0
 801cd6a:	2a01      	cmp	r2, #1
 801cd6c:	4681      	mov	r9, r0
 801cd6e:	6123      	str	r3, [r4, #16]
 801cd70:	dc02      	bgt.n	801cd78 <_printf_float+0x168>
 801cd72:	6822      	ldr	r2, [r4, #0]
 801cd74:	07d2      	lsls	r2, r2, #31
 801cd76:	d501      	bpl.n	801cd7c <_printf_float+0x16c>
 801cd78:	3301      	adds	r3, #1
 801cd7a:	6123      	str	r3, [r4, #16]
 801cd7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d09c      	beq.n	801ccbe <_printf_float+0xae>
 801cd84:	232d      	movs	r3, #45	; 0x2d
 801cd86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd8a:	e798      	b.n	801ccbe <_printf_float+0xae>
 801cd8c:	9a06      	ldr	r2, [sp, #24]
 801cd8e:	2a47      	cmp	r2, #71	; 0x47
 801cd90:	d1be      	bne.n	801cd10 <_printf_float+0x100>
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d1bc      	bne.n	801cd10 <_printf_float+0x100>
 801cd96:	2301      	movs	r3, #1
 801cd98:	e7b9      	b.n	801cd0e <_printf_float+0xfe>
 801cd9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801cd9e:	d118      	bne.n	801cdd2 <_printf_float+0x1c2>
 801cda0:	2900      	cmp	r1, #0
 801cda2:	6863      	ldr	r3, [r4, #4]
 801cda4:	dd0b      	ble.n	801cdbe <_printf_float+0x1ae>
 801cda6:	6121      	str	r1, [r4, #16]
 801cda8:	b913      	cbnz	r3, 801cdb0 <_printf_float+0x1a0>
 801cdaa:	6822      	ldr	r2, [r4, #0]
 801cdac:	07d0      	lsls	r0, r2, #31
 801cdae:	d502      	bpl.n	801cdb6 <_printf_float+0x1a6>
 801cdb0:	3301      	adds	r3, #1
 801cdb2:	440b      	add	r3, r1
 801cdb4:	6123      	str	r3, [r4, #16]
 801cdb6:	65a1      	str	r1, [r4, #88]	; 0x58
 801cdb8:	f04f 0900 	mov.w	r9, #0
 801cdbc:	e7de      	b.n	801cd7c <_printf_float+0x16c>
 801cdbe:	b913      	cbnz	r3, 801cdc6 <_printf_float+0x1b6>
 801cdc0:	6822      	ldr	r2, [r4, #0]
 801cdc2:	07d2      	lsls	r2, r2, #31
 801cdc4:	d501      	bpl.n	801cdca <_printf_float+0x1ba>
 801cdc6:	3302      	adds	r3, #2
 801cdc8:	e7f4      	b.n	801cdb4 <_printf_float+0x1a4>
 801cdca:	2301      	movs	r3, #1
 801cdcc:	e7f2      	b.n	801cdb4 <_printf_float+0x1a4>
 801cdce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801cdd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdd4:	4299      	cmp	r1, r3
 801cdd6:	db05      	blt.n	801cde4 <_printf_float+0x1d4>
 801cdd8:	6823      	ldr	r3, [r4, #0]
 801cdda:	6121      	str	r1, [r4, #16]
 801cddc:	07d8      	lsls	r0, r3, #31
 801cdde:	d5ea      	bpl.n	801cdb6 <_printf_float+0x1a6>
 801cde0:	1c4b      	adds	r3, r1, #1
 801cde2:	e7e7      	b.n	801cdb4 <_printf_float+0x1a4>
 801cde4:	2900      	cmp	r1, #0
 801cde6:	bfd4      	ite	le
 801cde8:	f1c1 0202 	rsble	r2, r1, #2
 801cdec:	2201      	movgt	r2, #1
 801cdee:	4413      	add	r3, r2
 801cdf0:	e7e0      	b.n	801cdb4 <_printf_float+0x1a4>
 801cdf2:	6823      	ldr	r3, [r4, #0]
 801cdf4:	055a      	lsls	r2, r3, #21
 801cdf6:	d407      	bmi.n	801ce08 <_printf_float+0x1f8>
 801cdf8:	6923      	ldr	r3, [r4, #16]
 801cdfa:	4642      	mov	r2, r8
 801cdfc:	4631      	mov	r1, r6
 801cdfe:	4628      	mov	r0, r5
 801ce00:	47b8      	blx	r7
 801ce02:	3001      	adds	r0, #1
 801ce04:	d12c      	bne.n	801ce60 <_printf_float+0x250>
 801ce06:	e764      	b.n	801ccd2 <_printf_float+0xc2>
 801ce08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801ce0c:	f240 80e0 	bls.w	801cfd0 <_printf_float+0x3c0>
 801ce10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ce14:	2200      	movs	r2, #0
 801ce16:	2300      	movs	r3, #0
 801ce18:	f7e3 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 801ce1c:	2800      	cmp	r0, #0
 801ce1e:	d034      	beq.n	801ce8a <_printf_float+0x27a>
 801ce20:	4a37      	ldr	r2, [pc, #220]	; (801cf00 <_printf_float+0x2f0>)
 801ce22:	2301      	movs	r3, #1
 801ce24:	4631      	mov	r1, r6
 801ce26:	4628      	mov	r0, r5
 801ce28:	47b8      	blx	r7
 801ce2a:	3001      	adds	r0, #1
 801ce2c:	f43f af51 	beq.w	801ccd2 <_printf_float+0xc2>
 801ce30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801ce34:	429a      	cmp	r2, r3
 801ce36:	db02      	blt.n	801ce3e <_printf_float+0x22e>
 801ce38:	6823      	ldr	r3, [r4, #0]
 801ce3a:	07d8      	lsls	r0, r3, #31
 801ce3c:	d510      	bpl.n	801ce60 <_printf_float+0x250>
 801ce3e:	ee18 3a10 	vmov	r3, s16
 801ce42:	4652      	mov	r2, sl
 801ce44:	4631      	mov	r1, r6
 801ce46:	4628      	mov	r0, r5
 801ce48:	47b8      	blx	r7
 801ce4a:	3001      	adds	r0, #1
 801ce4c:	f43f af41 	beq.w	801ccd2 <_printf_float+0xc2>
 801ce50:	f04f 0800 	mov.w	r8, #0
 801ce54:	f104 091a 	add.w	r9, r4, #26
 801ce58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce5a:	3b01      	subs	r3, #1
 801ce5c:	4543      	cmp	r3, r8
 801ce5e:	dc09      	bgt.n	801ce74 <_printf_float+0x264>
 801ce60:	6823      	ldr	r3, [r4, #0]
 801ce62:	079b      	lsls	r3, r3, #30
 801ce64:	f100 8105 	bmi.w	801d072 <_printf_float+0x462>
 801ce68:	68e0      	ldr	r0, [r4, #12]
 801ce6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce6c:	4298      	cmp	r0, r3
 801ce6e:	bfb8      	it	lt
 801ce70:	4618      	movlt	r0, r3
 801ce72:	e730      	b.n	801ccd6 <_printf_float+0xc6>
 801ce74:	2301      	movs	r3, #1
 801ce76:	464a      	mov	r2, r9
 801ce78:	4631      	mov	r1, r6
 801ce7a:	4628      	mov	r0, r5
 801ce7c:	47b8      	blx	r7
 801ce7e:	3001      	adds	r0, #1
 801ce80:	f43f af27 	beq.w	801ccd2 <_printf_float+0xc2>
 801ce84:	f108 0801 	add.w	r8, r8, #1
 801ce88:	e7e6      	b.n	801ce58 <_printf_float+0x248>
 801ce8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	dc39      	bgt.n	801cf04 <_printf_float+0x2f4>
 801ce90:	4a1b      	ldr	r2, [pc, #108]	; (801cf00 <_printf_float+0x2f0>)
 801ce92:	2301      	movs	r3, #1
 801ce94:	4631      	mov	r1, r6
 801ce96:	4628      	mov	r0, r5
 801ce98:	47b8      	blx	r7
 801ce9a:	3001      	adds	r0, #1
 801ce9c:	f43f af19 	beq.w	801ccd2 <_printf_float+0xc2>
 801cea0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cea4:	4313      	orrs	r3, r2
 801cea6:	d102      	bne.n	801ceae <_printf_float+0x29e>
 801cea8:	6823      	ldr	r3, [r4, #0]
 801ceaa:	07d9      	lsls	r1, r3, #31
 801ceac:	d5d8      	bpl.n	801ce60 <_printf_float+0x250>
 801ceae:	ee18 3a10 	vmov	r3, s16
 801ceb2:	4652      	mov	r2, sl
 801ceb4:	4631      	mov	r1, r6
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	47b8      	blx	r7
 801ceba:	3001      	adds	r0, #1
 801cebc:	f43f af09 	beq.w	801ccd2 <_printf_float+0xc2>
 801cec0:	f04f 0900 	mov.w	r9, #0
 801cec4:	f104 0a1a 	add.w	sl, r4, #26
 801cec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceca:	425b      	negs	r3, r3
 801cecc:	454b      	cmp	r3, r9
 801cece:	dc01      	bgt.n	801ced4 <_printf_float+0x2c4>
 801ced0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ced2:	e792      	b.n	801cdfa <_printf_float+0x1ea>
 801ced4:	2301      	movs	r3, #1
 801ced6:	4652      	mov	r2, sl
 801ced8:	4631      	mov	r1, r6
 801ceda:	4628      	mov	r0, r5
 801cedc:	47b8      	blx	r7
 801cede:	3001      	adds	r0, #1
 801cee0:	f43f aef7 	beq.w	801ccd2 <_printf_float+0xc2>
 801cee4:	f109 0901 	add.w	r9, r9, #1
 801cee8:	e7ee      	b.n	801cec8 <_printf_float+0x2b8>
 801ceea:	bf00      	nop
 801ceec:	7fefffff 	.word	0x7fefffff
 801cef0:	08022948 	.word	0x08022948
 801cef4:	0802294c 	.word	0x0802294c
 801cef8:	08022954 	.word	0x08022954
 801cefc:	08022950 	.word	0x08022950
 801cf00:	08022958 	.word	0x08022958
 801cf04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cf08:	429a      	cmp	r2, r3
 801cf0a:	bfa8      	it	ge
 801cf0c:	461a      	movge	r2, r3
 801cf0e:	2a00      	cmp	r2, #0
 801cf10:	4691      	mov	r9, r2
 801cf12:	dc37      	bgt.n	801cf84 <_printf_float+0x374>
 801cf14:	f04f 0b00 	mov.w	fp, #0
 801cf18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf1c:	f104 021a 	add.w	r2, r4, #26
 801cf20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cf22:	9305      	str	r3, [sp, #20]
 801cf24:	eba3 0309 	sub.w	r3, r3, r9
 801cf28:	455b      	cmp	r3, fp
 801cf2a:	dc33      	bgt.n	801cf94 <_printf_float+0x384>
 801cf2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cf30:	429a      	cmp	r2, r3
 801cf32:	db3b      	blt.n	801cfac <_printf_float+0x39c>
 801cf34:	6823      	ldr	r3, [r4, #0]
 801cf36:	07da      	lsls	r2, r3, #31
 801cf38:	d438      	bmi.n	801cfac <_printf_float+0x39c>
 801cf3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cf3c:	9b05      	ldr	r3, [sp, #20]
 801cf3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cf40:	1ad3      	subs	r3, r2, r3
 801cf42:	eba2 0901 	sub.w	r9, r2, r1
 801cf46:	4599      	cmp	r9, r3
 801cf48:	bfa8      	it	ge
 801cf4a:	4699      	movge	r9, r3
 801cf4c:	f1b9 0f00 	cmp.w	r9, #0
 801cf50:	dc35      	bgt.n	801cfbe <_printf_float+0x3ae>
 801cf52:	f04f 0800 	mov.w	r8, #0
 801cf56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf5a:	f104 0a1a 	add.w	sl, r4, #26
 801cf5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801cf62:	1a9b      	subs	r3, r3, r2
 801cf64:	eba3 0309 	sub.w	r3, r3, r9
 801cf68:	4543      	cmp	r3, r8
 801cf6a:	f77f af79 	ble.w	801ce60 <_printf_float+0x250>
 801cf6e:	2301      	movs	r3, #1
 801cf70:	4652      	mov	r2, sl
 801cf72:	4631      	mov	r1, r6
 801cf74:	4628      	mov	r0, r5
 801cf76:	47b8      	blx	r7
 801cf78:	3001      	adds	r0, #1
 801cf7a:	f43f aeaa 	beq.w	801ccd2 <_printf_float+0xc2>
 801cf7e:	f108 0801 	add.w	r8, r8, #1
 801cf82:	e7ec      	b.n	801cf5e <_printf_float+0x34e>
 801cf84:	4613      	mov	r3, r2
 801cf86:	4631      	mov	r1, r6
 801cf88:	4642      	mov	r2, r8
 801cf8a:	4628      	mov	r0, r5
 801cf8c:	47b8      	blx	r7
 801cf8e:	3001      	adds	r0, #1
 801cf90:	d1c0      	bne.n	801cf14 <_printf_float+0x304>
 801cf92:	e69e      	b.n	801ccd2 <_printf_float+0xc2>
 801cf94:	2301      	movs	r3, #1
 801cf96:	4631      	mov	r1, r6
 801cf98:	4628      	mov	r0, r5
 801cf9a:	9205      	str	r2, [sp, #20]
 801cf9c:	47b8      	blx	r7
 801cf9e:	3001      	adds	r0, #1
 801cfa0:	f43f ae97 	beq.w	801ccd2 <_printf_float+0xc2>
 801cfa4:	9a05      	ldr	r2, [sp, #20]
 801cfa6:	f10b 0b01 	add.w	fp, fp, #1
 801cfaa:	e7b9      	b.n	801cf20 <_printf_float+0x310>
 801cfac:	ee18 3a10 	vmov	r3, s16
 801cfb0:	4652      	mov	r2, sl
 801cfb2:	4631      	mov	r1, r6
 801cfb4:	4628      	mov	r0, r5
 801cfb6:	47b8      	blx	r7
 801cfb8:	3001      	adds	r0, #1
 801cfba:	d1be      	bne.n	801cf3a <_printf_float+0x32a>
 801cfbc:	e689      	b.n	801ccd2 <_printf_float+0xc2>
 801cfbe:	9a05      	ldr	r2, [sp, #20]
 801cfc0:	464b      	mov	r3, r9
 801cfc2:	4442      	add	r2, r8
 801cfc4:	4631      	mov	r1, r6
 801cfc6:	4628      	mov	r0, r5
 801cfc8:	47b8      	blx	r7
 801cfca:	3001      	adds	r0, #1
 801cfcc:	d1c1      	bne.n	801cf52 <_printf_float+0x342>
 801cfce:	e680      	b.n	801ccd2 <_printf_float+0xc2>
 801cfd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cfd2:	2a01      	cmp	r2, #1
 801cfd4:	dc01      	bgt.n	801cfda <_printf_float+0x3ca>
 801cfd6:	07db      	lsls	r3, r3, #31
 801cfd8:	d538      	bpl.n	801d04c <_printf_float+0x43c>
 801cfda:	2301      	movs	r3, #1
 801cfdc:	4642      	mov	r2, r8
 801cfde:	4631      	mov	r1, r6
 801cfe0:	4628      	mov	r0, r5
 801cfe2:	47b8      	blx	r7
 801cfe4:	3001      	adds	r0, #1
 801cfe6:	f43f ae74 	beq.w	801ccd2 <_printf_float+0xc2>
 801cfea:	ee18 3a10 	vmov	r3, s16
 801cfee:	4652      	mov	r2, sl
 801cff0:	4631      	mov	r1, r6
 801cff2:	4628      	mov	r0, r5
 801cff4:	47b8      	blx	r7
 801cff6:	3001      	adds	r0, #1
 801cff8:	f43f ae6b 	beq.w	801ccd2 <_printf_float+0xc2>
 801cffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801d000:	2200      	movs	r2, #0
 801d002:	2300      	movs	r3, #0
 801d004:	f7e3 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 801d008:	b9d8      	cbnz	r0, 801d042 <_printf_float+0x432>
 801d00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d00c:	f108 0201 	add.w	r2, r8, #1
 801d010:	3b01      	subs	r3, #1
 801d012:	4631      	mov	r1, r6
 801d014:	4628      	mov	r0, r5
 801d016:	47b8      	blx	r7
 801d018:	3001      	adds	r0, #1
 801d01a:	d10e      	bne.n	801d03a <_printf_float+0x42a>
 801d01c:	e659      	b.n	801ccd2 <_printf_float+0xc2>
 801d01e:	2301      	movs	r3, #1
 801d020:	4652      	mov	r2, sl
 801d022:	4631      	mov	r1, r6
 801d024:	4628      	mov	r0, r5
 801d026:	47b8      	blx	r7
 801d028:	3001      	adds	r0, #1
 801d02a:	f43f ae52 	beq.w	801ccd2 <_printf_float+0xc2>
 801d02e:	f108 0801 	add.w	r8, r8, #1
 801d032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d034:	3b01      	subs	r3, #1
 801d036:	4543      	cmp	r3, r8
 801d038:	dcf1      	bgt.n	801d01e <_printf_float+0x40e>
 801d03a:	464b      	mov	r3, r9
 801d03c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d040:	e6dc      	b.n	801cdfc <_printf_float+0x1ec>
 801d042:	f04f 0800 	mov.w	r8, #0
 801d046:	f104 0a1a 	add.w	sl, r4, #26
 801d04a:	e7f2      	b.n	801d032 <_printf_float+0x422>
 801d04c:	2301      	movs	r3, #1
 801d04e:	4642      	mov	r2, r8
 801d050:	e7df      	b.n	801d012 <_printf_float+0x402>
 801d052:	2301      	movs	r3, #1
 801d054:	464a      	mov	r2, r9
 801d056:	4631      	mov	r1, r6
 801d058:	4628      	mov	r0, r5
 801d05a:	47b8      	blx	r7
 801d05c:	3001      	adds	r0, #1
 801d05e:	f43f ae38 	beq.w	801ccd2 <_printf_float+0xc2>
 801d062:	f108 0801 	add.w	r8, r8, #1
 801d066:	68e3      	ldr	r3, [r4, #12]
 801d068:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d06a:	1a5b      	subs	r3, r3, r1
 801d06c:	4543      	cmp	r3, r8
 801d06e:	dcf0      	bgt.n	801d052 <_printf_float+0x442>
 801d070:	e6fa      	b.n	801ce68 <_printf_float+0x258>
 801d072:	f04f 0800 	mov.w	r8, #0
 801d076:	f104 0919 	add.w	r9, r4, #25
 801d07a:	e7f4      	b.n	801d066 <_printf_float+0x456>

0801d07c <_printf_common>:
 801d07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d080:	4616      	mov	r6, r2
 801d082:	4699      	mov	r9, r3
 801d084:	688a      	ldr	r2, [r1, #8]
 801d086:	690b      	ldr	r3, [r1, #16]
 801d088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d08c:	4293      	cmp	r3, r2
 801d08e:	bfb8      	it	lt
 801d090:	4613      	movlt	r3, r2
 801d092:	6033      	str	r3, [r6, #0]
 801d094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d098:	4607      	mov	r7, r0
 801d09a:	460c      	mov	r4, r1
 801d09c:	b10a      	cbz	r2, 801d0a2 <_printf_common+0x26>
 801d09e:	3301      	adds	r3, #1
 801d0a0:	6033      	str	r3, [r6, #0]
 801d0a2:	6823      	ldr	r3, [r4, #0]
 801d0a4:	0699      	lsls	r1, r3, #26
 801d0a6:	bf42      	ittt	mi
 801d0a8:	6833      	ldrmi	r3, [r6, #0]
 801d0aa:	3302      	addmi	r3, #2
 801d0ac:	6033      	strmi	r3, [r6, #0]
 801d0ae:	6825      	ldr	r5, [r4, #0]
 801d0b0:	f015 0506 	ands.w	r5, r5, #6
 801d0b4:	d106      	bne.n	801d0c4 <_printf_common+0x48>
 801d0b6:	f104 0a19 	add.w	sl, r4, #25
 801d0ba:	68e3      	ldr	r3, [r4, #12]
 801d0bc:	6832      	ldr	r2, [r6, #0]
 801d0be:	1a9b      	subs	r3, r3, r2
 801d0c0:	42ab      	cmp	r3, r5
 801d0c2:	dc26      	bgt.n	801d112 <_printf_common+0x96>
 801d0c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d0c8:	1e13      	subs	r3, r2, #0
 801d0ca:	6822      	ldr	r2, [r4, #0]
 801d0cc:	bf18      	it	ne
 801d0ce:	2301      	movne	r3, #1
 801d0d0:	0692      	lsls	r2, r2, #26
 801d0d2:	d42b      	bmi.n	801d12c <_printf_common+0xb0>
 801d0d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d0d8:	4649      	mov	r1, r9
 801d0da:	4638      	mov	r0, r7
 801d0dc:	47c0      	blx	r8
 801d0de:	3001      	adds	r0, #1
 801d0e0:	d01e      	beq.n	801d120 <_printf_common+0xa4>
 801d0e2:	6823      	ldr	r3, [r4, #0]
 801d0e4:	68e5      	ldr	r5, [r4, #12]
 801d0e6:	6832      	ldr	r2, [r6, #0]
 801d0e8:	f003 0306 	and.w	r3, r3, #6
 801d0ec:	2b04      	cmp	r3, #4
 801d0ee:	bf08      	it	eq
 801d0f0:	1aad      	subeq	r5, r5, r2
 801d0f2:	68a3      	ldr	r3, [r4, #8]
 801d0f4:	6922      	ldr	r2, [r4, #16]
 801d0f6:	bf0c      	ite	eq
 801d0f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0fc:	2500      	movne	r5, #0
 801d0fe:	4293      	cmp	r3, r2
 801d100:	bfc4      	itt	gt
 801d102:	1a9b      	subgt	r3, r3, r2
 801d104:	18ed      	addgt	r5, r5, r3
 801d106:	2600      	movs	r6, #0
 801d108:	341a      	adds	r4, #26
 801d10a:	42b5      	cmp	r5, r6
 801d10c:	d11a      	bne.n	801d144 <_printf_common+0xc8>
 801d10e:	2000      	movs	r0, #0
 801d110:	e008      	b.n	801d124 <_printf_common+0xa8>
 801d112:	2301      	movs	r3, #1
 801d114:	4652      	mov	r2, sl
 801d116:	4649      	mov	r1, r9
 801d118:	4638      	mov	r0, r7
 801d11a:	47c0      	blx	r8
 801d11c:	3001      	adds	r0, #1
 801d11e:	d103      	bne.n	801d128 <_printf_common+0xac>
 801d120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d128:	3501      	adds	r5, #1
 801d12a:	e7c6      	b.n	801d0ba <_printf_common+0x3e>
 801d12c:	18e1      	adds	r1, r4, r3
 801d12e:	1c5a      	adds	r2, r3, #1
 801d130:	2030      	movs	r0, #48	; 0x30
 801d132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d136:	4422      	add	r2, r4
 801d138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d13c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d140:	3302      	adds	r3, #2
 801d142:	e7c7      	b.n	801d0d4 <_printf_common+0x58>
 801d144:	2301      	movs	r3, #1
 801d146:	4622      	mov	r2, r4
 801d148:	4649      	mov	r1, r9
 801d14a:	4638      	mov	r0, r7
 801d14c:	47c0      	blx	r8
 801d14e:	3001      	adds	r0, #1
 801d150:	d0e6      	beq.n	801d120 <_printf_common+0xa4>
 801d152:	3601      	adds	r6, #1
 801d154:	e7d9      	b.n	801d10a <_printf_common+0x8e>
	...

0801d158 <_printf_i>:
 801d158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d15c:	460c      	mov	r4, r1
 801d15e:	4691      	mov	r9, r2
 801d160:	7e27      	ldrb	r7, [r4, #24]
 801d162:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d164:	2f78      	cmp	r7, #120	; 0x78
 801d166:	4680      	mov	r8, r0
 801d168:	469a      	mov	sl, r3
 801d16a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d16e:	d807      	bhi.n	801d180 <_printf_i+0x28>
 801d170:	2f62      	cmp	r7, #98	; 0x62
 801d172:	d80a      	bhi.n	801d18a <_printf_i+0x32>
 801d174:	2f00      	cmp	r7, #0
 801d176:	f000 80d8 	beq.w	801d32a <_printf_i+0x1d2>
 801d17a:	2f58      	cmp	r7, #88	; 0x58
 801d17c:	f000 80a3 	beq.w	801d2c6 <_printf_i+0x16e>
 801d180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d188:	e03a      	b.n	801d200 <_printf_i+0xa8>
 801d18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d18e:	2b15      	cmp	r3, #21
 801d190:	d8f6      	bhi.n	801d180 <_printf_i+0x28>
 801d192:	a001      	add	r0, pc, #4	; (adr r0, 801d198 <_printf_i+0x40>)
 801d194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d198:	0801d1f1 	.word	0x0801d1f1
 801d19c:	0801d205 	.word	0x0801d205
 801d1a0:	0801d181 	.word	0x0801d181
 801d1a4:	0801d181 	.word	0x0801d181
 801d1a8:	0801d181 	.word	0x0801d181
 801d1ac:	0801d181 	.word	0x0801d181
 801d1b0:	0801d205 	.word	0x0801d205
 801d1b4:	0801d181 	.word	0x0801d181
 801d1b8:	0801d181 	.word	0x0801d181
 801d1bc:	0801d181 	.word	0x0801d181
 801d1c0:	0801d181 	.word	0x0801d181
 801d1c4:	0801d311 	.word	0x0801d311
 801d1c8:	0801d235 	.word	0x0801d235
 801d1cc:	0801d2f3 	.word	0x0801d2f3
 801d1d0:	0801d181 	.word	0x0801d181
 801d1d4:	0801d181 	.word	0x0801d181
 801d1d8:	0801d333 	.word	0x0801d333
 801d1dc:	0801d181 	.word	0x0801d181
 801d1e0:	0801d235 	.word	0x0801d235
 801d1e4:	0801d181 	.word	0x0801d181
 801d1e8:	0801d181 	.word	0x0801d181
 801d1ec:	0801d2fb 	.word	0x0801d2fb
 801d1f0:	680b      	ldr	r3, [r1, #0]
 801d1f2:	1d1a      	adds	r2, r3, #4
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	600a      	str	r2, [r1, #0]
 801d1f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d200:	2301      	movs	r3, #1
 801d202:	e0a3      	b.n	801d34c <_printf_i+0x1f4>
 801d204:	6825      	ldr	r5, [r4, #0]
 801d206:	6808      	ldr	r0, [r1, #0]
 801d208:	062e      	lsls	r6, r5, #24
 801d20a:	f100 0304 	add.w	r3, r0, #4
 801d20e:	d50a      	bpl.n	801d226 <_printf_i+0xce>
 801d210:	6805      	ldr	r5, [r0, #0]
 801d212:	600b      	str	r3, [r1, #0]
 801d214:	2d00      	cmp	r5, #0
 801d216:	da03      	bge.n	801d220 <_printf_i+0xc8>
 801d218:	232d      	movs	r3, #45	; 0x2d
 801d21a:	426d      	negs	r5, r5
 801d21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d220:	485e      	ldr	r0, [pc, #376]	; (801d39c <_printf_i+0x244>)
 801d222:	230a      	movs	r3, #10
 801d224:	e019      	b.n	801d25a <_printf_i+0x102>
 801d226:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d22a:	6805      	ldr	r5, [r0, #0]
 801d22c:	600b      	str	r3, [r1, #0]
 801d22e:	bf18      	it	ne
 801d230:	b22d      	sxthne	r5, r5
 801d232:	e7ef      	b.n	801d214 <_printf_i+0xbc>
 801d234:	680b      	ldr	r3, [r1, #0]
 801d236:	6825      	ldr	r5, [r4, #0]
 801d238:	1d18      	adds	r0, r3, #4
 801d23a:	6008      	str	r0, [r1, #0]
 801d23c:	0628      	lsls	r0, r5, #24
 801d23e:	d501      	bpl.n	801d244 <_printf_i+0xec>
 801d240:	681d      	ldr	r5, [r3, #0]
 801d242:	e002      	b.n	801d24a <_printf_i+0xf2>
 801d244:	0669      	lsls	r1, r5, #25
 801d246:	d5fb      	bpl.n	801d240 <_printf_i+0xe8>
 801d248:	881d      	ldrh	r5, [r3, #0]
 801d24a:	4854      	ldr	r0, [pc, #336]	; (801d39c <_printf_i+0x244>)
 801d24c:	2f6f      	cmp	r7, #111	; 0x6f
 801d24e:	bf0c      	ite	eq
 801d250:	2308      	moveq	r3, #8
 801d252:	230a      	movne	r3, #10
 801d254:	2100      	movs	r1, #0
 801d256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d25a:	6866      	ldr	r6, [r4, #4]
 801d25c:	60a6      	str	r6, [r4, #8]
 801d25e:	2e00      	cmp	r6, #0
 801d260:	bfa2      	ittt	ge
 801d262:	6821      	ldrge	r1, [r4, #0]
 801d264:	f021 0104 	bicge.w	r1, r1, #4
 801d268:	6021      	strge	r1, [r4, #0]
 801d26a:	b90d      	cbnz	r5, 801d270 <_printf_i+0x118>
 801d26c:	2e00      	cmp	r6, #0
 801d26e:	d04d      	beq.n	801d30c <_printf_i+0x1b4>
 801d270:	4616      	mov	r6, r2
 801d272:	fbb5 f1f3 	udiv	r1, r5, r3
 801d276:	fb03 5711 	mls	r7, r3, r1, r5
 801d27a:	5dc7      	ldrb	r7, [r0, r7]
 801d27c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d280:	462f      	mov	r7, r5
 801d282:	42bb      	cmp	r3, r7
 801d284:	460d      	mov	r5, r1
 801d286:	d9f4      	bls.n	801d272 <_printf_i+0x11a>
 801d288:	2b08      	cmp	r3, #8
 801d28a:	d10b      	bne.n	801d2a4 <_printf_i+0x14c>
 801d28c:	6823      	ldr	r3, [r4, #0]
 801d28e:	07df      	lsls	r7, r3, #31
 801d290:	d508      	bpl.n	801d2a4 <_printf_i+0x14c>
 801d292:	6923      	ldr	r3, [r4, #16]
 801d294:	6861      	ldr	r1, [r4, #4]
 801d296:	4299      	cmp	r1, r3
 801d298:	bfde      	ittt	le
 801d29a:	2330      	movle	r3, #48	; 0x30
 801d29c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d2a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801d2a4:	1b92      	subs	r2, r2, r6
 801d2a6:	6122      	str	r2, [r4, #16]
 801d2a8:	f8cd a000 	str.w	sl, [sp]
 801d2ac:	464b      	mov	r3, r9
 801d2ae:	aa03      	add	r2, sp, #12
 801d2b0:	4621      	mov	r1, r4
 801d2b2:	4640      	mov	r0, r8
 801d2b4:	f7ff fee2 	bl	801d07c <_printf_common>
 801d2b8:	3001      	adds	r0, #1
 801d2ba:	d14c      	bne.n	801d356 <_printf_i+0x1fe>
 801d2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2c0:	b004      	add	sp, #16
 801d2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2c6:	4835      	ldr	r0, [pc, #212]	; (801d39c <_printf_i+0x244>)
 801d2c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d2cc:	6823      	ldr	r3, [r4, #0]
 801d2ce:	680e      	ldr	r6, [r1, #0]
 801d2d0:	061f      	lsls	r7, r3, #24
 801d2d2:	f856 5b04 	ldr.w	r5, [r6], #4
 801d2d6:	600e      	str	r6, [r1, #0]
 801d2d8:	d514      	bpl.n	801d304 <_printf_i+0x1ac>
 801d2da:	07d9      	lsls	r1, r3, #31
 801d2dc:	bf44      	itt	mi
 801d2de:	f043 0320 	orrmi.w	r3, r3, #32
 801d2e2:	6023      	strmi	r3, [r4, #0]
 801d2e4:	b91d      	cbnz	r5, 801d2ee <_printf_i+0x196>
 801d2e6:	6823      	ldr	r3, [r4, #0]
 801d2e8:	f023 0320 	bic.w	r3, r3, #32
 801d2ec:	6023      	str	r3, [r4, #0]
 801d2ee:	2310      	movs	r3, #16
 801d2f0:	e7b0      	b.n	801d254 <_printf_i+0xfc>
 801d2f2:	6823      	ldr	r3, [r4, #0]
 801d2f4:	f043 0320 	orr.w	r3, r3, #32
 801d2f8:	6023      	str	r3, [r4, #0]
 801d2fa:	2378      	movs	r3, #120	; 0x78
 801d2fc:	4828      	ldr	r0, [pc, #160]	; (801d3a0 <_printf_i+0x248>)
 801d2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d302:	e7e3      	b.n	801d2cc <_printf_i+0x174>
 801d304:	065e      	lsls	r6, r3, #25
 801d306:	bf48      	it	mi
 801d308:	b2ad      	uxthmi	r5, r5
 801d30a:	e7e6      	b.n	801d2da <_printf_i+0x182>
 801d30c:	4616      	mov	r6, r2
 801d30e:	e7bb      	b.n	801d288 <_printf_i+0x130>
 801d310:	680b      	ldr	r3, [r1, #0]
 801d312:	6826      	ldr	r6, [r4, #0]
 801d314:	6960      	ldr	r0, [r4, #20]
 801d316:	1d1d      	adds	r5, r3, #4
 801d318:	600d      	str	r5, [r1, #0]
 801d31a:	0635      	lsls	r5, r6, #24
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	d501      	bpl.n	801d324 <_printf_i+0x1cc>
 801d320:	6018      	str	r0, [r3, #0]
 801d322:	e002      	b.n	801d32a <_printf_i+0x1d2>
 801d324:	0671      	lsls	r1, r6, #25
 801d326:	d5fb      	bpl.n	801d320 <_printf_i+0x1c8>
 801d328:	8018      	strh	r0, [r3, #0]
 801d32a:	2300      	movs	r3, #0
 801d32c:	6123      	str	r3, [r4, #16]
 801d32e:	4616      	mov	r6, r2
 801d330:	e7ba      	b.n	801d2a8 <_printf_i+0x150>
 801d332:	680b      	ldr	r3, [r1, #0]
 801d334:	1d1a      	adds	r2, r3, #4
 801d336:	600a      	str	r2, [r1, #0]
 801d338:	681e      	ldr	r6, [r3, #0]
 801d33a:	6862      	ldr	r2, [r4, #4]
 801d33c:	2100      	movs	r1, #0
 801d33e:	4630      	mov	r0, r6
 801d340:	f7e2 ff4e 	bl	80001e0 <memchr>
 801d344:	b108      	cbz	r0, 801d34a <_printf_i+0x1f2>
 801d346:	1b80      	subs	r0, r0, r6
 801d348:	6060      	str	r0, [r4, #4]
 801d34a:	6863      	ldr	r3, [r4, #4]
 801d34c:	6123      	str	r3, [r4, #16]
 801d34e:	2300      	movs	r3, #0
 801d350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d354:	e7a8      	b.n	801d2a8 <_printf_i+0x150>
 801d356:	6923      	ldr	r3, [r4, #16]
 801d358:	4632      	mov	r2, r6
 801d35a:	4649      	mov	r1, r9
 801d35c:	4640      	mov	r0, r8
 801d35e:	47d0      	blx	sl
 801d360:	3001      	adds	r0, #1
 801d362:	d0ab      	beq.n	801d2bc <_printf_i+0x164>
 801d364:	6823      	ldr	r3, [r4, #0]
 801d366:	079b      	lsls	r3, r3, #30
 801d368:	d413      	bmi.n	801d392 <_printf_i+0x23a>
 801d36a:	68e0      	ldr	r0, [r4, #12]
 801d36c:	9b03      	ldr	r3, [sp, #12]
 801d36e:	4298      	cmp	r0, r3
 801d370:	bfb8      	it	lt
 801d372:	4618      	movlt	r0, r3
 801d374:	e7a4      	b.n	801d2c0 <_printf_i+0x168>
 801d376:	2301      	movs	r3, #1
 801d378:	4632      	mov	r2, r6
 801d37a:	4649      	mov	r1, r9
 801d37c:	4640      	mov	r0, r8
 801d37e:	47d0      	blx	sl
 801d380:	3001      	adds	r0, #1
 801d382:	d09b      	beq.n	801d2bc <_printf_i+0x164>
 801d384:	3501      	adds	r5, #1
 801d386:	68e3      	ldr	r3, [r4, #12]
 801d388:	9903      	ldr	r1, [sp, #12]
 801d38a:	1a5b      	subs	r3, r3, r1
 801d38c:	42ab      	cmp	r3, r5
 801d38e:	dcf2      	bgt.n	801d376 <_printf_i+0x21e>
 801d390:	e7eb      	b.n	801d36a <_printf_i+0x212>
 801d392:	2500      	movs	r5, #0
 801d394:	f104 0619 	add.w	r6, r4, #25
 801d398:	e7f5      	b.n	801d386 <_printf_i+0x22e>
 801d39a:	bf00      	nop
 801d39c:	0802295a 	.word	0x0802295a
 801d3a0:	0802296b 	.word	0x0802296b

0801d3a4 <_scanf_float>:
 801d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a8:	b087      	sub	sp, #28
 801d3aa:	4617      	mov	r7, r2
 801d3ac:	9303      	str	r3, [sp, #12]
 801d3ae:	688b      	ldr	r3, [r1, #8]
 801d3b0:	1e5a      	subs	r2, r3, #1
 801d3b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d3b6:	bf83      	ittte	hi
 801d3b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d3bc:	195b      	addhi	r3, r3, r5
 801d3be:	9302      	strhi	r3, [sp, #8]
 801d3c0:	2300      	movls	r3, #0
 801d3c2:	bf86      	itte	hi
 801d3c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d3c8:	608b      	strhi	r3, [r1, #8]
 801d3ca:	9302      	strls	r3, [sp, #8]
 801d3cc:	680b      	ldr	r3, [r1, #0]
 801d3ce:	468b      	mov	fp, r1
 801d3d0:	2500      	movs	r5, #0
 801d3d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d3d6:	f84b 3b1c 	str.w	r3, [fp], #28
 801d3da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d3de:	4680      	mov	r8, r0
 801d3e0:	460c      	mov	r4, r1
 801d3e2:	465e      	mov	r6, fp
 801d3e4:	46aa      	mov	sl, r5
 801d3e6:	46a9      	mov	r9, r5
 801d3e8:	9501      	str	r5, [sp, #4]
 801d3ea:	68a2      	ldr	r2, [r4, #8]
 801d3ec:	b152      	cbz	r2, 801d404 <_scanf_float+0x60>
 801d3ee:	683b      	ldr	r3, [r7, #0]
 801d3f0:	781b      	ldrb	r3, [r3, #0]
 801d3f2:	2b4e      	cmp	r3, #78	; 0x4e
 801d3f4:	d864      	bhi.n	801d4c0 <_scanf_float+0x11c>
 801d3f6:	2b40      	cmp	r3, #64	; 0x40
 801d3f8:	d83c      	bhi.n	801d474 <_scanf_float+0xd0>
 801d3fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d3fe:	b2c8      	uxtb	r0, r1
 801d400:	280e      	cmp	r0, #14
 801d402:	d93a      	bls.n	801d47a <_scanf_float+0xd6>
 801d404:	f1b9 0f00 	cmp.w	r9, #0
 801d408:	d003      	beq.n	801d412 <_scanf_float+0x6e>
 801d40a:	6823      	ldr	r3, [r4, #0]
 801d40c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d410:	6023      	str	r3, [r4, #0]
 801d412:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801d416:	f1ba 0f01 	cmp.w	sl, #1
 801d41a:	f200 8113 	bhi.w	801d644 <_scanf_float+0x2a0>
 801d41e:	455e      	cmp	r6, fp
 801d420:	f200 8105 	bhi.w	801d62e <_scanf_float+0x28a>
 801d424:	2501      	movs	r5, #1
 801d426:	4628      	mov	r0, r5
 801d428:	b007      	add	sp, #28
 801d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d42e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d432:	2a0d      	cmp	r2, #13
 801d434:	d8e6      	bhi.n	801d404 <_scanf_float+0x60>
 801d436:	a101      	add	r1, pc, #4	; (adr r1, 801d43c <_scanf_float+0x98>)
 801d438:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d43c:	0801d57b 	.word	0x0801d57b
 801d440:	0801d405 	.word	0x0801d405
 801d444:	0801d405 	.word	0x0801d405
 801d448:	0801d405 	.word	0x0801d405
 801d44c:	0801d5db 	.word	0x0801d5db
 801d450:	0801d5b3 	.word	0x0801d5b3
 801d454:	0801d405 	.word	0x0801d405
 801d458:	0801d405 	.word	0x0801d405
 801d45c:	0801d589 	.word	0x0801d589
 801d460:	0801d405 	.word	0x0801d405
 801d464:	0801d405 	.word	0x0801d405
 801d468:	0801d405 	.word	0x0801d405
 801d46c:	0801d405 	.word	0x0801d405
 801d470:	0801d541 	.word	0x0801d541
 801d474:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d478:	e7db      	b.n	801d432 <_scanf_float+0x8e>
 801d47a:	290e      	cmp	r1, #14
 801d47c:	d8c2      	bhi.n	801d404 <_scanf_float+0x60>
 801d47e:	a001      	add	r0, pc, #4	; (adr r0, 801d484 <_scanf_float+0xe0>)
 801d480:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d484:	0801d533 	.word	0x0801d533
 801d488:	0801d405 	.word	0x0801d405
 801d48c:	0801d533 	.word	0x0801d533
 801d490:	0801d5c7 	.word	0x0801d5c7
 801d494:	0801d405 	.word	0x0801d405
 801d498:	0801d4e1 	.word	0x0801d4e1
 801d49c:	0801d51d 	.word	0x0801d51d
 801d4a0:	0801d51d 	.word	0x0801d51d
 801d4a4:	0801d51d 	.word	0x0801d51d
 801d4a8:	0801d51d 	.word	0x0801d51d
 801d4ac:	0801d51d 	.word	0x0801d51d
 801d4b0:	0801d51d 	.word	0x0801d51d
 801d4b4:	0801d51d 	.word	0x0801d51d
 801d4b8:	0801d51d 	.word	0x0801d51d
 801d4bc:	0801d51d 	.word	0x0801d51d
 801d4c0:	2b6e      	cmp	r3, #110	; 0x6e
 801d4c2:	d809      	bhi.n	801d4d8 <_scanf_float+0x134>
 801d4c4:	2b60      	cmp	r3, #96	; 0x60
 801d4c6:	d8b2      	bhi.n	801d42e <_scanf_float+0x8a>
 801d4c8:	2b54      	cmp	r3, #84	; 0x54
 801d4ca:	d077      	beq.n	801d5bc <_scanf_float+0x218>
 801d4cc:	2b59      	cmp	r3, #89	; 0x59
 801d4ce:	d199      	bne.n	801d404 <_scanf_float+0x60>
 801d4d0:	2d07      	cmp	r5, #7
 801d4d2:	d197      	bne.n	801d404 <_scanf_float+0x60>
 801d4d4:	2508      	movs	r5, #8
 801d4d6:	e029      	b.n	801d52c <_scanf_float+0x188>
 801d4d8:	2b74      	cmp	r3, #116	; 0x74
 801d4da:	d06f      	beq.n	801d5bc <_scanf_float+0x218>
 801d4dc:	2b79      	cmp	r3, #121	; 0x79
 801d4de:	e7f6      	b.n	801d4ce <_scanf_float+0x12a>
 801d4e0:	6821      	ldr	r1, [r4, #0]
 801d4e2:	05c8      	lsls	r0, r1, #23
 801d4e4:	d51a      	bpl.n	801d51c <_scanf_float+0x178>
 801d4e6:	9b02      	ldr	r3, [sp, #8]
 801d4e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801d4ec:	6021      	str	r1, [r4, #0]
 801d4ee:	f109 0901 	add.w	r9, r9, #1
 801d4f2:	b11b      	cbz	r3, 801d4fc <_scanf_float+0x158>
 801d4f4:	3b01      	subs	r3, #1
 801d4f6:	3201      	adds	r2, #1
 801d4f8:	9302      	str	r3, [sp, #8]
 801d4fa:	60a2      	str	r2, [r4, #8]
 801d4fc:	68a3      	ldr	r3, [r4, #8]
 801d4fe:	3b01      	subs	r3, #1
 801d500:	60a3      	str	r3, [r4, #8]
 801d502:	6923      	ldr	r3, [r4, #16]
 801d504:	3301      	adds	r3, #1
 801d506:	6123      	str	r3, [r4, #16]
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	3b01      	subs	r3, #1
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	607b      	str	r3, [r7, #4]
 801d510:	f340 8084 	ble.w	801d61c <_scanf_float+0x278>
 801d514:	683b      	ldr	r3, [r7, #0]
 801d516:	3301      	adds	r3, #1
 801d518:	603b      	str	r3, [r7, #0]
 801d51a:	e766      	b.n	801d3ea <_scanf_float+0x46>
 801d51c:	eb1a 0f05 	cmn.w	sl, r5
 801d520:	f47f af70 	bne.w	801d404 <_scanf_float+0x60>
 801d524:	6822      	ldr	r2, [r4, #0]
 801d526:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801d52a:	6022      	str	r2, [r4, #0]
 801d52c:	f806 3b01 	strb.w	r3, [r6], #1
 801d530:	e7e4      	b.n	801d4fc <_scanf_float+0x158>
 801d532:	6822      	ldr	r2, [r4, #0]
 801d534:	0610      	lsls	r0, r2, #24
 801d536:	f57f af65 	bpl.w	801d404 <_scanf_float+0x60>
 801d53a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d53e:	e7f4      	b.n	801d52a <_scanf_float+0x186>
 801d540:	f1ba 0f00 	cmp.w	sl, #0
 801d544:	d10e      	bne.n	801d564 <_scanf_float+0x1c0>
 801d546:	f1b9 0f00 	cmp.w	r9, #0
 801d54a:	d10e      	bne.n	801d56a <_scanf_float+0x1c6>
 801d54c:	6822      	ldr	r2, [r4, #0]
 801d54e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d552:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d556:	d108      	bne.n	801d56a <_scanf_float+0x1c6>
 801d558:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d55c:	6022      	str	r2, [r4, #0]
 801d55e:	f04f 0a01 	mov.w	sl, #1
 801d562:	e7e3      	b.n	801d52c <_scanf_float+0x188>
 801d564:	f1ba 0f02 	cmp.w	sl, #2
 801d568:	d055      	beq.n	801d616 <_scanf_float+0x272>
 801d56a:	2d01      	cmp	r5, #1
 801d56c:	d002      	beq.n	801d574 <_scanf_float+0x1d0>
 801d56e:	2d04      	cmp	r5, #4
 801d570:	f47f af48 	bne.w	801d404 <_scanf_float+0x60>
 801d574:	3501      	adds	r5, #1
 801d576:	b2ed      	uxtb	r5, r5
 801d578:	e7d8      	b.n	801d52c <_scanf_float+0x188>
 801d57a:	f1ba 0f01 	cmp.w	sl, #1
 801d57e:	f47f af41 	bne.w	801d404 <_scanf_float+0x60>
 801d582:	f04f 0a02 	mov.w	sl, #2
 801d586:	e7d1      	b.n	801d52c <_scanf_float+0x188>
 801d588:	b97d      	cbnz	r5, 801d5aa <_scanf_float+0x206>
 801d58a:	f1b9 0f00 	cmp.w	r9, #0
 801d58e:	f47f af3c 	bne.w	801d40a <_scanf_float+0x66>
 801d592:	6822      	ldr	r2, [r4, #0]
 801d594:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d598:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d59c:	f47f af39 	bne.w	801d412 <_scanf_float+0x6e>
 801d5a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d5a4:	6022      	str	r2, [r4, #0]
 801d5a6:	2501      	movs	r5, #1
 801d5a8:	e7c0      	b.n	801d52c <_scanf_float+0x188>
 801d5aa:	2d03      	cmp	r5, #3
 801d5ac:	d0e2      	beq.n	801d574 <_scanf_float+0x1d0>
 801d5ae:	2d05      	cmp	r5, #5
 801d5b0:	e7de      	b.n	801d570 <_scanf_float+0x1cc>
 801d5b2:	2d02      	cmp	r5, #2
 801d5b4:	f47f af26 	bne.w	801d404 <_scanf_float+0x60>
 801d5b8:	2503      	movs	r5, #3
 801d5ba:	e7b7      	b.n	801d52c <_scanf_float+0x188>
 801d5bc:	2d06      	cmp	r5, #6
 801d5be:	f47f af21 	bne.w	801d404 <_scanf_float+0x60>
 801d5c2:	2507      	movs	r5, #7
 801d5c4:	e7b2      	b.n	801d52c <_scanf_float+0x188>
 801d5c6:	6822      	ldr	r2, [r4, #0]
 801d5c8:	0591      	lsls	r1, r2, #22
 801d5ca:	f57f af1b 	bpl.w	801d404 <_scanf_float+0x60>
 801d5ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801d5d2:	6022      	str	r2, [r4, #0]
 801d5d4:	f8cd 9004 	str.w	r9, [sp, #4]
 801d5d8:	e7a8      	b.n	801d52c <_scanf_float+0x188>
 801d5da:	6822      	ldr	r2, [r4, #0]
 801d5dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801d5e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d5e4:	d006      	beq.n	801d5f4 <_scanf_float+0x250>
 801d5e6:	0550      	lsls	r0, r2, #21
 801d5e8:	f57f af0c 	bpl.w	801d404 <_scanf_float+0x60>
 801d5ec:	f1b9 0f00 	cmp.w	r9, #0
 801d5f0:	f43f af0f 	beq.w	801d412 <_scanf_float+0x6e>
 801d5f4:	0591      	lsls	r1, r2, #22
 801d5f6:	bf58      	it	pl
 801d5f8:	9901      	ldrpl	r1, [sp, #4]
 801d5fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d5fe:	bf58      	it	pl
 801d600:	eba9 0101 	subpl.w	r1, r9, r1
 801d604:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801d608:	bf58      	it	pl
 801d60a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d60e:	6022      	str	r2, [r4, #0]
 801d610:	f04f 0900 	mov.w	r9, #0
 801d614:	e78a      	b.n	801d52c <_scanf_float+0x188>
 801d616:	f04f 0a03 	mov.w	sl, #3
 801d61a:	e787      	b.n	801d52c <_scanf_float+0x188>
 801d61c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d620:	4639      	mov	r1, r7
 801d622:	4640      	mov	r0, r8
 801d624:	4798      	blx	r3
 801d626:	2800      	cmp	r0, #0
 801d628:	f43f aedf 	beq.w	801d3ea <_scanf_float+0x46>
 801d62c:	e6ea      	b.n	801d404 <_scanf_float+0x60>
 801d62e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d636:	463a      	mov	r2, r7
 801d638:	4640      	mov	r0, r8
 801d63a:	4798      	blx	r3
 801d63c:	6923      	ldr	r3, [r4, #16]
 801d63e:	3b01      	subs	r3, #1
 801d640:	6123      	str	r3, [r4, #16]
 801d642:	e6ec      	b.n	801d41e <_scanf_float+0x7a>
 801d644:	1e6b      	subs	r3, r5, #1
 801d646:	2b06      	cmp	r3, #6
 801d648:	d825      	bhi.n	801d696 <_scanf_float+0x2f2>
 801d64a:	2d02      	cmp	r5, #2
 801d64c:	d836      	bhi.n	801d6bc <_scanf_float+0x318>
 801d64e:	455e      	cmp	r6, fp
 801d650:	f67f aee8 	bls.w	801d424 <_scanf_float+0x80>
 801d654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d658:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d65c:	463a      	mov	r2, r7
 801d65e:	4640      	mov	r0, r8
 801d660:	4798      	blx	r3
 801d662:	6923      	ldr	r3, [r4, #16]
 801d664:	3b01      	subs	r3, #1
 801d666:	6123      	str	r3, [r4, #16]
 801d668:	e7f1      	b.n	801d64e <_scanf_float+0x2aa>
 801d66a:	9802      	ldr	r0, [sp, #8]
 801d66c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d670:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801d674:	9002      	str	r0, [sp, #8]
 801d676:	463a      	mov	r2, r7
 801d678:	4640      	mov	r0, r8
 801d67a:	4798      	blx	r3
 801d67c:	6923      	ldr	r3, [r4, #16]
 801d67e:	3b01      	subs	r3, #1
 801d680:	6123      	str	r3, [r4, #16]
 801d682:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801d686:	fa5f fa8a 	uxtb.w	sl, sl
 801d68a:	f1ba 0f02 	cmp.w	sl, #2
 801d68e:	d1ec      	bne.n	801d66a <_scanf_float+0x2c6>
 801d690:	3d03      	subs	r5, #3
 801d692:	b2ed      	uxtb	r5, r5
 801d694:	1b76      	subs	r6, r6, r5
 801d696:	6823      	ldr	r3, [r4, #0]
 801d698:	05da      	lsls	r2, r3, #23
 801d69a:	d52f      	bpl.n	801d6fc <_scanf_float+0x358>
 801d69c:	055b      	lsls	r3, r3, #21
 801d69e:	d510      	bpl.n	801d6c2 <_scanf_float+0x31e>
 801d6a0:	455e      	cmp	r6, fp
 801d6a2:	f67f aebf 	bls.w	801d424 <_scanf_float+0x80>
 801d6a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d6ae:	463a      	mov	r2, r7
 801d6b0:	4640      	mov	r0, r8
 801d6b2:	4798      	blx	r3
 801d6b4:	6923      	ldr	r3, [r4, #16]
 801d6b6:	3b01      	subs	r3, #1
 801d6b8:	6123      	str	r3, [r4, #16]
 801d6ba:	e7f1      	b.n	801d6a0 <_scanf_float+0x2fc>
 801d6bc:	46aa      	mov	sl, r5
 801d6be:	9602      	str	r6, [sp, #8]
 801d6c0:	e7df      	b.n	801d682 <_scanf_float+0x2de>
 801d6c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d6c6:	6923      	ldr	r3, [r4, #16]
 801d6c8:	2965      	cmp	r1, #101	; 0x65
 801d6ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 801d6ce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801d6d2:	6123      	str	r3, [r4, #16]
 801d6d4:	d00c      	beq.n	801d6f0 <_scanf_float+0x34c>
 801d6d6:	2945      	cmp	r1, #69	; 0x45
 801d6d8:	d00a      	beq.n	801d6f0 <_scanf_float+0x34c>
 801d6da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6de:	463a      	mov	r2, r7
 801d6e0:	4640      	mov	r0, r8
 801d6e2:	4798      	blx	r3
 801d6e4:	6923      	ldr	r3, [r4, #16]
 801d6e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d6ea:	3b01      	subs	r3, #1
 801d6ec:	1eb5      	subs	r5, r6, #2
 801d6ee:	6123      	str	r3, [r4, #16]
 801d6f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6f4:	463a      	mov	r2, r7
 801d6f6:	4640      	mov	r0, r8
 801d6f8:	4798      	blx	r3
 801d6fa:	462e      	mov	r6, r5
 801d6fc:	6825      	ldr	r5, [r4, #0]
 801d6fe:	f015 0510 	ands.w	r5, r5, #16
 801d702:	d158      	bne.n	801d7b6 <_scanf_float+0x412>
 801d704:	7035      	strb	r5, [r6, #0]
 801d706:	6823      	ldr	r3, [r4, #0]
 801d708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801d70c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d710:	d11c      	bne.n	801d74c <_scanf_float+0x3a8>
 801d712:	9b01      	ldr	r3, [sp, #4]
 801d714:	454b      	cmp	r3, r9
 801d716:	eba3 0209 	sub.w	r2, r3, r9
 801d71a:	d124      	bne.n	801d766 <_scanf_float+0x3c2>
 801d71c:	2200      	movs	r2, #0
 801d71e:	4659      	mov	r1, fp
 801d720:	4640      	mov	r0, r8
 801d722:	f000 ff8f 	bl	801e644 <_strtod_r>
 801d726:	9b03      	ldr	r3, [sp, #12]
 801d728:	6821      	ldr	r1, [r4, #0]
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	f011 0f02 	tst.w	r1, #2
 801d730:	ec57 6b10 	vmov	r6, r7, d0
 801d734:	f103 0204 	add.w	r2, r3, #4
 801d738:	d020      	beq.n	801d77c <_scanf_float+0x3d8>
 801d73a:	9903      	ldr	r1, [sp, #12]
 801d73c:	600a      	str	r2, [r1, #0]
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	e9c3 6700 	strd	r6, r7, [r3]
 801d744:	68e3      	ldr	r3, [r4, #12]
 801d746:	3301      	adds	r3, #1
 801d748:	60e3      	str	r3, [r4, #12]
 801d74a:	e66c      	b.n	801d426 <_scanf_float+0x82>
 801d74c:	9b04      	ldr	r3, [sp, #16]
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d0e4      	beq.n	801d71c <_scanf_float+0x378>
 801d752:	9905      	ldr	r1, [sp, #20]
 801d754:	230a      	movs	r3, #10
 801d756:	462a      	mov	r2, r5
 801d758:	3101      	adds	r1, #1
 801d75a:	4640      	mov	r0, r8
 801d75c:	f000 fffc 	bl	801e758 <_strtol_r>
 801d760:	9b04      	ldr	r3, [sp, #16]
 801d762:	9e05      	ldr	r6, [sp, #20]
 801d764:	1ac2      	subs	r2, r0, r3
 801d766:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801d76a:	429e      	cmp	r6, r3
 801d76c:	bf28      	it	cs
 801d76e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801d772:	4912      	ldr	r1, [pc, #72]	; (801d7bc <_scanf_float+0x418>)
 801d774:	4630      	mov	r0, r6
 801d776:	f000 f8db 	bl	801d930 <siprintf>
 801d77a:	e7cf      	b.n	801d71c <_scanf_float+0x378>
 801d77c:	f011 0f04 	tst.w	r1, #4
 801d780:	9903      	ldr	r1, [sp, #12]
 801d782:	600a      	str	r2, [r1, #0]
 801d784:	d1db      	bne.n	801d73e <_scanf_float+0x39a>
 801d786:	f8d3 8000 	ldr.w	r8, [r3]
 801d78a:	ee10 2a10 	vmov	r2, s0
 801d78e:	ee10 0a10 	vmov	r0, s0
 801d792:	463b      	mov	r3, r7
 801d794:	4639      	mov	r1, r7
 801d796:	f7e3 f9c9 	bl	8000b2c <__aeabi_dcmpun>
 801d79a:	b128      	cbz	r0, 801d7a8 <_scanf_float+0x404>
 801d79c:	4808      	ldr	r0, [pc, #32]	; (801d7c0 <_scanf_float+0x41c>)
 801d79e:	f000 f84f 	bl	801d840 <nanf>
 801d7a2:	ed88 0a00 	vstr	s0, [r8]
 801d7a6:	e7cd      	b.n	801d744 <_scanf_float+0x3a0>
 801d7a8:	4630      	mov	r0, r6
 801d7aa:	4639      	mov	r1, r7
 801d7ac:	f7e3 fa1c 	bl	8000be8 <__aeabi_d2f>
 801d7b0:	f8c8 0000 	str.w	r0, [r8]
 801d7b4:	e7c6      	b.n	801d744 <_scanf_float+0x3a0>
 801d7b6:	2500      	movs	r5, #0
 801d7b8:	e635      	b.n	801d426 <_scanf_float+0x82>
 801d7ba:	bf00      	nop
 801d7bc:	0802297c 	.word	0x0802297c
 801d7c0:	08022d98 	.word	0x08022d98

0801d7c4 <realloc>:
 801d7c4:	4b02      	ldr	r3, [pc, #8]	; (801d7d0 <realloc+0xc>)
 801d7c6:	460a      	mov	r2, r1
 801d7c8:	4601      	mov	r1, r0
 801d7ca:	6818      	ldr	r0, [r3, #0]
 801d7cc:	f002 bece 	b.w	802056c <_realloc_r>
 801d7d0:	200005c0 	.word	0x200005c0

0801d7d4 <_sbrk_r>:
 801d7d4:	b538      	push	{r3, r4, r5, lr}
 801d7d6:	4d06      	ldr	r5, [pc, #24]	; (801d7f0 <_sbrk_r+0x1c>)
 801d7d8:	2300      	movs	r3, #0
 801d7da:	4604      	mov	r4, r0
 801d7dc:	4608      	mov	r0, r1
 801d7de:	602b      	str	r3, [r5, #0]
 801d7e0:	f7f0 f8f6 	bl	800d9d0 <_sbrk>
 801d7e4:	1c43      	adds	r3, r0, #1
 801d7e6:	d102      	bne.n	801d7ee <_sbrk_r+0x1a>
 801d7e8:	682b      	ldr	r3, [r5, #0]
 801d7ea:	b103      	cbz	r3, 801d7ee <_sbrk_r+0x1a>
 801d7ec:	6023      	str	r3, [r4, #0]
 801d7ee:	bd38      	pop	{r3, r4, r5, pc}
 801d7f0:	2000a7d4 	.word	0x2000a7d4

0801d7f4 <ldexpf>:
 801d7f4:	b510      	push	{r4, lr}
 801d7f6:	ed2d 8b02 	vpush	{d8}
 801d7fa:	4604      	mov	r4, r0
 801d7fc:	eeb0 8a40 	vmov.f32	s16, s0
 801d800:	f003 f852 	bl	80208a8 <finitef>
 801d804:	b1b8      	cbz	r0, 801d836 <ldexpf+0x42>
 801d806:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d80e:	d012      	beq.n	801d836 <ldexpf+0x42>
 801d810:	eeb0 0a48 	vmov.f32	s0, s16
 801d814:	4620      	mov	r0, r4
 801d816:	f000 f819 	bl	801d84c <scalbnf>
 801d81a:	eeb0 8a40 	vmov.f32	s16, s0
 801d81e:	f003 f843 	bl	80208a8 <finitef>
 801d822:	b120      	cbz	r0, 801d82e <ldexpf+0x3a>
 801d824:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d82c:	d103      	bne.n	801d836 <ldexpf+0x42>
 801d82e:	f7ff f855 	bl	801c8dc <__errno>
 801d832:	2322      	movs	r3, #34	; 0x22
 801d834:	6003      	str	r3, [r0, #0]
 801d836:	eeb0 0a48 	vmov.f32	s0, s16
 801d83a:	ecbd 8b02 	vpop	{d8}
 801d83e:	bd10      	pop	{r4, pc}

0801d840 <nanf>:
 801d840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d848 <nanf+0x8>
 801d844:	4770      	bx	lr
 801d846:	bf00      	nop
 801d848:	7fc00000 	.word	0x7fc00000

0801d84c <scalbnf>:
 801d84c:	ee10 3a10 	vmov	r3, s0
 801d850:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801d854:	d025      	beq.n	801d8a2 <scalbnf+0x56>
 801d856:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d85a:	d302      	bcc.n	801d862 <scalbnf+0x16>
 801d85c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d860:	4770      	bx	lr
 801d862:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801d866:	d122      	bne.n	801d8ae <scalbnf+0x62>
 801d868:	4b2a      	ldr	r3, [pc, #168]	; (801d914 <scalbnf+0xc8>)
 801d86a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801d918 <scalbnf+0xcc>
 801d86e:	4298      	cmp	r0, r3
 801d870:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d874:	db16      	blt.n	801d8a4 <scalbnf+0x58>
 801d876:	ee10 3a10 	vmov	r3, s0
 801d87a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d87e:	3a19      	subs	r2, #25
 801d880:	4402      	add	r2, r0
 801d882:	2afe      	cmp	r2, #254	; 0xfe
 801d884:	dd15      	ble.n	801d8b2 <scalbnf+0x66>
 801d886:	ee10 3a10 	vmov	r3, s0
 801d88a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801d91c <scalbnf+0xd0>
 801d88e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801d920 <scalbnf+0xd4>
 801d892:	2b00      	cmp	r3, #0
 801d894:	eeb0 7a67 	vmov.f32	s14, s15
 801d898:	bfb8      	it	lt
 801d89a:	eef0 7a66 	vmovlt.f32	s15, s13
 801d89e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801d8a2:	4770      	bx	lr
 801d8a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801d924 <scalbnf+0xd8>
 801d8a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d8ac:	4770      	bx	lr
 801d8ae:	0dd2      	lsrs	r2, r2, #23
 801d8b0:	e7e6      	b.n	801d880 <scalbnf+0x34>
 801d8b2:	2a00      	cmp	r2, #0
 801d8b4:	dd06      	ble.n	801d8c4 <scalbnf+0x78>
 801d8b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d8ba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801d8be:	ee00 3a10 	vmov	s0, r3
 801d8c2:	4770      	bx	lr
 801d8c4:	f112 0f16 	cmn.w	r2, #22
 801d8c8:	da1a      	bge.n	801d900 <scalbnf+0xb4>
 801d8ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 801d8ce:	4298      	cmp	r0, r3
 801d8d0:	ee10 3a10 	vmov	r3, s0
 801d8d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801d8d8:	dd0a      	ble.n	801d8f0 <scalbnf+0xa4>
 801d8da:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801d91c <scalbnf+0xd0>
 801d8de:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801d920 <scalbnf+0xd4>
 801d8e2:	eef0 7a40 	vmov.f32	s15, s0
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	bf18      	it	ne
 801d8ea:	eeb0 0a47 	vmovne.f32	s0, s14
 801d8ee:	e7db      	b.n	801d8a8 <scalbnf+0x5c>
 801d8f0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801d924 <scalbnf+0xd8>
 801d8f4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801d928 <scalbnf+0xdc>
 801d8f8:	eef0 7a40 	vmov.f32	s15, s0
 801d8fc:	2b00      	cmp	r3, #0
 801d8fe:	e7f3      	b.n	801d8e8 <scalbnf+0x9c>
 801d900:	3219      	adds	r2, #25
 801d902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d906:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801d90a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801d92c <scalbnf+0xe0>
 801d90e:	ee07 3a10 	vmov	s14, r3
 801d912:	e7c4      	b.n	801d89e <scalbnf+0x52>
 801d914:	ffff3cb0 	.word	0xffff3cb0
 801d918:	4c000000 	.word	0x4c000000
 801d91c:	7149f2ca 	.word	0x7149f2ca
 801d920:	f149f2ca 	.word	0xf149f2ca
 801d924:	0da24260 	.word	0x0da24260
 801d928:	8da24260 	.word	0x8da24260
 801d92c:	33000000 	.word	0x33000000

0801d930 <siprintf>:
 801d930:	b40e      	push	{r1, r2, r3}
 801d932:	b500      	push	{lr}
 801d934:	b09c      	sub	sp, #112	; 0x70
 801d936:	ab1d      	add	r3, sp, #116	; 0x74
 801d938:	9002      	str	r0, [sp, #8]
 801d93a:	9006      	str	r0, [sp, #24]
 801d93c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d940:	4809      	ldr	r0, [pc, #36]	; (801d968 <siprintf+0x38>)
 801d942:	9107      	str	r1, [sp, #28]
 801d944:	9104      	str	r1, [sp, #16]
 801d946:	4909      	ldr	r1, [pc, #36]	; (801d96c <siprintf+0x3c>)
 801d948:	f853 2b04 	ldr.w	r2, [r3], #4
 801d94c:	9105      	str	r1, [sp, #20]
 801d94e:	6800      	ldr	r0, [r0, #0]
 801d950:	9301      	str	r3, [sp, #4]
 801d952:	a902      	add	r1, sp, #8
 801d954:	f002 fe8c 	bl	8020670 <_svfiprintf_r>
 801d958:	9b02      	ldr	r3, [sp, #8]
 801d95a:	2200      	movs	r2, #0
 801d95c:	701a      	strb	r2, [r3, #0]
 801d95e:	b01c      	add	sp, #112	; 0x70
 801d960:	f85d eb04 	ldr.w	lr, [sp], #4
 801d964:	b003      	add	sp, #12
 801d966:	4770      	bx	lr
 801d968:	200005c0 	.word	0x200005c0
 801d96c:	ffff0208 	.word	0xffff0208

0801d970 <__sread>:
 801d970:	b510      	push	{r4, lr}
 801d972:	460c      	mov	r4, r1
 801d974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d978:	f002 ff7a 	bl	8020870 <_read_r>
 801d97c:	2800      	cmp	r0, #0
 801d97e:	bfab      	itete	ge
 801d980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d982:	89a3      	ldrhlt	r3, [r4, #12]
 801d984:	181b      	addge	r3, r3, r0
 801d986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d98a:	bfac      	ite	ge
 801d98c:	6563      	strge	r3, [r4, #84]	; 0x54
 801d98e:	81a3      	strhlt	r3, [r4, #12]
 801d990:	bd10      	pop	{r4, pc}

0801d992 <__swrite>:
 801d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d996:	461f      	mov	r7, r3
 801d998:	898b      	ldrh	r3, [r1, #12]
 801d99a:	05db      	lsls	r3, r3, #23
 801d99c:	4605      	mov	r5, r0
 801d99e:	460c      	mov	r4, r1
 801d9a0:	4616      	mov	r6, r2
 801d9a2:	d505      	bpl.n	801d9b0 <__swrite+0x1e>
 801d9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9a8:	2302      	movs	r3, #2
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	f002 f8e4 	bl	801fb78 <_lseek_r>
 801d9b0:	89a3      	ldrh	r3, [r4, #12]
 801d9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9ba:	81a3      	strh	r3, [r4, #12]
 801d9bc:	4632      	mov	r2, r6
 801d9be:	463b      	mov	r3, r7
 801d9c0:	4628      	mov	r0, r5
 801d9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9c6:	f000 bec9 	b.w	801e75c <_write_r>

0801d9ca <__sseek>:
 801d9ca:	b510      	push	{r4, lr}
 801d9cc:	460c      	mov	r4, r1
 801d9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9d2:	f002 f8d1 	bl	801fb78 <_lseek_r>
 801d9d6:	1c43      	adds	r3, r0, #1
 801d9d8:	89a3      	ldrh	r3, [r4, #12]
 801d9da:	bf15      	itete	ne
 801d9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801d9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d9e6:	81a3      	strheq	r3, [r4, #12]
 801d9e8:	bf18      	it	ne
 801d9ea:	81a3      	strhne	r3, [r4, #12]
 801d9ec:	bd10      	pop	{r4, pc}

0801d9ee <__sclose>:
 801d9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9f2:	f000 bec5 	b.w	801e780 <_close_r>

0801d9f6 <sulp>:
 801d9f6:	b570      	push	{r4, r5, r6, lr}
 801d9f8:	4604      	mov	r4, r0
 801d9fa:	460d      	mov	r5, r1
 801d9fc:	ec45 4b10 	vmov	d0, r4, r5
 801da00:	4616      	mov	r6, r2
 801da02:	f002 fc55 	bl	80202b0 <__ulp>
 801da06:	ec51 0b10 	vmov	r0, r1, d0
 801da0a:	b17e      	cbz	r6, 801da2c <sulp+0x36>
 801da0c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801da10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801da14:	2b00      	cmp	r3, #0
 801da16:	dd09      	ble.n	801da2c <sulp+0x36>
 801da18:	051b      	lsls	r3, r3, #20
 801da1a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801da1e:	2400      	movs	r4, #0
 801da20:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801da24:	4622      	mov	r2, r4
 801da26:	462b      	mov	r3, r5
 801da28:	f7e2 fde6 	bl	80005f8 <__aeabi_dmul>
 801da2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801da30 <_strtod_l>:
 801da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da34:	b0a3      	sub	sp, #140	; 0x8c
 801da36:	461f      	mov	r7, r3
 801da38:	2300      	movs	r3, #0
 801da3a:	931e      	str	r3, [sp, #120]	; 0x78
 801da3c:	4ba4      	ldr	r3, [pc, #656]	; (801dcd0 <_strtod_l+0x2a0>)
 801da3e:	9219      	str	r2, [sp, #100]	; 0x64
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	9307      	str	r3, [sp, #28]
 801da44:	4604      	mov	r4, r0
 801da46:	4618      	mov	r0, r3
 801da48:	4688      	mov	r8, r1
 801da4a:	f7e2 fbc1 	bl	80001d0 <strlen>
 801da4e:	f04f 0a00 	mov.w	sl, #0
 801da52:	4605      	mov	r5, r0
 801da54:	f04f 0b00 	mov.w	fp, #0
 801da58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801da5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801da5e:	781a      	ldrb	r2, [r3, #0]
 801da60:	2a2b      	cmp	r2, #43	; 0x2b
 801da62:	d04c      	beq.n	801dafe <_strtod_l+0xce>
 801da64:	d839      	bhi.n	801dada <_strtod_l+0xaa>
 801da66:	2a0d      	cmp	r2, #13
 801da68:	d832      	bhi.n	801dad0 <_strtod_l+0xa0>
 801da6a:	2a08      	cmp	r2, #8
 801da6c:	d832      	bhi.n	801dad4 <_strtod_l+0xa4>
 801da6e:	2a00      	cmp	r2, #0
 801da70:	d03c      	beq.n	801daec <_strtod_l+0xbc>
 801da72:	2300      	movs	r3, #0
 801da74:	930e      	str	r3, [sp, #56]	; 0x38
 801da76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801da78:	7833      	ldrb	r3, [r6, #0]
 801da7a:	2b30      	cmp	r3, #48	; 0x30
 801da7c:	f040 80b4 	bne.w	801dbe8 <_strtod_l+0x1b8>
 801da80:	7873      	ldrb	r3, [r6, #1]
 801da82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801da86:	2b58      	cmp	r3, #88	; 0x58
 801da88:	d16c      	bne.n	801db64 <_strtod_l+0x134>
 801da8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801da8c:	9301      	str	r3, [sp, #4]
 801da8e:	ab1e      	add	r3, sp, #120	; 0x78
 801da90:	9702      	str	r7, [sp, #8]
 801da92:	9300      	str	r3, [sp, #0]
 801da94:	4a8f      	ldr	r2, [pc, #572]	; (801dcd4 <_strtod_l+0x2a4>)
 801da96:	ab1f      	add	r3, sp, #124	; 0x7c
 801da98:	a91d      	add	r1, sp, #116	; 0x74
 801da9a:	4620      	mov	r0, r4
 801da9c:	f001 fd60 	bl	801f560 <__gethex>
 801daa0:	f010 0707 	ands.w	r7, r0, #7
 801daa4:	4605      	mov	r5, r0
 801daa6:	d005      	beq.n	801dab4 <_strtod_l+0x84>
 801daa8:	2f06      	cmp	r7, #6
 801daaa:	d12a      	bne.n	801db02 <_strtod_l+0xd2>
 801daac:	3601      	adds	r6, #1
 801daae:	2300      	movs	r3, #0
 801dab0:	961d      	str	r6, [sp, #116]	; 0x74
 801dab2:	930e      	str	r3, [sp, #56]	; 0x38
 801dab4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	f040 8596 	bne.w	801e5e8 <_strtod_l+0xbb8>
 801dabc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dabe:	b1db      	cbz	r3, 801daf8 <_strtod_l+0xc8>
 801dac0:	4652      	mov	r2, sl
 801dac2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801dac6:	ec43 2b10 	vmov	d0, r2, r3
 801daca:	b023      	add	sp, #140	; 0x8c
 801dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dad0:	2a20      	cmp	r2, #32
 801dad2:	d1ce      	bne.n	801da72 <_strtod_l+0x42>
 801dad4:	3301      	adds	r3, #1
 801dad6:	931d      	str	r3, [sp, #116]	; 0x74
 801dad8:	e7c0      	b.n	801da5c <_strtod_l+0x2c>
 801dada:	2a2d      	cmp	r2, #45	; 0x2d
 801dadc:	d1c9      	bne.n	801da72 <_strtod_l+0x42>
 801dade:	2201      	movs	r2, #1
 801dae0:	920e      	str	r2, [sp, #56]	; 0x38
 801dae2:	1c5a      	adds	r2, r3, #1
 801dae4:	921d      	str	r2, [sp, #116]	; 0x74
 801dae6:	785b      	ldrb	r3, [r3, #1]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d1c4      	bne.n	801da76 <_strtod_l+0x46>
 801daec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801daee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	f040 8576 	bne.w	801e5e4 <_strtod_l+0xbb4>
 801daf8:	4652      	mov	r2, sl
 801dafa:	465b      	mov	r3, fp
 801dafc:	e7e3      	b.n	801dac6 <_strtod_l+0x96>
 801dafe:	2200      	movs	r2, #0
 801db00:	e7ee      	b.n	801dae0 <_strtod_l+0xb0>
 801db02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801db04:	b13a      	cbz	r2, 801db16 <_strtod_l+0xe6>
 801db06:	2135      	movs	r1, #53	; 0x35
 801db08:	a820      	add	r0, sp, #128	; 0x80
 801db0a:	f002 fcdc 	bl	80204c6 <__copybits>
 801db0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801db10:	4620      	mov	r0, r4
 801db12:	f002 f8a1 	bl	801fc58 <_Bfree>
 801db16:	3f01      	subs	r7, #1
 801db18:	2f05      	cmp	r7, #5
 801db1a:	d807      	bhi.n	801db2c <_strtod_l+0xfc>
 801db1c:	e8df f007 	tbb	[pc, r7]
 801db20:	1d180b0e 	.word	0x1d180b0e
 801db24:	030e      	.short	0x030e
 801db26:	f04f 0b00 	mov.w	fp, #0
 801db2a:	46da      	mov	sl, fp
 801db2c:	0728      	lsls	r0, r5, #28
 801db2e:	d5c1      	bpl.n	801dab4 <_strtod_l+0x84>
 801db30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801db34:	e7be      	b.n	801dab4 <_strtod_l+0x84>
 801db36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801db3a:	e7f7      	b.n	801db2c <_strtod_l+0xfc>
 801db3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801db40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801db42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801db46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801db4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801db4e:	e7ed      	b.n	801db2c <_strtod_l+0xfc>
 801db50:	f8df b184 	ldr.w	fp, [pc, #388]	; 801dcd8 <_strtod_l+0x2a8>
 801db54:	f04f 0a00 	mov.w	sl, #0
 801db58:	e7e8      	b.n	801db2c <_strtod_l+0xfc>
 801db5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801db5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801db62:	e7e3      	b.n	801db2c <_strtod_l+0xfc>
 801db64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801db66:	1c5a      	adds	r2, r3, #1
 801db68:	921d      	str	r2, [sp, #116]	; 0x74
 801db6a:	785b      	ldrb	r3, [r3, #1]
 801db6c:	2b30      	cmp	r3, #48	; 0x30
 801db6e:	d0f9      	beq.n	801db64 <_strtod_l+0x134>
 801db70:	2b00      	cmp	r3, #0
 801db72:	d09f      	beq.n	801dab4 <_strtod_l+0x84>
 801db74:	2301      	movs	r3, #1
 801db76:	f04f 0900 	mov.w	r9, #0
 801db7a:	9304      	str	r3, [sp, #16]
 801db7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801db7e:	930a      	str	r3, [sp, #40]	; 0x28
 801db80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801db84:	464f      	mov	r7, r9
 801db86:	220a      	movs	r2, #10
 801db88:	981d      	ldr	r0, [sp, #116]	; 0x74
 801db8a:	7806      	ldrb	r6, [r0, #0]
 801db8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801db90:	b2d9      	uxtb	r1, r3
 801db92:	2909      	cmp	r1, #9
 801db94:	d92a      	bls.n	801dbec <_strtod_l+0x1bc>
 801db96:	9907      	ldr	r1, [sp, #28]
 801db98:	462a      	mov	r2, r5
 801db9a:	f002 fe92 	bl	80208c2 <strncmp>
 801db9e:	b398      	cbz	r0, 801dc08 <_strtod_l+0x1d8>
 801dba0:	2000      	movs	r0, #0
 801dba2:	4633      	mov	r3, r6
 801dba4:	463d      	mov	r5, r7
 801dba6:	9007      	str	r0, [sp, #28]
 801dba8:	4602      	mov	r2, r0
 801dbaa:	2b65      	cmp	r3, #101	; 0x65
 801dbac:	d001      	beq.n	801dbb2 <_strtod_l+0x182>
 801dbae:	2b45      	cmp	r3, #69	; 0x45
 801dbb0:	d118      	bne.n	801dbe4 <_strtod_l+0x1b4>
 801dbb2:	b91d      	cbnz	r5, 801dbbc <_strtod_l+0x18c>
 801dbb4:	9b04      	ldr	r3, [sp, #16]
 801dbb6:	4303      	orrs	r3, r0
 801dbb8:	d098      	beq.n	801daec <_strtod_l+0xbc>
 801dbba:	2500      	movs	r5, #0
 801dbbc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801dbc0:	f108 0301 	add.w	r3, r8, #1
 801dbc4:	931d      	str	r3, [sp, #116]	; 0x74
 801dbc6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dbca:	2b2b      	cmp	r3, #43	; 0x2b
 801dbcc:	d075      	beq.n	801dcba <_strtod_l+0x28a>
 801dbce:	2b2d      	cmp	r3, #45	; 0x2d
 801dbd0:	d07b      	beq.n	801dcca <_strtod_l+0x29a>
 801dbd2:	f04f 0c00 	mov.w	ip, #0
 801dbd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801dbda:	2909      	cmp	r1, #9
 801dbdc:	f240 8082 	bls.w	801dce4 <_strtod_l+0x2b4>
 801dbe0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801dbe4:	2600      	movs	r6, #0
 801dbe6:	e09d      	b.n	801dd24 <_strtod_l+0x2f4>
 801dbe8:	2300      	movs	r3, #0
 801dbea:	e7c4      	b.n	801db76 <_strtod_l+0x146>
 801dbec:	2f08      	cmp	r7, #8
 801dbee:	bfd8      	it	le
 801dbf0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801dbf2:	f100 0001 	add.w	r0, r0, #1
 801dbf6:	bfda      	itte	le
 801dbf8:	fb02 3301 	mlale	r3, r2, r1, r3
 801dbfc:	9309      	strle	r3, [sp, #36]	; 0x24
 801dbfe:	fb02 3909 	mlagt	r9, r2, r9, r3
 801dc02:	3701      	adds	r7, #1
 801dc04:	901d      	str	r0, [sp, #116]	; 0x74
 801dc06:	e7bf      	b.n	801db88 <_strtod_l+0x158>
 801dc08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dc0a:	195a      	adds	r2, r3, r5
 801dc0c:	921d      	str	r2, [sp, #116]	; 0x74
 801dc0e:	5d5b      	ldrb	r3, [r3, r5]
 801dc10:	2f00      	cmp	r7, #0
 801dc12:	d037      	beq.n	801dc84 <_strtod_l+0x254>
 801dc14:	9007      	str	r0, [sp, #28]
 801dc16:	463d      	mov	r5, r7
 801dc18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801dc1c:	2a09      	cmp	r2, #9
 801dc1e:	d912      	bls.n	801dc46 <_strtod_l+0x216>
 801dc20:	2201      	movs	r2, #1
 801dc22:	e7c2      	b.n	801dbaa <_strtod_l+0x17a>
 801dc24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dc26:	1c5a      	adds	r2, r3, #1
 801dc28:	921d      	str	r2, [sp, #116]	; 0x74
 801dc2a:	785b      	ldrb	r3, [r3, #1]
 801dc2c:	3001      	adds	r0, #1
 801dc2e:	2b30      	cmp	r3, #48	; 0x30
 801dc30:	d0f8      	beq.n	801dc24 <_strtod_l+0x1f4>
 801dc32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801dc36:	2a08      	cmp	r2, #8
 801dc38:	f200 84db 	bhi.w	801e5f2 <_strtod_l+0xbc2>
 801dc3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801dc3e:	9007      	str	r0, [sp, #28]
 801dc40:	2000      	movs	r0, #0
 801dc42:	920a      	str	r2, [sp, #40]	; 0x28
 801dc44:	4605      	mov	r5, r0
 801dc46:	3b30      	subs	r3, #48	; 0x30
 801dc48:	f100 0201 	add.w	r2, r0, #1
 801dc4c:	d014      	beq.n	801dc78 <_strtod_l+0x248>
 801dc4e:	9907      	ldr	r1, [sp, #28]
 801dc50:	4411      	add	r1, r2
 801dc52:	9107      	str	r1, [sp, #28]
 801dc54:	462a      	mov	r2, r5
 801dc56:	eb00 0e05 	add.w	lr, r0, r5
 801dc5a:	210a      	movs	r1, #10
 801dc5c:	4572      	cmp	r2, lr
 801dc5e:	d113      	bne.n	801dc88 <_strtod_l+0x258>
 801dc60:	182a      	adds	r2, r5, r0
 801dc62:	2a08      	cmp	r2, #8
 801dc64:	f105 0501 	add.w	r5, r5, #1
 801dc68:	4405      	add	r5, r0
 801dc6a:	dc1c      	bgt.n	801dca6 <_strtod_l+0x276>
 801dc6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dc6e:	220a      	movs	r2, #10
 801dc70:	fb02 3301 	mla	r3, r2, r1, r3
 801dc74:	9309      	str	r3, [sp, #36]	; 0x24
 801dc76:	2200      	movs	r2, #0
 801dc78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dc7a:	1c59      	adds	r1, r3, #1
 801dc7c:	911d      	str	r1, [sp, #116]	; 0x74
 801dc7e:	785b      	ldrb	r3, [r3, #1]
 801dc80:	4610      	mov	r0, r2
 801dc82:	e7c9      	b.n	801dc18 <_strtod_l+0x1e8>
 801dc84:	4638      	mov	r0, r7
 801dc86:	e7d2      	b.n	801dc2e <_strtod_l+0x1fe>
 801dc88:	2a08      	cmp	r2, #8
 801dc8a:	dc04      	bgt.n	801dc96 <_strtod_l+0x266>
 801dc8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801dc8e:	434e      	muls	r6, r1
 801dc90:	9609      	str	r6, [sp, #36]	; 0x24
 801dc92:	3201      	adds	r2, #1
 801dc94:	e7e2      	b.n	801dc5c <_strtod_l+0x22c>
 801dc96:	f102 0c01 	add.w	ip, r2, #1
 801dc9a:	f1bc 0f10 	cmp.w	ip, #16
 801dc9e:	bfd8      	it	le
 801dca0:	fb01 f909 	mulle.w	r9, r1, r9
 801dca4:	e7f5      	b.n	801dc92 <_strtod_l+0x262>
 801dca6:	2d10      	cmp	r5, #16
 801dca8:	bfdc      	itt	le
 801dcaa:	220a      	movle	r2, #10
 801dcac:	fb02 3909 	mlale	r9, r2, r9, r3
 801dcb0:	e7e1      	b.n	801dc76 <_strtod_l+0x246>
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	9307      	str	r3, [sp, #28]
 801dcb6:	2201      	movs	r2, #1
 801dcb8:	e77c      	b.n	801dbb4 <_strtod_l+0x184>
 801dcba:	f04f 0c00 	mov.w	ip, #0
 801dcbe:	f108 0302 	add.w	r3, r8, #2
 801dcc2:	931d      	str	r3, [sp, #116]	; 0x74
 801dcc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801dcc8:	e785      	b.n	801dbd6 <_strtod_l+0x1a6>
 801dcca:	f04f 0c01 	mov.w	ip, #1
 801dcce:	e7f6      	b.n	801dcbe <_strtod_l+0x28e>
 801dcd0:	08022bd8 	.word	0x08022bd8
 801dcd4:	08022984 	.word	0x08022984
 801dcd8:	7ff00000 	.word	0x7ff00000
 801dcdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dcde:	1c59      	adds	r1, r3, #1
 801dce0:	911d      	str	r1, [sp, #116]	; 0x74
 801dce2:	785b      	ldrb	r3, [r3, #1]
 801dce4:	2b30      	cmp	r3, #48	; 0x30
 801dce6:	d0f9      	beq.n	801dcdc <_strtod_l+0x2ac>
 801dce8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801dcec:	2908      	cmp	r1, #8
 801dcee:	f63f af79 	bhi.w	801dbe4 <_strtod_l+0x1b4>
 801dcf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801dcf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dcf8:	9308      	str	r3, [sp, #32]
 801dcfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dcfc:	1c59      	adds	r1, r3, #1
 801dcfe:	911d      	str	r1, [sp, #116]	; 0x74
 801dd00:	785b      	ldrb	r3, [r3, #1]
 801dd02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801dd06:	2e09      	cmp	r6, #9
 801dd08:	d937      	bls.n	801dd7a <_strtod_l+0x34a>
 801dd0a:	9e08      	ldr	r6, [sp, #32]
 801dd0c:	1b89      	subs	r1, r1, r6
 801dd0e:	2908      	cmp	r1, #8
 801dd10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801dd14:	dc02      	bgt.n	801dd1c <_strtod_l+0x2ec>
 801dd16:	4576      	cmp	r6, lr
 801dd18:	bfa8      	it	ge
 801dd1a:	4676      	movge	r6, lr
 801dd1c:	f1bc 0f00 	cmp.w	ip, #0
 801dd20:	d000      	beq.n	801dd24 <_strtod_l+0x2f4>
 801dd22:	4276      	negs	r6, r6
 801dd24:	2d00      	cmp	r5, #0
 801dd26:	d14f      	bne.n	801ddc8 <_strtod_l+0x398>
 801dd28:	9904      	ldr	r1, [sp, #16]
 801dd2a:	4301      	orrs	r1, r0
 801dd2c:	f47f aec2 	bne.w	801dab4 <_strtod_l+0x84>
 801dd30:	2a00      	cmp	r2, #0
 801dd32:	f47f aedb 	bne.w	801daec <_strtod_l+0xbc>
 801dd36:	2b69      	cmp	r3, #105	; 0x69
 801dd38:	d027      	beq.n	801dd8a <_strtod_l+0x35a>
 801dd3a:	dc24      	bgt.n	801dd86 <_strtod_l+0x356>
 801dd3c:	2b49      	cmp	r3, #73	; 0x49
 801dd3e:	d024      	beq.n	801dd8a <_strtod_l+0x35a>
 801dd40:	2b4e      	cmp	r3, #78	; 0x4e
 801dd42:	f47f aed3 	bne.w	801daec <_strtod_l+0xbc>
 801dd46:	499e      	ldr	r1, [pc, #632]	; (801dfc0 <_strtod_l+0x590>)
 801dd48:	a81d      	add	r0, sp, #116	; 0x74
 801dd4a:	f001 fe61 	bl	801fa10 <__match>
 801dd4e:	2800      	cmp	r0, #0
 801dd50:	f43f aecc 	beq.w	801daec <_strtod_l+0xbc>
 801dd54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dd56:	781b      	ldrb	r3, [r3, #0]
 801dd58:	2b28      	cmp	r3, #40	; 0x28
 801dd5a:	d12d      	bne.n	801ddb8 <_strtod_l+0x388>
 801dd5c:	4999      	ldr	r1, [pc, #612]	; (801dfc4 <_strtod_l+0x594>)
 801dd5e:	aa20      	add	r2, sp, #128	; 0x80
 801dd60:	a81d      	add	r0, sp, #116	; 0x74
 801dd62:	f001 fe69 	bl	801fa38 <__hexnan>
 801dd66:	2805      	cmp	r0, #5
 801dd68:	d126      	bne.n	801ddb8 <_strtod_l+0x388>
 801dd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dd6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801dd70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801dd74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801dd78:	e69c      	b.n	801dab4 <_strtod_l+0x84>
 801dd7a:	210a      	movs	r1, #10
 801dd7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801dd80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801dd84:	e7b9      	b.n	801dcfa <_strtod_l+0x2ca>
 801dd86:	2b6e      	cmp	r3, #110	; 0x6e
 801dd88:	e7db      	b.n	801dd42 <_strtod_l+0x312>
 801dd8a:	498f      	ldr	r1, [pc, #572]	; (801dfc8 <_strtod_l+0x598>)
 801dd8c:	a81d      	add	r0, sp, #116	; 0x74
 801dd8e:	f001 fe3f 	bl	801fa10 <__match>
 801dd92:	2800      	cmp	r0, #0
 801dd94:	f43f aeaa 	beq.w	801daec <_strtod_l+0xbc>
 801dd98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dd9a:	498c      	ldr	r1, [pc, #560]	; (801dfcc <_strtod_l+0x59c>)
 801dd9c:	3b01      	subs	r3, #1
 801dd9e:	a81d      	add	r0, sp, #116	; 0x74
 801dda0:	931d      	str	r3, [sp, #116]	; 0x74
 801dda2:	f001 fe35 	bl	801fa10 <__match>
 801dda6:	b910      	cbnz	r0, 801ddae <_strtod_l+0x37e>
 801dda8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ddaa:	3301      	adds	r3, #1
 801ddac:	931d      	str	r3, [sp, #116]	; 0x74
 801ddae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801dfdc <_strtod_l+0x5ac>
 801ddb2:	f04f 0a00 	mov.w	sl, #0
 801ddb6:	e67d      	b.n	801dab4 <_strtod_l+0x84>
 801ddb8:	4885      	ldr	r0, [pc, #532]	; (801dfd0 <_strtod_l+0x5a0>)
 801ddba:	f002 fd6d 	bl	8020898 <nan>
 801ddbe:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ddc2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801ddc6:	e675      	b.n	801dab4 <_strtod_l+0x84>
 801ddc8:	9b07      	ldr	r3, [sp, #28]
 801ddca:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ddcc:	1af3      	subs	r3, r6, r3
 801ddce:	2f00      	cmp	r7, #0
 801ddd0:	bf08      	it	eq
 801ddd2:	462f      	moveq	r7, r5
 801ddd4:	2d10      	cmp	r5, #16
 801ddd6:	9308      	str	r3, [sp, #32]
 801ddd8:	46a8      	mov	r8, r5
 801ddda:	bfa8      	it	ge
 801dddc:	f04f 0810 	movge.w	r8, #16
 801dde0:	f7e2 fb90 	bl	8000504 <__aeabi_ui2d>
 801dde4:	2d09      	cmp	r5, #9
 801dde6:	4682      	mov	sl, r0
 801dde8:	468b      	mov	fp, r1
 801ddea:	dd13      	ble.n	801de14 <_strtod_l+0x3e4>
 801ddec:	4b79      	ldr	r3, [pc, #484]	; (801dfd4 <_strtod_l+0x5a4>)
 801ddee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ddf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ddf6:	f7e2 fbff 	bl	80005f8 <__aeabi_dmul>
 801ddfa:	4682      	mov	sl, r0
 801ddfc:	4648      	mov	r0, r9
 801ddfe:	468b      	mov	fp, r1
 801de00:	f7e2 fb80 	bl	8000504 <__aeabi_ui2d>
 801de04:	4602      	mov	r2, r0
 801de06:	460b      	mov	r3, r1
 801de08:	4650      	mov	r0, sl
 801de0a:	4659      	mov	r1, fp
 801de0c:	f7e2 fa3e 	bl	800028c <__adddf3>
 801de10:	4682      	mov	sl, r0
 801de12:	468b      	mov	fp, r1
 801de14:	2d0f      	cmp	r5, #15
 801de16:	dc38      	bgt.n	801de8a <_strtod_l+0x45a>
 801de18:	9b08      	ldr	r3, [sp, #32]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	f43f ae4a 	beq.w	801dab4 <_strtod_l+0x84>
 801de20:	dd24      	ble.n	801de6c <_strtod_l+0x43c>
 801de22:	2b16      	cmp	r3, #22
 801de24:	dc0b      	bgt.n	801de3e <_strtod_l+0x40e>
 801de26:	4d6b      	ldr	r5, [pc, #428]	; (801dfd4 <_strtod_l+0x5a4>)
 801de28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801de2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801de30:	4652      	mov	r2, sl
 801de32:	465b      	mov	r3, fp
 801de34:	f7e2 fbe0 	bl	80005f8 <__aeabi_dmul>
 801de38:	4682      	mov	sl, r0
 801de3a:	468b      	mov	fp, r1
 801de3c:	e63a      	b.n	801dab4 <_strtod_l+0x84>
 801de3e:	9a08      	ldr	r2, [sp, #32]
 801de40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801de44:	4293      	cmp	r3, r2
 801de46:	db20      	blt.n	801de8a <_strtod_l+0x45a>
 801de48:	4c62      	ldr	r4, [pc, #392]	; (801dfd4 <_strtod_l+0x5a4>)
 801de4a:	f1c5 050f 	rsb	r5, r5, #15
 801de4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801de52:	4652      	mov	r2, sl
 801de54:	465b      	mov	r3, fp
 801de56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801de5a:	f7e2 fbcd 	bl	80005f8 <__aeabi_dmul>
 801de5e:	9b08      	ldr	r3, [sp, #32]
 801de60:	1b5d      	subs	r5, r3, r5
 801de62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801de66:	e9d4 2300 	ldrd	r2, r3, [r4]
 801de6a:	e7e3      	b.n	801de34 <_strtod_l+0x404>
 801de6c:	9b08      	ldr	r3, [sp, #32]
 801de6e:	3316      	adds	r3, #22
 801de70:	db0b      	blt.n	801de8a <_strtod_l+0x45a>
 801de72:	9b07      	ldr	r3, [sp, #28]
 801de74:	4a57      	ldr	r2, [pc, #348]	; (801dfd4 <_strtod_l+0x5a4>)
 801de76:	1b9e      	subs	r6, r3, r6
 801de78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801de7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801de80:	4650      	mov	r0, sl
 801de82:	4659      	mov	r1, fp
 801de84:	f7e2 fce2 	bl	800084c <__aeabi_ddiv>
 801de88:	e7d6      	b.n	801de38 <_strtod_l+0x408>
 801de8a:	9b08      	ldr	r3, [sp, #32]
 801de8c:	eba5 0808 	sub.w	r8, r5, r8
 801de90:	4498      	add	r8, r3
 801de92:	f1b8 0f00 	cmp.w	r8, #0
 801de96:	dd71      	ble.n	801df7c <_strtod_l+0x54c>
 801de98:	f018 030f 	ands.w	r3, r8, #15
 801de9c:	d00a      	beq.n	801deb4 <_strtod_l+0x484>
 801de9e:	494d      	ldr	r1, [pc, #308]	; (801dfd4 <_strtod_l+0x5a4>)
 801dea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801dea4:	4652      	mov	r2, sl
 801dea6:	465b      	mov	r3, fp
 801dea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801deac:	f7e2 fba4 	bl	80005f8 <__aeabi_dmul>
 801deb0:	4682      	mov	sl, r0
 801deb2:	468b      	mov	fp, r1
 801deb4:	f038 080f 	bics.w	r8, r8, #15
 801deb8:	d04d      	beq.n	801df56 <_strtod_l+0x526>
 801deba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801debe:	dd22      	ble.n	801df06 <_strtod_l+0x4d6>
 801dec0:	2500      	movs	r5, #0
 801dec2:	462e      	mov	r6, r5
 801dec4:	9509      	str	r5, [sp, #36]	; 0x24
 801dec6:	9507      	str	r5, [sp, #28]
 801dec8:	2322      	movs	r3, #34	; 0x22
 801deca:	f8df b110 	ldr.w	fp, [pc, #272]	; 801dfdc <_strtod_l+0x5ac>
 801dece:	6023      	str	r3, [r4, #0]
 801ded0:	f04f 0a00 	mov.w	sl, #0
 801ded4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	f43f adec 	beq.w	801dab4 <_strtod_l+0x84>
 801dedc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801dede:	4620      	mov	r0, r4
 801dee0:	f001 feba 	bl	801fc58 <_Bfree>
 801dee4:	9907      	ldr	r1, [sp, #28]
 801dee6:	4620      	mov	r0, r4
 801dee8:	f001 feb6 	bl	801fc58 <_Bfree>
 801deec:	4631      	mov	r1, r6
 801deee:	4620      	mov	r0, r4
 801def0:	f001 feb2 	bl	801fc58 <_Bfree>
 801def4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801def6:	4620      	mov	r0, r4
 801def8:	f001 feae 	bl	801fc58 <_Bfree>
 801defc:	4629      	mov	r1, r5
 801defe:	4620      	mov	r0, r4
 801df00:	f001 feaa 	bl	801fc58 <_Bfree>
 801df04:	e5d6      	b.n	801dab4 <_strtod_l+0x84>
 801df06:	2300      	movs	r3, #0
 801df08:	ea4f 1828 	mov.w	r8, r8, asr #4
 801df0c:	4650      	mov	r0, sl
 801df0e:	4659      	mov	r1, fp
 801df10:	4699      	mov	r9, r3
 801df12:	f1b8 0f01 	cmp.w	r8, #1
 801df16:	dc21      	bgt.n	801df5c <_strtod_l+0x52c>
 801df18:	b10b      	cbz	r3, 801df1e <_strtod_l+0x4ee>
 801df1a:	4682      	mov	sl, r0
 801df1c:	468b      	mov	fp, r1
 801df1e:	4b2e      	ldr	r3, [pc, #184]	; (801dfd8 <_strtod_l+0x5a8>)
 801df20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801df24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801df28:	4652      	mov	r2, sl
 801df2a:	465b      	mov	r3, fp
 801df2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801df30:	f7e2 fb62 	bl	80005f8 <__aeabi_dmul>
 801df34:	4b29      	ldr	r3, [pc, #164]	; (801dfdc <_strtod_l+0x5ac>)
 801df36:	460a      	mov	r2, r1
 801df38:	400b      	ands	r3, r1
 801df3a:	4929      	ldr	r1, [pc, #164]	; (801dfe0 <_strtod_l+0x5b0>)
 801df3c:	428b      	cmp	r3, r1
 801df3e:	4682      	mov	sl, r0
 801df40:	d8be      	bhi.n	801dec0 <_strtod_l+0x490>
 801df42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801df46:	428b      	cmp	r3, r1
 801df48:	bf86      	itte	hi
 801df4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801dfe4 <_strtod_l+0x5b4>
 801df4e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801df52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801df56:	2300      	movs	r3, #0
 801df58:	9304      	str	r3, [sp, #16]
 801df5a:	e081      	b.n	801e060 <_strtod_l+0x630>
 801df5c:	f018 0f01 	tst.w	r8, #1
 801df60:	d007      	beq.n	801df72 <_strtod_l+0x542>
 801df62:	4b1d      	ldr	r3, [pc, #116]	; (801dfd8 <_strtod_l+0x5a8>)
 801df64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801df68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df6c:	f7e2 fb44 	bl	80005f8 <__aeabi_dmul>
 801df70:	2301      	movs	r3, #1
 801df72:	f109 0901 	add.w	r9, r9, #1
 801df76:	ea4f 0868 	mov.w	r8, r8, asr #1
 801df7a:	e7ca      	b.n	801df12 <_strtod_l+0x4e2>
 801df7c:	d0eb      	beq.n	801df56 <_strtod_l+0x526>
 801df7e:	f1c8 0800 	rsb	r8, r8, #0
 801df82:	f018 020f 	ands.w	r2, r8, #15
 801df86:	d00a      	beq.n	801df9e <_strtod_l+0x56e>
 801df88:	4b12      	ldr	r3, [pc, #72]	; (801dfd4 <_strtod_l+0x5a4>)
 801df8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801df8e:	4650      	mov	r0, sl
 801df90:	4659      	mov	r1, fp
 801df92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df96:	f7e2 fc59 	bl	800084c <__aeabi_ddiv>
 801df9a:	4682      	mov	sl, r0
 801df9c:	468b      	mov	fp, r1
 801df9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801dfa2:	d0d8      	beq.n	801df56 <_strtod_l+0x526>
 801dfa4:	f1b8 0f1f 	cmp.w	r8, #31
 801dfa8:	dd1e      	ble.n	801dfe8 <_strtod_l+0x5b8>
 801dfaa:	2500      	movs	r5, #0
 801dfac:	462e      	mov	r6, r5
 801dfae:	9509      	str	r5, [sp, #36]	; 0x24
 801dfb0:	9507      	str	r5, [sp, #28]
 801dfb2:	2322      	movs	r3, #34	; 0x22
 801dfb4:	f04f 0a00 	mov.w	sl, #0
 801dfb8:	f04f 0b00 	mov.w	fp, #0
 801dfbc:	6023      	str	r3, [r4, #0]
 801dfbe:	e789      	b.n	801ded4 <_strtod_l+0x4a4>
 801dfc0:	08022955 	.word	0x08022955
 801dfc4:	08022998 	.word	0x08022998
 801dfc8:	0802294d 	.word	0x0802294d
 801dfcc:	08022adc 	.word	0x08022adc
 801dfd0:	08022d98 	.word	0x08022d98
 801dfd4:	08022c78 	.word	0x08022c78
 801dfd8:	08022c50 	.word	0x08022c50
 801dfdc:	7ff00000 	.word	0x7ff00000
 801dfe0:	7ca00000 	.word	0x7ca00000
 801dfe4:	7fefffff 	.word	0x7fefffff
 801dfe8:	f018 0310 	ands.w	r3, r8, #16
 801dfec:	bf18      	it	ne
 801dfee:	236a      	movne	r3, #106	; 0x6a
 801dff0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801e3a8 <_strtod_l+0x978>
 801dff4:	9304      	str	r3, [sp, #16]
 801dff6:	4650      	mov	r0, sl
 801dff8:	4659      	mov	r1, fp
 801dffa:	2300      	movs	r3, #0
 801dffc:	f018 0f01 	tst.w	r8, #1
 801e000:	d004      	beq.n	801e00c <_strtod_l+0x5dc>
 801e002:	e9d9 2300 	ldrd	r2, r3, [r9]
 801e006:	f7e2 faf7 	bl	80005f8 <__aeabi_dmul>
 801e00a:	2301      	movs	r3, #1
 801e00c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801e010:	f109 0908 	add.w	r9, r9, #8
 801e014:	d1f2      	bne.n	801dffc <_strtod_l+0x5cc>
 801e016:	b10b      	cbz	r3, 801e01c <_strtod_l+0x5ec>
 801e018:	4682      	mov	sl, r0
 801e01a:	468b      	mov	fp, r1
 801e01c:	9b04      	ldr	r3, [sp, #16]
 801e01e:	b1bb      	cbz	r3, 801e050 <_strtod_l+0x620>
 801e020:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801e024:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801e028:	2b00      	cmp	r3, #0
 801e02a:	4659      	mov	r1, fp
 801e02c:	dd10      	ble.n	801e050 <_strtod_l+0x620>
 801e02e:	2b1f      	cmp	r3, #31
 801e030:	f340 8128 	ble.w	801e284 <_strtod_l+0x854>
 801e034:	2b34      	cmp	r3, #52	; 0x34
 801e036:	bfde      	ittt	le
 801e038:	3b20      	suble	r3, #32
 801e03a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 801e03e:	fa02 f303 	lslle.w	r3, r2, r3
 801e042:	f04f 0a00 	mov.w	sl, #0
 801e046:	bfcc      	ite	gt
 801e048:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801e04c:	ea03 0b01 	andle.w	fp, r3, r1
 801e050:	2200      	movs	r2, #0
 801e052:	2300      	movs	r3, #0
 801e054:	4650      	mov	r0, sl
 801e056:	4659      	mov	r1, fp
 801e058:	f7e2 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 801e05c:	2800      	cmp	r0, #0
 801e05e:	d1a4      	bne.n	801dfaa <_strtod_l+0x57a>
 801e060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e062:	9300      	str	r3, [sp, #0]
 801e064:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e066:	462b      	mov	r3, r5
 801e068:	463a      	mov	r2, r7
 801e06a:	4620      	mov	r0, r4
 801e06c:	f001 fe60 	bl	801fd30 <__s2b>
 801e070:	9009      	str	r0, [sp, #36]	; 0x24
 801e072:	2800      	cmp	r0, #0
 801e074:	f43f af24 	beq.w	801dec0 <_strtod_l+0x490>
 801e078:	9b07      	ldr	r3, [sp, #28]
 801e07a:	1b9e      	subs	r6, r3, r6
 801e07c:	9b08      	ldr	r3, [sp, #32]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	bfb4      	ite	lt
 801e082:	4633      	movlt	r3, r6
 801e084:	2300      	movge	r3, #0
 801e086:	9310      	str	r3, [sp, #64]	; 0x40
 801e088:	9b08      	ldr	r3, [sp, #32]
 801e08a:	2500      	movs	r5, #0
 801e08c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e090:	9318      	str	r3, [sp, #96]	; 0x60
 801e092:	462e      	mov	r6, r5
 801e094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e096:	4620      	mov	r0, r4
 801e098:	6859      	ldr	r1, [r3, #4]
 801e09a:	f001 fd9d 	bl	801fbd8 <_Balloc>
 801e09e:	9007      	str	r0, [sp, #28]
 801e0a0:	2800      	cmp	r0, #0
 801e0a2:	f43f af11 	beq.w	801dec8 <_strtod_l+0x498>
 801e0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0a8:	691a      	ldr	r2, [r3, #16]
 801e0aa:	3202      	adds	r2, #2
 801e0ac:	f103 010c 	add.w	r1, r3, #12
 801e0b0:	0092      	lsls	r2, r2, #2
 801e0b2:	300c      	adds	r0, #12
 801e0b4:	f7fe fc4c 	bl	801c950 <memcpy>
 801e0b8:	ec4b ab10 	vmov	d0, sl, fp
 801e0bc:	aa20      	add	r2, sp, #128	; 0x80
 801e0be:	a91f      	add	r1, sp, #124	; 0x7c
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801e0c6:	f002 f96f 	bl	80203a8 <__d2b>
 801e0ca:	901e      	str	r0, [sp, #120]	; 0x78
 801e0cc:	2800      	cmp	r0, #0
 801e0ce:	f43f aefb 	beq.w	801dec8 <_strtod_l+0x498>
 801e0d2:	2101      	movs	r1, #1
 801e0d4:	4620      	mov	r0, r4
 801e0d6:	f001 fec5 	bl	801fe64 <__i2b>
 801e0da:	4606      	mov	r6, r0
 801e0dc:	2800      	cmp	r0, #0
 801e0de:	f43f aef3 	beq.w	801dec8 <_strtod_l+0x498>
 801e0e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801e0e4:	9904      	ldr	r1, [sp, #16]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	bfab      	itete	ge
 801e0ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801e0ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801e0ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801e0f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801e0f4:	bfac      	ite	ge
 801e0f6:	eb03 0902 	addge.w	r9, r3, r2
 801e0fa:	1ad7      	sublt	r7, r2, r3
 801e0fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801e0fe:	eba3 0801 	sub.w	r8, r3, r1
 801e102:	4490      	add	r8, r2
 801e104:	4ba3      	ldr	r3, [pc, #652]	; (801e394 <_strtod_l+0x964>)
 801e106:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801e10a:	4598      	cmp	r8, r3
 801e10c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801e110:	f280 80cc 	bge.w	801e2ac <_strtod_l+0x87c>
 801e114:	eba3 0308 	sub.w	r3, r3, r8
 801e118:	2b1f      	cmp	r3, #31
 801e11a:	eba2 0203 	sub.w	r2, r2, r3
 801e11e:	f04f 0101 	mov.w	r1, #1
 801e122:	f300 80b6 	bgt.w	801e292 <_strtod_l+0x862>
 801e126:	fa01 f303 	lsl.w	r3, r1, r3
 801e12a:	9311      	str	r3, [sp, #68]	; 0x44
 801e12c:	2300      	movs	r3, #0
 801e12e:	930c      	str	r3, [sp, #48]	; 0x30
 801e130:	eb09 0802 	add.w	r8, r9, r2
 801e134:	9b04      	ldr	r3, [sp, #16]
 801e136:	45c1      	cmp	r9, r8
 801e138:	4417      	add	r7, r2
 801e13a:	441f      	add	r7, r3
 801e13c:	464b      	mov	r3, r9
 801e13e:	bfa8      	it	ge
 801e140:	4643      	movge	r3, r8
 801e142:	42bb      	cmp	r3, r7
 801e144:	bfa8      	it	ge
 801e146:	463b      	movge	r3, r7
 801e148:	2b00      	cmp	r3, #0
 801e14a:	bfc2      	ittt	gt
 801e14c:	eba8 0803 	subgt.w	r8, r8, r3
 801e150:	1aff      	subgt	r7, r7, r3
 801e152:	eba9 0903 	subgt.w	r9, r9, r3
 801e156:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e158:	2b00      	cmp	r3, #0
 801e15a:	dd17      	ble.n	801e18c <_strtod_l+0x75c>
 801e15c:	4631      	mov	r1, r6
 801e15e:	461a      	mov	r2, r3
 801e160:	4620      	mov	r0, r4
 801e162:	f001 ff3b 	bl	801ffdc <__pow5mult>
 801e166:	4606      	mov	r6, r0
 801e168:	2800      	cmp	r0, #0
 801e16a:	f43f aead 	beq.w	801dec8 <_strtod_l+0x498>
 801e16e:	4601      	mov	r1, r0
 801e170:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e172:	4620      	mov	r0, r4
 801e174:	f001 fe8c 	bl	801fe90 <__multiply>
 801e178:	900f      	str	r0, [sp, #60]	; 0x3c
 801e17a:	2800      	cmp	r0, #0
 801e17c:	f43f aea4 	beq.w	801dec8 <_strtod_l+0x498>
 801e180:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e182:	4620      	mov	r0, r4
 801e184:	f001 fd68 	bl	801fc58 <_Bfree>
 801e188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e18a:	931e      	str	r3, [sp, #120]	; 0x78
 801e18c:	f1b8 0f00 	cmp.w	r8, #0
 801e190:	f300 8091 	bgt.w	801e2b6 <_strtod_l+0x886>
 801e194:	9b08      	ldr	r3, [sp, #32]
 801e196:	2b00      	cmp	r3, #0
 801e198:	dd08      	ble.n	801e1ac <_strtod_l+0x77c>
 801e19a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e19c:	9907      	ldr	r1, [sp, #28]
 801e19e:	4620      	mov	r0, r4
 801e1a0:	f001 ff1c 	bl	801ffdc <__pow5mult>
 801e1a4:	9007      	str	r0, [sp, #28]
 801e1a6:	2800      	cmp	r0, #0
 801e1a8:	f43f ae8e 	beq.w	801dec8 <_strtod_l+0x498>
 801e1ac:	2f00      	cmp	r7, #0
 801e1ae:	dd08      	ble.n	801e1c2 <_strtod_l+0x792>
 801e1b0:	9907      	ldr	r1, [sp, #28]
 801e1b2:	463a      	mov	r2, r7
 801e1b4:	4620      	mov	r0, r4
 801e1b6:	f001 ff6b 	bl	8020090 <__lshift>
 801e1ba:	9007      	str	r0, [sp, #28]
 801e1bc:	2800      	cmp	r0, #0
 801e1be:	f43f ae83 	beq.w	801dec8 <_strtod_l+0x498>
 801e1c2:	f1b9 0f00 	cmp.w	r9, #0
 801e1c6:	dd08      	ble.n	801e1da <_strtod_l+0x7aa>
 801e1c8:	4631      	mov	r1, r6
 801e1ca:	464a      	mov	r2, r9
 801e1cc:	4620      	mov	r0, r4
 801e1ce:	f001 ff5f 	bl	8020090 <__lshift>
 801e1d2:	4606      	mov	r6, r0
 801e1d4:	2800      	cmp	r0, #0
 801e1d6:	f43f ae77 	beq.w	801dec8 <_strtod_l+0x498>
 801e1da:	9a07      	ldr	r2, [sp, #28]
 801e1dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e1de:	4620      	mov	r0, r4
 801e1e0:	f001 ffde 	bl	80201a0 <__mdiff>
 801e1e4:	4605      	mov	r5, r0
 801e1e6:	2800      	cmp	r0, #0
 801e1e8:	f43f ae6e 	beq.w	801dec8 <_strtod_l+0x498>
 801e1ec:	68c3      	ldr	r3, [r0, #12]
 801e1ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801e1f0:	2300      	movs	r3, #0
 801e1f2:	60c3      	str	r3, [r0, #12]
 801e1f4:	4631      	mov	r1, r6
 801e1f6:	f001 ffb7 	bl	8020168 <__mcmp>
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	da65      	bge.n	801e2ca <_strtod_l+0x89a>
 801e1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e200:	ea53 030a 	orrs.w	r3, r3, sl
 801e204:	f040 8087 	bne.w	801e316 <_strtod_l+0x8e6>
 801e208:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	f040 8082 	bne.w	801e316 <_strtod_l+0x8e6>
 801e212:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e216:	0d1b      	lsrs	r3, r3, #20
 801e218:	051b      	lsls	r3, r3, #20
 801e21a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e21e:	d97a      	bls.n	801e316 <_strtod_l+0x8e6>
 801e220:	696b      	ldr	r3, [r5, #20]
 801e222:	b913      	cbnz	r3, 801e22a <_strtod_l+0x7fa>
 801e224:	692b      	ldr	r3, [r5, #16]
 801e226:	2b01      	cmp	r3, #1
 801e228:	dd75      	ble.n	801e316 <_strtod_l+0x8e6>
 801e22a:	4629      	mov	r1, r5
 801e22c:	2201      	movs	r2, #1
 801e22e:	4620      	mov	r0, r4
 801e230:	f001 ff2e 	bl	8020090 <__lshift>
 801e234:	4631      	mov	r1, r6
 801e236:	4605      	mov	r5, r0
 801e238:	f001 ff96 	bl	8020168 <__mcmp>
 801e23c:	2800      	cmp	r0, #0
 801e23e:	dd6a      	ble.n	801e316 <_strtod_l+0x8e6>
 801e240:	9904      	ldr	r1, [sp, #16]
 801e242:	4a55      	ldr	r2, [pc, #340]	; (801e398 <_strtod_l+0x968>)
 801e244:	465b      	mov	r3, fp
 801e246:	2900      	cmp	r1, #0
 801e248:	f000 8085 	beq.w	801e356 <_strtod_l+0x926>
 801e24c:	ea02 010b 	and.w	r1, r2, fp
 801e250:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e254:	dc7f      	bgt.n	801e356 <_strtod_l+0x926>
 801e256:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e25a:	f77f aeaa 	ble.w	801dfb2 <_strtod_l+0x582>
 801e25e:	4a4f      	ldr	r2, [pc, #316]	; (801e39c <_strtod_l+0x96c>)
 801e260:	2300      	movs	r3, #0
 801e262:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801e266:	4650      	mov	r0, sl
 801e268:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801e26c:	4659      	mov	r1, fp
 801e26e:	f7e2 f9c3 	bl	80005f8 <__aeabi_dmul>
 801e272:	460b      	mov	r3, r1
 801e274:	4303      	orrs	r3, r0
 801e276:	bf08      	it	eq
 801e278:	2322      	moveq	r3, #34	; 0x22
 801e27a:	4682      	mov	sl, r0
 801e27c:	468b      	mov	fp, r1
 801e27e:	bf08      	it	eq
 801e280:	6023      	streq	r3, [r4, #0]
 801e282:	e62b      	b.n	801dedc <_strtod_l+0x4ac>
 801e284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e288:	fa02 f303 	lsl.w	r3, r2, r3
 801e28c:	ea03 0a0a 	and.w	sl, r3, sl
 801e290:	e6de      	b.n	801e050 <_strtod_l+0x620>
 801e292:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801e296:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801e29a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801e29e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801e2a2:	fa01 f308 	lsl.w	r3, r1, r8
 801e2a6:	930c      	str	r3, [sp, #48]	; 0x30
 801e2a8:	9111      	str	r1, [sp, #68]	; 0x44
 801e2aa:	e741      	b.n	801e130 <_strtod_l+0x700>
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	930c      	str	r3, [sp, #48]	; 0x30
 801e2b0:	2301      	movs	r3, #1
 801e2b2:	9311      	str	r3, [sp, #68]	; 0x44
 801e2b4:	e73c      	b.n	801e130 <_strtod_l+0x700>
 801e2b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e2b8:	4642      	mov	r2, r8
 801e2ba:	4620      	mov	r0, r4
 801e2bc:	f001 fee8 	bl	8020090 <__lshift>
 801e2c0:	901e      	str	r0, [sp, #120]	; 0x78
 801e2c2:	2800      	cmp	r0, #0
 801e2c4:	f47f af66 	bne.w	801e194 <_strtod_l+0x764>
 801e2c8:	e5fe      	b.n	801dec8 <_strtod_l+0x498>
 801e2ca:	465f      	mov	r7, fp
 801e2cc:	d16e      	bne.n	801e3ac <_strtod_l+0x97c>
 801e2ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e2d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e2d4:	b342      	cbz	r2, 801e328 <_strtod_l+0x8f8>
 801e2d6:	4a32      	ldr	r2, [pc, #200]	; (801e3a0 <_strtod_l+0x970>)
 801e2d8:	4293      	cmp	r3, r2
 801e2da:	d128      	bne.n	801e32e <_strtod_l+0x8fe>
 801e2dc:	9b04      	ldr	r3, [sp, #16]
 801e2de:	4650      	mov	r0, sl
 801e2e0:	b1eb      	cbz	r3, 801e31e <_strtod_l+0x8ee>
 801e2e2:	4a2d      	ldr	r2, [pc, #180]	; (801e398 <_strtod_l+0x968>)
 801e2e4:	403a      	ands	r2, r7
 801e2e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e2ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e2ee:	d819      	bhi.n	801e324 <_strtod_l+0x8f4>
 801e2f0:	0d12      	lsrs	r2, r2, #20
 801e2f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e2f6:	fa01 f303 	lsl.w	r3, r1, r3
 801e2fa:	4298      	cmp	r0, r3
 801e2fc:	d117      	bne.n	801e32e <_strtod_l+0x8fe>
 801e2fe:	4b29      	ldr	r3, [pc, #164]	; (801e3a4 <_strtod_l+0x974>)
 801e300:	429f      	cmp	r7, r3
 801e302:	d102      	bne.n	801e30a <_strtod_l+0x8da>
 801e304:	3001      	adds	r0, #1
 801e306:	f43f addf 	beq.w	801dec8 <_strtod_l+0x498>
 801e30a:	4b23      	ldr	r3, [pc, #140]	; (801e398 <_strtod_l+0x968>)
 801e30c:	403b      	ands	r3, r7
 801e30e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801e312:	f04f 0a00 	mov.w	sl, #0
 801e316:	9b04      	ldr	r3, [sp, #16]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d1a0      	bne.n	801e25e <_strtod_l+0x82e>
 801e31c:	e5de      	b.n	801dedc <_strtod_l+0x4ac>
 801e31e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e322:	e7ea      	b.n	801e2fa <_strtod_l+0x8ca>
 801e324:	460b      	mov	r3, r1
 801e326:	e7e8      	b.n	801e2fa <_strtod_l+0x8ca>
 801e328:	ea53 030a 	orrs.w	r3, r3, sl
 801e32c:	d088      	beq.n	801e240 <_strtod_l+0x810>
 801e32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e330:	b1db      	cbz	r3, 801e36a <_strtod_l+0x93a>
 801e332:	423b      	tst	r3, r7
 801e334:	d0ef      	beq.n	801e316 <_strtod_l+0x8e6>
 801e336:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e338:	9a04      	ldr	r2, [sp, #16]
 801e33a:	4650      	mov	r0, sl
 801e33c:	4659      	mov	r1, fp
 801e33e:	b1c3      	cbz	r3, 801e372 <_strtod_l+0x942>
 801e340:	f7ff fb59 	bl	801d9f6 <sulp>
 801e344:	4602      	mov	r2, r0
 801e346:	460b      	mov	r3, r1
 801e348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e34c:	f7e1 ff9e 	bl	800028c <__adddf3>
 801e350:	4682      	mov	sl, r0
 801e352:	468b      	mov	fp, r1
 801e354:	e7df      	b.n	801e316 <_strtod_l+0x8e6>
 801e356:	4013      	ands	r3, r2
 801e358:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e35c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801e360:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801e364:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801e368:	e7d5      	b.n	801e316 <_strtod_l+0x8e6>
 801e36a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e36c:	ea13 0f0a 	tst.w	r3, sl
 801e370:	e7e0      	b.n	801e334 <_strtod_l+0x904>
 801e372:	f7ff fb40 	bl	801d9f6 <sulp>
 801e376:	4602      	mov	r2, r0
 801e378:	460b      	mov	r3, r1
 801e37a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801e37e:	f7e1 ff83 	bl	8000288 <__aeabi_dsub>
 801e382:	2200      	movs	r2, #0
 801e384:	2300      	movs	r3, #0
 801e386:	4682      	mov	sl, r0
 801e388:	468b      	mov	fp, r1
 801e38a:	f7e2 fb9d 	bl	8000ac8 <__aeabi_dcmpeq>
 801e38e:	2800      	cmp	r0, #0
 801e390:	d0c1      	beq.n	801e316 <_strtod_l+0x8e6>
 801e392:	e60e      	b.n	801dfb2 <_strtod_l+0x582>
 801e394:	fffffc02 	.word	0xfffffc02
 801e398:	7ff00000 	.word	0x7ff00000
 801e39c:	39500000 	.word	0x39500000
 801e3a0:	000fffff 	.word	0x000fffff
 801e3a4:	7fefffff 	.word	0x7fefffff
 801e3a8:	080229b0 	.word	0x080229b0
 801e3ac:	4631      	mov	r1, r6
 801e3ae:	4628      	mov	r0, r5
 801e3b0:	f002 f856 	bl	8020460 <__ratio>
 801e3b4:	ec59 8b10 	vmov	r8, r9, d0
 801e3b8:	ee10 0a10 	vmov	r0, s0
 801e3bc:	2200      	movs	r2, #0
 801e3be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e3c2:	4649      	mov	r1, r9
 801e3c4:	f7e2 fb94 	bl	8000af0 <__aeabi_dcmple>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	d07c      	beq.n	801e4c6 <_strtod_l+0xa96>
 801e3cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e3ce:	2b00      	cmp	r3, #0
 801e3d0:	d04c      	beq.n	801e46c <_strtod_l+0xa3c>
 801e3d2:	4b95      	ldr	r3, [pc, #596]	; (801e628 <_strtod_l+0xbf8>)
 801e3d4:	2200      	movs	r2, #0
 801e3d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e3da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801e628 <_strtod_l+0xbf8>
 801e3de:	f04f 0800 	mov.w	r8, #0
 801e3e2:	4b92      	ldr	r3, [pc, #584]	; (801e62c <_strtod_l+0xbfc>)
 801e3e4:	403b      	ands	r3, r7
 801e3e6:	9311      	str	r3, [sp, #68]	; 0x44
 801e3e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e3ea:	4b91      	ldr	r3, [pc, #580]	; (801e630 <_strtod_l+0xc00>)
 801e3ec:	429a      	cmp	r2, r3
 801e3ee:	f040 80b2 	bne.w	801e556 <_strtod_l+0xb26>
 801e3f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e3fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801e3fe:	ec4b ab10 	vmov	d0, sl, fp
 801e402:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801e406:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e40a:	f001 ff51 	bl	80202b0 <__ulp>
 801e40e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e412:	ec53 2b10 	vmov	r2, r3, d0
 801e416:	f7e2 f8ef 	bl	80005f8 <__aeabi_dmul>
 801e41a:	4652      	mov	r2, sl
 801e41c:	465b      	mov	r3, fp
 801e41e:	f7e1 ff35 	bl	800028c <__adddf3>
 801e422:	460b      	mov	r3, r1
 801e424:	4981      	ldr	r1, [pc, #516]	; (801e62c <_strtod_l+0xbfc>)
 801e426:	4a83      	ldr	r2, [pc, #524]	; (801e634 <_strtod_l+0xc04>)
 801e428:	4019      	ands	r1, r3
 801e42a:	4291      	cmp	r1, r2
 801e42c:	4682      	mov	sl, r0
 801e42e:	d95e      	bls.n	801e4ee <_strtod_l+0xabe>
 801e430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e432:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e436:	4293      	cmp	r3, r2
 801e438:	d103      	bne.n	801e442 <_strtod_l+0xa12>
 801e43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e43c:	3301      	adds	r3, #1
 801e43e:	f43f ad43 	beq.w	801dec8 <_strtod_l+0x498>
 801e442:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801e640 <_strtod_l+0xc10>
 801e446:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801e44a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e44c:	4620      	mov	r0, r4
 801e44e:	f001 fc03 	bl	801fc58 <_Bfree>
 801e452:	9907      	ldr	r1, [sp, #28]
 801e454:	4620      	mov	r0, r4
 801e456:	f001 fbff 	bl	801fc58 <_Bfree>
 801e45a:	4631      	mov	r1, r6
 801e45c:	4620      	mov	r0, r4
 801e45e:	f001 fbfb 	bl	801fc58 <_Bfree>
 801e462:	4629      	mov	r1, r5
 801e464:	4620      	mov	r0, r4
 801e466:	f001 fbf7 	bl	801fc58 <_Bfree>
 801e46a:	e613      	b.n	801e094 <_strtod_l+0x664>
 801e46c:	f1ba 0f00 	cmp.w	sl, #0
 801e470:	d11b      	bne.n	801e4aa <_strtod_l+0xa7a>
 801e472:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e476:	b9f3      	cbnz	r3, 801e4b6 <_strtod_l+0xa86>
 801e478:	4b6b      	ldr	r3, [pc, #428]	; (801e628 <_strtod_l+0xbf8>)
 801e47a:	2200      	movs	r2, #0
 801e47c:	4640      	mov	r0, r8
 801e47e:	4649      	mov	r1, r9
 801e480:	f7e2 fb2c 	bl	8000adc <__aeabi_dcmplt>
 801e484:	b9d0      	cbnz	r0, 801e4bc <_strtod_l+0xa8c>
 801e486:	4640      	mov	r0, r8
 801e488:	4649      	mov	r1, r9
 801e48a:	4b6b      	ldr	r3, [pc, #428]	; (801e638 <_strtod_l+0xc08>)
 801e48c:	2200      	movs	r2, #0
 801e48e:	f7e2 f8b3 	bl	80005f8 <__aeabi_dmul>
 801e492:	4680      	mov	r8, r0
 801e494:	4689      	mov	r9, r1
 801e496:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801e49a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801e49e:	931b      	str	r3, [sp, #108]	; 0x6c
 801e4a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801e4a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e4a8:	e79b      	b.n	801e3e2 <_strtod_l+0x9b2>
 801e4aa:	f1ba 0f01 	cmp.w	sl, #1
 801e4ae:	d102      	bne.n	801e4b6 <_strtod_l+0xa86>
 801e4b0:	2f00      	cmp	r7, #0
 801e4b2:	f43f ad7e 	beq.w	801dfb2 <_strtod_l+0x582>
 801e4b6:	4b61      	ldr	r3, [pc, #388]	; (801e63c <_strtod_l+0xc0c>)
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	e78c      	b.n	801e3d6 <_strtod_l+0x9a6>
 801e4bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801e638 <_strtod_l+0xc08>
 801e4c0:	f04f 0800 	mov.w	r8, #0
 801e4c4:	e7e7      	b.n	801e496 <_strtod_l+0xa66>
 801e4c6:	4b5c      	ldr	r3, [pc, #368]	; (801e638 <_strtod_l+0xc08>)
 801e4c8:	4640      	mov	r0, r8
 801e4ca:	4649      	mov	r1, r9
 801e4cc:	2200      	movs	r2, #0
 801e4ce:	f7e2 f893 	bl	80005f8 <__aeabi_dmul>
 801e4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e4d4:	4680      	mov	r8, r0
 801e4d6:	4689      	mov	r9, r1
 801e4d8:	b933      	cbnz	r3, 801e4e8 <_strtod_l+0xab8>
 801e4da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e4de:	9012      	str	r0, [sp, #72]	; 0x48
 801e4e0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e4e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801e4e6:	e7dd      	b.n	801e4a4 <_strtod_l+0xa74>
 801e4e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801e4ec:	e7f9      	b.n	801e4e2 <_strtod_l+0xab2>
 801e4ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801e4f2:	9b04      	ldr	r3, [sp, #16]
 801e4f4:	2b00      	cmp	r3, #0
 801e4f6:	d1a8      	bne.n	801e44a <_strtod_l+0xa1a>
 801e4f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e4fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e4fe:	0d1b      	lsrs	r3, r3, #20
 801e500:	051b      	lsls	r3, r3, #20
 801e502:	429a      	cmp	r2, r3
 801e504:	d1a1      	bne.n	801e44a <_strtod_l+0xa1a>
 801e506:	4640      	mov	r0, r8
 801e508:	4649      	mov	r1, r9
 801e50a:	f7e2 fbd5 	bl	8000cb8 <__aeabi_d2lz>
 801e50e:	f7e2 f845 	bl	800059c <__aeabi_l2d>
 801e512:	4602      	mov	r2, r0
 801e514:	460b      	mov	r3, r1
 801e516:	4640      	mov	r0, r8
 801e518:	4649      	mov	r1, r9
 801e51a:	f7e1 feb5 	bl	8000288 <__aeabi_dsub>
 801e51e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801e524:	ea43 030a 	orr.w	r3, r3, sl
 801e528:	4313      	orrs	r3, r2
 801e52a:	4680      	mov	r8, r0
 801e52c:	4689      	mov	r9, r1
 801e52e:	d053      	beq.n	801e5d8 <_strtod_l+0xba8>
 801e530:	a335      	add	r3, pc, #212	; (adr r3, 801e608 <_strtod_l+0xbd8>)
 801e532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e536:	f7e2 fad1 	bl	8000adc <__aeabi_dcmplt>
 801e53a:	2800      	cmp	r0, #0
 801e53c:	f47f acce 	bne.w	801dedc <_strtod_l+0x4ac>
 801e540:	a333      	add	r3, pc, #204	; (adr r3, 801e610 <_strtod_l+0xbe0>)
 801e542:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e546:	4640      	mov	r0, r8
 801e548:	4649      	mov	r1, r9
 801e54a:	f7e2 fae5 	bl	8000b18 <__aeabi_dcmpgt>
 801e54e:	2800      	cmp	r0, #0
 801e550:	f43f af7b 	beq.w	801e44a <_strtod_l+0xa1a>
 801e554:	e4c2      	b.n	801dedc <_strtod_l+0x4ac>
 801e556:	9b04      	ldr	r3, [sp, #16]
 801e558:	b333      	cbz	r3, 801e5a8 <_strtod_l+0xb78>
 801e55a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e55c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801e560:	d822      	bhi.n	801e5a8 <_strtod_l+0xb78>
 801e562:	a32d      	add	r3, pc, #180	; (adr r3, 801e618 <_strtod_l+0xbe8>)
 801e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e568:	4640      	mov	r0, r8
 801e56a:	4649      	mov	r1, r9
 801e56c:	f7e2 fac0 	bl	8000af0 <__aeabi_dcmple>
 801e570:	b1a0      	cbz	r0, 801e59c <_strtod_l+0xb6c>
 801e572:	4649      	mov	r1, r9
 801e574:	4640      	mov	r0, r8
 801e576:	f7e2 fb17 	bl	8000ba8 <__aeabi_d2uiz>
 801e57a:	2801      	cmp	r0, #1
 801e57c:	bf38      	it	cc
 801e57e:	2001      	movcc	r0, #1
 801e580:	f7e1 ffc0 	bl	8000504 <__aeabi_ui2d>
 801e584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e586:	4680      	mov	r8, r0
 801e588:	4689      	mov	r9, r1
 801e58a:	bb13      	cbnz	r3, 801e5d2 <_strtod_l+0xba2>
 801e58c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e590:	9014      	str	r0, [sp, #80]	; 0x50
 801e592:	9315      	str	r3, [sp, #84]	; 0x54
 801e594:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801e598:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801e59c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e59e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e5a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801e5a4:	1a9b      	subs	r3, r3, r2
 801e5a6:	930d      	str	r3, [sp, #52]	; 0x34
 801e5a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e5ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e5b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801e5b4:	f001 fe7c 	bl	80202b0 <__ulp>
 801e5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801e5bc:	ec53 2b10 	vmov	r2, r3, d0
 801e5c0:	f7e2 f81a 	bl	80005f8 <__aeabi_dmul>
 801e5c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801e5c8:	f7e1 fe60 	bl	800028c <__adddf3>
 801e5cc:	4682      	mov	sl, r0
 801e5ce:	468b      	mov	fp, r1
 801e5d0:	e78f      	b.n	801e4f2 <_strtod_l+0xac2>
 801e5d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801e5d6:	e7dd      	b.n	801e594 <_strtod_l+0xb64>
 801e5d8:	a311      	add	r3, pc, #68	; (adr r3, 801e620 <_strtod_l+0xbf0>)
 801e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5de:	f7e2 fa7d 	bl	8000adc <__aeabi_dcmplt>
 801e5e2:	e7b4      	b.n	801e54e <_strtod_l+0xb1e>
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	930e      	str	r3, [sp, #56]	; 0x38
 801e5e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801e5ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e5ec:	6013      	str	r3, [r2, #0]
 801e5ee:	f7ff ba65 	b.w	801dabc <_strtod_l+0x8c>
 801e5f2:	2b65      	cmp	r3, #101	; 0x65
 801e5f4:	f43f ab5d 	beq.w	801dcb2 <_strtod_l+0x282>
 801e5f8:	2b45      	cmp	r3, #69	; 0x45
 801e5fa:	f43f ab5a 	beq.w	801dcb2 <_strtod_l+0x282>
 801e5fe:	2201      	movs	r2, #1
 801e600:	f7ff bb92 	b.w	801dd28 <_strtod_l+0x2f8>
 801e604:	f3af 8000 	nop.w
 801e608:	94a03595 	.word	0x94a03595
 801e60c:	3fdfffff 	.word	0x3fdfffff
 801e610:	35afe535 	.word	0x35afe535
 801e614:	3fe00000 	.word	0x3fe00000
 801e618:	ffc00000 	.word	0xffc00000
 801e61c:	41dfffff 	.word	0x41dfffff
 801e620:	94a03595 	.word	0x94a03595
 801e624:	3fcfffff 	.word	0x3fcfffff
 801e628:	3ff00000 	.word	0x3ff00000
 801e62c:	7ff00000 	.word	0x7ff00000
 801e630:	7fe00000 	.word	0x7fe00000
 801e634:	7c9fffff 	.word	0x7c9fffff
 801e638:	3fe00000 	.word	0x3fe00000
 801e63c:	bff00000 	.word	0xbff00000
 801e640:	7fefffff 	.word	0x7fefffff

0801e644 <_strtod_r>:
 801e644:	4b01      	ldr	r3, [pc, #4]	; (801e64c <_strtod_r+0x8>)
 801e646:	f7ff b9f3 	b.w	801da30 <_strtod_l>
 801e64a:	bf00      	nop
 801e64c:	20000628 	.word	0x20000628

0801e650 <_strtol_l.isra.0>:
 801e650:	2b01      	cmp	r3, #1
 801e652:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e656:	d001      	beq.n	801e65c <_strtol_l.isra.0+0xc>
 801e658:	2b24      	cmp	r3, #36	; 0x24
 801e65a:	d906      	bls.n	801e66a <_strtol_l.isra.0+0x1a>
 801e65c:	f7fe f93e 	bl	801c8dc <__errno>
 801e660:	2316      	movs	r3, #22
 801e662:	6003      	str	r3, [r0, #0]
 801e664:	2000      	movs	r0, #0
 801e666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e66a:	4f3a      	ldr	r7, [pc, #232]	; (801e754 <_strtol_l.isra.0+0x104>)
 801e66c:	468e      	mov	lr, r1
 801e66e:	4676      	mov	r6, lr
 801e670:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e674:	5de5      	ldrb	r5, [r4, r7]
 801e676:	f015 0508 	ands.w	r5, r5, #8
 801e67a:	d1f8      	bne.n	801e66e <_strtol_l.isra.0+0x1e>
 801e67c:	2c2d      	cmp	r4, #45	; 0x2d
 801e67e:	d134      	bne.n	801e6ea <_strtol_l.isra.0+0x9a>
 801e680:	f89e 4000 	ldrb.w	r4, [lr]
 801e684:	f04f 0801 	mov.w	r8, #1
 801e688:	f106 0e02 	add.w	lr, r6, #2
 801e68c:	2b00      	cmp	r3, #0
 801e68e:	d05c      	beq.n	801e74a <_strtol_l.isra.0+0xfa>
 801e690:	2b10      	cmp	r3, #16
 801e692:	d10c      	bne.n	801e6ae <_strtol_l.isra.0+0x5e>
 801e694:	2c30      	cmp	r4, #48	; 0x30
 801e696:	d10a      	bne.n	801e6ae <_strtol_l.isra.0+0x5e>
 801e698:	f89e 4000 	ldrb.w	r4, [lr]
 801e69c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e6a0:	2c58      	cmp	r4, #88	; 0x58
 801e6a2:	d14d      	bne.n	801e740 <_strtol_l.isra.0+0xf0>
 801e6a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801e6a8:	2310      	movs	r3, #16
 801e6aa:	f10e 0e02 	add.w	lr, lr, #2
 801e6ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801e6b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801e6b6:	2600      	movs	r6, #0
 801e6b8:	fbbc f9f3 	udiv	r9, ip, r3
 801e6bc:	4635      	mov	r5, r6
 801e6be:	fb03 ca19 	mls	sl, r3, r9, ip
 801e6c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801e6c6:	2f09      	cmp	r7, #9
 801e6c8:	d818      	bhi.n	801e6fc <_strtol_l.isra.0+0xac>
 801e6ca:	463c      	mov	r4, r7
 801e6cc:	42a3      	cmp	r3, r4
 801e6ce:	dd24      	ble.n	801e71a <_strtol_l.isra.0+0xca>
 801e6d0:	2e00      	cmp	r6, #0
 801e6d2:	db1f      	blt.n	801e714 <_strtol_l.isra.0+0xc4>
 801e6d4:	45a9      	cmp	r9, r5
 801e6d6:	d31d      	bcc.n	801e714 <_strtol_l.isra.0+0xc4>
 801e6d8:	d101      	bne.n	801e6de <_strtol_l.isra.0+0x8e>
 801e6da:	45a2      	cmp	sl, r4
 801e6dc:	db1a      	blt.n	801e714 <_strtol_l.isra.0+0xc4>
 801e6de:	fb05 4503 	mla	r5, r5, r3, r4
 801e6e2:	2601      	movs	r6, #1
 801e6e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e6e8:	e7eb      	b.n	801e6c2 <_strtol_l.isra.0+0x72>
 801e6ea:	2c2b      	cmp	r4, #43	; 0x2b
 801e6ec:	bf08      	it	eq
 801e6ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 801e6f2:	46a8      	mov	r8, r5
 801e6f4:	bf08      	it	eq
 801e6f6:	f106 0e02 	addeq.w	lr, r6, #2
 801e6fa:	e7c7      	b.n	801e68c <_strtol_l.isra.0+0x3c>
 801e6fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801e700:	2f19      	cmp	r7, #25
 801e702:	d801      	bhi.n	801e708 <_strtol_l.isra.0+0xb8>
 801e704:	3c37      	subs	r4, #55	; 0x37
 801e706:	e7e1      	b.n	801e6cc <_strtol_l.isra.0+0x7c>
 801e708:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801e70c:	2f19      	cmp	r7, #25
 801e70e:	d804      	bhi.n	801e71a <_strtol_l.isra.0+0xca>
 801e710:	3c57      	subs	r4, #87	; 0x57
 801e712:	e7db      	b.n	801e6cc <_strtol_l.isra.0+0x7c>
 801e714:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801e718:	e7e4      	b.n	801e6e4 <_strtol_l.isra.0+0x94>
 801e71a:	2e00      	cmp	r6, #0
 801e71c:	da05      	bge.n	801e72a <_strtol_l.isra.0+0xda>
 801e71e:	2322      	movs	r3, #34	; 0x22
 801e720:	6003      	str	r3, [r0, #0]
 801e722:	4665      	mov	r5, ip
 801e724:	b942      	cbnz	r2, 801e738 <_strtol_l.isra.0+0xe8>
 801e726:	4628      	mov	r0, r5
 801e728:	e79d      	b.n	801e666 <_strtol_l.isra.0+0x16>
 801e72a:	f1b8 0f00 	cmp.w	r8, #0
 801e72e:	d000      	beq.n	801e732 <_strtol_l.isra.0+0xe2>
 801e730:	426d      	negs	r5, r5
 801e732:	2a00      	cmp	r2, #0
 801e734:	d0f7      	beq.n	801e726 <_strtol_l.isra.0+0xd6>
 801e736:	b10e      	cbz	r6, 801e73c <_strtol_l.isra.0+0xec>
 801e738:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801e73c:	6011      	str	r1, [r2, #0]
 801e73e:	e7f2      	b.n	801e726 <_strtol_l.isra.0+0xd6>
 801e740:	2430      	movs	r4, #48	; 0x30
 801e742:	2b00      	cmp	r3, #0
 801e744:	d1b3      	bne.n	801e6ae <_strtol_l.isra.0+0x5e>
 801e746:	2308      	movs	r3, #8
 801e748:	e7b1      	b.n	801e6ae <_strtol_l.isra.0+0x5e>
 801e74a:	2c30      	cmp	r4, #48	; 0x30
 801e74c:	d0a4      	beq.n	801e698 <_strtol_l.isra.0+0x48>
 801e74e:	230a      	movs	r3, #10
 801e750:	e7ad      	b.n	801e6ae <_strtol_l.isra.0+0x5e>
 801e752:	bf00      	nop
 801e754:	080229d9 	.word	0x080229d9

0801e758 <_strtol_r>:
 801e758:	f7ff bf7a 	b.w	801e650 <_strtol_l.isra.0>

0801e75c <_write_r>:
 801e75c:	b538      	push	{r3, r4, r5, lr}
 801e75e:	4d07      	ldr	r5, [pc, #28]	; (801e77c <_write_r+0x20>)
 801e760:	4604      	mov	r4, r0
 801e762:	4608      	mov	r0, r1
 801e764:	4611      	mov	r1, r2
 801e766:	2200      	movs	r2, #0
 801e768:	602a      	str	r2, [r5, #0]
 801e76a:	461a      	mov	r2, r3
 801e76c:	f7ef f8df 	bl	800d92e <_write>
 801e770:	1c43      	adds	r3, r0, #1
 801e772:	d102      	bne.n	801e77a <_write_r+0x1e>
 801e774:	682b      	ldr	r3, [r5, #0]
 801e776:	b103      	cbz	r3, 801e77a <_write_r+0x1e>
 801e778:	6023      	str	r3, [r4, #0]
 801e77a:	bd38      	pop	{r3, r4, r5, pc}
 801e77c:	2000a7d4 	.word	0x2000a7d4

0801e780 <_close_r>:
 801e780:	b538      	push	{r3, r4, r5, lr}
 801e782:	4d06      	ldr	r5, [pc, #24]	; (801e79c <_close_r+0x1c>)
 801e784:	2300      	movs	r3, #0
 801e786:	4604      	mov	r4, r0
 801e788:	4608      	mov	r0, r1
 801e78a:	602b      	str	r3, [r5, #0]
 801e78c:	f7ef f8eb 	bl	800d966 <_close>
 801e790:	1c43      	adds	r3, r0, #1
 801e792:	d102      	bne.n	801e79a <_close_r+0x1a>
 801e794:	682b      	ldr	r3, [r5, #0]
 801e796:	b103      	cbz	r3, 801e79a <_close_r+0x1a>
 801e798:	6023      	str	r3, [r4, #0]
 801e79a:	bd38      	pop	{r3, r4, r5, pc}
 801e79c:	2000a7d4 	.word	0x2000a7d4

0801e7a0 <quorem>:
 801e7a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a4:	6903      	ldr	r3, [r0, #16]
 801e7a6:	690c      	ldr	r4, [r1, #16]
 801e7a8:	42a3      	cmp	r3, r4
 801e7aa:	4607      	mov	r7, r0
 801e7ac:	f2c0 8081 	blt.w	801e8b2 <quorem+0x112>
 801e7b0:	3c01      	subs	r4, #1
 801e7b2:	f101 0814 	add.w	r8, r1, #20
 801e7b6:	f100 0514 	add.w	r5, r0, #20
 801e7ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e7be:	9301      	str	r3, [sp, #4]
 801e7c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e7c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e7c8:	3301      	adds	r3, #1
 801e7ca:	429a      	cmp	r2, r3
 801e7cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e7d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e7d4:	fbb2 f6f3 	udiv	r6, r2, r3
 801e7d8:	d331      	bcc.n	801e83e <quorem+0x9e>
 801e7da:	f04f 0e00 	mov.w	lr, #0
 801e7de:	4640      	mov	r0, r8
 801e7e0:	46ac      	mov	ip, r5
 801e7e2:	46f2      	mov	sl, lr
 801e7e4:	f850 2b04 	ldr.w	r2, [r0], #4
 801e7e8:	b293      	uxth	r3, r2
 801e7ea:	fb06 e303 	mla	r3, r6, r3, lr
 801e7ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e7f2:	b29b      	uxth	r3, r3
 801e7f4:	ebaa 0303 	sub.w	r3, sl, r3
 801e7f8:	0c12      	lsrs	r2, r2, #16
 801e7fa:	f8dc a000 	ldr.w	sl, [ip]
 801e7fe:	fb06 e202 	mla	r2, r6, r2, lr
 801e802:	fa13 f38a 	uxtah	r3, r3, sl
 801e806:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e80a:	fa1f fa82 	uxth.w	sl, r2
 801e80e:	f8dc 2000 	ldr.w	r2, [ip]
 801e812:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e816:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e81a:	b29b      	uxth	r3, r3
 801e81c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e820:	4581      	cmp	r9, r0
 801e822:	f84c 3b04 	str.w	r3, [ip], #4
 801e826:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e82a:	d2db      	bcs.n	801e7e4 <quorem+0x44>
 801e82c:	f855 300b 	ldr.w	r3, [r5, fp]
 801e830:	b92b      	cbnz	r3, 801e83e <quorem+0x9e>
 801e832:	9b01      	ldr	r3, [sp, #4]
 801e834:	3b04      	subs	r3, #4
 801e836:	429d      	cmp	r5, r3
 801e838:	461a      	mov	r2, r3
 801e83a:	d32e      	bcc.n	801e89a <quorem+0xfa>
 801e83c:	613c      	str	r4, [r7, #16]
 801e83e:	4638      	mov	r0, r7
 801e840:	f001 fc92 	bl	8020168 <__mcmp>
 801e844:	2800      	cmp	r0, #0
 801e846:	db24      	blt.n	801e892 <quorem+0xf2>
 801e848:	3601      	adds	r6, #1
 801e84a:	4628      	mov	r0, r5
 801e84c:	f04f 0c00 	mov.w	ip, #0
 801e850:	f858 2b04 	ldr.w	r2, [r8], #4
 801e854:	f8d0 e000 	ldr.w	lr, [r0]
 801e858:	b293      	uxth	r3, r2
 801e85a:	ebac 0303 	sub.w	r3, ip, r3
 801e85e:	0c12      	lsrs	r2, r2, #16
 801e860:	fa13 f38e 	uxtah	r3, r3, lr
 801e864:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e868:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e86c:	b29b      	uxth	r3, r3
 801e86e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e872:	45c1      	cmp	r9, r8
 801e874:	f840 3b04 	str.w	r3, [r0], #4
 801e878:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e87c:	d2e8      	bcs.n	801e850 <quorem+0xb0>
 801e87e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e886:	b922      	cbnz	r2, 801e892 <quorem+0xf2>
 801e888:	3b04      	subs	r3, #4
 801e88a:	429d      	cmp	r5, r3
 801e88c:	461a      	mov	r2, r3
 801e88e:	d30a      	bcc.n	801e8a6 <quorem+0x106>
 801e890:	613c      	str	r4, [r7, #16]
 801e892:	4630      	mov	r0, r6
 801e894:	b003      	add	sp, #12
 801e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e89a:	6812      	ldr	r2, [r2, #0]
 801e89c:	3b04      	subs	r3, #4
 801e89e:	2a00      	cmp	r2, #0
 801e8a0:	d1cc      	bne.n	801e83c <quorem+0x9c>
 801e8a2:	3c01      	subs	r4, #1
 801e8a4:	e7c7      	b.n	801e836 <quorem+0x96>
 801e8a6:	6812      	ldr	r2, [r2, #0]
 801e8a8:	3b04      	subs	r3, #4
 801e8aa:	2a00      	cmp	r2, #0
 801e8ac:	d1f0      	bne.n	801e890 <quorem+0xf0>
 801e8ae:	3c01      	subs	r4, #1
 801e8b0:	e7eb      	b.n	801e88a <quorem+0xea>
 801e8b2:	2000      	movs	r0, #0
 801e8b4:	e7ee      	b.n	801e894 <quorem+0xf4>
	...

0801e8b8 <_dtoa_r>:
 801e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	ed2d 8b02 	vpush	{d8}
 801e8c0:	ec57 6b10 	vmov	r6, r7, d0
 801e8c4:	b095      	sub	sp, #84	; 0x54
 801e8c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e8c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801e8cc:	9105      	str	r1, [sp, #20]
 801e8ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801e8d2:	4604      	mov	r4, r0
 801e8d4:	9209      	str	r2, [sp, #36]	; 0x24
 801e8d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8d8:	b975      	cbnz	r5, 801e8f8 <_dtoa_r+0x40>
 801e8da:	2010      	movs	r0, #16
 801e8dc:	f7fe f828 	bl	801c930 <malloc>
 801e8e0:	4602      	mov	r2, r0
 801e8e2:	6260      	str	r0, [r4, #36]	; 0x24
 801e8e4:	b920      	cbnz	r0, 801e8f0 <_dtoa_r+0x38>
 801e8e6:	4bb2      	ldr	r3, [pc, #712]	; (801ebb0 <_dtoa_r+0x2f8>)
 801e8e8:	21ea      	movs	r1, #234	; 0xea
 801e8ea:	48b2      	ldr	r0, [pc, #712]	; (801ebb4 <_dtoa_r+0x2fc>)
 801e8ec:	f002 f808 	bl	8020900 <__assert_func>
 801e8f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e8f4:	6005      	str	r5, [r0, #0]
 801e8f6:	60c5      	str	r5, [r0, #12]
 801e8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e8fa:	6819      	ldr	r1, [r3, #0]
 801e8fc:	b151      	cbz	r1, 801e914 <_dtoa_r+0x5c>
 801e8fe:	685a      	ldr	r2, [r3, #4]
 801e900:	604a      	str	r2, [r1, #4]
 801e902:	2301      	movs	r3, #1
 801e904:	4093      	lsls	r3, r2
 801e906:	608b      	str	r3, [r1, #8]
 801e908:	4620      	mov	r0, r4
 801e90a:	f001 f9a5 	bl	801fc58 <_Bfree>
 801e90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e910:	2200      	movs	r2, #0
 801e912:	601a      	str	r2, [r3, #0]
 801e914:	1e3b      	subs	r3, r7, #0
 801e916:	bfb9      	ittee	lt
 801e918:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e91c:	9303      	strlt	r3, [sp, #12]
 801e91e:	2300      	movge	r3, #0
 801e920:	f8c8 3000 	strge.w	r3, [r8]
 801e924:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801e928:	4ba3      	ldr	r3, [pc, #652]	; (801ebb8 <_dtoa_r+0x300>)
 801e92a:	bfbc      	itt	lt
 801e92c:	2201      	movlt	r2, #1
 801e92e:	f8c8 2000 	strlt.w	r2, [r8]
 801e932:	ea33 0309 	bics.w	r3, r3, r9
 801e936:	d11b      	bne.n	801e970 <_dtoa_r+0xb8>
 801e938:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e93a:	f242 730f 	movw	r3, #9999	; 0x270f
 801e93e:	6013      	str	r3, [r2, #0]
 801e940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e944:	4333      	orrs	r3, r6
 801e946:	f000 857a 	beq.w	801f43e <_dtoa_r+0xb86>
 801e94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e94c:	b963      	cbnz	r3, 801e968 <_dtoa_r+0xb0>
 801e94e:	4b9b      	ldr	r3, [pc, #620]	; (801ebbc <_dtoa_r+0x304>)
 801e950:	e024      	b.n	801e99c <_dtoa_r+0xe4>
 801e952:	4b9b      	ldr	r3, [pc, #620]	; (801ebc0 <_dtoa_r+0x308>)
 801e954:	9300      	str	r3, [sp, #0]
 801e956:	3308      	adds	r3, #8
 801e958:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e95a:	6013      	str	r3, [r2, #0]
 801e95c:	9800      	ldr	r0, [sp, #0]
 801e95e:	b015      	add	sp, #84	; 0x54
 801e960:	ecbd 8b02 	vpop	{d8}
 801e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e968:	4b94      	ldr	r3, [pc, #592]	; (801ebbc <_dtoa_r+0x304>)
 801e96a:	9300      	str	r3, [sp, #0]
 801e96c:	3303      	adds	r3, #3
 801e96e:	e7f3      	b.n	801e958 <_dtoa_r+0xa0>
 801e970:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e974:	2200      	movs	r2, #0
 801e976:	ec51 0b17 	vmov	r0, r1, d7
 801e97a:	2300      	movs	r3, #0
 801e97c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801e980:	f7e2 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 801e984:	4680      	mov	r8, r0
 801e986:	b158      	cbz	r0, 801e9a0 <_dtoa_r+0xe8>
 801e988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e98a:	2301      	movs	r3, #1
 801e98c:	6013      	str	r3, [r2, #0]
 801e98e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e990:	2b00      	cmp	r3, #0
 801e992:	f000 8551 	beq.w	801f438 <_dtoa_r+0xb80>
 801e996:	488b      	ldr	r0, [pc, #556]	; (801ebc4 <_dtoa_r+0x30c>)
 801e998:	6018      	str	r0, [r3, #0]
 801e99a:	1e43      	subs	r3, r0, #1
 801e99c:	9300      	str	r3, [sp, #0]
 801e99e:	e7dd      	b.n	801e95c <_dtoa_r+0xa4>
 801e9a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801e9a4:	aa12      	add	r2, sp, #72	; 0x48
 801e9a6:	a913      	add	r1, sp, #76	; 0x4c
 801e9a8:	4620      	mov	r0, r4
 801e9aa:	f001 fcfd 	bl	80203a8 <__d2b>
 801e9ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801e9b2:	4683      	mov	fp, r0
 801e9b4:	2d00      	cmp	r5, #0
 801e9b6:	d07c      	beq.n	801eab2 <_dtoa_r+0x1fa>
 801e9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e9ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801e9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e9c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801e9c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801e9ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801e9ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801e9d2:	4b7d      	ldr	r3, [pc, #500]	; (801ebc8 <_dtoa_r+0x310>)
 801e9d4:	2200      	movs	r2, #0
 801e9d6:	4630      	mov	r0, r6
 801e9d8:	4639      	mov	r1, r7
 801e9da:	f7e1 fc55 	bl	8000288 <__aeabi_dsub>
 801e9de:	a36e      	add	r3, pc, #440	; (adr r3, 801eb98 <_dtoa_r+0x2e0>)
 801e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e4:	f7e1 fe08 	bl	80005f8 <__aeabi_dmul>
 801e9e8:	a36d      	add	r3, pc, #436	; (adr r3, 801eba0 <_dtoa_r+0x2e8>)
 801e9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ee:	f7e1 fc4d 	bl	800028c <__adddf3>
 801e9f2:	4606      	mov	r6, r0
 801e9f4:	4628      	mov	r0, r5
 801e9f6:	460f      	mov	r7, r1
 801e9f8:	f7e1 fd94 	bl	8000524 <__aeabi_i2d>
 801e9fc:	a36a      	add	r3, pc, #424	; (adr r3, 801eba8 <_dtoa_r+0x2f0>)
 801e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea02:	f7e1 fdf9 	bl	80005f8 <__aeabi_dmul>
 801ea06:	4602      	mov	r2, r0
 801ea08:	460b      	mov	r3, r1
 801ea0a:	4630      	mov	r0, r6
 801ea0c:	4639      	mov	r1, r7
 801ea0e:	f7e1 fc3d 	bl	800028c <__adddf3>
 801ea12:	4606      	mov	r6, r0
 801ea14:	460f      	mov	r7, r1
 801ea16:	f7e2 f89f 	bl	8000b58 <__aeabi_d2iz>
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	4682      	mov	sl, r0
 801ea1e:	2300      	movs	r3, #0
 801ea20:	4630      	mov	r0, r6
 801ea22:	4639      	mov	r1, r7
 801ea24:	f7e2 f85a 	bl	8000adc <__aeabi_dcmplt>
 801ea28:	b148      	cbz	r0, 801ea3e <_dtoa_r+0x186>
 801ea2a:	4650      	mov	r0, sl
 801ea2c:	f7e1 fd7a 	bl	8000524 <__aeabi_i2d>
 801ea30:	4632      	mov	r2, r6
 801ea32:	463b      	mov	r3, r7
 801ea34:	f7e2 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 801ea38:	b908      	cbnz	r0, 801ea3e <_dtoa_r+0x186>
 801ea3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ea3e:	f1ba 0f16 	cmp.w	sl, #22
 801ea42:	d854      	bhi.n	801eaee <_dtoa_r+0x236>
 801ea44:	4b61      	ldr	r3, [pc, #388]	; (801ebcc <_dtoa_r+0x314>)
 801ea46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ea52:	f7e2 f843 	bl	8000adc <__aeabi_dcmplt>
 801ea56:	2800      	cmp	r0, #0
 801ea58:	d04b      	beq.n	801eaf2 <_dtoa_r+0x23a>
 801ea5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801ea5e:	2300      	movs	r3, #0
 801ea60:	930e      	str	r3, [sp, #56]	; 0x38
 801ea62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ea64:	1b5d      	subs	r5, r3, r5
 801ea66:	1e6b      	subs	r3, r5, #1
 801ea68:	9304      	str	r3, [sp, #16]
 801ea6a:	bf43      	ittte	mi
 801ea6c:	2300      	movmi	r3, #0
 801ea6e:	f1c5 0801 	rsbmi	r8, r5, #1
 801ea72:	9304      	strmi	r3, [sp, #16]
 801ea74:	f04f 0800 	movpl.w	r8, #0
 801ea78:	f1ba 0f00 	cmp.w	sl, #0
 801ea7c:	db3b      	blt.n	801eaf6 <_dtoa_r+0x23e>
 801ea7e:	9b04      	ldr	r3, [sp, #16]
 801ea80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801ea84:	4453      	add	r3, sl
 801ea86:	9304      	str	r3, [sp, #16]
 801ea88:	2300      	movs	r3, #0
 801ea8a:	9306      	str	r3, [sp, #24]
 801ea8c:	9b05      	ldr	r3, [sp, #20]
 801ea8e:	2b09      	cmp	r3, #9
 801ea90:	d869      	bhi.n	801eb66 <_dtoa_r+0x2ae>
 801ea92:	2b05      	cmp	r3, #5
 801ea94:	bfc4      	itt	gt
 801ea96:	3b04      	subgt	r3, #4
 801ea98:	9305      	strgt	r3, [sp, #20]
 801ea9a:	9b05      	ldr	r3, [sp, #20]
 801ea9c:	f1a3 0302 	sub.w	r3, r3, #2
 801eaa0:	bfcc      	ite	gt
 801eaa2:	2500      	movgt	r5, #0
 801eaa4:	2501      	movle	r5, #1
 801eaa6:	2b03      	cmp	r3, #3
 801eaa8:	d869      	bhi.n	801eb7e <_dtoa_r+0x2c6>
 801eaaa:	e8df f003 	tbb	[pc, r3]
 801eaae:	4e2c      	.short	0x4e2c
 801eab0:	5a4c      	.short	0x5a4c
 801eab2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801eab6:	441d      	add	r5, r3
 801eab8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801eabc:	2b20      	cmp	r3, #32
 801eabe:	bfc1      	itttt	gt
 801eac0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801eac4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801eac8:	fa09 f303 	lslgt.w	r3, r9, r3
 801eacc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ead0:	bfda      	itte	le
 801ead2:	f1c3 0320 	rsble	r3, r3, #32
 801ead6:	fa06 f003 	lslle.w	r0, r6, r3
 801eada:	4318      	orrgt	r0, r3
 801eadc:	f7e1 fd12 	bl	8000504 <__aeabi_ui2d>
 801eae0:	2301      	movs	r3, #1
 801eae2:	4606      	mov	r6, r0
 801eae4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801eae8:	3d01      	subs	r5, #1
 801eaea:	9310      	str	r3, [sp, #64]	; 0x40
 801eaec:	e771      	b.n	801e9d2 <_dtoa_r+0x11a>
 801eaee:	2301      	movs	r3, #1
 801eaf0:	e7b6      	b.n	801ea60 <_dtoa_r+0x1a8>
 801eaf2:	900e      	str	r0, [sp, #56]	; 0x38
 801eaf4:	e7b5      	b.n	801ea62 <_dtoa_r+0x1aa>
 801eaf6:	f1ca 0300 	rsb	r3, sl, #0
 801eafa:	9306      	str	r3, [sp, #24]
 801eafc:	2300      	movs	r3, #0
 801eafe:	eba8 080a 	sub.w	r8, r8, sl
 801eb02:	930d      	str	r3, [sp, #52]	; 0x34
 801eb04:	e7c2      	b.n	801ea8c <_dtoa_r+0x1d4>
 801eb06:	2300      	movs	r3, #0
 801eb08:	9308      	str	r3, [sp, #32]
 801eb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb0c:	2b00      	cmp	r3, #0
 801eb0e:	dc39      	bgt.n	801eb84 <_dtoa_r+0x2cc>
 801eb10:	f04f 0901 	mov.w	r9, #1
 801eb14:	f8cd 9004 	str.w	r9, [sp, #4]
 801eb18:	464b      	mov	r3, r9
 801eb1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801eb1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801eb20:	2200      	movs	r2, #0
 801eb22:	6042      	str	r2, [r0, #4]
 801eb24:	2204      	movs	r2, #4
 801eb26:	f102 0614 	add.w	r6, r2, #20
 801eb2a:	429e      	cmp	r6, r3
 801eb2c:	6841      	ldr	r1, [r0, #4]
 801eb2e:	d92f      	bls.n	801eb90 <_dtoa_r+0x2d8>
 801eb30:	4620      	mov	r0, r4
 801eb32:	f001 f851 	bl	801fbd8 <_Balloc>
 801eb36:	9000      	str	r0, [sp, #0]
 801eb38:	2800      	cmp	r0, #0
 801eb3a:	d14b      	bne.n	801ebd4 <_dtoa_r+0x31c>
 801eb3c:	4b24      	ldr	r3, [pc, #144]	; (801ebd0 <_dtoa_r+0x318>)
 801eb3e:	4602      	mov	r2, r0
 801eb40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801eb44:	e6d1      	b.n	801e8ea <_dtoa_r+0x32>
 801eb46:	2301      	movs	r3, #1
 801eb48:	e7de      	b.n	801eb08 <_dtoa_r+0x250>
 801eb4a:	2300      	movs	r3, #0
 801eb4c:	9308      	str	r3, [sp, #32]
 801eb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb50:	eb0a 0903 	add.w	r9, sl, r3
 801eb54:	f109 0301 	add.w	r3, r9, #1
 801eb58:	2b01      	cmp	r3, #1
 801eb5a:	9301      	str	r3, [sp, #4]
 801eb5c:	bfb8      	it	lt
 801eb5e:	2301      	movlt	r3, #1
 801eb60:	e7dd      	b.n	801eb1e <_dtoa_r+0x266>
 801eb62:	2301      	movs	r3, #1
 801eb64:	e7f2      	b.n	801eb4c <_dtoa_r+0x294>
 801eb66:	2501      	movs	r5, #1
 801eb68:	2300      	movs	r3, #0
 801eb6a:	9305      	str	r3, [sp, #20]
 801eb6c:	9508      	str	r5, [sp, #32]
 801eb6e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801eb72:	2200      	movs	r2, #0
 801eb74:	f8cd 9004 	str.w	r9, [sp, #4]
 801eb78:	2312      	movs	r3, #18
 801eb7a:	9209      	str	r2, [sp, #36]	; 0x24
 801eb7c:	e7cf      	b.n	801eb1e <_dtoa_r+0x266>
 801eb7e:	2301      	movs	r3, #1
 801eb80:	9308      	str	r3, [sp, #32]
 801eb82:	e7f4      	b.n	801eb6e <_dtoa_r+0x2b6>
 801eb84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801eb88:	f8cd 9004 	str.w	r9, [sp, #4]
 801eb8c:	464b      	mov	r3, r9
 801eb8e:	e7c6      	b.n	801eb1e <_dtoa_r+0x266>
 801eb90:	3101      	adds	r1, #1
 801eb92:	6041      	str	r1, [r0, #4]
 801eb94:	0052      	lsls	r2, r2, #1
 801eb96:	e7c6      	b.n	801eb26 <_dtoa_r+0x26e>
 801eb98:	636f4361 	.word	0x636f4361
 801eb9c:	3fd287a7 	.word	0x3fd287a7
 801eba0:	8b60c8b3 	.word	0x8b60c8b3
 801eba4:	3fc68a28 	.word	0x3fc68a28
 801eba8:	509f79fb 	.word	0x509f79fb
 801ebac:	3fd34413 	.word	0x3fd34413
 801ebb0:	08022ae6 	.word	0x08022ae6
 801ebb4:	08022afd 	.word	0x08022afd
 801ebb8:	7ff00000 	.word	0x7ff00000
 801ebbc:	08022ae2 	.word	0x08022ae2
 801ebc0:	08022ad9 	.word	0x08022ad9
 801ebc4:	08022959 	.word	0x08022959
 801ebc8:	3ff80000 	.word	0x3ff80000
 801ebcc:	08022c78 	.word	0x08022c78
 801ebd0:	08022b5c 	.word	0x08022b5c
 801ebd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ebd6:	9a00      	ldr	r2, [sp, #0]
 801ebd8:	601a      	str	r2, [r3, #0]
 801ebda:	9b01      	ldr	r3, [sp, #4]
 801ebdc:	2b0e      	cmp	r3, #14
 801ebde:	f200 80ad 	bhi.w	801ed3c <_dtoa_r+0x484>
 801ebe2:	2d00      	cmp	r5, #0
 801ebe4:	f000 80aa 	beq.w	801ed3c <_dtoa_r+0x484>
 801ebe8:	f1ba 0f00 	cmp.w	sl, #0
 801ebec:	dd36      	ble.n	801ec5c <_dtoa_r+0x3a4>
 801ebee:	4ac3      	ldr	r2, [pc, #780]	; (801eefc <_dtoa_r+0x644>)
 801ebf0:	f00a 030f 	and.w	r3, sl, #15
 801ebf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ebf8:	ed93 7b00 	vldr	d7, [r3]
 801ebfc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ec00:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ec04:	eeb0 8a47 	vmov.f32	s16, s14
 801ec08:	eef0 8a67 	vmov.f32	s17, s15
 801ec0c:	d016      	beq.n	801ec3c <_dtoa_r+0x384>
 801ec0e:	4bbc      	ldr	r3, [pc, #752]	; (801ef00 <_dtoa_r+0x648>)
 801ec10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ec18:	f7e1 fe18 	bl	800084c <__aeabi_ddiv>
 801ec1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec20:	f007 070f 	and.w	r7, r7, #15
 801ec24:	2503      	movs	r5, #3
 801ec26:	4eb6      	ldr	r6, [pc, #728]	; (801ef00 <_dtoa_r+0x648>)
 801ec28:	b957      	cbnz	r7, 801ec40 <_dtoa_r+0x388>
 801ec2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ec2e:	ec53 2b18 	vmov	r2, r3, d8
 801ec32:	f7e1 fe0b 	bl	800084c <__aeabi_ddiv>
 801ec36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec3a:	e029      	b.n	801ec90 <_dtoa_r+0x3d8>
 801ec3c:	2502      	movs	r5, #2
 801ec3e:	e7f2      	b.n	801ec26 <_dtoa_r+0x36e>
 801ec40:	07f9      	lsls	r1, r7, #31
 801ec42:	d508      	bpl.n	801ec56 <_dtoa_r+0x39e>
 801ec44:	ec51 0b18 	vmov	r0, r1, d8
 801ec48:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ec4c:	f7e1 fcd4 	bl	80005f8 <__aeabi_dmul>
 801ec50:	ec41 0b18 	vmov	d8, r0, r1
 801ec54:	3501      	adds	r5, #1
 801ec56:	107f      	asrs	r7, r7, #1
 801ec58:	3608      	adds	r6, #8
 801ec5a:	e7e5      	b.n	801ec28 <_dtoa_r+0x370>
 801ec5c:	f000 80a6 	beq.w	801edac <_dtoa_r+0x4f4>
 801ec60:	f1ca 0600 	rsb	r6, sl, #0
 801ec64:	4ba5      	ldr	r3, [pc, #660]	; (801eefc <_dtoa_r+0x644>)
 801ec66:	4fa6      	ldr	r7, [pc, #664]	; (801ef00 <_dtoa_r+0x648>)
 801ec68:	f006 020f 	and.w	r2, r6, #15
 801ec6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ec70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ec78:	f7e1 fcbe 	bl	80005f8 <__aeabi_dmul>
 801ec7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ec80:	1136      	asrs	r6, r6, #4
 801ec82:	2300      	movs	r3, #0
 801ec84:	2502      	movs	r5, #2
 801ec86:	2e00      	cmp	r6, #0
 801ec88:	f040 8085 	bne.w	801ed96 <_dtoa_r+0x4de>
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d1d2      	bne.n	801ec36 <_dtoa_r+0x37e>
 801ec90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	f000 808c 	beq.w	801edb0 <_dtoa_r+0x4f8>
 801ec98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ec9c:	4b99      	ldr	r3, [pc, #612]	; (801ef04 <_dtoa_r+0x64c>)
 801ec9e:	2200      	movs	r2, #0
 801eca0:	4630      	mov	r0, r6
 801eca2:	4639      	mov	r1, r7
 801eca4:	f7e1 ff1a 	bl	8000adc <__aeabi_dcmplt>
 801eca8:	2800      	cmp	r0, #0
 801ecaa:	f000 8081 	beq.w	801edb0 <_dtoa_r+0x4f8>
 801ecae:	9b01      	ldr	r3, [sp, #4]
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	d07d      	beq.n	801edb0 <_dtoa_r+0x4f8>
 801ecb4:	f1b9 0f00 	cmp.w	r9, #0
 801ecb8:	dd3c      	ble.n	801ed34 <_dtoa_r+0x47c>
 801ecba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801ecbe:	9307      	str	r3, [sp, #28]
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	4b91      	ldr	r3, [pc, #580]	; (801ef08 <_dtoa_r+0x650>)
 801ecc4:	4630      	mov	r0, r6
 801ecc6:	4639      	mov	r1, r7
 801ecc8:	f7e1 fc96 	bl	80005f8 <__aeabi_dmul>
 801eccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecd0:	3501      	adds	r5, #1
 801ecd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ecd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ecda:	4628      	mov	r0, r5
 801ecdc:	f7e1 fc22 	bl	8000524 <__aeabi_i2d>
 801ece0:	4632      	mov	r2, r6
 801ece2:	463b      	mov	r3, r7
 801ece4:	f7e1 fc88 	bl	80005f8 <__aeabi_dmul>
 801ece8:	4b88      	ldr	r3, [pc, #544]	; (801ef0c <_dtoa_r+0x654>)
 801ecea:	2200      	movs	r2, #0
 801ecec:	f7e1 face 	bl	800028c <__adddf3>
 801ecf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ecf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ecf8:	9303      	str	r3, [sp, #12]
 801ecfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d15c      	bne.n	801edba <_dtoa_r+0x502>
 801ed00:	4b83      	ldr	r3, [pc, #524]	; (801ef10 <_dtoa_r+0x658>)
 801ed02:	2200      	movs	r2, #0
 801ed04:	4630      	mov	r0, r6
 801ed06:	4639      	mov	r1, r7
 801ed08:	f7e1 fabe 	bl	8000288 <__aeabi_dsub>
 801ed0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed10:	4606      	mov	r6, r0
 801ed12:	460f      	mov	r7, r1
 801ed14:	f7e1 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 801ed18:	2800      	cmp	r0, #0
 801ed1a:	f040 8296 	bne.w	801f24a <_dtoa_r+0x992>
 801ed1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801ed22:	4630      	mov	r0, r6
 801ed24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed28:	4639      	mov	r1, r7
 801ed2a:	f7e1 fed7 	bl	8000adc <__aeabi_dcmplt>
 801ed2e:	2800      	cmp	r0, #0
 801ed30:	f040 8288 	bne.w	801f244 <_dtoa_r+0x98c>
 801ed34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ed38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	f2c0 8158 	blt.w	801eff4 <_dtoa_r+0x73c>
 801ed44:	f1ba 0f0e 	cmp.w	sl, #14
 801ed48:	f300 8154 	bgt.w	801eff4 <_dtoa_r+0x73c>
 801ed4c:	4b6b      	ldr	r3, [pc, #428]	; (801eefc <_dtoa_r+0x644>)
 801ed4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801ed52:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ed56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	f280 80e3 	bge.w	801ef24 <_dtoa_r+0x66c>
 801ed5e:	9b01      	ldr	r3, [sp, #4]
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	f300 80df 	bgt.w	801ef24 <_dtoa_r+0x66c>
 801ed66:	f040 826d 	bne.w	801f244 <_dtoa_r+0x98c>
 801ed6a:	4b69      	ldr	r3, [pc, #420]	; (801ef10 <_dtoa_r+0x658>)
 801ed6c:	2200      	movs	r2, #0
 801ed6e:	4640      	mov	r0, r8
 801ed70:	4649      	mov	r1, r9
 801ed72:	f7e1 fc41 	bl	80005f8 <__aeabi_dmul>
 801ed76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed7a:	f7e1 fec3 	bl	8000b04 <__aeabi_dcmpge>
 801ed7e:	9e01      	ldr	r6, [sp, #4]
 801ed80:	4637      	mov	r7, r6
 801ed82:	2800      	cmp	r0, #0
 801ed84:	f040 8243 	bne.w	801f20e <_dtoa_r+0x956>
 801ed88:	9d00      	ldr	r5, [sp, #0]
 801ed8a:	2331      	movs	r3, #49	; 0x31
 801ed8c:	f805 3b01 	strb.w	r3, [r5], #1
 801ed90:	f10a 0a01 	add.w	sl, sl, #1
 801ed94:	e23f      	b.n	801f216 <_dtoa_r+0x95e>
 801ed96:	07f2      	lsls	r2, r6, #31
 801ed98:	d505      	bpl.n	801eda6 <_dtoa_r+0x4ee>
 801ed9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed9e:	f7e1 fc2b 	bl	80005f8 <__aeabi_dmul>
 801eda2:	3501      	adds	r5, #1
 801eda4:	2301      	movs	r3, #1
 801eda6:	1076      	asrs	r6, r6, #1
 801eda8:	3708      	adds	r7, #8
 801edaa:	e76c      	b.n	801ec86 <_dtoa_r+0x3ce>
 801edac:	2502      	movs	r5, #2
 801edae:	e76f      	b.n	801ec90 <_dtoa_r+0x3d8>
 801edb0:	9b01      	ldr	r3, [sp, #4]
 801edb2:	f8cd a01c 	str.w	sl, [sp, #28]
 801edb6:	930c      	str	r3, [sp, #48]	; 0x30
 801edb8:	e78d      	b.n	801ecd6 <_dtoa_r+0x41e>
 801edba:	9900      	ldr	r1, [sp, #0]
 801edbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801edbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801edc0:	4b4e      	ldr	r3, [pc, #312]	; (801eefc <_dtoa_r+0x644>)
 801edc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801edc6:	4401      	add	r1, r0
 801edc8:	9102      	str	r1, [sp, #8]
 801edca:	9908      	ldr	r1, [sp, #32]
 801edcc:	eeb0 8a47 	vmov.f32	s16, s14
 801edd0:	eef0 8a67 	vmov.f32	s17, s15
 801edd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801edd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801eddc:	2900      	cmp	r1, #0
 801edde:	d045      	beq.n	801ee6c <_dtoa_r+0x5b4>
 801ede0:	494c      	ldr	r1, [pc, #304]	; (801ef14 <_dtoa_r+0x65c>)
 801ede2:	2000      	movs	r0, #0
 801ede4:	f7e1 fd32 	bl	800084c <__aeabi_ddiv>
 801ede8:	ec53 2b18 	vmov	r2, r3, d8
 801edec:	f7e1 fa4c 	bl	8000288 <__aeabi_dsub>
 801edf0:	9d00      	ldr	r5, [sp, #0]
 801edf2:	ec41 0b18 	vmov	d8, r0, r1
 801edf6:	4639      	mov	r1, r7
 801edf8:	4630      	mov	r0, r6
 801edfa:	f7e1 fead 	bl	8000b58 <__aeabi_d2iz>
 801edfe:	900c      	str	r0, [sp, #48]	; 0x30
 801ee00:	f7e1 fb90 	bl	8000524 <__aeabi_i2d>
 801ee04:	4602      	mov	r2, r0
 801ee06:	460b      	mov	r3, r1
 801ee08:	4630      	mov	r0, r6
 801ee0a:	4639      	mov	r1, r7
 801ee0c:	f7e1 fa3c 	bl	8000288 <__aeabi_dsub>
 801ee10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ee12:	3330      	adds	r3, #48	; 0x30
 801ee14:	f805 3b01 	strb.w	r3, [r5], #1
 801ee18:	ec53 2b18 	vmov	r2, r3, d8
 801ee1c:	4606      	mov	r6, r0
 801ee1e:	460f      	mov	r7, r1
 801ee20:	f7e1 fe5c 	bl	8000adc <__aeabi_dcmplt>
 801ee24:	2800      	cmp	r0, #0
 801ee26:	d165      	bne.n	801eef4 <_dtoa_r+0x63c>
 801ee28:	4632      	mov	r2, r6
 801ee2a:	463b      	mov	r3, r7
 801ee2c:	4935      	ldr	r1, [pc, #212]	; (801ef04 <_dtoa_r+0x64c>)
 801ee2e:	2000      	movs	r0, #0
 801ee30:	f7e1 fa2a 	bl	8000288 <__aeabi_dsub>
 801ee34:	ec53 2b18 	vmov	r2, r3, d8
 801ee38:	f7e1 fe50 	bl	8000adc <__aeabi_dcmplt>
 801ee3c:	2800      	cmp	r0, #0
 801ee3e:	f040 80b9 	bne.w	801efb4 <_dtoa_r+0x6fc>
 801ee42:	9b02      	ldr	r3, [sp, #8]
 801ee44:	429d      	cmp	r5, r3
 801ee46:	f43f af75 	beq.w	801ed34 <_dtoa_r+0x47c>
 801ee4a:	4b2f      	ldr	r3, [pc, #188]	; (801ef08 <_dtoa_r+0x650>)
 801ee4c:	ec51 0b18 	vmov	r0, r1, d8
 801ee50:	2200      	movs	r2, #0
 801ee52:	f7e1 fbd1 	bl	80005f8 <__aeabi_dmul>
 801ee56:	4b2c      	ldr	r3, [pc, #176]	; (801ef08 <_dtoa_r+0x650>)
 801ee58:	ec41 0b18 	vmov	d8, r0, r1
 801ee5c:	2200      	movs	r2, #0
 801ee5e:	4630      	mov	r0, r6
 801ee60:	4639      	mov	r1, r7
 801ee62:	f7e1 fbc9 	bl	80005f8 <__aeabi_dmul>
 801ee66:	4606      	mov	r6, r0
 801ee68:	460f      	mov	r7, r1
 801ee6a:	e7c4      	b.n	801edf6 <_dtoa_r+0x53e>
 801ee6c:	ec51 0b17 	vmov	r0, r1, d7
 801ee70:	f7e1 fbc2 	bl	80005f8 <__aeabi_dmul>
 801ee74:	9b02      	ldr	r3, [sp, #8]
 801ee76:	9d00      	ldr	r5, [sp, #0]
 801ee78:	930c      	str	r3, [sp, #48]	; 0x30
 801ee7a:	ec41 0b18 	vmov	d8, r0, r1
 801ee7e:	4639      	mov	r1, r7
 801ee80:	4630      	mov	r0, r6
 801ee82:	f7e1 fe69 	bl	8000b58 <__aeabi_d2iz>
 801ee86:	9011      	str	r0, [sp, #68]	; 0x44
 801ee88:	f7e1 fb4c 	bl	8000524 <__aeabi_i2d>
 801ee8c:	4602      	mov	r2, r0
 801ee8e:	460b      	mov	r3, r1
 801ee90:	4630      	mov	r0, r6
 801ee92:	4639      	mov	r1, r7
 801ee94:	f7e1 f9f8 	bl	8000288 <__aeabi_dsub>
 801ee98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ee9a:	3330      	adds	r3, #48	; 0x30
 801ee9c:	f805 3b01 	strb.w	r3, [r5], #1
 801eea0:	9b02      	ldr	r3, [sp, #8]
 801eea2:	429d      	cmp	r5, r3
 801eea4:	4606      	mov	r6, r0
 801eea6:	460f      	mov	r7, r1
 801eea8:	f04f 0200 	mov.w	r2, #0
 801eeac:	d134      	bne.n	801ef18 <_dtoa_r+0x660>
 801eeae:	4b19      	ldr	r3, [pc, #100]	; (801ef14 <_dtoa_r+0x65c>)
 801eeb0:	ec51 0b18 	vmov	r0, r1, d8
 801eeb4:	f7e1 f9ea 	bl	800028c <__adddf3>
 801eeb8:	4602      	mov	r2, r0
 801eeba:	460b      	mov	r3, r1
 801eebc:	4630      	mov	r0, r6
 801eebe:	4639      	mov	r1, r7
 801eec0:	f7e1 fe2a 	bl	8000b18 <__aeabi_dcmpgt>
 801eec4:	2800      	cmp	r0, #0
 801eec6:	d175      	bne.n	801efb4 <_dtoa_r+0x6fc>
 801eec8:	ec53 2b18 	vmov	r2, r3, d8
 801eecc:	4911      	ldr	r1, [pc, #68]	; (801ef14 <_dtoa_r+0x65c>)
 801eece:	2000      	movs	r0, #0
 801eed0:	f7e1 f9da 	bl	8000288 <__aeabi_dsub>
 801eed4:	4602      	mov	r2, r0
 801eed6:	460b      	mov	r3, r1
 801eed8:	4630      	mov	r0, r6
 801eeda:	4639      	mov	r1, r7
 801eedc:	f7e1 fdfe 	bl	8000adc <__aeabi_dcmplt>
 801eee0:	2800      	cmp	r0, #0
 801eee2:	f43f af27 	beq.w	801ed34 <_dtoa_r+0x47c>
 801eee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801eee8:	1e6b      	subs	r3, r5, #1
 801eeea:	930c      	str	r3, [sp, #48]	; 0x30
 801eeec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801eef0:	2b30      	cmp	r3, #48	; 0x30
 801eef2:	d0f8      	beq.n	801eee6 <_dtoa_r+0x62e>
 801eef4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801eef8:	e04a      	b.n	801ef90 <_dtoa_r+0x6d8>
 801eefa:	bf00      	nop
 801eefc:	08022c78 	.word	0x08022c78
 801ef00:	08022c50 	.word	0x08022c50
 801ef04:	3ff00000 	.word	0x3ff00000
 801ef08:	40240000 	.word	0x40240000
 801ef0c:	401c0000 	.word	0x401c0000
 801ef10:	40140000 	.word	0x40140000
 801ef14:	3fe00000 	.word	0x3fe00000
 801ef18:	4baf      	ldr	r3, [pc, #700]	; (801f1d8 <_dtoa_r+0x920>)
 801ef1a:	f7e1 fb6d 	bl	80005f8 <__aeabi_dmul>
 801ef1e:	4606      	mov	r6, r0
 801ef20:	460f      	mov	r7, r1
 801ef22:	e7ac      	b.n	801ee7e <_dtoa_r+0x5c6>
 801ef24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ef28:	9d00      	ldr	r5, [sp, #0]
 801ef2a:	4642      	mov	r2, r8
 801ef2c:	464b      	mov	r3, r9
 801ef2e:	4630      	mov	r0, r6
 801ef30:	4639      	mov	r1, r7
 801ef32:	f7e1 fc8b 	bl	800084c <__aeabi_ddiv>
 801ef36:	f7e1 fe0f 	bl	8000b58 <__aeabi_d2iz>
 801ef3a:	9002      	str	r0, [sp, #8]
 801ef3c:	f7e1 faf2 	bl	8000524 <__aeabi_i2d>
 801ef40:	4642      	mov	r2, r8
 801ef42:	464b      	mov	r3, r9
 801ef44:	f7e1 fb58 	bl	80005f8 <__aeabi_dmul>
 801ef48:	4602      	mov	r2, r0
 801ef4a:	460b      	mov	r3, r1
 801ef4c:	4630      	mov	r0, r6
 801ef4e:	4639      	mov	r1, r7
 801ef50:	f7e1 f99a 	bl	8000288 <__aeabi_dsub>
 801ef54:	9e02      	ldr	r6, [sp, #8]
 801ef56:	9f01      	ldr	r7, [sp, #4]
 801ef58:	3630      	adds	r6, #48	; 0x30
 801ef5a:	f805 6b01 	strb.w	r6, [r5], #1
 801ef5e:	9e00      	ldr	r6, [sp, #0]
 801ef60:	1bae      	subs	r6, r5, r6
 801ef62:	42b7      	cmp	r7, r6
 801ef64:	4602      	mov	r2, r0
 801ef66:	460b      	mov	r3, r1
 801ef68:	d137      	bne.n	801efda <_dtoa_r+0x722>
 801ef6a:	f7e1 f98f 	bl	800028c <__adddf3>
 801ef6e:	4642      	mov	r2, r8
 801ef70:	464b      	mov	r3, r9
 801ef72:	4606      	mov	r6, r0
 801ef74:	460f      	mov	r7, r1
 801ef76:	f7e1 fdcf 	bl	8000b18 <__aeabi_dcmpgt>
 801ef7a:	b9c8      	cbnz	r0, 801efb0 <_dtoa_r+0x6f8>
 801ef7c:	4642      	mov	r2, r8
 801ef7e:	464b      	mov	r3, r9
 801ef80:	4630      	mov	r0, r6
 801ef82:	4639      	mov	r1, r7
 801ef84:	f7e1 fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 801ef88:	b110      	cbz	r0, 801ef90 <_dtoa_r+0x6d8>
 801ef8a:	9b02      	ldr	r3, [sp, #8]
 801ef8c:	07d9      	lsls	r1, r3, #31
 801ef8e:	d40f      	bmi.n	801efb0 <_dtoa_r+0x6f8>
 801ef90:	4620      	mov	r0, r4
 801ef92:	4659      	mov	r1, fp
 801ef94:	f000 fe60 	bl	801fc58 <_Bfree>
 801ef98:	2300      	movs	r3, #0
 801ef9a:	702b      	strb	r3, [r5, #0]
 801ef9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ef9e:	f10a 0001 	add.w	r0, sl, #1
 801efa2:	6018      	str	r0, [r3, #0]
 801efa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	f43f acd8 	beq.w	801e95c <_dtoa_r+0xa4>
 801efac:	601d      	str	r5, [r3, #0]
 801efae:	e4d5      	b.n	801e95c <_dtoa_r+0xa4>
 801efb0:	f8cd a01c 	str.w	sl, [sp, #28]
 801efb4:	462b      	mov	r3, r5
 801efb6:	461d      	mov	r5, r3
 801efb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801efbc:	2a39      	cmp	r2, #57	; 0x39
 801efbe:	d108      	bne.n	801efd2 <_dtoa_r+0x71a>
 801efc0:	9a00      	ldr	r2, [sp, #0]
 801efc2:	429a      	cmp	r2, r3
 801efc4:	d1f7      	bne.n	801efb6 <_dtoa_r+0x6fe>
 801efc6:	9a07      	ldr	r2, [sp, #28]
 801efc8:	9900      	ldr	r1, [sp, #0]
 801efca:	3201      	adds	r2, #1
 801efcc:	9207      	str	r2, [sp, #28]
 801efce:	2230      	movs	r2, #48	; 0x30
 801efd0:	700a      	strb	r2, [r1, #0]
 801efd2:	781a      	ldrb	r2, [r3, #0]
 801efd4:	3201      	adds	r2, #1
 801efd6:	701a      	strb	r2, [r3, #0]
 801efd8:	e78c      	b.n	801eef4 <_dtoa_r+0x63c>
 801efda:	4b7f      	ldr	r3, [pc, #508]	; (801f1d8 <_dtoa_r+0x920>)
 801efdc:	2200      	movs	r2, #0
 801efde:	f7e1 fb0b 	bl	80005f8 <__aeabi_dmul>
 801efe2:	2200      	movs	r2, #0
 801efe4:	2300      	movs	r3, #0
 801efe6:	4606      	mov	r6, r0
 801efe8:	460f      	mov	r7, r1
 801efea:	f7e1 fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 801efee:	2800      	cmp	r0, #0
 801eff0:	d09b      	beq.n	801ef2a <_dtoa_r+0x672>
 801eff2:	e7cd      	b.n	801ef90 <_dtoa_r+0x6d8>
 801eff4:	9a08      	ldr	r2, [sp, #32]
 801eff6:	2a00      	cmp	r2, #0
 801eff8:	f000 80c4 	beq.w	801f184 <_dtoa_r+0x8cc>
 801effc:	9a05      	ldr	r2, [sp, #20]
 801effe:	2a01      	cmp	r2, #1
 801f000:	f300 80a8 	bgt.w	801f154 <_dtoa_r+0x89c>
 801f004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f006:	2a00      	cmp	r2, #0
 801f008:	f000 80a0 	beq.w	801f14c <_dtoa_r+0x894>
 801f00c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801f010:	9e06      	ldr	r6, [sp, #24]
 801f012:	4645      	mov	r5, r8
 801f014:	9a04      	ldr	r2, [sp, #16]
 801f016:	2101      	movs	r1, #1
 801f018:	441a      	add	r2, r3
 801f01a:	4620      	mov	r0, r4
 801f01c:	4498      	add	r8, r3
 801f01e:	9204      	str	r2, [sp, #16]
 801f020:	f000 ff20 	bl	801fe64 <__i2b>
 801f024:	4607      	mov	r7, r0
 801f026:	2d00      	cmp	r5, #0
 801f028:	dd0b      	ble.n	801f042 <_dtoa_r+0x78a>
 801f02a:	9b04      	ldr	r3, [sp, #16]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	dd08      	ble.n	801f042 <_dtoa_r+0x78a>
 801f030:	42ab      	cmp	r3, r5
 801f032:	9a04      	ldr	r2, [sp, #16]
 801f034:	bfa8      	it	ge
 801f036:	462b      	movge	r3, r5
 801f038:	eba8 0803 	sub.w	r8, r8, r3
 801f03c:	1aed      	subs	r5, r5, r3
 801f03e:	1ad3      	subs	r3, r2, r3
 801f040:	9304      	str	r3, [sp, #16]
 801f042:	9b06      	ldr	r3, [sp, #24]
 801f044:	b1fb      	cbz	r3, 801f086 <_dtoa_r+0x7ce>
 801f046:	9b08      	ldr	r3, [sp, #32]
 801f048:	2b00      	cmp	r3, #0
 801f04a:	f000 809f 	beq.w	801f18c <_dtoa_r+0x8d4>
 801f04e:	2e00      	cmp	r6, #0
 801f050:	dd11      	ble.n	801f076 <_dtoa_r+0x7be>
 801f052:	4639      	mov	r1, r7
 801f054:	4632      	mov	r2, r6
 801f056:	4620      	mov	r0, r4
 801f058:	f000 ffc0 	bl	801ffdc <__pow5mult>
 801f05c:	465a      	mov	r2, fp
 801f05e:	4601      	mov	r1, r0
 801f060:	4607      	mov	r7, r0
 801f062:	4620      	mov	r0, r4
 801f064:	f000 ff14 	bl	801fe90 <__multiply>
 801f068:	4659      	mov	r1, fp
 801f06a:	9007      	str	r0, [sp, #28]
 801f06c:	4620      	mov	r0, r4
 801f06e:	f000 fdf3 	bl	801fc58 <_Bfree>
 801f072:	9b07      	ldr	r3, [sp, #28]
 801f074:	469b      	mov	fp, r3
 801f076:	9b06      	ldr	r3, [sp, #24]
 801f078:	1b9a      	subs	r2, r3, r6
 801f07a:	d004      	beq.n	801f086 <_dtoa_r+0x7ce>
 801f07c:	4659      	mov	r1, fp
 801f07e:	4620      	mov	r0, r4
 801f080:	f000 ffac 	bl	801ffdc <__pow5mult>
 801f084:	4683      	mov	fp, r0
 801f086:	2101      	movs	r1, #1
 801f088:	4620      	mov	r0, r4
 801f08a:	f000 feeb 	bl	801fe64 <__i2b>
 801f08e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f090:	2b00      	cmp	r3, #0
 801f092:	4606      	mov	r6, r0
 801f094:	dd7c      	ble.n	801f190 <_dtoa_r+0x8d8>
 801f096:	461a      	mov	r2, r3
 801f098:	4601      	mov	r1, r0
 801f09a:	4620      	mov	r0, r4
 801f09c:	f000 ff9e 	bl	801ffdc <__pow5mult>
 801f0a0:	9b05      	ldr	r3, [sp, #20]
 801f0a2:	2b01      	cmp	r3, #1
 801f0a4:	4606      	mov	r6, r0
 801f0a6:	dd76      	ble.n	801f196 <_dtoa_r+0x8de>
 801f0a8:	2300      	movs	r3, #0
 801f0aa:	9306      	str	r3, [sp, #24]
 801f0ac:	6933      	ldr	r3, [r6, #16]
 801f0ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801f0b2:	6918      	ldr	r0, [r3, #16]
 801f0b4:	f000 fe86 	bl	801fdc4 <__hi0bits>
 801f0b8:	f1c0 0020 	rsb	r0, r0, #32
 801f0bc:	9b04      	ldr	r3, [sp, #16]
 801f0be:	4418      	add	r0, r3
 801f0c0:	f010 001f 	ands.w	r0, r0, #31
 801f0c4:	f000 8086 	beq.w	801f1d4 <_dtoa_r+0x91c>
 801f0c8:	f1c0 0320 	rsb	r3, r0, #32
 801f0cc:	2b04      	cmp	r3, #4
 801f0ce:	dd7f      	ble.n	801f1d0 <_dtoa_r+0x918>
 801f0d0:	f1c0 001c 	rsb	r0, r0, #28
 801f0d4:	9b04      	ldr	r3, [sp, #16]
 801f0d6:	4403      	add	r3, r0
 801f0d8:	4480      	add	r8, r0
 801f0da:	4405      	add	r5, r0
 801f0dc:	9304      	str	r3, [sp, #16]
 801f0de:	f1b8 0f00 	cmp.w	r8, #0
 801f0e2:	dd05      	ble.n	801f0f0 <_dtoa_r+0x838>
 801f0e4:	4659      	mov	r1, fp
 801f0e6:	4642      	mov	r2, r8
 801f0e8:	4620      	mov	r0, r4
 801f0ea:	f000 ffd1 	bl	8020090 <__lshift>
 801f0ee:	4683      	mov	fp, r0
 801f0f0:	9b04      	ldr	r3, [sp, #16]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	dd05      	ble.n	801f102 <_dtoa_r+0x84a>
 801f0f6:	4631      	mov	r1, r6
 801f0f8:	461a      	mov	r2, r3
 801f0fa:	4620      	mov	r0, r4
 801f0fc:	f000 ffc8 	bl	8020090 <__lshift>
 801f100:	4606      	mov	r6, r0
 801f102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f104:	2b00      	cmp	r3, #0
 801f106:	d069      	beq.n	801f1dc <_dtoa_r+0x924>
 801f108:	4631      	mov	r1, r6
 801f10a:	4658      	mov	r0, fp
 801f10c:	f001 f82c 	bl	8020168 <__mcmp>
 801f110:	2800      	cmp	r0, #0
 801f112:	da63      	bge.n	801f1dc <_dtoa_r+0x924>
 801f114:	2300      	movs	r3, #0
 801f116:	4659      	mov	r1, fp
 801f118:	220a      	movs	r2, #10
 801f11a:	4620      	mov	r0, r4
 801f11c:	f000 fdbe 	bl	801fc9c <__multadd>
 801f120:	9b08      	ldr	r3, [sp, #32]
 801f122:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801f126:	4683      	mov	fp, r0
 801f128:	2b00      	cmp	r3, #0
 801f12a:	f000 818f 	beq.w	801f44c <_dtoa_r+0xb94>
 801f12e:	4639      	mov	r1, r7
 801f130:	2300      	movs	r3, #0
 801f132:	220a      	movs	r2, #10
 801f134:	4620      	mov	r0, r4
 801f136:	f000 fdb1 	bl	801fc9c <__multadd>
 801f13a:	f1b9 0f00 	cmp.w	r9, #0
 801f13e:	4607      	mov	r7, r0
 801f140:	f300 808e 	bgt.w	801f260 <_dtoa_r+0x9a8>
 801f144:	9b05      	ldr	r3, [sp, #20]
 801f146:	2b02      	cmp	r3, #2
 801f148:	dc50      	bgt.n	801f1ec <_dtoa_r+0x934>
 801f14a:	e089      	b.n	801f260 <_dtoa_r+0x9a8>
 801f14c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f14e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801f152:	e75d      	b.n	801f010 <_dtoa_r+0x758>
 801f154:	9b01      	ldr	r3, [sp, #4]
 801f156:	1e5e      	subs	r6, r3, #1
 801f158:	9b06      	ldr	r3, [sp, #24]
 801f15a:	42b3      	cmp	r3, r6
 801f15c:	bfbf      	itttt	lt
 801f15e:	9b06      	ldrlt	r3, [sp, #24]
 801f160:	9606      	strlt	r6, [sp, #24]
 801f162:	1af2      	sublt	r2, r6, r3
 801f164:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801f166:	bfb6      	itet	lt
 801f168:	189b      	addlt	r3, r3, r2
 801f16a:	1b9e      	subge	r6, r3, r6
 801f16c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801f16e:	9b01      	ldr	r3, [sp, #4]
 801f170:	bfb8      	it	lt
 801f172:	2600      	movlt	r6, #0
 801f174:	2b00      	cmp	r3, #0
 801f176:	bfb5      	itete	lt
 801f178:	eba8 0503 	sublt.w	r5, r8, r3
 801f17c:	9b01      	ldrge	r3, [sp, #4]
 801f17e:	2300      	movlt	r3, #0
 801f180:	4645      	movge	r5, r8
 801f182:	e747      	b.n	801f014 <_dtoa_r+0x75c>
 801f184:	9e06      	ldr	r6, [sp, #24]
 801f186:	9f08      	ldr	r7, [sp, #32]
 801f188:	4645      	mov	r5, r8
 801f18a:	e74c      	b.n	801f026 <_dtoa_r+0x76e>
 801f18c:	9a06      	ldr	r2, [sp, #24]
 801f18e:	e775      	b.n	801f07c <_dtoa_r+0x7c4>
 801f190:	9b05      	ldr	r3, [sp, #20]
 801f192:	2b01      	cmp	r3, #1
 801f194:	dc18      	bgt.n	801f1c8 <_dtoa_r+0x910>
 801f196:	9b02      	ldr	r3, [sp, #8]
 801f198:	b9b3      	cbnz	r3, 801f1c8 <_dtoa_r+0x910>
 801f19a:	9b03      	ldr	r3, [sp, #12]
 801f19c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f1a0:	b9a3      	cbnz	r3, 801f1cc <_dtoa_r+0x914>
 801f1a2:	9b03      	ldr	r3, [sp, #12]
 801f1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1a8:	0d1b      	lsrs	r3, r3, #20
 801f1aa:	051b      	lsls	r3, r3, #20
 801f1ac:	b12b      	cbz	r3, 801f1ba <_dtoa_r+0x902>
 801f1ae:	9b04      	ldr	r3, [sp, #16]
 801f1b0:	3301      	adds	r3, #1
 801f1b2:	9304      	str	r3, [sp, #16]
 801f1b4:	f108 0801 	add.w	r8, r8, #1
 801f1b8:	2301      	movs	r3, #1
 801f1ba:	9306      	str	r3, [sp, #24]
 801f1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	f47f af74 	bne.w	801f0ac <_dtoa_r+0x7f4>
 801f1c4:	2001      	movs	r0, #1
 801f1c6:	e779      	b.n	801f0bc <_dtoa_r+0x804>
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	e7f6      	b.n	801f1ba <_dtoa_r+0x902>
 801f1cc:	9b02      	ldr	r3, [sp, #8]
 801f1ce:	e7f4      	b.n	801f1ba <_dtoa_r+0x902>
 801f1d0:	d085      	beq.n	801f0de <_dtoa_r+0x826>
 801f1d2:	4618      	mov	r0, r3
 801f1d4:	301c      	adds	r0, #28
 801f1d6:	e77d      	b.n	801f0d4 <_dtoa_r+0x81c>
 801f1d8:	40240000 	.word	0x40240000
 801f1dc:	9b01      	ldr	r3, [sp, #4]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	dc38      	bgt.n	801f254 <_dtoa_r+0x99c>
 801f1e2:	9b05      	ldr	r3, [sp, #20]
 801f1e4:	2b02      	cmp	r3, #2
 801f1e6:	dd35      	ble.n	801f254 <_dtoa_r+0x99c>
 801f1e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f1ec:	f1b9 0f00 	cmp.w	r9, #0
 801f1f0:	d10d      	bne.n	801f20e <_dtoa_r+0x956>
 801f1f2:	4631      	mov	r1, r6
 801f1f4:	464b      	mov	r3, r9
 801f1f6:	2205      	movs	r2, #5
 801f1f8:	4620      	mov	r0, r4
 801f1fa:	f000 fd4f 	bl	801fc9c <__multadd>
 801f1fe:	4601      	mov	r1, r0
 801f200:	4606      	mov	r6, r0
 801f202:	4658      	mov	r0, fp
 801f204:	f000 ffb0 	bl	8020168 <__mcmp>
 801f208:	2800      	cmp	r0, #0
 801f20a:	f73f adbd 	bgt.w	801ed88 <_dtoa_r+0x4d0>
 801f20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f210:	9d00      	ldr	r5, [sp, #0]
 801f212:	ea6f 0a03 	mvn.w	sl, r3
 801f216:	f04f 0800 	mov.w	r8, #0
 801f21a:	4631      	mov	r1, r6
 801f21c:	4620      	mov	r0, r4
 801f21e:	f000 fd1b 	bl	801fc58 <_Bfree>
 801f222:	2f00      	cmp	r7, #0
 801f224:	f43f aeb4 	beq.w	801ef90 <_dtoa_r+0x6d8>
 801f228:	f1b8 0f00 	cmp.w	r8, #0
 801f22c:	d005      	beq.n	801f23a <_dtoa_r+0x982>
 801f22e:	45b8      	cmp	r8, r7
 801f230:	d003      	beq.n	801f23a <_dtoa_r+0x982>
 801f232:	4641      	mov	r1, r8
 801f234:	4620      	mov	r0, r4
 801f236:	f000 fd0f 	bl	801fc58 <_Bfree>
 801f23a:	4639      	mov	r1, r7
 801f23c:	4620      	mov	r0, r4
 801f23e:	f000 fd0b 	bl	801fc58 <_Bfree>
 801f242:	e6a5      	b.n	801ef90 <_dtoa_r+0x6d8>
 801f244:	2600      	movs	r6, #0
 801f246:	4637      	mov	r7, r6
 801f248:	e7e1      	b.n	801f20e <_dtoa_r+0x956>
 801f24a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801f24c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801f250:	4637      	mov	r7, r6
 801f252:	e599      	b.n	801ed88 <_dtoa_r+0x4d0>
 801f254:	9b08      	ldr	r3, [sp, #32]
 801f256:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	f000 80fd 	beq.w	801f45a <_dtoa_r+0xba2>
 801f260:	2d00      	cmp	r5, #0
 801f262:	dd05      	ble.n	801f270 <_dtoa_r+0x9b8>
 801f264:	4639      	mov	r1, r7
 801f266:	462a      	mov	r2, r5
 801f268:	4620      	mov	r0, r4
 801f26a:	f000 ff11 	bl	8020090 <__lshift>
 801f26e:	4607      	mov	r7, r0
 801f270:	9b06      	ldr	r3, [sp, #24]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d05c      	beq.n	801f330 <_dtoa_r+0xa78>
 801f276:	6879      	ldr	r1, [r7, #4]
 801f278:	4620      	mov	r0, r4
 801f27a:	f000 fcad 	bl	801fbd8 <_Balloc>
 801f27e:	4605      	mov	r5, r0
 801f280:	b928      	cbnz	r0, 801f28e <_dtoa_r+0x9d6>
 801f282:	4b80      	ldr	r3, [pc, #512]	; (801f484 <_dtoa_r+0xbcc>)
 801f284:	4602      	mov	r2, r0
 801f286:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f28a:	f7ff bb2e 	b.w	801e8ea <_dtoa_r+0x32>
 801f28e:	693a      	ldr	r2, [r7, #16]
 801f290:	3202      	adds	r2, #2
 801f292:	0092      	lsls	r2, r2, #2
 801f294:	f107 010c 	add.w	r1, r7, #12
 801f298:	300c      	adds	r0, #12
 801f29a:	f7fd fb59 	bl	801c950 <memcpy>
 801f29e:	2201      	movs	r2, #1
 801f2a0:	4629      	mov	r1, r5
 801f2a2:	4620      	mov	r0, r4
 801f2a4:	f000 fef4 	bl	8020090 <__lshift>
 801f2a8:	9b00      	ldr	r3, [sp, #0]
 801f2aa:	3301      	adds	r3, #1
 801f2ac:	9301      	str	r3, [sp, #4]
 801f2ae:	9b00      	ldr	r3, [sp, #0]
 801f2b0:	444b      	add	r3, r9
 801f2b2:	9307      	str	r3, [sp, #28]
 801f2b4:	9b02      	ldr	r3, [sp, #8]
 801f2b6:	f003 0301 	and.w	r3, r3, #1
 801f2ba:	46b8      	mov	r8, r7
 801f2bc:	9306      	str	r3, [sp, #24]
 801f2be:	4607      	mov	r7, r0
 801f2c0:	9b01      	ldr	r3, [sp, #4]
 801f2c2:	4631      	mov	r1, r6
 801f2c4:	3b01      	subs	r3, #1
 801f2c6:	4658      	mov	r0, fp
 801f2c8:	9302      	str	r3, [sp, #8]
 801f2ca:	f7ff fa69 	bl	801e7a0 <quorem>
 801f2ce:	4603      	mov	r3, r0
 801f2d0:	3330      	adds	r3, #48	; 0x30
 801f2d2:	9004      	str	r0, [sp, #16]
 801f2d4:	4641      	mov	r1, r8
 801f2d6:	4658      	mov	r0, fp
 801f2d8:	9308      	str	r3, [sp, #32]
 801f2da:	f000 ff45 	bl	8020168 <__mcmp>
 801f2de:	463a      	mov	r2, r7
 801f2e0:	4681      	mov	r9, r0
 801f2e2:	4631      	mov	r1, r6
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	f000 ff5b 	bl	80201a0 <__mdiff>
 801f2ea:	68c2      	ldr	r2, [r0, #12]
 801f2ec:	9b08      	ldr	r3, [sp, #32]
 801f2ee:	4605      	mov	r5, r0
 801f2f0:	bb02      	cbnz	r2, 801f334 <_dtoa_r+0xa7c>
 801f2f2:	4601      	mov	r1, r0
 801f2f4:	4658      	mov	r0, fp
 801f2f6:	f000 ff37 	bl	8020168 <__mcmp>
 801f2fa:	9b08      	ldr	r3, [sp, #32]
 801f2fc:	4602      	mov	r2, r0
 801f2fe:	4629      	mov	r1, r5
 801f300:	4620      	mov	r0, r4
 801f302:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801f306:	f000 fca7 	bl	801fc58 <_Bfree>
 801f30a:	9b05      	ldr	r3, [sp, #20]
 801f30c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f30e:	9d01      	ldr	r5, [sp, #4]
 801f310:	ea43 0102 	orr.w	r1, r3, r2
 801f314:	9b06      	ldr	r3, [sp, #24]
 801f316:	430b      	orrs	r3, r1
 801f318:	9b08      	ldr	r3, [sp, #32]
 801f31a:	d10d      	bne.n	801f338 <_dtoa_r+0xa80>
 801f31c:	2b39      	cmp	r3, #57	; 0x39
 801f31e:	d029      	beq.n	801f374 <_dtoa_r+0xabc>
 801f320:	f1b9 0f00 	cmp.w	r9, #0
 801f324:	dd01      	ble.n	801f32a <_dtoa_r+0xa72>
 801f326:	9b04      	ldr	r3, [sp, #16]
 801f328:	3331      	adds	r3, #49	; 0x31
 801f32a:	9a02      	ldr	r2, [sp, #8]
 801f32c:	7013      	strb	r3, [r2, #0]
 801f32e:	e774      	b.n	801f21a <_dtoa_r+0x962>
 801f330:	4638      	mov	r0, r7
 801f332:	e7b9      	b.n	801f2a8 <_dtoa_r+0x9f0>
 801f334:	2201      	movs	r2, #1
 801f336:	e7e2      	b.n	801f2fe <_dtoa_r+0xa46>
 801f338:	f1b9 0f00 	cmp.w	r9, #0
 801f33c:	db06      	blt.n	801f34c <_dtoa_r+0xa94>
 801f33e:	9905      	ldr	r1, [sp, #20]
 801f340:	ea41 0909 	orr.w	r9, r1, r9
 801f344:	9906      	ldr	r1, [sp, #24]
 801f346:	ea59 0101 	orrs.w	r1, r9, r1
 801f34a:	d120      	bne.n	801f38e <_dtoa_r+0xad6>
 801f34c:	2a00      	cmp	r2, #0
 801f34e:	ddec      	ble.n	801f32a <_dtoa_r+0xa72>
 801f350:	4659      	mov	r1, fp
 801f352:	2201      	movs	r2, #1
 801f354:	4620      	mov	r0, r4
 801f356:	9301      	str	r3, [sp, #4]
 801f358:	f000 fe9a 	bl	8020090 <__lshift>
 801f35c:	4631      	mov	r1, r6
 801f35e:	4683      	mov	fp, r0
 801f360:	f000 ff02 	bl	8020168 <__mcmp>
 801f364:	2800      	cmp	r0, #0
 801f366:	9b01      	ldr	r3, [sp, #4]
 801f368:	dc02      	bgt.n	801f370 <_dtoa_r+0xab8>
 801f36a:	d1de      	bne.n	801f32a <_dtoa_r+0xa72>
 801f36c:	07da      	lsls	r2, r3, #31
 801f36e:	d5dc      	bpl.n	801f32a <_dtoa_r+0xa72>
 801f370:	2b39      	cmp	r3, #57	; 0x39
 801f372:	d1d8      	bne.n	801f326 <_dtoa_r+0xa6e>
 801f374:	9a02      	ldr	r2, [sp, #8]
 801f376:	2339      	movs	r3, #57	; 0x39
 801f378:	7013      	strb	r3, [r2, #0]
 801f37a:	462b      	mov	r3, r5
 801f37c:	461d      	mov	r5, r3
 801f37e:	3b01      	subs	r3, #1
 801f380:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801f384:	2a39      	cmp	r2, #57	; 0x39
 801f386:	d050      	beq.n	801f42a <_dtoa_r+0xb72>
 801f388:	3201      	adds	r2, #1
 801f38a:	701a      	strb	r2, [r3, #0]
 801f38c:	e745      	b.n	801f21a <_dtoa_r+0x962>
 801f38e:	2a00      	cmp	r2, #0
 801f390:	dd03      	ble.n	801f39a <_dtoa_r+0xae2>
 801f392:	2b39      	cmp	r3, #57	; 0x39
 801f394:	d0ee      	beq.n	801f374 <_dtoa_r+0xabc>
 801f396:	3301      	adds	r3, #1
 801f398:	e7c7      	b.n	801f32a <_dtoa_r+0xa72>
 801f39a:	9a01      	ldr	r2, [sp, #4]
 801f39c:	9907      	ldr	r1, [sp, #28]
 801f39e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f3a2:	428a      	cmp	r2, r1
 801f3a4:	d02a      	beq.n	801f3fc <_dtoa_r+0xb44>
 801f3a6:	4659      	mov	r1, fp
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	220a      	movs	r2, #10
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	f000 fc75 	bl	801fc9c <__multadd>
 801f3b2:	45b8      	cmp	r8, r7
 801f3b4:	4683      	mov	fp, r0
 801f3b6:	f04f 0300 	mov.w	r3, #0
 801f3ba:	f04f 020a 	mov.w	r2, #10
 801f3be:	4641      	mov	r1, r8
 801f3c0:	4620      	mov	r0, r4
 801f3c2:	d107      	bne.n	801f3d4 <_dtoa_r+0xb1c>
 801f3c4:	f000 fc6a 	bl	801fc9c <__multadd>
 801f3c8:	4680      	mov	r8, r0
 801f3ca:	4607      	mov	r7, r0
 801f3cc:	9b01      	ldr	r3, [sp, #4]
 801f3ce:	3301      	adds	r3, #1
 801f3d0:	9301      	str	r3, [sp, #4]
 801f3d2:	e775      	b.n	801f2c0 <_dtoa_r+0xa08>
 801f3d4:	f000 fc62 	bl	801fc9c <__multadd>
 801f3d8:	4639      	mov	r1, r7
 801f3da:	4680      	mov	r8, r0
 801f3dc:	2300      	movs	r3, #0
 801f3de:	220a      	movs	r2, #10
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f000 fc5b 	bl	801fc9c <__multadd>
 801f3e6:	4607      	mov	r7, r0
 801f3e8:	e7f0      	b.n	801f3cc <_dtoa_r+0xb14>
 801f3ea:	f1b9 0f00 	cmp.w	r9, #0
 801f3ee:	9a00      	ldr	r2, [sp, #0]
 801f3f0:	bfcc      	ite	gt
 801f3f2:	464d      	movgt	r5, r9
 801f3f4:	2501      	movle	r5, #1
 801f3f6:	4415      	add	r5, r2
 801f3f8:	f04f 0800 	mov.w	r8, #0
 801f3fc:	4659      	mov	r1, fp
 801f3fe:	2201      	movs	r2, #1
 801f400:	4620      	mov	r0, r4
 801f402:	9301      	str	r3, [sp, #4]
 801f404:	f000 fe44 	bl	8020090 <__lshift>
 801f408:	4631      	mov	r1, r6
 801f40a:	4683      	mov	fp, r0
 801f40c:	f000 feac 	bl	8020168 <__mcmp>
 801f410:	2800      	cmp	r0, #0
 801f412:	dcb2      	bgt.n	801f37a <_dtoa_r+0xac2>
 801f414:	d102      	bne.n	801f41c <_dtoa_r+0xb64>
 801f416:	9b01      	ldr	r3, [sp, #4]
 801f418:	07db      	lsls	r3, r3, #31
 801f41a:	d4ae      	bmi.n	801f37a <_dtoa_r+0xac2>
 801f41c:	462b      	mov	r3, r5
 801f41e:	461d      	mov	r5, r3
 801f420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f424:	2a30      	cmp	r2, #48	; 0x30
 801f426:	d0fa      	beq.n	801f41e <_dtoa_r+0xb66>
 801f428:	e6f7      	b.n	801f21a <_dtoa_r+0x962>
 801f42a:	9a00      	ldr	r2, [sp, #0]
 801f42c:	429a      	cmp	r2, r3
 801f42e:	d1a5      	bne.n	801f37c <_dtoa_r+0xac4>
 801f430:	f10a 0a01 	add.w	sl, sl, #1
 801f434:	2331      	movs	r3, #49	; 0x31
 801f436:	e779      	b.n	801f32c <_dtoa_r+0xa74>
 801f438:	4b13      	ldr	r3, [pc, #76]	; (801f488 <_dtoa_r+0xbd0>)
 801f43a:	f7ff baaf 	b.w	801e99c <_dtoa_r+0xe4>
 801f43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f440:	2b00      	cmp	r3, #0
 801f442:	f47f aa86 	bne.w	801e952 <_dtoa_r+0x9a>
 801f446:	4b11      	ldr	r3, [pc, #68]	; (801f48c <_dtoa_r+0xbd4>)
 801f448:	f7ff baa8 	b.w	801e99c <_dtoa_r+0xe4>
 801f44c:	f1b9 0f00 	cmp.w	r9, #0
 801f450:	dc03      	bgt.n	801f45a <_dtoa_r+0xba2>
 801f452:	9b05      	ldr	r3, [sp, #20]
 801f454:	2b02      	cmp	r3, #2
 801f456:	f73f aec9 	bgt.w	801f1ec <_dtoa_r+0x934>
 801f45a:	9d00      	ldr	r5, [sp, #0]
 801f45c:	4631      	mov	r1, r6
 801f45e:	4658      	mov	r0, fp
 801f460:	f7ff f99e 	bl	801e7a0 <quorem>
 801f464:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f468:	f805 3b01 	strb.w	r3, [r5], #1
 801f46c:	9a00      	ldr	r2, [sp, #0]
 801f46e:	1aaa      	subs	r2, r5, r2
 801f470:	4591      	cmp	r9, r2
 801f472:	ddba      	ble.n	801f3ea <_dtoa_r+0xb32>
 801f474:	4659      	mov	r1, fp
 801f476:	2300      	movs	r3, #0
 801f478:	220a      	movs	r2, #10
 801f47a:	4620      	mov	r0, r4
 801f47c:	f000 fc0e 	bl	801fc9c <__multadd>
 801f480:	4683      	mov	fp, r0
 801f482:	e7eb      	b.n	801f45c <_dtoa_r+0xba4>
 801f484:	08022b5c 	.word	0x08022b5c
 801f488:	08022958 	.word	0x08022958
 801f48c:	08022ad9 	.word	0x08022ad9

0801f490 <rshift>:
 801f490:	6903      	ldr	r3, [r0, #16]
 801f492:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f496:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f49a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f49e:	f100 0414 	add.w	r4, r0, #20
 801f4a2:	dd45      	ble.n	801f530 <rshift+0xa0>
 801f4a4:	f011 011f 	ands.w	r1, r1, #31
 801f4a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f4ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f4b0:	d10c      	bne.n	801f4cc <rshift+0x3c>
 801f4b2:	f100 0710 	add.w	r7, r0, #16
 801f4b6:	4629      	mov	r1, r5
 801f4b8:	42b1      	cmp	r1, r6
 801f4ba:	d334      	bcc.n	801f526 <rshift+0x96>
 801f4bc:	1a9b      	subs	r3, r3, r2
 801f4be:	009b      	lsls	r3, r3, #2
 801f4c0:	1eea      	subs	r2, r5, #3
 801f4c2:	4296      	cmp	r6, r2
 801f4c4:	bf38      	it	cc
 801f4c6:	2300      	movcc	r3, #0
 801f4c8:	4423      	add	r3, r4
 801f4ca:	e015      	b.n	801f4f8 <rshift+0x68>
 801f4cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f4d0:	f1c1 0820 	rsb	r8, r1, #32
 801f4d4:	40cf      	lsrs	r7, r1
 801f4d6:	f105 0e04 	add.w	lr, r5, #4
 801f4da:	46a1      	mov	r9, r4
 801f4dc:	4576      	cmp	r6, lr
 801f4de:	46f4      	mov	ip, lr
 801f4e0:	d815      	bhi.n	801f50e <rshift+0x7e>
 801f4e2:	1a9b      	subs	r3, r3, r2
 801f4e4:	009a      	lsls	r2, r3, #2
 801f4e6:	3a04      	subs	r2, #4
 801f4e8:	3501      	adds	r5, #1
 801f4ea:	42ae      	cmp	r6, r5
 801f4ec:	bf38      	it	cc
 801f4ee:	2200      	movcc	r2, #0
 801f4f0:	18a3      	adds	r3, r4, r2
 801f4f2:	50a7      	str	r7, [r4, r2]
 801f4f4:	b107      	cbz	r7, 801f4f8 <rshift+0x68>
 801f4f6:	3304      	adds	r3, #4
 801f4f8:	1b1a      	subs	r2, r3, r4
 801f4fa:	42a3      	cmp	r3, r4
 801f4fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f500:	bf08      	it	eq
 801f502:	2300      	moveq	r3, #0
 801f504:	6102      	str	r2, [r0, #16]
 801f506:	bf08      	it	eq
 801f508:	6143      	streq	r3, [r0, #20]
 801f50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f50e:	f8dc c000 	ldr.w	ip, [ip]
 801f512:	fa0c fc08 	lsl.w	ip, ip, r8
 801f516:	ea4c 0707 	orr.w	r7, ip, r7
 801f51a:	f849 7b04 	str.w	r7, [r9], #4
 801f51e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f522:	40cf      	lsrs	r7, r1
 801f524:	e7da      	b.n	801f4dc <rshift+0x4c>
 801f526:	f851 cb04 	ldr.w	ip, [r1], #4
 801f52a:	f847 cf04 	str.w	ip, [r7, #4]!
 801f52e:	e7c3      	b.n	801f4b8 <rshift+0x28>
 801f530:	4623      	mov	r3, r4
 801f532:	e7e1      	b.n	801f4f8 <rshift+0x68>

0801f534 <__hexdig_fun>:
 801f534:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f538:	2b09      	cmp	r3, #9
 801f53a:	d802      	bhi.n	801f542 <__hexdig_fun+0xe>
 801f53c:	3820      	subs	r0, #32
 801f53e:	b2c0      	uxtb	r0, r0
 801f540:	4770      	bx	lr
 801f542:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f546:	2b05      	cmp	r3, #5
 801f548:	d801      	bhi.n	801f54e <__hexdig_fun+0x1a>
 801f54a:	3847      	subs	r0, #71	; 0x47
 801f54c:	e7f7      	b.n	801f53e <__hexdig_fun+0xa>
 801f54e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f552:	2b05      	cmp	r3, #5
 801f554:	d801      	bhi.n	801f55a <__hexdig_fun+0x26>
 801f556:	3827      	subs	r0, #39	; 0x27
 801f558:	e7f1      	b.n	801f53e <__hexdig_fun+0xa>
 801f55a:	2000      	movs	r0, #0
 801f55c:	4770      	bx	lr
	...

0801f560 <__gethex>:
 801f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f564:	ed2d 8b02 	vpush	{d8}
 801f568:	b089      	sub	sp, #36	; 0x24
 801f56a:	ee08 0a10 	vmov	s16, r0
 801f56e:	9304      	str	r3, [sp, #16]
 801f570:	4bbc      	ldr	r3, [pc, #752]	; (801f864 <__gethex+0x304>)
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	9301      	str	r3, [sp, #4]
 801f576:	4618      	mov	r0, r3
 801f578:	468b      	mov	fp, r1
 801f57a:	4690      	mov	r8, r2
 801f57c:	f7e0 fe28 	bl	80001d0 <strlen>
 801f580:	9b01      	ldr	r3, [sp, #4]
 801f582:	f8db 2000 	ldr.w	r2, [fp]
 801f586:	4403      	add	r3, r0
 801f588:	4682      	mov	sl, r0
 801f58a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f58e:	9305      	str	r3, [sp, #20]
 801f590:	1c93      	adds	r3, r2, #2
 801f592:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f596:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f59a:	32fe      	adds	r2, #254	; 0xfe
 801f59c:	18d1      	adds	r1, r2, r3
 801f59e:	461f      	mov	r7, r3
 801f5a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f5a4:	9100      	str	r1, [sp, #0]
 801f5a6:	2830      	cmp	r0, #48	; 0x30
 801f5a8:	d0f8      	beq.n	801f59c <__gethex+0x3c>
 801f5aa:	f7ff ffc3 	bl	801f534 <__hexdig_fun>
 801f5ae:	4604      	mov	r4, r0
 801f5b0:	2800      	cmp	r0, #0
 801f5b2:	d13a      	bne.n	801f62a <__gethex+0xca>
 801f5b4:	9901      	ldr	r1, [sp, #4]
 801f5b6:	4652      	mov	r2, sl
 801f5b8:	4638      	mov	r0, r7
 801f5ba:	f001 f982 	bl	80208c2 <strncmp>
 801f5be:	4605      	mov	r5, r0
 801f5c0:	2800      	cmp	r0, #0
 801f5c2:	d168      	bne.n	801f696 <__gethex+0x136>
 801f5c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f5c8:	eb07 060a 	add.w	r6, r7, sl
 801f5cc:	f7ff ffb2 	bl	801f534 <__hexdig_fun>
 801f5d0:	2800      	cmp	r0, #0
 801f5d2:	d062      	beq.n	801f69a <__gethex+0x13a>
 801f5d4:	4633      	mov	r3, r6
 801f5d6:	7818      	ldrb	r0, [r3, #0]
 801f5d8:	2830      	cmp	r0, #48	; 0x30
 801f5da:	461f      	mov	r7, r3
 801f5dc:	f103 0301 	add.w	r3, r3, #1
 801f5e0:	d0f9      	beq.n	801f5d6 <__gethex+0x76>
 801f5e2:	f7ff ffa7 	bl	801f534 <__hexdig_fun>
 801f5e6:	2301      	movs	r3, #1
 801f5e8:	fab0 f480 	clz	r4, r0
 801f5ec:	0964      	lsrs	r4, r4, #5
 801f5ee:	4635      	mov	r5, r6
 801f5f0:	9300      	str	r3, [sp, #0]
 801f5f2:	463a      	mov	r2, r7
 801f5f4:	4616      	mov	r6, r2
 801f5f6:	3201      	adds	r2, #1
 801f5f8:	7830      	ldrb	r0, [r6, #0]
 801f5fa:	f7ff ff9b 	bl	801f534 <__hexdig_fun>
 801f5fe:	2800      	cmp	r0, #0
 801f600:	d1f8      	bne.n	801f5f4 <__gethex+0x94>
 801f602:	9901      	ldr	r1, [sp, #4]
 801f604:	4652      	mov	r2, sl
 801f606:	4630      	mov	r0, r6
 801f608:	f001 f95b 	bl	80208c2 <strncmp>
 801f60c:	b980      	cbnz	r0, 801f630 <__gethex+0xd0>
 801f60e:	b94d      	cbnz	r5, 801f624 <__gethex+0xc4>
 801f610:	eb06 050a 	add.w	r5, r6, sl
 801f614:	462a      	mov	r2, r5
 801f616:	4616      	mov	r6, r2
 801f618:	3201      	adds	r2, #1
 801f61a:	7830      	ldrb	r0, [r6, #0]
 801f61c:	f7ff ff8a 	bl	801f534 <__hexdig_fun>
 801f620:	2800      	cmp	r0, #0
 801f622:	d1f8      	bne.n	801f616 <__gethex+0xb6>
 801f624:	1bad      	subs	r5, r5, r6
 801f626:	00ad      	lsls	r5, r5, #2
 801f628:	e004      	b.n	801f634 <__gethex+0xd4>
 801f62a:	2400      	movs	r4, #0
 801f62c:	4625      	mov	r5, r4
 801f62e:	e7e0      	b.n	801f5f2 <__gethex+0x92>
 801f630:	2d00      	cmp	r5, #0
 801f632:	d1f7      	bne.n	801f624 <__gethex+0xc4>
 801f634:	7833      	ldrb	r3, [r6, #0]
 801f636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f63a:	2b50      	cmp	r3, #80	; 0x50
 801f63c:	d13b      	bne.n	801f6b6 <__gethex+0x156>
 801f63e:	7873      	ldrb	r3, [r6, #1]
 801f640:	2b2b      	cmp	r3, #43	; 0x2b
 801f642:	d02c      	beq.n	801f69e <__gethex+0x13e>
 801f644:	2b2d      	cmp	r3, #45	; 0x2d
 801f646:	d02e      	beq.n	801f6a6 <__gethex+0x146>
 801f648:	1c71      	adds	r1, r6, #1
 801f64a:	f04f 0900 	mov.w	r9, #0
 801f64e:	7808      	ldrb	r0, [r1, #0]
 801f650:	f7ff ff70 	bl	801f534 <__hexdig_fun>
 801f654:	1e43      	subs	r3, r0, #1
 801f656:	b2db      	uxtb	r3, r3
 801f658:	2b18      	cmp	r3, #24
 801f65a:	d82c      	bhi.n	801f6b6 <__gethex+0x156>
 801f65c:	f1a0 0210 	sub.w	r2, r0, #16
 801f660:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f664:	f7ff ff66 	bl	801f534 <__hexdig_fun>
 801f668:	1e43      	subs	r3, r0, #1
 801f66a:	b2db      	uxtb	r3, r3
 801f66c:	2b18      	cmp	r3, #24
 801f66e:	d91d      	bls.n	801f6ac <__gethex+0x14c>
 801f670:	f1b9 0f00 	cmp.w	r9, #0
 801f674:	d000      	beq.n	801f678 <__gethex+0x118>
 801f676:	4252      	negs	r2, r2
 801f678:	4415      	add	r5, r2
 801f67a:	f8cb 1000 	str.w	r1, [fp]
 801f67e:	b1e4      	cbz	r4, 801f6ba <__gethex+0x15a>
 801f680:	9b00      	ldr	r3, [sp, #0]
 801f682:	2b00      	cmp	r3, #0
 801f684:	bf14      	ite	ne
 801f686:	2700      	movne	r7, #0
 801f688:	2706      	moveq	r7, #6
 801f68a:	4638      	mov	r0, r7
 801f68c:	b009      	add	sp, #36	; 0x24
 801f68e:	ecbd 8b02 	vpop	{d8}
 801f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f696:	463e      	mov	r6, r7
 801f698:	4625      	mov	r5, r4
 801f69a:	2401      	movs	r4, #1
 801f69c:	e7ca      	b.n	801f634 <__gethex+0xd4>
 801f69e:	f04f 0900 	mov.w	r9, #0
 801f6a2:	1cb1      	adds	r1, r6, #2
 801f6a4:	e7d3      	b.n	801f64e <__gethex+0xee>
 801f6a6:	f04f 0901 	mov.w	r9, #1
 801f6aa:	e7fa      	b.n	801f6a2 <__gethex+0x142>
 801f6ac:	230a      	movs	r3, #10
 801f6ae:	fb03 0202 	mla	r2, r3, r2, r0
 801f6b2:	3a10      	subs	r2, #16
 801f6b4:	e7d4      	b.n	801f660 <__gethex+0x100>
 801f6b6:	4631      	mov	r1, r6
 801f6b8:	e7df      	b.n	801f67a <__gethex+0x11a>
 801f6ba:	1bf3      	subs	r3, r6, r7
 801f6bc:	3b01      	subs	r3, #1
 801f6be:	4621      	mov	r1, r4
 801f6c0:	2b07      	cmp	r3, #7
 801f6c2:	dc0b      	bgt.n	801f6dc <__gethex+0x17c>
 801f6c4:	ee18 0a10 	vmov	r0, s16
 801f6c8:	f000 fa86 	bl	801fbd8 <_Balloc>
 801f6cc:	4604      	mov	r4, r0
 801f6ce:	b940      	cbnz	r0, 801f6e2 <__gethex+0x182>
 801f6d0:	4b65      	ldr	r3, [pc, #404]	; (801f868 <__gethex+0x308>)
 801f6d2:	4602      	mov	r2, r0
 801f6d4:	21de      	movs	r1, #222	; 0xde
 801f6d6:	4865      	ldr	r0, [pc, #404]	; (801f86c <__gethex+0x30c>)
 801f6d8:	f001 f912 	bl	8020900 <__assert_func>
 801f6dc:	3101      	adds	r1, #1
 801f6de:	105b      	asrs	r3, r3, #1
 801f6e0:	e7ee      	b.n	801f6c0 <__gethex+0x160>
 801f6e2:	f100 0914 	add.w	r9, r0, #20
 801f6e6:	f04f 0b00 	mov.w	fp, #0
 801f6ea:	f1ca 0301 	rsb	r3, sl, #1
 801f6ee:	f8cd 9008 	str.w	r9, [sp, #8]
 801f6f2:	f8cd b000 	str.w	fp, [sp]
 801f6f6:	9306      	str	r3, [sp, #24]
 801f6f8:	42b7      	cmp	r7, r6
 801f6fa:	d340      	bcc.n	801f77e <__gethex+0x21e>
 801f6fc:	9802      	ldr	r0, [sp, #8]
 801f6fe:	9b00      	ldr	r3, [sp, #0]
 801f700:	f840 3b04 	str.w	r3, [r0], #4
 801f704:	eba0 0009 	sub.w	r0, r0, r9
 801f708:	1080      	asrs	r0, r0, #2
 801f70a:	0146      	lsls	r6, r0, #5
 801f70c:	6120      	str	r0, [r4, #16]
 801f70e:	4618      	mov	r0, r3
 801f710:	f000 fb58 	bl	801fdc4 <__hi0bits>
 801f714:	1a30      	subs	r0, r6, r0
 801f716:	f8d8 6000 	ldr.w	r6, [r8]
 801f71a:	42b0      	cmp	r0, r6
 801f71c:	dd63      	ble.n	801f7e6 <__gethex+0x286>
 801f71e:	1b87      	subs	r7, r0, r6
 801f720:	4639      	mov	r1, r7
 801f722:	4620      	mov	r0, r4
 801f724:	f000 fef2 	bl	802050c <__any_on>
 801f728:	4682      	mov	sl, r0
 801f72a:	b1a8      	cbz	r0, 801f758 <__gethex+0x1f8>
 801f72c:	1e7b      	subs	r3, r7, #1
 801f72e:	1159      	asrs	r1, r3, #5
 801f730:	f003 021f 	and.w	r2, r3, #31
 801f734:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801f738:	f04f 0a01 	mov.w	sl, #1
 801f73c:	fa0a f202 	lsl.w	r2, sl, r2
 801f740:	420a      	tst	r2, r1
 801f742:	d009      	beq.n	801f758 <__gethex+0x1f8>
 801f744:	4553      	cmp	r3, sl
 801f746:	dd05      	ble.n	801f754 <__gethex+0x1f4>
 801f748:	1eb9      	subs	r1, r7, #2
 801f74a:	4620      	mov	r0, r4
 801f74c:	f000 fede 	bl	802050c <__any_on>
 801f750:	2800      	cmp	r0, #0
 801f752:	d145      	bne.n	801f7e0 <__gethex+0x280>
 801f754:	f04f 0a02 	mov.w	sl, #2
 801f758:	4639      	mov	r1, r7
 801f75a:	4620      	mov	r0, r4
 801f75c:	f7ff fe98 	bl	801f490 <rshift>
 801f760:	443d      	add	r5, r7
 801f762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f766:	42ab      	cmp	r3, r5
 801f768:	da4c      	bge.n	801f804 <__gethex+0x2a4>
 801f76a:	ee18 0a10 	vmov	r0, s16
 801f76e:	4621      	mov	r1, r4
 801f770:	f000 fa72 	bl	801fc58 <_Bfree>
 801f774:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f776:	2300      	movs	r3, #0
 801f778:	6013      	str	r3, [r2, #0]
 801f77a:	27a3      	movs	r7, #163	; 0xa3
 801f77c:	e785      	b.n	801f68a <__gethex+0x12a>
 801f77e:	1e73      	subs	r3, r6, #1
 801f780:	9a05      	ldr	r2, [sp, #20]
 801f782:	9303      	str	r3, [sp, #12]
 801f784:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f788:	4293      	cmp	r3, r2
 801f78a:	d019      	beq.n	801f7c0 <__gethex+0x260>
 801f78c:	f1bb 0f20 	cmp.w	fp, #32
 801f790:	d107      	bne.n	801f7a2 <__gethex+0x242>
 801f792:	9b02      	ldr	r3, [sp, #8]
 801f794:	9a00      	ldr	r2, [sp, #0]
 801f796:	f843 2b04 	str.w	r2, [r3], #4
 801f79a:	9302      	str	r3, [sp, #8]
 801f79c:	2300      	movs	r3, #0
 801f79e:	9300      	str	r3, [sp, #0]
 801f7a0:	469b      	mov	fp, r3
 801f7a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801f7a6:	f7ff fec5 	bl	801f534 <__hexdig_fun>
 801f7aa:	9b00      	ldr	r3, [sp, #0]
 801f7ac:	f000 000f 	and.w	r0, r0, #15
 801f7b0:	fa00 f00b 	lsl.w	r0, r0, fp
 801f7b4:	4303      	orrs	r3, r0
 801f7b6:	9300      	str	r3, [sp, #0]
 801f7b8:	f10b 0b04 	add.w	fp, fp, #4
 801f7bc:	9b03      	ldr	r3, [sp, #12]
 801f7be:	e00d      	b.n	801f7dc <__gethex+0x27c>
 801f7c0:	9b03      	ldr	r3, [sp, #12]
 801f7c2:	9a06      	ldr	r2, [sp, #24]
 801f7c4:	4413      	add	r3, r2
 801f7c6:	42bb      	cmp	r3, r7
 801f7c8:	d3e0      	bcc.n	801f78c <__gethex+0x22c>
 801f7ca:	4618      	mov	r0, r3
 801f7cc:	9901      	ldr	r1, [sp, #4]
 801f7ce:	9307      	str	r3, [sp, #28]
 801f7d0:	4652      	mov	r2, sl
 801f7d2:	f001 f876 	bl	80208c2 <strncmp>
 801f7d6:	9b07      	ldr	r3, [sp, #28]
 801f7d8:	2800      	cmp	r0, #0
 801f7da:	d1d7      	bne.n	801f78c <__gethex+0x22c>
 801f7dc:	461e      	mov	r6, r3
 801f7de:	e78b      	b.n	801f6f8 <__gethex+0x198>
 801f7e0:	f04f 0a03 	mov.w	sl, #3
 801f7e4:	e7b8      	b.n	801f758 <__gethex+0x1f8>
 801f7e6:	da0a      	bge.n	801f7fe <__gethex+0x29e>
 801f7e8:	1a37      	subs	r7, r6, r0
 801f7ea:	4621      	mov	r1, r4
 801f7ec:	ee18 0a10 	vmov	r0, s16
 801f7f0:	463a      	mov	r2, r7
 801f7f2:	f000 fc4d 	bl	8020090 <__lshift>
 801f7f6:	1bed      	subs	r5, r5, r7
 801f7f8:	4604      	mov	r4, r0
 801f7fa:	f100 0914 	add.w	r9, r0, #20
 801f7fe:	f04f 0a00 	mov.w	sl, #0
 801f802:	e7ae      	b.n	801f762 <__gethex+0x202>
 801f804:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801f808:	42a8      	cmp	r0, r5
 801f80a:	dd72      	ble.n	801f8f2 <__gethex+0x392>
 801f80c:	1b45      	subs	r5, r0, r5
 801f80e:	42ae      	cmp	r6, r5
 801f810:	dc36      	bgt.n	801f880 <__gethex+0x320>
 801f812:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f816:	2b02      	cmp	r3, #2
 801f818:	d02a      	beq.n	801f870 <__gethex+0x310>
 801f81a:	2b03      	cmp	r3, #3
 801f81c:	d02c      	beq.n	801f878 <__gethex+0x318>
 801f81e:	2b01      	cmp	r3, #1
 801f820:	d115      	bne.n	801f84e <__gethex+0x2ee>
 801f822:	42ae      	cmp	r6, r5
 801f824:	d113      	bne.n	801f84e <__gethex+0x2ee>
 801f826:	2e01      	cmp	r6, #1
 801f828:	d10b      	bne.n	801f842 <__gethex+0x2e2>
 801f82a:	9a04      	ldr	r2, [sp, #16]
 801f82c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801f830:	6013      	str	r3, [r2, #0]
 801f832:	2301      	movs	r3, #1
 801f834:	6123      	str	r3, [r4, #16]
 801f836:	f8c9 3000 	str.w	r3, [r9]
 801f83a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f83c:	2762      	movs	r7, #98	; 0x62
 801f83e:	601c      	str	r4, [r3, #0]
 801f840:	e723      	b.n	801f68a <__gethex+0x12a>
 801f842:	1e71      	subs	r1, r6, #1
 801f844:	4620      	mov	r0, r4
 801f846:	f000 fe61 	bl	802050c <__any_on>
 801f84a:	2800      	cmp	r0, #0
 801f84c:	d1ed      	bne.n	801f82a <__gethex+0x2ca>
 801f84e:	ee18 0a10 	vmov	r0, s16
 801f852:	4621      	mov	r1, r4
 801f854:	f000 fa00 	bl	801fc58 <_Bfree>
 801f858:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f85a:	2300      	movs	r3, #0
 801f85c:	6013      	str	r3, [r2, #0]
 801f85e:	2750      	movs	r7, #80	; 0x50
 801f860:	e713      	b.n	801f68a <__gethex+0x12a>
 801f862:	bf00      	nop
 801f864:	08022bd8 	.word	0x08022bd8
 801f868:	08022b5c 	.word	0x08022b5c
 801f86c:	08022b6d 	.word	0x08022b6d
 801f870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f872:	2b00      	cmp	r3, #0
 801f874:	d1eb      	bne.n	801f84e <__gethex+0x2ee>
 801f876:	e7d8      	b.n	801f82a <__gethex+0x2ca>
 801f878:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d1d5      	bne.n	801f82a <__gethex+0x2ca>
 801f87e:	e7e6      	b.n	801f84e <__gethex+0x2ee>
 801f880:	1e6f      	subs	r7, r5, #1
 801f882:	f1ba 0f00 	cmp.w	sl, #0
 801f886:	d131      	bne.n	801f8ec <__gethex+0x38c>
 801f888:	b127      	cbz	r7, 801f894 <__gethex+0x334>
 801f88a:	4639      	mov	r1, r7
 801f88c:	4620      	mov	r0, r4
 801f88e:	f000 fe3d 	bl	802050c <__any_on>
 801f892:	4682      	mov	sl, r0
 801f894:	117b      	asrs	r3, r7, #5
 801f896:	2101      	movs	r1, #1
 801f898:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801f89c:	f007 071f 	and.w	r7, r7, #31
 801f8a0:	fa01 f707 	lsl.w	r7, r1, r7
 801f8a4:	421f      	tst	r7, r3
 801f8a6:	4629      	mov	r1, r5
 801f8a8:	4620      	mov	r0, r4
 801f8aa:	bf18      	it	ne
 801f8ac:	f04a 0a02 	orrne.w	sl, sl, #2
 801f8b0:	1b76      	subs	r6, r6, r5
 801f8b2:	f7ff fded 	bl	801f490 <rshift>
 801f8b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801f8ba:	2702      	movs	r7, #2
 801f8bc:	f1ba 0f00 	cmp.w	sl, #0
 801f8c0:	d048      	beq.n	801f954 <__gethex+0x3f4>
 801f8c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f8c6:	2b02      	cmp	r3, #2
 801f8c8:	d015      	beq.n	801f8f6 <__gethex+0x396>
 801f8ca:	2b03      	cmp	r3, #3
 801f8cc:	d017      	beq.n	801f8fe <__gethex+0x39e>
 801f8ce:	2b01      	cmp	r3, #1
 801f8d0:	d109      	bne.n	801f8e6 <__gethex+0x386>
 801f8d2:	f01a 0f02 	tst.w	sl, #2
 801f8d6:	d006      	beq.n	801f8e6 <__gethex+0x386>
 801f8d8:	f8d9 0000 	ldr.w	r0, [r9]
 801f8dc:	ea4a 0a00 	orr.w	sl, sl, r0
 801f8e0:	f01a 0f01 	tst.w	sl, #1
 801f8e4:	d10e      	bne.n	801f904 <__gethex+0x3a4>
 801f8e6:	f047 0710 	orr.w	r7, r7, #16
 801f8ea:	e033      	b.n	801f954 <__gethex+0x3f4>
 801f8ec:	f04f 0a01 	mov.w	sl, #1
 801f8f0:	e7d0      	b.n	801f894 <__gethex+0x334>
 801f8f2:	2701      	movs	r7, #1
 801f8f4:	e7e2      	b.n	801f8bc <__gethex+0x35c>
 801f8f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f8f8:	f1c3 0301 	rsb	r3, r3, #1
 801f8fc:	9315      	str	r3, [sp, #84]	; 0x54
 801f8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f900:	2b00      	cmp	r3, #0
 801f902:	d0f0      	beq.n	801f8e6 <__gethex+0x386>
 801f904:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801f908:	f104 0314 	add.w	r3, r4, #20
 801f90c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801f910:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801f914:	f04f 0c00 	mov.w	ip, #0
 801f918:	4618      	mov	r0, r3
 801f91a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f91e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801f922:	d01c      	beq.n	801f95e <__gethex+0x3fe>
 801f924:	3201      	adds	r2, #1
 801f926:	6002      	str	r2, [r0, #0]
 801f928:	2f02      	cmp	r7, #2
 801f92a:	f104 0314 	add.w	r3, r4, #20
 801f92e:	d13f      	bne.n	801f9b0 <__gethex+0x450>
 801f930:	f8d8 2000 	ldr.w	r2, [r8]
 801f934:	3a01      	subs	r2, #1
 801f936:	42b2      	cmp	r2, r6
 801f938:	d10a      	bne.n	801f950 <__gethex+0x3f0>
 801f93a:	1171      	asrs	r1, r6, #5
 801f93c:	2201      	movs	r2, #1
 801f93e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f942:	f006 061f 	and.w	r6, r6, #31
 801f946:	fa02 f606 	lsl.w	r6, r2, r6
 801f94a:	421e      	tst	r6, r3
 801f94c:	bf18      	it	ne
 801f94e:	4617      	movne	r7, r2
 801f950:	f047 0720 	orr.w	r7, r7, #32
 801f954:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f956:	601c      	str	r4, [r3, #0]
 801f958:	9b04      	ldr	r3, [sp, #16]
 801f95a:	601d      	str	r5, [r3, #0]
 801f95c:	e695      	b.n	801f68a <__gethex+0x12a>
 801f95e:	4299      	cmp	r1, r3
 801f960:	f843 cc04 	str.w	ip, [r3, #-4]
 801f964:	d8d8      	bhi.n	801f918 <__gethex+0x3b8>
 801f966:	68a3      	ldr	r3, [r4, #8]
 801f968:	459b      	cmp	fp, r3
 801f96a:	db19      	blt.n	801f9a0 <__gethex+0x440>
 801f96c:	6861      	ldr	r1, [r4, #4]
 801f96e:	ee18 0a10 	vmov	r0, s16
 801f972:	3101      	adds	r1, #1
 801f974:	f000 f930 	bl	801fbd8 <_Balloc>
 801f978:	4681      	mov	r9, r0
 801f97a:	b918      	cbnz	r0, 801f984 <__gethex+0x424>
 801f97c:	4b1a      	ldr	r3, [pc, #104]	; (801f9e8 <__gethex+0x488>)
 801f97e:	4602      	mov	r2, r0
 801f980:	2184      	movs	r1, #132	; 0x84
 801f982:	e6a8      	b.n	801f6d6 <__gethex+0x176>
 801f984:	6922      	ldr	r2, [r4, #16]
 801f986:	3202      	adds	r2, #2
 801f988:	f104 010c 	add.w	r1, r4, #12
 801f98c:	0092      	lsls	r2, r2, #2
 801f98e:	300c      	adds	r0, #12
 801f990:	f7fc ffde 	bl	801c950 <memcpy>
 801f994:	4621      	mov	r1, r4
 801f996:	ee18 0a10 	vmov	r0, s16
 801f99a:	f000 f95d 	bl	801fc58 <_Bfree>
 801f99e:	464c      	mov	r4, r9
 801f9a0:	6923      	ldr	r3, [r4, #16]
 801f9a2:	1c5a      	adds	r2, r3, #1
 801f9a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f9a8:	6122      	str	r2, [r4, #16]
 801f9aa:	2201      	movs	r2, #1
 801f9ac:	615a      	str	r2, [r3, #20]
 801f9ae:	e7bb      	b.n	801f928 <__gethex+0x3c8>
 801f9b0:	6922      	ldr	r2, [r4, #16]
 801f9b2:	455a      	cmp	r2, fp
 801f9b4:	dd0b      	ble.n	801f9ce <__gethex+0x46e>
 801f9b6:	2101      	movs	r1, #1
 801f9b8:	4620      	mov	r0, r4
 801f9ba:	f7ff fd69 	bl	801f490 <rshift>
 801f9be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801f9c2:	3501      	adds	r5, #1
 801f9c4:	42ab      	cmp	r3, r5
 801f9c6:	f6ff aed0 	blt.w	801f76a <__gethex+0x20a>
 801f9ca:	2701      	movs	r7, #1
 801f9cc:	e7c0      	b.n	801f950 <__gethex+0x3f0>
 801f9ce:	f016 061f 	ands.w	r6, r6, #31
 801f9d2:	d0fa      	beq.n	801f9ca <__gethex+0x46a>
 801f9d4:	449a      	add	sl, r3
 801f9d6:	f1c6 0620 	rsb	r6, r6, #32
 801f9da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801f9de:	f000 f9f1 	bl	801fdc4 <__hi0bits>
 801f9e2:	42b0      	cmp	r0, r6
 801f9e4:	dbe7      	blt.n	801f9b6 <__gethex+0x456>
 801f9e6:	e7f0      	b.n	801f9ca <__gethex+0x46a>
 801f9e8:	08022b5c 	.word	0x08022b5c

0801f9ec <L_shift>:
 801f9ec:	f1c2 0208 	rsb	r2, r2, #8
 801f9f0:	0092      	lsls	r2, r2, #2
 801f9f2:	b570      	push	{r4, r5, r6, lr}
 801f9f4:	f1c2 0620 	rsb	r6, r2, #32
 801f9f8:	6843      	ldr	r3, [r0, #4]
 801f9fa:	6804      	ldr	r4, [r0, #0]
 801f9fc:	fa03 f506 	lsl.w	r5, r3, r6
 801fa00:	432c      	orrs	r4, r5
 801fa02:	40d3      	lsrs	r3, r2
 801fa04:	6004      	str	r4, [r0, #0]
 801fa06:	f840 3f04 	str.w	r3, [r0, #4]!
 801fa0a:	4288      	cmp	r0, r1
 801fa0c:	d3f4      	bcc.n	801f9f8 <L_shift+0xc>
 801fa0e:	bd70      	pop	{r4, r5, r6, pc}

0801fa10 <__match>:
 801fa10:	b530      	push	{r4, r5, lr}
 801fa12:	6803      	ldr	r3, [r0, #0]
 801fa14:	3301      	adds	r3, #1
 801fa16:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fa1a:	b914      	cbnz	r4, 801fa22 <__match+0x12>
 801fa1c:	6003      	str	r3, [r0, #0]
 801fa1e:	2001      	movs	r0, #1
 801fa20:	bd30      	pop	{r4, r5, pc}
 801fa22:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fa2a:	2d19      	cmp	r5, #25
 801fa2c:	bf98      	it	ls
 801fa2e:	3220      	addls	r2, #32
 801fa30:	42a2      	cmp	r2, r4
 801fa32:	d0f0      	beq.n	801fa16 <__match+0x6>
 801fa34:	2000      	movs	r0, #0
 801fa36:	e7f3      	b.n	801fa20 <__match+0x10>

0801fa38 <__hexnan>:
 801fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa3c:	680b      	ldr	r3, [r1, #0]
 801fa3e:	6801      	ldr	r1, [r0, #0]
 801fa40:	115e      	asrs	r6, r3, #5
 801fa42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fa46:	f013 031f 	ands.w	r3, r3, #31
 801fa4a:	b087      	sub	sp, #28
 801fa4c:	bf18      	it	ne
 801fa4e:	3604      	addne	r6, #4
 801fa50:	2500      	movs	r5, #0
 801fa52:	1f37      	subs	r7, r6, #4
 801fa54:	4682      	mov	sl, r0
 801fa56:	4690      	mov	r8, r2
 801fa58:	9301      	str	r3, [sp, #4]
 801fa5a:	f846 5c04 	str.w	r5, [r6, #-4]
 801fa5e:	46b9      	mov	r9, r7
 801fa60:	463c      	mov	r4, r7
 801fa62:	9502      	str	r5, [sp, #8]
 801fa64:	46ab      	mov	fp, r5
 801fa66:	784a      	ldrb	r2, [r1, #1]
 801fa68:	1c4b      	adds	r3, r1, #1
 801fa6a:	9303      	str	r3, [sp, #12]
 801fa6c:	b342      	cbz	r2, 801fac0 <__hexnan+0x88>
 801fa6e:	4610      	mov	r0, r2
 801fa70:	9105      	str	r1, [sp, #20]
 801fa72:	9204      	str	r2, [sp, #16]
 801fa74:	f7ff fd5e 	bl	801f534 <__hexdig_fun>
 801fa78:	2800      	cmp	r0, #0
 801fa7a:	d14f      	bne.n	801fb1c <__hexnan+0xe4>
 801fa7c:	9a04      	ldr	r2, [sp, #16]
 801fa7e:	9905      	ldr	r1, [sp, #20]
 801fa80:	2a20      	cmp	r2, #32
 801fa82:	d818      	bhi.n	801fab6 <__hexnan+0x7e>
 801fa84:	9b02      	ldr	r3, [sp, #8]
 801fa86:	459b      	cmp	fp, r3
 801fa88:	dd13      	ble.n	801fab2 <__hexnan+0x7a>
 801fa8a:	454c      	cmp	r4, r9
 801fa8c:	d206      	bcs.n	801fa9c <__hexnan+0x64>
 801fa8e:	2d07      	cmp	r5, #7
 801fa90:	dc04      	bgt.n	801fa9c <__hexnan+0x64>
 801fa92:	462a      	mov	r2, r5
 801fa94:	4649      	mov	r1, r9
 801fa96:	4620      	mov	r0, r4
 801fa98:	f7ff ffa8 	bl	801f9ec <L_shift>
 801fa9c:	4544      	cmp	r4, r8
 801fa9e:	d950      	bls.n	801fb42 <__hexnan+0x10a>
 801faa0:	2300      	movs	r3, #0
 801faa2:	f1a4 0904 	sub.w	r9, r4, #4
 801faa6:	f844 3c04 	str.w	r3, [r4, #-4]
 801faaa:	f8cd b008 	str.w	fp, [sp, #8]
 801faae:	464c      	mov	r4, r9
 801fab0:	461d      	mov	r5, r3
 801fab2:	9903      	ldr	r1, [sp, #12]
 801fab4:	e7d7      	b.n	801fa66 <__hexnan+0x2e>
 801fab6:	2a29      	cmp	r2, #41	; 0x29
 801fab8:	d156      	bne.n	801fb68 <__hexnan+0x130>
 801faba:	3102      	adds	r1, #2
 801fabc:	f8ca 1000 	str.w	r1, [sl]
 801fac0:	f1bb 0f00 	cmp.w	fp, #0
 801fac4:	d050      	beq.n	801fb68 <__hexnan+0x130>
 801fac6:	454c      	cmp	r4, r9
 801fac8:	d206      	bcs.n	801fad8 <__hexnan+0xa0>
 801faca:	2d07      	cmp	r5, #7
 801facc:	dc04      	bgt.n	801fad8 <__hexnan+0xa0>
 801face:	462a      	mov	r2, r5
 801fad0:	4649      	mov	r1, r9
 801fad2:	4620      	mov	r0, r4
 801fad4:	f7ff ff8a 	bl	801f9ec <L_shift>
 801fad8:	4544      	cmp	r4, r8
 801fada:	d934      	bls.n	801fb46 <__hexnan+0x10e>
 801fadc:	f1a8 0204 	sub.w	r2, r8, #4
 801fae0:	4623      	mov	r3, r4
 801fae2:	f853 1b04 	ldr.w	r1, [r3], #4
 801fae6:	f842 1f04 	str.w	r1, [r2, #4]!
 801faea:	429f      	cmp	r7, r3
 801faec:	d2f9      	bcs.n	801fae2 <__hexnan+0xaa>
 801faee:	1b3b      	subs	r3, r7, r4
 801faf0:	f023 0303 	bic.w	r3, r3, #3
 801faf4:	3304      	adds	r3, #4
 801faf6:	3401      	adds	r4, #1
 801faf8:	3e03      	subs	r6, #3
 801fafa:	42b4      	cmp	r4, r6
 801fafc:	bf88      	it	hi
 801fafe:	2304      	movhi	r3, #4
 801fb00:	4443      	add	r3, r8
 801fb02:	2200      	movs	r2, #0
 801fb04:	f843 2b04 	str.w	r2, [r3], #4
 801fb08:	429f      	cmp	r7, r3
 801fb0a:	d2fb      	bcs.n	801fb04 <__hexnan+0xcc>
 801fb0c:	683b      	ldr	r3, [r7, #0]
 801fb0e:	b91b      	cbnz	r3, 801fb18 <__hexnan+0xe0>
 801fb10:	4547      	cmp	r7, r8
 801fb12:	d127      	bne.n	801fb64 <__hexnan+0x12c>
 801fb14:	2301      	movs	r3, #1
 801fb16:	603b      	str	r3, [r7, #0]
 801fb18:	2005      	movs	r0, #5
 801fb1a:	e026      	b.n	801fb6a <__hexnan+0x132>
 801fb1c:	3501      	adds	r5, #1
 801fb1e:	2d08      	cmp	r5, #8
 801fb20:	f10b 0b01 	add.w	fp, fp, #1
 801fb24:	dd06      	ble.n	801fb34 <__hexnan+0xfc>
 801fb26:	4544      	cmp	r4, r8
 801fb28:	d9c3      	bls.n	801fab2 <__hexnan+0x7a>
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	f844 3c04 	str.w	r3, [r4, #-4]
 801fb30:	2501      	movs	r5, #1
 801fb32:	3c04      	subs	r4, #4
 801fb34:	6822      	ldr	r2, [r4, #0]
 801fb36:	f000 000f 	and.w	r0, r0, #15
 801fb3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801fb3e:	6022      	str	r2, [r4, #0]
 801fb40:	e7b7      	b.n	801fab2 <__hexnan+0x7a>
 801fb42:	2508      	movs	r5, #8
 801fb44:	e7b5      	b.n	801fab2 <__hexnan+0x7a>
 801fb46:	9b01      	ldr	r3, [sp, #4]
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d0df      	beq.n	801fb0c <__hexnan+0xd4>
 801fb4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801fb50:	f1c3 0320 	rsb	r3, r3, #32
 801fb54:	fa22 f303 	lsr.w	r3, r2, r3
 801fb58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801fb5c:	401a      	ands	r2, r3
 801fb5e:	f846 2c04 	str.w	r2, [r6, #-4]
 801fb62:	e7d3      	b.n	801fb0c <__hexnan+0xd4>
 801fb64:	3f04      	subs	r7, #4
 801fb66:	e7d1      	b.n	801fb0c <__hexnan+0xd4>
 801fb68:	2004      	movs	r0, #4
 801fb6a:	b007      	add	sp, #28
 801fb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb70 <_localeconv_r>:
 801fb70:	4800      	ldr	r0, [pc, #0]	; (801fb74 <_localeconv_r+0x4>)
 801fb72:	4770      	bx	lr
 801fb74:	20000718 	.word	0x20000718

0801fb78 <_lseek_r>:
 801fb78:	b538      	push	{r3, r4, r5, lr}
 801fb7a:	4d07      	ldr	r5, [pc, #28]	; (801fb98 <_lseek_r+0x20>)
 801fb7c:	4604      	mov	r4, r0
 801fb7e:	4608      	mov	r0, r1
 801fb80:	4611      	mov	r1, r2
 801fb82:	2200      	movs	r2, #0
 801fb84:	602a      	str	r2, [r5, #0]
 801fb86:	461a      	mov	r2, r3
 801fb88:	f7ed ff14 	bl	800d9b4 <_lseek>
 801fb8c:	1c43      	adds	r3, r0, #1
 801fb8e:	d102      	bne.n	801fb96 <_lseek_r+0x1e>
 801fb90:	682b      	ldr	r3, [r5, #0]
 801fb92:	b103      	cbz	r3, 801fb96 <_lseek_r+0x1e>
 801fb94:	6023      	str	r3, [r4, #0]
 801fb96:	bd38      	pop	{r3, r4, r5, pc}
 801fb98:	2000a7d4 	.word	0x2000a7d4

0801fb9c <__ascii_mbtowc>:
 801fb9c:	b082      	sub	sp, #8
 801fb9e:	b901      	cbnz	r1, 801fba2 <__ascii_mbtowc+0x6>
 801fba0:	a901      	add	r1, sp, #4
 801fba2:	b142      	cbz	r2, 801fbb6 <__ascii_mbtowc+0x1a>
 801fba4:	b14b      	cbz	r3, 801fbba <__ascii_mbtowc+0x1e>
 801fba6:	7813      	ldrb	r3, [r2, #0]
 801fba8:	600b      	str	r3, [r1, #0]
 801fbaa:	7812      	ldrb	r2, [r2, #0]
 801fbac:	1e10      	subs	r0, r2, #0
 801fbae:	bf18      	it	ne
 801fbb0:	2001      	movne	r0, #1
 801fbb2:	b002      	add	sp, #8
 801fbb4:	4770      	bx	lr
 801fbb6:	4610      	mov	r0, r2
 801fbb8:	e7fb      	b.n	801fbb2 <__ascii_mbtowc+0x16>
 801fbba:	f06f 0001 	mvn.w	r0, #1
 801fbbe:	e7f8      	b.n	801fbb2 <__ascii_mbtowc+0x16>

0801fbc0 <__malloc_lock>:
 801fbc0:	4801      	ldr	r0, [pc, #4]	; (801fbc8 <__malloc_lock+0x8>)
 801fbc2:	f001 b885 	b.w	8020cd0 <__retarget_lock_acquire_recursive>
 801fbc6:	bf00      	nop
 801fbc8:	2000a7dc 	.word	0x2000a7dc

0801fbcc <__malloc_unlock>:
 801fbcc:	4801      	ldr	r0, [pc, #4]	; (801fbd4 <__malloc_unlock+0x8>)
 801fbce:	f001 b880 	b.w	8020cd2 <__retarget_lock_release_recursive>
 801fbd2:	bf00      	nop
 801fbd4:	2000a7dc 	.word	0x2000a7dc

0801fbd8 <_Balloc>:
 801fbd8:	b570      	push	{r4, r5, r6, lr}
 801fbda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fbdc:	4604      	mov	r4, r0
 801fbde:	460d      	mov	r5, r1
 801fbe0:	b976      	cbnz	r6, 801fc00 <_Balloc+0x28>
 801fbe2:	2010      	movs	r0, #16
 801fbe4:	f7fc fea4 	bl	801c930 <malloc>
 801fbe8:	4602      	mov	r2, r0
 801fbea:	6260      	str	r0, [r4, #36]	; 0x24
 801fbec:	b920      	cbnz	r0, 801fbf8 <_Balloc+0x20>
 801fbee:	4b18      	ldr	r3, [pc, #96]	; (801fc50 <_Balloc+0x78>)
 801fbf0:	4818      	ldr	r0, [pc, #96]	; (801fc54 <_Balloc+0x7c>)
 801fbf2:	2166      	movs	r1, #102	; 0x66
 801fbf4:	f000 fe84 	bl	8020900 <__assert_func>
 801fbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fbfc:	6006      	str	r6, [r0, #0]
 801fbfe:	60c6      	str	r6, [r0, #12]
 801fc00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801fc02:	68f3      	ldr	r3, [r6, #12]
 801fc04:	b183      	cbz	r3, 801fc28 <_Balloc+0x50>
 801fc06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc08:	68db      	ldr	r3, [r3, #12]
 801fc0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801fc0e:	b9b8      	cbnz	r0, 801fc40 <_Balloc+0x68>
 801fc10:	2101      	movs	r1, #1
 801fc12:	fa01 f605 	lsl.w	r6, r1, r5
 801fc16:	1d72      	adds	r2, r6, #5
 801fc18:	0092      	lsls	r2, r2, #2
 801fc1a:	4620      	mov	r0, r4
 801fc1c:	f000 fc97 	bl	802054e <_calloc_r>
 801fc20:	b160      	cbz	r0, 801fc3c <_Balloc+0x64>
 801fc22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fc26:	e00e      	b.n	801fc46 <_Balloc+0x6e>
 801fc28:	2221      	movs	r2, #33	; 0x21
 801fc2a:	2104      	movs	r1, #4
 801fc2c:	4620      	mov	r0, r4
 801fc2e:	f000 fc8e 	bl	802054e <_calloc_r>
 801fc32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fc34:	60f0      	str	r0, [r6, #12]
 801fc36:	68db      	ldr	r3, [r3, #12]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d1e4      	bne.n	801fc06 <_Balloc+0x2e>
 801fc3c:	2000      	movs	r0, #0
 801fc3e:	bd70      	pop	{r4, r5, r6, pc}
 801fc40:	6802      	ldr	r2, [r0, #0]
 801fc42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fc46:	2300      	movs	r3, #0
 801fc48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fc4c:	e7f7      	b.n	801fc3e <_Balloc+0x66>
 801fc4e:	bf00      	nop
 801fc50:	08022ae6 	.word	0x08022ae6
 801fc54:	08022bec 	.word	0x08022bec

0801fc58 <_Bfree>:
 801fc58:	b570      	push	{r4, r5, r6, lr}
 801fc5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fc5c:	4605      	mov	r5, r0
 801fc5e:	460c      	mov	r4, r1
 801fc60:	b976      	cbnz	r6, 801fc80 <_Bfree+0x28>
 801fc62:	2010      	movs	r0, #16
 801fc64:	f7fc fe64 	bl	801c930 <malloc>
 801fc68:	4602      	mov	r2, r0
 801fc6a:	6268      	str	r0, [r5, #36]	; 0x24
 801fc6c:	b920      	cbnz	r0, 801fc78 <_Bfree+0x20>
 801fc6e:	4b09      	ldr	r3, [pc, #36]	; (801fc94 <_Bfree+0x3c>)
 801fc70:	4809      	ldr	r0, [pc, #36]	; (801fc98 <_Bfree+0x40>)
 801fc72:	218a      	movs	r1, #138	; 0x8a
 801fc74:	f000 fe44 	bl	8020900 <__assert_func>
 801fc78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fc7c:	6006      	str	r6, [r0, #0]
 801fc7e:	60c6      	str	r6, [r0, #12]
 801fc80:	b13c      	cbz	r4, 801fc92 <_Bfree+0x3a>
 801fc82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801fc84:	6862      	ldr	r2, [r4, #4]
 801fc86:	68db      	ldr	r3, [r3, #12]
 801fc88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fc8c:	6021      	str	r1, [r4, #0]
 801fc8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fc92:	bd70      	pop	{r4, r5, r6, pc}
 801fc94:	08022ae6 	.word	0x08022ae6
 801fc98:	08022bec 	.word	0x08022bec

0801fc9c <__multadd>:
 801fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fca0:	690e      	ldr	r6, [r1, #16]
 801fca2:	4607      	mov	r7, r0
 801fca4:	4698      	mov	r8, r3
 801fca6:	460c      	mov	r4, r1
 801fca8:	f101 0014 	add.w	r0, r1, #20
 801fcac:	2300      	movs	r3, #0
 801fcae:	6805      	ldr	r5, [r0, #0]
 801fcb0:	b2a9      	uxth	r1, r5
 801fcb2:	fb02 8101 	mla	r1, r2, r1, r8
 801fcb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801fcba:	0c2d      	lsrs	r5, r5, #16
 801fcbc:	fb02 c505 	mla	r5, r2, r5, ip
 801fcc0:	b289      	uxth	r1, r1
 801fcc2:	3301      	adds	r3, #1
 801fcc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801fcc8:	429e      	cmp	r6, r3
 801fcca:	f840 1b04 	str.w	r1, [r0], #4
 801fcce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801fcd2:	dcec      	bgt.n	801fcae <__multadd+0x12>
 801fcd4:	f1b8 0f00 	cmp.w	r8, #0
 801fcd8:	d022      	beq.n	801fd20 <__multadd+0x84>
 801fcda:	68a3      	ldr	r3, [r4, #8]
 801fcdc:	42b3      	cmp	r3, r6
 801fcde:	dc19      	bgt.n	801fd14 <__multadd+0x78>
 801fce0:	6861      	ldr	r1, [r4, #4]
 801fce2:	4638      	mov	r0, r7
 801fce4:	3101      	adds	r1, #1
 801fce6:	f7ff ff77 	bl	801fbd8 <_Balloc>
 801fcea:	4605      	mov	r5, r0
 801fcec:	b928      	cbnz	r0, 801fcfa <__multadd+0x5e>
 801fcee:	4602      	mov	r2, r0
 801fcf0:	4b0d      	ldr	r3, [pc, #52]	; (801fd28 <__multadd+0x8c>)
 801fcf2:	480e      	ldr	r0, [pc, #56]	; (801fd2c <__multadd+0x90>)
 801fcf4:	21b5      	movs	r1, #181	; 0xb5
 801fcf6:	f000 fe03 	bl	8020900 <__assert_func>
 801fcfa:	6922      	ldr	r2, [r4, #16]
 801fcfc:	3202      	adds	r2, #2
 801fcfe:	f104 010c 	add.w	r1, r4, #12
 801fd02:	0092      	lsls	r2, r2, #2
 801fd04:	300c      	adds	r0, #12
 801fd06:	f7fc fe23 	bl	801c950 <memcpy>
 801fd0a:	4621      	mov	r1, r4
 801fd0c:	4638      	mov	r0, r7
 801fd0e:	f7ff ffa3 	bl	801fc58 <_Bfree>
 801fd12:	462c      	mov	r4, r5
 801fd14:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801fd18:	3601      	adds	r6, #1
 801fd1a:	f8c3 8014 	str.w	r8, [r3, #20]
 801fd1e:	6126      	str	r6, [r4, #16]
 801fd20:	4620      	mov	r0, r4
 801fd22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd26:	bf00      	nop
 801fd28:	08022b5c 	.word	0x08022b5c
 801fd2c:	08022bec 	.word	0x08022bec

0801fd30 <__s2b>:
 801fd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fd34:	460c      	mov	r4, r1
 801fd36:	4615      	mov	r5, r2
 801fd38:	461f      	mov	r7, r3
 801fd3a:	2209      	movs	r2, #9
 801fd3c:	3308      	adds	r3, #8
 801fd3e:	4606      	mov	r6, r0
 801fd40:	fb93 f3f2 	sdiv	r3, r3, r2
 801fd44:	2100      	movs	r1, #0
 801fd46:	2201      	movs	r2, #1
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	db09      	blt.n	801fd60 <__s2b+0x30>
 801fd4c:	4630      	mov	r0, r6
 801fd4e:	f7ff ff43 	bl	801fbd8 <_Balloc>
 801fd52:	b940      	cbnz	r0, 801fd66 <__s2b+0x36>
 801fd54:	4602      	mov	r2, r0
 801fd56:	4b19      	ldr	r3, [pc, #100]	; (801fdbc <__s2b+0x8c>)
 801fd58:	4819      	ldr	r0, [pc, #100]	; (801fdc0 <__s2b+0x90>)
 801fd5a:	21ce      	movs	r1, #206	; 0xce
 801fd5c:	f000 fdd0 	bl	8020900 <__assert_func>
 801fd60:	0052      	lsls	r2, r2, #1
 801fd62:	3101      	adds	r1, #1
 801fd64:	e7f0      	b.n	801fd48 <__s2b+0x18>
 801fd66:	9b08      	ldr	r3, [sp, #32]
 801fd68:	6143      	str	r3, [r0, #20]
 801fd6a:	2d09      	cmp	r5, #9
 801fd6c:	f04f 0301 	mov.w	r3, #1
 801fd70:	6103      	str	r3, [r0, #16]
 801fd72:	dd16      	ble.n	801fda2 <__s2b+0x72>
 801fd74:	f104 0909 	add.w	r9, r4, #9
 801fd78:	46c8      	mov	r8, r9
 801fd7a:	442c      	add	r4, r5
 801fd7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fd80:	4601      	mov	r1, r0
 801fd82:	3b30      	subs	r3, #48	; 0x30
 801fd84:	220a      	movs	r2, #10
 801fd86:	4630      	mov	r0, r6
 801fd88:	f7ff ff88 	bl	801fc9c <__multadd>
 801fd8c:	45a0      	cmp	r8, r4
 801fd8e:	d1f5      	bne.n	801fd7c <__s2b+0x4c>
 801fd90:	f1a5 0408 	sub.w	r4, r5, #8
 801fd94:	444c      	add	r4, r9
 801fd96:	1b2d      	subs	r5, r5, r4
 801fd98:	1963      	adds	r3, r4, r5
 801fd9a:	42bb      	cmp	r3, r7
 801fd9c:	db04      	blt.n	801fda8 <__s2b+0x78>
 801fd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fda2:	340a      	adds	r4, #10
 801fda4:	2509      	movs	r5, #9
 801fda6:	e7f6      	b.n	801fd96 <__s2b+0x66>
 801fda8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fdac:	4601      	mov	r1, r0
 801fdae:	3b30      	subs	r3, #48	; 0x30
 801fdb0:	220a      	movs	r2, #10
 801fdb2:	4630      	mov	r0, r6
 801fdb4:	f7ff ff72 	bl	801fc9c <__multadd>
 801fdb8:	e7ee      	b.n	801fd98 <__s2b+0x68>
 801fdba:	bf00      	nop
 801fdbc:	08022b5c 	.word	0x08022b5c
 801fdc0:	08022bec 	.word	0x08022bec

0801fdc4 <__hi0bits>:
 801fdc4:	0c03      	lsrs	r3, r0, #16
 801fdc6:	041b      	lsls	r3, r3, #16
 801fdc8:	b9d3      	cbnz	r3, 801fe00 <__hi0bits+0x3c>
 801fdca:	0400      	lsls	r0, r0, #16
 801fdcc:	2310      	movs	r3, #16
 801fdce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801fdd2:	bf04      	itt	eq
 801fdd4:	0200      	lsleq	r0, r0, #8
 801fdd6:	3308      	addeq	r3, #8
 801fdd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801fddc:	bf04      	itt	eq
 801fdde:	0100      	lsleq	r0, r0, #4
 801fde0:	3304      	addeq	r3, #4
 801fde2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801fde6:	bf04      	itt	eq
 801fde8:	0080      	lsleq	r0, r0, #2
 801fdea:	3302      	addeq	r3, #2
 801fdec:	2800      	cmp	r0, #0
 801fdee:	db05      	blt.n	801fdfc <__hi0bits+0x38>
 801fdf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801fdf4:	f103 0301 	add.w	r3, r3, #1
 801fdf8:	bf08      	it	eq
 801fdfa:	2320      	moveq	r3, #32
 801fdfc:	4618      	mov	r0, r3
 801fdfe:	4770      	bx	lr
 801fe00:	2300      	movs	r3, #0
 801fe02:	e7e4      	b.n	801fdce <__hi0bits+0xa>

0801fe04 <__lo0bits>:
 801fe04:	6803      	ldr	r3, [r0, #0]
 801fe06:	f013 0207 	ands.w	r2, r3, #7
 801fe0a:	4601      	mov	r1, r0
 801fe0c:	d00b      	beq.n	801fe26 <__lo0bits+0x22>
 801fe0e:	07da      	lsls	r2, r3, #31
 801fe10:	d424      	bmi.n	801fe5c <__lo0bits+0x58>
 801fe12:	0798      	lsls	r0, r3, #30
 801fe14:	bf49      	itett	mi
 801fe16:	085b      	lsrmi	r3, r3, #1
 801fe18:	089b      	lsrpl	r3, r3, #2
 801fe1a:	2001      	movmi	r0, #1
 801fe1c:	600b      	strmi	r3, [r1, #0]
 801fe1e:	bf5c      	itt	pl
 801fe20:	600b      	strpl	r3, [r1, #0]
 801fe22:	2002      	movpl	r0, #2
 801fe24:	4770      	bx	lr
 801fe26:	b298      	uxth	r0, r3
 801fe28:	b9b0      	cbnz	r0, 801fe58 <__lo0bits+0x54>
 801fe2a:	0c1b      	lsrs	r3, r3, #16
 801fe2c:	2010      	movs	r0, #16
 801fe2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 801fe32:	bf04      	itt	eq
 801fe34:	0a1b      	lsreq	r3, r3, #8
 801fe36:	3008      	addeq	r0, #8
 801fe38:	071a      	lsls	r2, r3, #28
 801fe3a:	bf04      	itt	eq
 801fe3c:	091b      	lsreq	r3, r3, #4
 801fe3e:	3004      	addeq	r0, #4
 801fe40:	079a      	lsls	r2, r3, #30
 801fe42:	bf04      	itt	eq
 801fe44:	089b      	lsreq	r3, r3, #2
 801fe46:	3002      	addeq	r0, #2
 801fe48:	07da      	lsls	r2, r3, #31
 801fe4a:	d403      	bmi.n	801fe54 <__lo0bits+0x50>
 801fe4c:	085b      	lsrs	r3, r3, #1
 801fe4e:	f100 0001 	add.w	r0, r0, #1
 801fe52:	d005      	beq.n	801fe60 <__lo0bits+0x5c>
 801fe54:	600b      	str	r3, [r1, #0]
 801fe56:	4770      	bx	lr
 801fe58:	4610      	mov	r0, r2
 801fe5a:	e7e8      	b.n	801fe2e <__lo0bits+0x2a>
 801fe5c:	2000      	movs	r0, #0
 801fe5e:	4770      	bx	lr
 801fe60:	2020      	movs	r0, #32
 801fe62:	4770      	bx	lr

0801fe64 <__i2b>:
 801fe64:	b510      	push	{r4, lr}
 801fe66:	460c      	mov	r4, r1
 801fe68:	2101      	movs	r1, #1
 801fe6a:	f7ff feb5 	bl	801fbd8 <_Balloc>
 801fe6e:	4602      	mov	r2, r0
 801fe70:	b928      	cbnz	r0, 801fe7e <__i2b+0x1a>
 801fe72:	4b05      	ldr	r3, [pc, #20]	; (801fe88 <__i2b+0x24>)
 801fe74:	4805      	ldr	r0, [pc, #20]	; (801fe8c <__i2b+0x28>)
 801fe76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801fe7a:	f000 fd41 	bl	8020900 <__assert_func>
 801fe7e:	2301      	movs	r3, #1
 801fe80:	6144      	str	r4, [r0, #20]
 801fe82:	6103      	str	r3, [r0, #16]
 801fe84:	bd10      	pop	{r4, pc}
 801fe86:	bf00      	nop
 801fe88:	08022b5c 	.word	0x08022b5c
 801fe8c:	08022bec 	.word	0x08022bec

0801fe90 <__multiply>:
 801fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe94:	4614      	mov	r4, r2
 801fe96:	690a      	ldr	r2, [r1, #16]
 801fe98:	6923      	ldr	r3, [r4, #16]
 801fe9a:	429a      	cmp	r2, r3
 801fe9c:	bfb8      	it	lt
 801fe9e:	460b      	movlt	r3, r1
 801fea0:	460d      	mov	r5, r1
 801fea2:	bfbc      	itt	lt
 801fea4:	4625      	movlt	r5, r4
 801fea6:	461c      	movlt	r4, r3
 801fea8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801feac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801feb0:	68ab      	ldr	r3, [r5, #8]
 801feb2:	6869      	ldr	r1, [r5, #4]
 801feb4:	eb0a 0709 	add.w	r7, sl, r9
 801feb8:	42bb      	cmp	r3, r7
 801feba:	b085      	sub	sp, #20
 801febc:	bfb8      	it	lt
 801febe:	3101      	addlt	r1, #1
 801fec0:	f7ff fe8a 	bl	801fbd8 <_Balloc>
 801fec4:	b930      	cbnz	r0, 801fed4 <__multiply+0x44>
 801fec6:	4602      	mov	r2, r0
 801fec8:	4b42      	ldr	r3, [pc, #264]	; (801ffd4 <__multiply+0x144>)
 801feca:	4843      	ldr	r0, [pc, #268]	; (801ffd8 <__multiply+0x148>)
 801fecc:	f240 115d 	movw	r1, #349	; 0x15d
 801fed0:	f000 fd16 	bl	8020900 <__assert_func>
 801fed4:	f100 0614 	add.w	r6, r0, #20
 801fed8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801fedc:	4633      	mov	r3, r6
 801fede:	2200      	movs	r2, #0
 801fee0:	4543      	cmp	r3, r8
 801fee2:	d31e      	bcc.n	801ff22 <__multiply+0x92>
 801fee4:	f105 0c14 	add.w	ip, r5, #20
 801fee8:	f104 0314 	add.w	r3, r4, #20
 801feec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801fef0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801fef4:	9202      	str	r2, [sp, #8]
 801fef6:	ebac 0205 	sub.w	r2, ip, r5
 801fefa:	3a15      	subs	r2, #21
 801fefc:	f022 0203 	bic.w	r2, r2, #3
 801ff00:	3204      	adds	r2, #4
 801ff02:	f105 0115 	add.w	r1, r5, #21
 801ff06:	458c      	cmp	ip, r1
 801ff08:	bf38      	it	cc
 801ff0a:	2204      	movcc	r2, #4
 801ff0c:	9201      	str	r2, [sp, #4]
 801ff0e:	9a02      	ldr	r2, [sp, #8]
 801ff10:	9303      	str	r3, [sp, #12]
 801ff12:	429a      	cmp	r2, r3
 801ff14:	d808      	bhi.n	801ff28 <__multiply+0x98>
 801ff16:	2f00      	cmp	r7, #0
 801ff18:	dc55      	bgt.n	801ffc6 <__multiply+0x136>
 801ff1a:	6107      	str	r7, [r0, #16]
 801ff1c:	b005      	add	sp, #20
 801ff1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff22:	f843 2b04 	str.w	r2, [r3], #4
 801ff26:	e7db      	b.n	801fee0 <__multiply+0x50>
 801ff28:	f8b3 a000 	ldrh.w	sl, [r3]
 801ff2c:	f1ba 0f00 	cmp.w	sl, #0
 801ff30:	d020      	beq.n	801ff74 <__multiply+0xe4>
 801ff32:	f105 0e14 	add.w	lr, r5, #20
 801ff36:	46b1      	mov	r9, r6
 801ff38:	2200      	movs	r2, #0
 801ff3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801ff3e:	f8d9 b000 	ldr.w	fp, [r9]
 801ff42:	b2a1      	uxth	r1, r4
 801ff44:	fa1f fb8b 	uxth.w	fp, fp
 801ff48:	fb0a b101 	mla	r1, sl, r1, fp
 801ff4c:	4411      	add	r1, r2
 801ff4e:	f8d9 2000 	ldr.w	r2, [r9]
 801ff52:	0c24      	lsrs	r4, r4, #16
 801ff54:	0c12      	lsrs	r2, r2, #16
 801ff56:	fb0a 2404 	mla	r4, sl, r4, r2
 801ff5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801ff5e:	b289      	uxth	r1, r1
 801ff60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801ff64:	45f4      	cmp	ip, lr
 801ff66:	f849 1b04 	str.w	r1, [r9], #4
 801ff6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801ff6e:	d8e4      	bhi.n	801ff3a <__multiply+0xaa>
 801ff70:	9901      	ldr	r1, [sp, #4]
 801ff72:	5072      	str	r2, [r6, r1]
 801ff74:	9a03      	ldr	r2, [sp, #12]
 801ff76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ff7a:	3304      	adds	r3, #4
 801ff7c:	f1b9 0f00 	cmp.w	r9, #0
 801ff80:	d01f      	beq.n	801ffc2 <__multiply+0x132>
 801ff82:	6834      	ldr	r4, [r6, #0]
 801ff84:	f105 0114 	add.w	r1, r5, #20
 801ff88:	46b6      	mov	lr, r6
 801ff8a:	f04f 0a00 	mov.w	sl, #0
 801ff8e:	880a      	ldrh	r2, [r1, #0]
 801ff90:	f8be b002 	ldrh.w	fp, [lr, #2]
 801ff94:	fb09 b202 	mla	r2, r9, r2, fp
 801ff98:	4492      	add	sl, r2
 801ff9a:	b2a4      	uxth	r4, r4
 801ff9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ffa0:	f84e 4b04 	str.w	r4, [lr], #4
 801ffa4:	f851 4b04 	ldr.w	r4, [r1], #4
 801ffa8:	f8be 2000 	ldrh.w	r2, [lr]
 801ffac:	0c24      	lsrs	r4, r4, #16
 801ffae:	fb09 2404 	mla	r4, r9, r4, r2
 801ffb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801ffb6:	458c      	cmp	ip, r1
 801ffb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801ffbc:	d8e7      	bhi.n	801ff8e <__multiply+0xfe>
 801ffbe:	9a01      	ldr	r2, [sp, #4]
 801ffc0:	50b4      	str	r4, [r6, r2]
 801ffc2:	3604      	adds	r6, #4
 801ffc4:	e7a3      	b.n	801ff0e <__multiply+0x7e>
 801ffc6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d1a5      	bne.n	801ff1a <__multiply+0x8a>
 801ffce:	3f01      	subs	r7, #1
 801ffd0:	e7a1      	b.n	801ff16 <__multiply+0x86>
 801ffd2:	bf00      	nop
 801ffd4:	08022b5c 	.word	0x08022b5c
 801ffd8:	08022bec 	.word	0x08022bec

0801ffdc <__pow5mult>:
 801ffdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ffe0:	4615      	mov	r5, r2
 801ffe2:	f012 0203 	ands.w	r2, r2, #3
 801ffe6:	4606      	mov	r6, r0
 801ffe8:	460f      	mov	r7, r1
 801ffea:	d007      	beq.n	801fffc <__pow5mult+0x20>
 801ffec:	4c25      	ldr	r4, [pc, #148]	; (8020084 <__pow5mult+0xa8>)
 801ffee:	3a01      	subs	r2, #1
 801fff0:	2300      	movs	r3, #0
 801fff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fff6:	f7ff fe51 	bl	801fc9c <__multadd>
 801fffa:	4607      	mov	r7, r0
 801fffc:	10ad      	asrs	r5, r5, #2
 801fffe:	d03d      	beq.n	802007c <__pow5mult+0xa0>
 8020000:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020002:	b97c      	cbnz	r4, 8020024 <__pow5mult+0x48>
 8020004:	2010      	movs	r0, #16
 8020006:	f7fc fc93 	bl	801c930 <malloc>
 802000a:	4602      	mov	r2, r0
 802000c:	6270      	str	r0, [r6, #36]	; 0x24
 802000e:	b928      	cbnz	r0, 802001c <__pow5mult+0x40>
 8020010:	4b1d      	ldr	r3, [pc, #116]	; (8020088 <__pow5mult+0xac>)
 8020012:	481e      	ldr	r0, [pc, #120]	; (802008c <__pow5mult+0xb0>)
 8020014:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020018:	f000 fc72 	bl	8020900 <__assert_func>
 802001c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020020:	6004      	str	r4, [r0, #0]
 8020022:	60c4      	str	r4, [r0, #12]
 8020024:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802002c:	b94c      	cbnz	r4, 8020042 <__pow5mult+0x66>
 802002e:	f240 2171 	movw	r1, #625	; 0x271
 8020032:	4630      	mov	r0, r6
 8020034:	f7ff ff16 	bl	801fe64 <__i2b>
 8020038:	2300      	movs	r3, #0
 802003a:	f8c8 0008 	str.w	r0, [r8, #8]
 802003e:	4604      	mov	r4, r0
 8020040:	6003      	str	r3, [r0, #0]
 8020042:	f04f 0900 	mov.w	r9, #0
 8020046:	07eb      	lsls	r3, r5, #31
 8020048:	d50a      	bpl.n	8020060 <__pow5mult+0x84>
 802004a:	4639      	mov	r1, r7
 802004c:	4622      	mov	r2, r4
 802004e:	4630      	mov	r0, r6
 8020050:	f7ff ff1e 	bl	801fe90 <__multiply>
 8020054:	4639      	mov	r1, r7
 8020056:	4680      	mov	r8, r0
 8020058:	4630      	mov	r0, r6
 802005a:	f7ff fdfd 	bl	801fc58 <_Bfree>
 802005e:	4647      	mov	r7, r8
 8020060:	106d      	asrs	r5, r5, #1
 8020062:	d00b      	beq.n	802007c <__pow5mult+0xa0>
 8020064:	6820      	ldr	r0, [r4, #0]
 8020066:	b938      	cbnz	r0, 8020078 <__pow5mult+0x9c>
 8020068:	4622      	mov	r2, r4
 802006a:	4621      	mov	r1, r4
 802006c:	4630      	mov	r0, r6
 802006e:	f7ff ff0f 	bl	801fe90 <__multiply>
 8020072:	6020      	str	r0, [r4, #0]
 8020074:	f8c0 9000 	str.w	r9, [r0]
 8020078:	4604      	mov	r4, r0
 802007a:	e7e4      	b.n	8020046 <__pow5mult+0x6a>
 802007c:	4638      	mov	r0, r7
 802007e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020082:	bf00      	nop
 8020084:	08022d40 	.word	0x08022d40
 8020088:	08022ae6 	.word	0x08022ae6
 802008c:	08022bec 	.word	0x08022bec

08020090 <__lshift>:
 8020090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020094:	460c      	mov	r4, r1
 8020096:	6849      	ldr	r1, [r1, #4]
 8020098:	6923      	ldr	r3, [r4, #16]
 802009a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802009e:	68a3      	ldr	r3, [r4, #8]
 80200a0:	4607      	mov	r7, r0
 80200a2:	4691      	mov	r9, r2
 80200a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80200a8:	f108 0601 	add.w	r6, r8, #1
 80200ac:	42b3      	cmp	r3, r6
 80200ae:	db0b      	blt.n	80200c8 <__lshift+0x38>
 80200b0:	4638      	mov	r0, r7
 80200b2:	f7ff fd91 	bl	801fbd8 <_Balloc>
 80200b6:	4605      	mov	r5, r0
 80200b8:	b948      	cbnz	r0, 80200ce <__lshift+0x3e>
 80200ba:	4602      	mov	r2, r0
 80200bc:	4b28      	ldr	r3, [pc, #160]	; (8020160 <__lshift+0xd0>)
 80200be:	4829      	ldr	r0, [pc, #164]	; (8020164 <__lshift+0xd4>)
 80200c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80200c4:	f000 fc1c 	bl	8020900 <__assert_func>
 80200c8:	3101      	adds	r1, #1
 80200ca:	005b      	lsls	r3, r3, #1
 80200cc:	e7ee      	b.n	80200ac <__lshift+0x1c>
 80200ce:	2300      	movs	r3, #0
 80200d0:	f100 0114 	add.w	r1, r0, #20
 80200d4:	f100 0210 	add.w	r2, r0, #16
 80200d8:	4618      	mov	r0, r3
 80200da:	4553      	cmp	r3, sl
 80200dc:	db33      	blt.n	8020146 <__lshift+0xb6>
 80200de:	6920      	ldr	r0, [r4, #16]
 80200e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80200e4:	f104 0314 	add.w	r3, r4, #20
 80200e8:	f019 091f 	ands.w	r9, r9, #31
 80200ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80200f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80200f4:	d02b      	beq.n	802014e <__lshift+0xbe>
 80200f6:	f1c9 0e20 	rsb	lr, r9, #32
 80200fa:	468a      	mov	sl, r1
 80200fc:	2200      	movs	r2, #0
 80200fe:	6818      	ldr	r0, [r3, #0]
 8020100:	fa00 f009 	lsl.w	r0, r0, r9
 8020104:	4302      	orrs	r2, r0
 8020106:	f84a 2b04 	str.w	r2, [sl], #4
 802010a:	f853 2b04 	ldr.w	r2, [r3], #4
 802010e:	459c      	cmp	ip, r3
 8020110:	fa22 f20e 	lsr.w	r2, r2, lr
 8020114:	d8f3      	bhi.n	80200fe <__lshift+0x6e>
 8020116:	ebac 0304 	sub.w	r3, ip, r4
 802011a:	3b15      	subs	r3, #21
 802011c:	f023 0303 	bic.w	r3, r3, #3
 8020120:	3304      	adds	r3, #4
 8020122:	f104 0015 	add.w	r0, r4, #21
 8020126:	4584      	cmp	ip, r0
 8020128:	bf38      	it	cc
 802012a:	2304      	movcc	r3, #4
 802012c:	50ca      	str	r2, [r1, r3]
 802012e:	b10a      	cbz	r2, 8020134 <__lshift+0xa4>
 8020130:	f108 0602 	add.w	r6, r8, #2
 8020134:	3e01      	subs	r6, #1
 8020136:	4638      	mov	r0, r7
 8020138:	612e      	str	r6, [r5, #16]
 802013a:	4621      	mov	r1, r4
 802013c:	f7ff fd8c 	bl	801fc58 <_Bfree>
 8020140:	4628      	mov	r0, r5
 8020142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020146:	f842 0f04 	str.w	r0, [r2, #4]!
 802014a:	3301      	adds	r3, #1
 802014c:	e7c5      	b.n	80200da <__lshift+0x4a>
 802014e:	3904      	subs	r1, #4
 8020150:	f853 2b04 	ldr.w	r2, [r3], #4
 8020154:	f841 2f04 	str.w	r2, [r1, #4]!
 8020158:	459c      	cmp	ip, r3
 802015a:	d8f9      	bhi.n	8020150 <__lshift+0xc0>
 802015c:	e7ea      	b.n	8020134 <__lshift+0xa4>
 802015e:	bf00      	nop
 8020160:	08022b5c 	.word	0x08022b5c
 8020164:	08022bec 	.word	0x08022bec

08020168 <__mcmp>:
 8020168:	b530      	push	{r4, r5, lr}
 802016a:	6902      	ldr	r2, [r0, #16]
 802016c:	690c      	ldr	r4, [r1, #16]
 802016e:	1b12      	subs	r2, r2, r4
 8020170:	d10e      	bne.n	8020190 <__mcmp+0x28>
 8020172:	f100 0314 	add.w	r3, r0, #20
 8020176:	3114      	adds	r1, #20
 8020178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802017c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8020188:	42a5      	cmp	r5, r4
 802018a:	d003      	beq.n	8020194 <__mcmp+0x2c>
 802018c:	d305      	bcc.n	802019a <__mcmp+0x32>
 802018e:	2201      	movs	r2, #1
 8020190:	4610      	mov	r0, r2
 8020192:	bd30      	pop	{r4, r5, pc}
 8020194:	4283      	cmp	r3, r0
 8020196:	d3f3      	bcc.n	8020180 <__mcmp+0x18>
 8020198:	e7fa      	b.n	8020190 <__mcmp+0x28>
 802019a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802019e:	e7f7      	b.n	8020190 <__mcmp+0x28>

080201a0 <__mdiff>:
 80201a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a4:	460c      	mov	r4, r1
 80201a6:	4606      	mov	r6, r0
 80201a8:	4611      	mov	r1, r2
 80201aa:	4620      	mov	r0, r4
 80201ac:	4617      	mov	r7, r2
 80201ae:	f7ff ffdb 	bl	8020168 <__mcmp>
 80201b2:	1e05      	subs	r5, r0, #0
 80201b4:	d110      	bne.n	80201d8 <__mdiff+0x38>
 80201b6:	4629      	mov	r1, r5
 80201b8:	4630      	mov	r0, r6
 80201ba:	f7ff fd0d 	bl	801fbd8 <_Balloc>
 80201be:	b930      	cbnz	r0, 80201ce <__mdiff+0x2e>
 80201c0:	4b39      	ldr	r3, [pc, #228]	; (80202a8 <__mdiff+0x108>)
 80201c2:	4602      	mov	r2, r0
 80201c4:	f240 2132 	movw	r1, #562	; 0x232
 80201c8:	4838      	ldr	r0, [pc, #224]	; (80202ac <__mdiff+0x10c>)
 80201ca:	f000 fb99 	bl	8020900 <__assert_func>
 80201ce:	2301      	movs	r3, #1
 80201d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80201d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201d8:	bfa4      	itt	ge
 80201da:	463b      	movge	r3, r7
 80201dc:	4627      	movge	r7, r4
 80201de:	4630      	mov	r0, r6
 80201e0:	6879      	ldr	r1, [r7, #4]
 80201e2:	bfa6      	itte	ge
 80201e4:	461c      	movge	r4, r3
 80201e6:	2500      	movge	r5, #0
 80201e8:	2501      	movlt	r5, #1
 80201ea:	f7ff fcf5 	bl	801fbd8 <_Balloc>
 80201ee:	b920      	cbnz	r0, 80201fa <__mdiff+0x5a>
 80201f0:	4b2d      	ldr	r3, [pc, #180]	; (80202a8 <__mdiff+0x108>)
 80201f2:	4602      	mov	r2, r0
 80201f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80201f8:	e7e6      	b.n	80201c8 <__mdiff+0x28>
 80201fa:	693e      	ldr	r6, [r7, #16]
 80201fc:	60c5      	str	r5, [r0, #12]
 80201fe:	6925      	ldr	r5, [r4, #16]
 8020200:	f107 0114 	add.w	r1, r7, #20
 8020204:	f104 0914 	add.w	r9, r4, #20
 8020208:	f100 0e14 	add.w	lr, r0, #20
 802020c:	f107 0210 	add.w	r2, r7, #16
 8020210:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020214:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8020218:	46f2      	mov	sl, lr
 802021a:	2700      	movs	r7, #0
 802021c:	f859 3b04 	ldr.w	r3, [r9], #4
 8020220:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020224:	fa1f f883 	uxth.w	r8, r3
 8020228:	fa17 f78b 	uxtah	r7, r7, fp
 802022c:	0c1b      	lsrs	r3, r3, #16
 802022e:	eba7 0808 	sub.w	r8, r7, r8
 8020232:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8020236:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802023a:	fa1f f888 	uxth.w	r8, r8
 802023e:	141f      	asrs	r7, r3, #16
 8020240:	454d      	cmp	r5, r9
 8020242:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8020246:	f84a 3b04 	str.w	r3, [sl], #4
 802024a:	d8e7      	bhi.n	802021c <__mdiff+0x7c>
 802024c:	1b2b      	subs	r3, r5, r4
 802024e:	3b15      	subs	r3, #21
 8020250:	f023 0303 	bic.w	r3, r3, #3
 8020254:	3304      	adds	r3, #4
 8020256:	3415      	adds	r4, #21
 8020258:	42a5      	cmp	r5, r4
 802025a:	bf38      	it	cc
 802025c:	2304      	movcc	r3, #4
 802025e:	4419      	add	r1, r3
 8020260:	4473      	add	r3, lr
 8020262:	469e      	mov	lr, r3
 8020264:	460d      	mov	r5, r1
 8020266:	4565      	cmp	r5, ip
 8020268:	d30e      	bcc.n	8020288 <__mdiff+0xe8>
 802026a:	f10c 0203 	add.w	r2, ip, #3
 802026e:	1a52      	subs	r2, r2, r1
 8020270:	f022 0203 	bic.w	r2, r2, #3
 8020274:	3903      	subs	r1, #3
 8020276:	458c      	cmp	ip, r1
 8020278:	bf38      	it	cc
 802027a:	2200      	movcc	r2, #0
 802027c:	441a      	add	r2, r3
 802027e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020282:	b17b      	cbz	r3, 80202a4 <__mdiff+0x104>
 8020284:	6106      	str	r6, [r0, #16]
 8020286:	e7a5      	b.n	80201d4 <__mdiff+0x34>
 8020288:	f855 8b04 	ldr.w	r8, [r5], #4
 802028c:	fa17 f488 	uxtah	r4, r7, r8
 8020290:	1422      	asrs	r2, r4, #16
 8020292:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8020296:	b2a4      	uxth	r4, r4
 8020298:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 802029c:	f84e 4b04 	str.w	r4, [lr], #4
 80202a0:	1417      	asrs	r7, r2, #16
 80202a2:	e7e0      	b.n	8020266 <__mdiff+0xc6>
 80202a4:	3e01      	subs	r6, #1
 80202a6:	e7ea      	b.n	802027e <__mdiff+0xde>
 80202a8:	08022b5c 	.word	0x08022b5c
 80202ac:	08022bec 	.word	0x08022bec

080202b0 <__ulp>:
 80202b0:	b082      	sub	sp, #8
 80202b2:	ed8d 0b00 	vstr	d0, [sp]
 80202b6:	9b01      	ldr	r3, [sp, #4]
 80202b8:	4912      	ldr	r1, [pc, #72]	; (8020304 <__ulp+0x54>)
 80202ba:	4019      	ands	r1, r3
 80202bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80202c0:	2900      	cmp	r1, #0
 80202c2:	dd05      	ble.n	80202d0 <__ulp+0x20>
 80202c4:	2200      	movs	r2, #0
 80202c6:	460b      	mov	r3, r1
 80202c8:	ec43 2b10 	vmov	d0, r2, r3
 80202cc:	b002      	add	sp, #8
 80202ce:	4770      	bx	lr
 80202d0:	4249      	negs	r1, r1
 80202d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80202d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80202da:	f04f 0200 	mov.w	r2, #0
 80202de:	f04f 0300 	mov.w	r3, #0
 80202e2:	da04      	bge.n	80202ee <__ulp+0x3e>
 80202e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80202e8:	fa41 f300 	asr.w	r3, r1, r0
 80202ec:	e7ec      	b.n	80202c8 <__ulp+0x18>
 80202ee:	f1a0 0114 	sub.w	r1, r0, #20
 80202f2:	291e      	cmp	r1, #30
 80202f4:	bfda      	itte	le
 80202f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80202fa:	fa20 f101 	lsrle.w	r1, r0, r1
 80202fe:	2101      	movgt	r1, #1
 8020300:	460a      	mov	r2, r1
 8020302:	e7e1      	b.n	80202c8 <__ulp+0x18>
 8020304:	7ff00000 	.word	0x7ff00000

08020308 <__b2d>:
 8020308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802030a:	6905      	ldr	r5, [r0, #16]
 802030c:	f100 0714 	add.w	r7, r0, #20
 8020310:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020314:	1f2e      	subs	r6, r5, #4
 8020316:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802031a:	4620      	mov	r0, r4
 802031c:	f7ff fd52 	bl	801fdc4 <__hi0bits>
 8020320:	f1c0 0320 	rsb	r3, r0, #32
 8020324:	280a      	cmp	r0, #10
 8020326:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80203a4 <__b2d+0x9c>
 802032a:	600b      	str	r3, [r1, #0]
 802032c:	dc14      	bgt.n	8020358 <__b2d+0x50>
 802032e:	f1c0 0e0b 	rsb	lr, r0, #11
 8020332:	fa24 f10e 	lsr.w	r1, r4, lr
 8020336:	42b7      	cmp	r7, r6
 8020338:	ea41 030c 	orr.w	r3, r1, ip
 802033c:	bf34      	ite	cc
 802033e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020342:	2100      	movcs	r1, #0
 8020344:	3015      	adds	r0, #21
 8020346:	fa04 f000 	lsl.w	r0, r4, r0
 802034a:	fa21 f10e 	lsr.w	r1, r1, lr
 802034e:	ea40 0201 	orr.w	r2, r0, r1
 8020352:	ec43 2b10 	vmov	d0, r2, r3
 8020356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020358:	42b7      	cmp	r7, r6
 802035a:	bf3a      	itte	cc
 802035c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020360:	f1a5 0608 	subcc.w	r6, r5, #8
 8020364:	2100      	movcs	r1, #0
 8020366:	380b      	subs	r0, #11
 8020368:	d017      	beq.n	802039a <__b2d+0x92>
 802036a:	f1c0 0c20 	rsb	ip, r0, #32
 802036e:	fa04 f500 	lsl.w	r5, r4, r0
 8020372:	42be      	cmp	r6, r7
 8020374:	fa21 f40c 	lsr.w	r4, r1, ip
 8020378:	ea45 0504 	orr.w	r5, r5, r4
 802037c:	bf8c      	ite	hi
 802037e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020382:	2400      	movls	r4, #0
 8020384:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8020388:	fa01 f000 	lsl.w	r0, r1, r0
 802038c:	fa24 f40c 	lsr.w	r4, r4, ip
 8020390:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8020394:	ea40 0204 	orr.w	r2, r0, r4
 8020398:	e7db      	b.n	8020352 <__b2d+0x4a>
 802039a:	ea44 030c 	orr.w	r3, r4, ip
 802039e:	460a      	mov	r2, r1
 80203a0:	e7d7      	b.n	8020352 <__b2d+0x4a>
 80203a2:	bf00      	nop
 80203a4:	3ff00000 	.word	0x3ff00000

080203a8 <__d2b>:
 80203a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80203ac:	4689      	mov	r9, r1
 80203ae:	2101      	movs	r1, #1
 80203b0:	ec57 6b10 	vmov	r6, r7, d0
 80203b4:	4690      	mov	r8, r2
 80203b6:	f7ff fc0f 	bl	801fbd8 <_Balloc>
 80203ba:	4604      	mov	r4, r0
 80203bc:	b930      	cbnz	r0, 80203cc <__d2b+0x24>
 80203be:	4602      	mov	r2, r0
 80203c0:	4b25      	ldr	r3, [pc, #148]	; (8020458 <__d2b+0xb0>)
 80203c2:	4826      	ldr	r0, [pc, #152]	; (802045c <__d2b+0xb4>)
 80203c4:	f240 310a 	movw	r1, #778	; 0x30a
 80203c8:	f000 fa9a 	bl	8020900 <__assert_func>
 80203cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80203d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80203d4:	bb35      	cbnz	r5, 8020424 <__d2b+0x7c>
 80203d6:	2e00      	cmp	r6, #0
 80203d8:	9301      	str	r3, [sp, #4]
 80203da:	d028      	beq.n	802042e <__d2b+0x86>
 80203dc:	4668      	mov	r0, sp
 80203de:	9600      	str	r6, [sp, #0]
 80203e0:	f7ff fd10 	bl	801fe04 <__lo0bits>
 80203e4:	9900      	ldr	r1, [sp, #0]
 80203e6:	b300      	cbz	r0, 802042a <__d2b+0x82>
 80203e8:	9a01      	ldr	r2, [sp, #4]
 80203ea:	f1c0 0320 	rsb	r3, r0, #32
 80203ee:	fa02 f303 	lsl.w	r3, r2, r3
 80203f2:	430b      	orrs	r3, r1
 80203f4:	40c2      	lsrs	r2, r0
 80203f6:	6163      	str	r3, [r4, #20]
 80203f8:	9201      	str	r2, [sp, #4]
 80203fa:	9b01      	ldr	r3, [sp, #4]
 80203fc:	61a3      	str	r3, [r4, #24]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	bf14      	ite	ne
 8020402:	2202      	movne	r2, #2
 8020404:	2201      	moveq	r2, #1
 8020406:	6122      	str	r2, [r4, #16]
 8020408:	b1d5      	cbz	r5, 8020440 <__d2b+0x98>
 802040a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802040e:	4405      	add	r5, r0
 8020410:	f8c9 5000 	str.w	r5, [r9]
 8020414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8020418:	f8c8 0000 	str.w	r0, [r8]
 802041c:	4620      	mov	r0, r4
 802041e:	b003      	add	sp, #12
 8020420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020428:	e7d5      	b.n	80203d6 <__d2b+0x2e>
 802042a:	6161      	str	r1, [r4, #20]
 802042c:	e7e5      	b.n	80203fa <__d2b+0x52>
 802042e:	a801      	add	r0, sp, #4
 8020430:	f7ff fce8 	bl	801fe04 <__lo0bits>
 8020434:	9b01      	ldr	r3, [sp, #4]
 8020436:	6163      	str	r3, [r4, #20]
 8020438:	2201      	movs	r2, #1
 802043a:	6122      	str	r2, [r4, #16]
 802043c:	3020      	adds	r0, #32
 802043e:	e7e3      	b.n	8020408 <__d2b+0x60>
 8020440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8020448:	f8c9 0000 	str.w	r0, [r9]
 802044c:	6918      	ldr	r0, [r3, #16]
 802044e:	f7ff fcb9 	bl	801fdc4 <__hi0bits>
 8020452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020456:	e7df      	b.n	8020418 <__d2b+0x70>
 8020458:	08022b5c 	.word	0x08022b5c
 802045c:	08022bec 	.word	0x08022bec

08020460 <__ratio>:
 8020460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020464:	4688      	mov	r8, r1
 8020466:	4669      	mov	r1, sp
 8020468:	4681      	mov	r9, r0
 802046a:	f7ff ff4d 	bl	8020308 <__b2d>
 802046e:	a901      	add	r1, sp, #4
 8020470:	4640      	mov	r0, r8
 8020472:	ec55 4b10 	vmov	r4, r5, d0
 8020476:	f7ff ff47 	bl	8020308 <__b2d>
 802047a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802047e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8020482:	eba3 0c02 	sub.w	ip, r3, r2
 8020486:	e9dd 3200 	ldrd	r3, r2, [sp]
 802048a:	1a9b      	subs	r3, r3, r2
 802048c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8020490:	ec51 0b10 	vmov	r0, r1, d0
 8020494:	2b00      	cmp	r3, #0
 8020496:	bfd6      	itet	le
 8020498:	460a      	movle	r2, r1
 802049a:	462a      	movgt	r2, r5
 802049c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80204a0:	468b      	mov	fp, r1
 80204a2:	462f      	mov	r7, r5
 80204a4:	bfd4      	ite	le
 80204a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80204aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80204ae:	4620      	mov	r0, r4
 80204b0:	ee10 2a10 	vmov	r2, s0
 80204b4:	465b      	mov	r3, fp
 80204b6:	4639      	mov	r1, r7
 80204b8:	f7e0 f9c8 	bl	800084c <__aeabi_ddiv>
 80204bc:	ec41 0b10 	vmov	d0, r0, r1
 80204c0:	b003      	add	sp, #12
 80204c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080204c6 <__copybits>:
 80204c6:	3901      	subs	r1, #1
 80204c8:	b570      	push	{r4, r5, r6, lr}
 80204ca:	1149      	asrs	r1, r1, #5
 80204cc:	6914      	ldr	r4, [r2, #16]
 80204ce:	3101      	adds	r1, #1
 80204d0:	f102 0314 	add.w	r3, r2, #20
 80204d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80204d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80204dc:	1f05      	subs	r5, r0, #4
 80204de:	42a3      	cmp	r3, r4
 80204e0:	d30c      	bcc.n	80204fc <__copybits+0x36>
 80204e2:	1aa3      	subs	r3, r4, r2
 80204e4:	3b11      	subs	r3, #17
 80204e6:	f023 0303 	bic.w	r3, r3, #3
 80204ea:	3211      	adds	r2, #17
 80204ec:	42a2      	cmp	r2, r4
 80204ee:	bf88      	it	hi
 80204f0:	2300      	movhi	r3, #0
 80204f2:	4418      	add	r0, r3
 80204f4:	2300      	movs	r3, #0
 80204f6:	4288      	cmp	r0, r1
 80204f8:	d305      	bcc.n	8020506 <__copybits+0x40>
 80204fa:	bd70      	pop	{r4, r5, r6, pc}
 80204fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8020500:	f845 6f04 	str.w	r6, [r5, #4]!
 8020504:	e7eb      	b.n	80204de <__copybits+0x18>
 8020506:	f840 3b04 	str.w	r3, [r0], #4
 802050a:	e7f4      	b.n	80204f6 <__copybits+0x30>

0802050c <__any_on>:
 802050c:	f100 0214 	add.w	r2, r0, #20
 8020510:	6900      	ldr	r0, [r0, #16]
 8020512:	114b      	asrs	r3, r1, #5
 8020514:	4298      	cmp	r0, r3
 8020516:	b510      	push	{r4, lr}
 8020518:	db11      	blt.n	802053e <__any_on+0x32>
 802051a:	dd0a      	ble.n	8020532 <__any_on+0x26>
 802051c:	f011 011f 	ands.w	r1, r1, #31
 8020520:	d007      	beq.n	8020532 <__any_on+0x26>
 8020522:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8020526:	fa24 f001 	lsr.w	r0, r4, r1
 802052a:	fa00 f101 	lsl.w	r1, r0, r1
 802052e:	428c      	cmp	r4, r1
 8020530:	d10b      	bne.n	802054a <__any_on+0x3e>
 8020532:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020536:	4293      	cmp	r3, r2
 8020538:	d803      	bhi.n	8020542 <__any_on+0x36>
 802053a:	2000      	movs	r0, #0
 802053c:	bd10      	pop	{r4, pc}
 802053e:	4603      	mov	r3, r0
 8020540:	e7f7      	b.n	8020532 <__any_on+0x26>
 8020542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020546:	2900      	cmp	r1, #0
 8020548:	d0f5      	beq.n	8020536 <__any_on+0x2a>
 802054a:	2001      	movs	r0, #1
 802054c:	e7f6      	b.n	802053c <__any_on+0x30>

0802054e <_calloc_r>:
 802054e:	b513      	push	{r0, r1, r4, lr}
 8020550:	434a      	muls	r2, r1
 8020552:	4611      	mov	r1, r2
 8020554:	9201      	str	r2, [sp, #4]
 8020556:	f7fc fa61 	bl	801ca1c <_malloc_r>
 802055a:	4604      	mov	r4, r0
 802055c:	b118      	cbz	r0, 8020566 <_calloc_r+0x18>
 802055e:	9a01      	ldr	r2, [sp, #4]
 8020560:	2100      	movs	r1, #0
 8020562:	f7fc fa03 	bl	801c96c <memset>
 8020566:	4620      	mov	r0, r4
 8020568:	b002      	add	sp, #8
 802056a:	bd10      	pop	{r4, pc}

0802056c <_realloc_r>:
 802056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802056e:	4607      	mov	r7, r0
 8020570:	4614      	mov	r4, r2
 8020572:	460e      	mov	r6, r1
 8020574:	b921      	cbnz	r1, 8020580 <_realloc_r+0x14>
 8020576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802057a:	4611      	mov	r1, r2
 802057c:	f7fc ba4e 	b.w	801ca1c <_malloc_r>
 8020580:	b922      	cbnz	r2, 802058c <_realloc_r+0x20>
 8020582:	f7fc f9fb 	bl	801c97c <_free_r>
 8020586:	4625      	mov	r5, r4
 8020588:	4628      	mov	r0, r5
 802058a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802058c:	f000 fbbc 	bl	8020d08 <_malloc_usable_size_r>
 8020590:	42a0      	cmp	r0, r4
 8020592:	d20f      	bcs.n	80205b4 <_realloc_r+0x48>
 8020594:	4621      	mov	r1, r4
 8020596:	4638      	mov	r0, r7
 8020598:	f7fc fa40 	bl	801ca1c <_malloc_r>
 802059c:	4605      	mov	r5, r0
 802059e:	2800      	cmp	r0, #0
 80205a0:	d0f2      	beq.n	8020588 <_realloc_r+0x1c>
 80205a2:	4631      	mov	r1, r6
 80205a4:	4622      	mov	r2, r4
 80205a6:	f7fc f9d3 	bl	801c950 <memcpy>
 80205aa:	4631      	mov	r1, r6
 80205ac:	4638      	mov	r0, r7
 80205ae:	f7fc f9e5 	bl	801c97c <_free_r>
 80205b2:	e7e9      	b.n	8020588 <_realloc_r+0x1c>
 80205b4:	4635      	mov	r5, r6
 80205b6:	e7e7      	b.n	8020588 <_realloc_r+0x1c>

080205b8 <__ssputs_r>:
 80205b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205bc:	688e      	ldr	r6, [r1, #8]
 80205be:	429e      	cmp	r6, r3
 80205c0:	4682      	mov	sl, r0
 80205c2:	460c      	mov	r4, r1
 80205c4:	4690      	mov	r8, r2
 80205c6:	461f      	mov	r7, r3
 80205c8:	d838      	bhi.n	802063c <__ssputs_r+0x84>
 80205ca:	898a      	ldrh	r2, [r1, #12]
 80205cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80205d0:	d032      	beq.n	8020638 <__ssputs_r+0x80>
 80205d2:	6825      	ldr	r5, [r4, #0]
 80205d4:	6909      	ldr	r1, [r1, #16]
 80205d6:	eba5 0901 	sub.w	r9, r5, r1
 80205da:	6965      	ldr	r5, [r4, #20]
 80205dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80205e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80205e4:	3301      	adds	r3, #1
 80205e6:	444b      	add	r3, r9
 80205e8:	106d      	asrs	r5, r5, #1
 80205ea:	429d      	cmp	r5, r3
 80205ec:	bf38      	it	cc
 80205ee:	461d      	movcc	r5, r3
 80205f0:	0553      	lsls	r3, r2, #21
 80205f2:	d531      	bpl.n	8020658 <__ssputs_r+0xa0>
 80205f4:	4629      	mov	r1, r5
 80205f6:	f7fc fa11 	bl	801ca1c <_malloc_r>
 80205fa:	4606      	mov	r6, r0
 80205fc:	b950      	cbnz	r0, 8020614 <__ssputs_r+0x5c>
 80205fe:	230c      	movs	r3, #12
 8020600:	f8ca 3000 	str.w	r3, [sl]
 8020604:	89a3      	ldrh	r3, [r4, #12]
 8020606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802060a:	81a3      	strh	r3, [r4, #12]
 802060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020614:	6921      	ldr	r1, [r4, #16]
 8020616:	464a      	mov	r2, r9
 8020618:	f7fc f99a 	bl	801c950 <memcpy>
 802061c:	89a3      	ldrh	r3, [r4, #12]
 802061e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020626:	81a3      	strh	r3, [r4, #12]
 8020628:	6126      	str	r6, [r4, #16]
 802062a:	6165      	str	r5, [r4, #20]
 802062c:	444e      	add	r6, r9
 802062e:	eba5 0509 	sub.w	r5, r5, r9
 8020632:	6026      	str	r6, [r4, #0]
 8020634:	60a5      	str	r5, [r4, #8]
 8020636:	463e      	mov	r6, r7
 8020638:	42be      	cmp	r6, r7
 802063a:	d900      	bls.n	802063e <__ssputs_r+0x86>
 802063c:	463e      	mov	r6, r7
 802063e:	4632      	mov	r2, r6
 8020640:	6820      	ldr	r0, [r4, #0]
 8020642:	4641      	mov	r1, r8
 8020644:	f000 fb46 	bl	8020cd4 <memmove>
 8020648:	68a3      	ldr	r3, [r4, #8]
 802064a:	6822      	ldr	r2, [r4, #0]
 802064c:	1b9b      	subs	r3, r3, r6
 802064e:	4432      	add	r2, r6
 8020650:	60a3      	str	r3, [r4, #8]
 8020652:	6022      	str	r2, [r4, #0]
 8020654:	2000      	movs	r0, #0
 8020656:	e7db      	b.n	8020610 <__ssputs_r+0x58>
 8020658:	462a      	mov	r2, r5
 802065a:	f7ff ff87 	bl	802056c <_realloc_r>
 802065e:	4606      	mov	r6, r0
 8020660:	2800      	cmp	r0, #0
 8020662:	d1e1      	bne.n	8020628 <__ssputs_r+0x70>
 8020664:	6921      	ldr	r1, [r4, #16]
 8020666:	4650      	mov	r0, sl
 8020668:	f7fc f988 	bl	801c97c <_free_r>
 802066c:	e7c7      	b.n	80205fe <__ssputs_r+0x46>
	...

08020670 <_svfiprintf_r>:
 8020670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020674:	4698      	mov	r8, r3
 8020676:	898b      	ldrh	r3, [r1, #12]
 8020678:	061b      	lsls	r3, r3, #24
 802067a:	b09d      	sub	sp, #116	; 0x74
 802067c:	4607      	mov	r7, r0
 802067e:	460d      	mov	r5, r1
 8020680:	4614      	mov	r4, r2
 8020682:	d50e      	bpl.n	80206a2 <_svfiprintf_r+0x32>
 8020684:	690b      	ldr	r3, [r1, #16]
 8020686:	b963      	cbnz	r3, 80206a2 <_svfiprintf_r+0x32>
 8020688:	2140      	movs	r1, #64	; 0x40
 802068a:	f7fc f9c7 	bl	801ca1c <_malloc_r>
 802068e:	6028      	str	r0, [r5, #0]
 8020690:	6128      	str	r0, [r5, #16]
 8020692:	b920      	cbnz	r0, 802069e <_svfiprintf_r+0x2e>
 8020694:	230c      	movs	r3, #12
 8020696:	603b      	str	r3, [r7, #0]
 8020698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802069c:	e0d1      	b.n	8020842 <_svfiprintf_r+0x1d2>
 802069e:	2340      	movs	r3, #64	; 0x40
 80206a0:	616b      	str	r3, [r5, #20]
 80206a2:	2300      	movs	r3, #0
 80206a4:	9309      	str	r3, [sp, #36]	; 0x24
 80206a6:	2320      	movs	r3, #32
 80206a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80206ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80206b0:	2330      	movs	r3, #48	; 0x30
 80206b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802085c <_svfiprintf_r+0x1ec>
 80206b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80206ba:	f04f 0901 	mov.w	r9, #1
 80206be:	4623      	mov	r3, r4
 80206c0:	469a      	mov	sl, r3
 80206c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80206c6:	b10a      	cbz	r2, 80206cc <_svfiprintf_r+0x5c>
 80206c8:	2a25      	cmp	r2, #37	; 0x25
 80206ca:	d1f9      	bne.n	80206c0 <_svfiprintf_r+0x50>
 80206cc:	ebba 0b04 	subs.w	fp, sl, r4
 80206d0:	d00b      	beq.n	80206ea <_svfiprintf_r+0x7a>
 80206d2:	465b      	mov	r3, fp
 80206d4:	4622      	mov	r2, r4
 80206d6:	4629      	mov	r1, r5
 80206d8:	4638      	mov	r0, r7
 80206da:	f7ff ff6d 	bl	80205b8 <__ssputs_r>
 80206de:	3001      	adds	r0, #1
 80206e0:	f000 80aa 	beq.w	8020838 <_svfiprintf_r+0x1c8>
 80206e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80206e6:	445a      	add	r2, fp
 80206e8:	9209      	str	r2, [sp, #36]	; 0x24
 80206ea:	f89a 3000 	ldrb.w	r3, [sl]
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	f000 80a2 	beq.w	8020838 <_svfiprintf_r+0x1c8>
 80206f4:	2300      	movs	r3, #0
 80206f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80206fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80206fe:	f10a 0a01 	add.w	sl, sl, #1
 8020702:	9304      	str	r3, [sp, #16]
 8020704:	9307      	str	r3, [sp, #28]
 8020706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802070a:	931a      	str	r3, [sp, #104]	; 0x68
 802070c:	4654      	mov	r4, sl
 802070e:	2205      	movs	r2, #5
 8020710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020714:	4851      	ldr	r0, [pc, #324]	; (802085c <_svfiprintf_r+0x1ec>)
 8020716:	f7df fd63 	bl	80001e0 <memchr>
 802071a:	9a04      	ldr	r2, [sp, #16]
 802071c:	b9d8      	cbnz	r0, 8020756 <_svfiprintf_r+0xe6>
 802071e:	06d0      	lsls	r0, r2, #27
 8020720:	bf44      	itt	mi
 8020722:	2320      	movmi	r3, #32
 8020724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020728:	0711      	lsls	r1, r2, #28
 802072a:	bf44      	itt	mi
 802072c:	232b      	movmi	r3, #43	; 0x2b
 802072e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020732:	f89a 3000 	ldrb.w	r3, [sl]
 8020736:	2b2a      	cmp	r3, #42	; 0x2a
 8020738:	d015      	beq.n	8020766 <_svfiprintf_r+0xf6>
 802073a:	9a07      	ldr	r2, [sp, #28]
 802073c:	4654      	mov	r4, sl
 802073e:	2000      	movs	r0, #0
 8020740:	f04f 0c0a 	mov.w	ip, #10
 8020744:	4621      	mov	r1, r4
 8020746:	f811 3b01 	ldrb.w	r3, [r1], #1
 802074a:	3b30      	subs	r3, #48	; 0x30
 802074c:	2b09      	cmp	r3, #9
 802074e:	d94e      	bls.n	80207ee <_svfiprintf_r+0x17e>
 8020750:	b1b0      	cbz	r0, 8020780 <_svfiprintf_r+0x110>
 8020752:	9207      	str	r2, [sp, #28]
 8020754:	e014      	b.n	8020780 <_svfiprintf_r+0x110>
 8020756:	eba0 0308 	sub.w	r3, r0, r8
 802075a:	fa09 f303 	lsl.w	r3, r9, r3
 802075e:	4313      	orrs	r3, r2
 8020760:	9304      	str	r3, [sp, #16]
 8020762:	46a2      	mov	sl, r4
 8020764:	e7d2      	b.n	802070c <_svfiprintf_r+0x9c>
 8020766:	9b03      	ldr	r3, [sp, #12]
 8020768:	1d19      	adds	r1, r3, #4
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	9103      	str	r1, [sp, #12]
 802076e:	2b00      	cmp	r3, #0
 8020770:	bfbb      	ittet	lt
 8020772:	425b      	neglt	r3, r3
 8020774:	f042 0202 	orrlt.w	r2, r2, #2
 8020778:	9307      	strge	r3, [sp, #28]
 802077a:	9307      	strlt	r3, [sp, #28]
 802077c:	bfb8      	it	lt
 802077e:	9204      	strlt	r2, [sp, #16]
 8020780:	7823      	ldrb	r3, [r4, #0]
 8020782:	2b2e      	cmp	r3, #46	; 0x2e
 8020784:	d10c      	bne.n	80207a0 <_svfiprintf_r+0x130>
 8020786:	7863      	ldrb	r3, [r4, #1]
 8020788:	2b2a      	cmp	r3, #42	; 0x2a
 802078a:	d135      	bne.n	80207f8 <_svfiprintf_r+0x188>
 802078c:	9b03      	ldr	r3, [sp, #12]
 802078e:	1d1a      	adds	r2, r3, #4
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	9203      	str	r2, [sp, #12]
 8020794:	2b00      	cmp	r3, #0
 8020796:	bfb8      	it	lt
 8020798:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802079c:	3402      	adds	r4, #2
 802079e:	9305      	str	r3, [sp, #20]
 80207a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802086c <_svfiprintf_r+0x1fc>
 80207a4:	7821      	ldrb	r1, [r4, #0]
 80207a6:	2203      	movs	r2, #3
 80207a8:	4650      	mov	r0, sl
 80207aa:	f7df fd19 	bl	80001e0 <memchr>
 80207ae:	b140      	cbz	r0, 80207c2 <_svfiprintf_r+0x152>
 80207b0:	2340      	movs	r3, #64	; 0x40
 80207b2:	eba0 000a 	sub.w	r0, r0, sl
 80207b6:	fa03 f000 	lsl.w	r0, r3, r0
 80207ba:	9b04      	ldr	r3, [sp, #16]
 80207bc:	4303      	orrs	r3, r0
 80207be:	3401      	adds	r4, #1
 80207c0:	9304      	str	r3, [sp, #16]
 80207c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207c6:	4826      	ldr	r0, [pc, #152]	; (8020860 <_svfiprintf_r+0x1f0>)
 80207c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80207cc:	2206      	movs	r2, #6
 80207ce:	f7df fd07 	bl	80001e0 <memchr>
 80207d2:	2800      	cmp	r0, #0
 80207d4:	d038      	beq.n	8020848 <_svfiprintf_r+0x1d8>
 80207d6:	4b23      	ldr	r3, [pc, #140]	; (8020864 <_svfiprintf_r+0x1f4>)
 80207d8:	bb1b      	cbnz	r3, 8020822 <_svfiprintf_r+0x1b2>
 80207da:	9b03      	ldr	r3, [sp, #12]
 80207dc:	3307      	adds	r3, #7
 80207de:	f023 0307 	bic.w	r3, r3, #7
 80207e2:	3308      	adds	r3, #8
 80207e4:	9303      	str	r3, [sp, #12]
 80207e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80207e8:	4433      	add	r3, r6
 80207ea:	9309      	str	r3, [sp, #36]	; 0x24
 80207ec:	e767      	b.n	80206be <_svfiprintf_r+0x4e>
 80207ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80207f2:	460c      	mov	r4, r1
 80207f4:	2001      	movs	r0, #1
 80207f6:	e7a5      	b.n	8020744 <_svfiprintf_r+0xd4>
 80207f8:	2300      	movs	r3, #0
 80207fa:	3401      	adds	r4, #1
 80207fc:	9305      	str	r3, [sp, #20]
 80207fe:	4619      	mov	r1, r3
 8020800:	f04f 0c0a 	mov.w	ip, #10
 8020804:	4620      	mov	r0, r4
 8020806:	f810 2b01 	ldrb.w	r2, [r0], #1
 802080a:	3a30      	subs	r2, #48	; 0x30
 802080c:	2a09      	cmp	r2, #9
 802080e:	d903      	bls.n	8020818 <_svfiprintf_r+0x1a8>
 8020810:	2b00      	cmp	r3, #0
 8020812:	d0c5      	beq.n	80207a0 <_svfiprintf_r+0x130>
 8020814:	9105      	str	r1, [sp, #20]
 8020816:	e7c3      	b.n	80207a0 <_svfiprintf_r+0x130>
 8020818:	fb0c 2101 	mla	r1, ip, r1, r2
 802081c:	4604      	mov	r4, r0
 802081e:	2301      	movs	r3, #1
 8020820:	e7f0      	b.n	8020804 <_svfiprintf_r+0x194>
 8020822:	ab03      	add	r3, sp, #12
 8020824:	9300      	str	r3, [sp, #0]
 8020826:	462a      	mov	r2, r5
 8020828:	4b0f      	ldr	r3, [pc, #60]	; (8020868 <_svfiprintf_r+0x1f8>)
 802082a:	a904      	add	r1, sp, #16
 802082c:	4638      	mov	r0, r7
 802082e:	f7fc f9ef 	bl	801cc10 <_printf_float>
 8020832:	1c42      	adds	r2, r0, #1
 8020834:	4606      	mov	r6, r0
 8020836:	d1d6      	bne.n	80207e6 <_svfiprintf_r+0x176>
 8020838:	89ab      	ldrh	r3, [r5, #12]
 802083a:	065b      	lsls	r3, r3, #25
 802083c:	f53f af2c 	bmi.w	8020698 <_svfiprintf_r+0x28>
 8020840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020842:	b01d      	add	sp, #116	; 0x74
 8020844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020848:	ab03      	add	r3, sp, #12
 802084a:	9300      	str	r3, [sp, #0]
 802084c:	462a      	mov	r2, r5
 802084e:	4b06      	ldr	r3, [pc, #24]	; (8020868 <_svfiprintf_r+0x1f8>)
 8020850:	a904      	add	r1, sp, #16
 8020852:	4638      	mov	r0, r7
 8020854:	f7fc fc80 	bl	801d158 <_printf_i>
 8020858:	e7eb      	b.n	8020832 <_svfiprintf_r+0x1c2>
 802085a:	bf00      	nop
 802085c:	08022d4c 	.word	0x08022d4c
 8020860:	08022d56 	.word	0x08022d56
 8020864:	0801cc11 	.word	0x0801cc11
 8020868:	080205b9 	.word	0x080205b9
 802086c:	08022d52 	.word	0x08022d52

08020870 <_read_r>:
 8020870:	b538      	push	{r3, r4, r5, lr}
 8020872:	4d07      	ldr	r5, [pc, #28]	; (8020890 <_read_r+0x20>)
 8020874:	4604      	mov	r4, r0
 8020876:	4608      	mov	r0, r1
 8020878:	4611      	mov	r1, r2
 802087a:	2200      	movs	r2, #0
 802087c:	602a      	str	r2, [r5, #0]
 802087e:	461a      	mov	r2, r3
 8020880:	f7ed f838 	bl	800d8f4 <_read>
 8020884:	1c43      	adds	r3, r0, #1
 8020886:	d102      	bne.n	802088e <_read_r+0x1e>
 8020888:	682b      	ldr	r3, [r5, #0]
 802088a:	b103      	cbz	r3, 802088e <_read_r+0x1e>
 802088c:	6023      	str	r3, [r4, #0]
 802088e:	bd38      	pop	{r3, r4, r5, pc}
 8020890:	2000a7d4 	.word	0x2000a7d4
 8020894:	00000000 	.word	0x00000000

08020898 <nan>:
 8020898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80208a0 <nan+0x8>
 802089c:	4770      	bx	lr
 802089e:	bf00      	nop
 80208a0:	00000000 	.word	0x00000000
 80208a4:	7ff80000 	.word	0x7ff80000

080208a8 <finitef>:
 80208a8:	b082      	sub	sp, #8
 80208aa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80208ae:	9801      	ldr	r0, [sp, #4]
 80208b0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80208b4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80208b8:	bfac      	ite	ge
 80208ba:	2000      	movge	r0, #0
 80208bc:	2001      	movlt	r0, #1
 80208be:	b002      	add	sp, #8
 80208c0:	4770      	bx	lr

080208c2 <strncmp>:
 80208c2:	b510      	push	{r4, lr}
 80208c4:	b16a      	cbz	r2, 80208e2 <strncmp+0x20>
 80208c6:	3901      	subs	r1, #1
 80208c8:	1884      	adds	r4, r0, r2
 80208ca:	f810 3b01 	ldrb.w	r3, [r0], #1
 80208ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80208d2:	4293      	cmp	r3, r2
 80208d4:	d103      	bne.n	80208de <strncmp+0x1c>
 80208d6:	42a0      	cmp	r0, r4
 80208d8:	d001      	beq.n	80208de <strncmp+0x1c>
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d1f5      	bne.n	80208ca <strncmp+0x8>
 80208de:	1a98      	subs	r0, r3, r2
 80208e0:	bd10      	pop	{r4, pc}
 80208e2:	4610      	mov	r0, r2
 80208e4:	e7fc      	b.n	80208e0 <strncmp+0x1e>

080208e6 <__ascii_wctomb>:
 80208e6:	b149      	cbz	r1, 80208fc <__ascii_wctomb+0x16>
 80208e8:	2aff      	cmp	r2, #255	; 0xff
 80208ea:	bf85      	ittet	hi
 80208ec:	238a      	movhi	r3, #138	; 0x8a
 80208ee:	6003      	strhi	r3, [r0, #0]
 80208f0:	700a      	strbls	r2, [r1, #0]
 80208f2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80208f6:	bf98      	it	ls
 80208f8:	2001      	movls	r0, #1
 80208fa:	4770      	bx	lr
 80208fc:	4608      	mov	r0, r1
 80208fe:	4770      	bx	lr

08020900 <__assert_func>:
 8020900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020902:	4614      	mov	r4, r2
 8020904:	461a      	mov	r2, r3
 8020906:	4b09      	ldr	r3, [pc, #36]	; (802092c <__assert_func+0x2c>)
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	4605      	mov	r5, r0
 802090c:	68d8      	ldr	r0, [r3, #12]
 802090e:	b14c      	cbz	r4, 8020924 <__assert_func+0x24>
 8020910:	4b07      	ldr	r3, [pc, #28]	; (8020930 <__assert_func+0x30>)
 8020912:	9100      	str	r1, [sp, #0]
 8020914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020918:	4906      	ldr	r1, [pc, #24]	; (8020934 <__assert_func+0x34>)
 802091a:	462b      	mov	r3, r5
 802091c:	f000 f9a6 	bl	8020c6c <fiprintf>
 8020920:	f000 fc14 	bl	802114c <abort>
 8020924:	4b04      	ldr	r3, [pc, #16]	; (8020938 <__assert_func+0x38>)
 8020926:	461c      	mov	r4, r3
 8020928:	e7f3      	b.n	8020912 <__assert_func+0x12>
 802092a:	bf00      	nop
 802092c:	200005c0 	.word	0x200005c0
 8020930:	08022d5d 	.word	0x08022d5d
 8020934:	08022d6a 	.word	0x08022d6a
 8020938:	08022d98 	.word	0x08022d98

0802093c <__sflush_r>:
 802093c:	898a      	ldrh	r2, [r1, #12]
 802093e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020942:	4605      	mov	r5, r0
 8020944:	0710      	lsls	r0, r2, #28
 8020946:	460c      	mov	r4, r1
 8020948:	d458      	bmi.n	80209fc <__sflush_r+0xc0>
 802094a:	684b      	ldr	r3, [r1, #4]
 802094c:	2b00      	cmp	r3, #0
 802094e:	dc05      	bgt.n	802095c <__sflush_r+0x20>
 8020950:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020952:	2b00      	cmp	r3, #0
 8020954:	dc02      	bgt.n	802095c <__sflush_r+0x20>
 8020956:	2000      	movs	r0, #0
 8020958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802095c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802095e:	2e00      	cmp	r6, #0
 8020960:	d0f9      	beq.n	8020956 <__sflush_r+0x1a>
 8020962:	2300      	movs	r3, #0
 8020964:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020968:	682f      	ldr	r7, [r5, #0]
 802096a:	602b      	str	r3, [r5, #0]
 802096c:	d032      	beq.n	80209d4 <__sflush_r+0x98>
 802096e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020970:	89a3      	ldrh	r3, [r4, #12]
 8020972:	075a      	lsls	r2, r3, #29
 8020974:	d505      	bpl.n	8020982 <__sflush_r+0x46>
 8020976:	6863      	ldr	r3, [r4, #4]
 8020978:	1ac0      	subs	r0, r0, r3
 802097a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802097c:	b10b      	cbz	r3, 8020982 <__sflush_r+0x46>
 802097e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020980:	1ac0      	subs	r0, r0, r3
 8020982:	2300      	movs	r3, #0
 8020984:	4602      	mov	r2, r0
 8020986:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020988:	6a21      	ldr	r1, [r4, #32]
 802098a:	4628      	mov	r0, r5
 802098c:	47b0      	blx	r6
 802098e:	1c43      	adds	r3, r0, #1
 8020990:	89a3      	ldrh	r3, [r4, #12]
 8020992:	d106      	bne.n	80209a2 <__sflush_r+0x66>
 8020994:	6829      	ldr	r1, [r5, #0]
 8020996:	291d      	cmp	r1, #29
 8020998:	d82c      	bhi.n	80209f4 <__sflush_r+0xb8>
 802099a:	4a2a      	ldr	r2, [pc, #168]	; (8020a44 <__sflush_r+0x108>)
 802099c:	40ca      	lsrs	r2, r1
 802099e:	07d6      	lsls	r6, r2, #31
 80209a0:	d528      	bpl.n	80209f4 <__sflush_r+0xb8>
 80209a2:	2200      	movs	r2, #0
 80209a4:	6062      	str	r2, [r4, #4]
 80209a6:	04d9      	lsls	r1, r3, #19
 80209a8:	6922      	ldr	r2, [r4, #16]
 80209aa:	6022      	str	r2, [r4, #0]
 80209ac:	d504      	bpl.n	80209b8 <__sflush_r+0x7c>
 80209ae:	1c42      	adds	r2, r0, #1
 80209b0:	d101      	bne.n	80209b6 <__sflush_r+0x7a>
 80209b2:	682b      	ldr	r3, [r5, #0]
 80209b4:	b903      	cbnz	r3, 80209b8 <__sflush_r+0x7c>
 80209b6:	6560      	str	r0, [r4, #84]	; 0x54
 80209b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80209ba:	602f      	str	r7, [r5, #0]
 80209bc:	2900      	cmp	r1, #0
 80209be:	d0ca      	beq.n	8020956 <__sflush_r+0x1a>
 80209c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80209c4:	4299      	cmp	r1, r3
 80209c6:	d002      	beq.n	80209ce <__sflush_r+0x92>
 80209c8:	4628      	mov	r0, r5
 80209ca:	f7fb ffd7 	bl	801c97c <_free_r>
 80209ce:	2000      	movs	r0, #0
 80209d0:	6360      	str	r0, [r4, #52]	; 0x34
 80209d2:	e7c1      	b.n	8020958 <__sflush_r+0x1c>
 80209d4:	6a21      	ldr	r1, [r4, #32]
 80209d6:	2301      	movs	r3, #1
 80209d8:	4628      	mov	r0, r5
 80209da:	47b0      	blx	r6
 80209dc:	1c41      	adds	r1, r0, #1
 80209de:	d1c7      	bne.n	8020970 <__sflush_r+0x34>
 80209e0:	682b      	ldr	r3, [r5, #0]
 80209e2:	2b00      	cmp	r3, #0
 80209e4:	d0c4      	beq.n	8020970 <__sflush_r+0x34>
 80209e6:	2b1d      	cmp	r3, #29
 80209e8:	d001      	beq.n	80209ee <__sflush_r+0xb2>
 80209ea:	2b16      	cmp	r3, #22
 80209ec:	d101      	bne.n	80209f2 <__sflush_r+0xb6>
 80209ee:	602f      	str	r7, [r5, #0]
 80209f0:	e7b1      	b.n	8020956 <__sflush_r+0x1a>
 80209f2:	89a3      	ldrh	r3, [r4, #12]
 80209f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80209f8:	81a3      	strh	r3, [r4, #12]
 80209fa:	e7ad      	b.n	8020958 <__sflush_r+0x1c>
 80209fc:	690f      	ldr	r7, [r1, #16]
 80209fe:	2f00      	cmp	r7, #0
 8020a00:	d0a9      	beq.n	8020956 <__sflush_r+0x1a>
 8020a02:	0793      	lsls	r3, r2, #30
 8020a04:	680e      	ldr	r6, [r1, #0]
 8020a06:	bf08      	it	eq
 8020a08:	694b      	ldreq	r3, [r1, #20]
 8020a0a:	600f      	str	r7, [r1, #0]
 8020a0c:	bf18      	it	ne
 8020a0e:	2300      	movne	r3, #0
 8020a10:	eba6 0807 	sub.w	r8, r6, r7
 8020a14:	608b      	str	r3, [r1, #8]
 8020a16:	f1b8 0f00 	cmp.w	r8, #0
 8020a1a:	dd9c      	ble.n	8020956 <__sflush_r+0x1a>
 8020a1c:	6a21      	ldr	r1, [r4, #32]
 8020a1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020a20:	4643      	mov	r3, r8
 8020a22:	463a      	mov	r2, r7
 8020a24:	4628      	mov	r0, r5
 8020a26:	47b0      	blx	r6
 8020a28:	2800      	cmp	r0, #0
 8020a2a:	dc06      	bgt.n	8020a3a <__sflush_r+0xfe>
 8020a2c:	89a3      	ldrh	r3, [r4, #12]
 8020a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a32:	81a3      	strh	r3, [r4, #12]
 8020a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020a38:	e78e      	b.n	8020958 <__sflush_r+0x1c>
 8020a3a:	4407      	add	r7, r0
 8020a3c:	eba8 0800 	sub.w	r8, r8, r0
 8020a40:	e7e9      	b.n	8020a16 <__sflush_r+0xda>
 8020a42:	bf00      	nop
 8020a44:	20400001 	.word	0x20400001

08020a48 <_fflush_r>:
 8020a48:	b538      	push	{r3, r4, r5, lr}
 8020a4a:	690b      	ldr	r3, [r1, #16]
 8020a4c:	4605      	mov	r5, r0
 8020a4e:	460c      	mov	r4, r1
 8020a50:	b913      	cbnz	r3, 8020a58 <_fflush_r+0x10>
 8020a52:	2500      	movs	r5, #0
 8020a54:	4628      	mov	r0, r5
 8020a56:	bd38      	pop	{r3, r4, r5, pc}
 8020a58:	b118      	cbz	r0, 8020a62 <_fflush_r+0x1a>
 8020a5a:	6983      	ldr	r3, [r0, #24]
 8020a5c:	b90b      	cbnz	r3, 8020a62 <_fflush_r+0x1a>
 8020a5e:	f000 f887 	bl	8020b70 <__sinit>
 8020a62:	4b14      	ldr	r3, [pc, #80]	; (8020ab4 <_fflush_r+0x6c>)
 8020a64:	429c      	cmp	r4, r3
 8020a66:	d11b      	bne.n	8020aa0 <_fflush_r+0x58>
 8020a68:	686c      	ldr	r4, [r5, #4]
 8020a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d0ef      	beq.n	8020a52 <_fflush_r+0xa>
 8020a72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020a74:	07d0      	lsls	r0, r2, #31
 8020a76:	d404      	bmi.n	8020a82 <_fflush_r+0x3a>
 8020a78:	0599      	lsls	r1, r3, #22
 8020a7a:	d402      	bmi.n	8020a82 <_fflush_r+0x3a>
 8020a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a7e:	f000 f927 	bl	8020cd0 <__retarget_lock_acquire_recursive>
 8020a82:	4628      	mov	r0, r5
 8020a84:	4621      	mov	r1, r4
 8020a86:	f7ff ff59 	bl	802093c <__sflush_r>
 8020a8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020a8c:	07da      	lsls	r2, r3, #31
 8020a8e:	4605      	mov	r5, r0
 8020a90:	d4e0      	bmi.n	8020a54 <_fflush_r+0xc>
 8020a92:	89a3      	ldrh	r3, [r4, #12]
 8020a94:	059b      	lsls	r3, r3, #22
 8020a96:	d4dd      	bmi.n	8020a54 <_fflush_r+0xc>
 8020a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020a9a:	f000 f91a 	bl	8020cd2 <__retarget_lock_release_recursive>
 8020a9e:	e7d9      	b.n	8020a54 <_fflush_r+0xc>
 8020aa0:	4b05      	ldr	r3, [pc, #20]	; (8020ab8 <_fflush_r+0x70>)
 8020aa2:	429c      	cmp	r4, r3
 8020aa4:	d101      	bne.n	8020aaa <_fflush_r+0x62>
 8020aa6:	68ac      	ldr	r4, [r5, #8]
 8020aa8:	e7df      	b.n	8020a6a <_fflush_r+0x22>
 8020aaa:	4b04      	ldr	r3, [pc, #16]	; (8020abc <_fflush_r+0x74>)
 8020aac:	429c      	cmp	r4, r3
 8020aae:	bf08      	it	eq
 8020ab0:	68ec      	ldreq	r4, [r5, #12]
 8020ab2:	e7da      	b.n	8020a6a <_fflush_r+0x22>
 8020ab4:	08022dbc 	.word	0x08022dbc
 8020ab8:	08022ddc 	.word	0x08022ddc
 8020abc:	08022d9c 	.word	0x08022d9c

08020ac0 <std>:
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	b510      	push	{r4, lr}
 8020ac4:	4604      	mov	r4, r0
 8020ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8020aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020ace:	6083      	str	r3, [r0, #8]
 8020ad0:	8181      	strh	r1, [r0, #12]
 8020ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8020ad4:	81c2      	strh	r2, [r0, #14]
 8020ad6:	6183      	str	r3, [r0, #24]
 8020ad8:	4619      	mov	r1, r3
 8020ada:	2208      	movs	r2, #8
 8020adc:	305c      	adds	r0, #92	; 0x5c
 8020ade:	f7fb ff45 	bl	801c96c <memset>
 8020ae2:	4b05      	ldr	r3, [pc, #20]	; (8020af8 <std+0x38>)
 8020ae4:	6263      	str	r3, [r4, #36]	; 0x24
 8020ae6:	4b05      	ldr	r3, [pc, #20]	; (8020afc <std+0x3c>)
 8020ae8:	62a3      	str	r3, [r4, #40]	; 0x28
 8020aea:	4b05      	ldr	r3, [pc, #20]	; (8020b00 <std+0x40>)
 8020aec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020aee:	4b05      	ldr	r3, [pc, #20]	; (8020b04 <std+0x44>)
 8020af0:	6224      	str	r4, [r4, #32]
 8020af2:	6323      	str	r3, [r4, #48]	; 0x30
 8020af4:	bd10      	pop	{r4, pc}
 8020af6:	bf00      	nop
 8020af8:	0801d971 	.word	0x0801d971
 8020afc:	0801d993 	.word	0x0801d993
 8020b00:	0801d9cb 	.word	0x0801d9cb
 8020b04:	0801d9ef 	.word	0x0801d9ef

08020b08 <_cleanup_r>:
 8020b08:	4901      	ldr	r1, [pc, #4]	; (8020b10 <_cleanup_r+0x8>)
 8020b0a:	f000 b8c1 	b.w	8020c90 <_fwalk_reent>
 8020b0e:	bf00      	nop
 8020b10:	08020a49 	.word	0x08020a49

08020b14 <__sfmoreglue>:
 8020b14:	b570      	push	{r4, r5, r6, lr}
 8020b16:	1e4a      	subs	r2, r1, #1
 8020b18:	2568      	movs	r5, #104	; 0x68
 8020b1a:	4355      	muls	r5, r2
 8020b1c:	460e      	mov	r6, r1
 8020b1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020b22:	f7fb ff7b 	bl	801ca1c <_malloc_r>
 8020b26:	4604      	mov	r4, r0
 8020b28:	b140      	cbz	r0, 8020b3c <__sfmoreglue+0x28>
 8020b2a:	2100      	movs	r1, #0
 8020b2c:	e9c0 1600 	strd	r1, r6, [r0]
 8020b30:	300c      	adds	r0, #12
 8020b32:	60a0      	str	r0, [r4, #8]
 8020b34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020b38:	f7fb ff18 	bl	801c96c <memset>
 8020b3c:	4620      	mov	r0, r4
 8020b3e:	bd70      	pop	{r4, r5, r6, pc}

08020b40 <__sfp_lock_acquire>:
 8020b40:	4801      	ldr	r0, [pc, #4]	; (8020b48 <__sfp_lock_acquire+0x8>)
 8020b42:	f000 b8c5 	b.w	8020cd0 <__retarget_lock_acquire_recursive>
 8020b46:	bf00      	nop
 8020b48:	2000a7e0 	.word	0x2000a7e0

08020b4c <__sfp_lock_release>:
 8020b4c:	4801      	ldr	r0, [pc, #4]	; (8020b54 <__sfp_lock_release+0x8>)
 8020b4e:	f000 b8c0 	b.w	8020cd2 <__retarget_lock_release_recursive>
 8020b52:	bf00      	nop
 8020b54:	2000a7e0 	.word	0x2000a7e0

08020b58 <__sinit_lock_acquire>:
 8020b58:	4801      	ldr	r0, [pc, #4]	; (8020b60 <__sinit_lock_acquire+0x8>)
 8020b5a:	f000 b8b9 	b.w	8020cd0 <__retarget_lock_acquire_recursive>
 8020b5e:	bf00      	nop
 8020b60:	2000a7db 	.word	0x2000a7db

08020b64 <__sinit_lock_release>:
 8020b64:	4801      	ldr	r0, [pc, #4]	; (8020b6c <__sinit_lock_release+0x8>)
 8020b66:	f000 b8b4 	b.w	8020cd2 <__retarget_lock_release_recursive>
 8020b6a:	bf00      	nop
 8020b6c:	2000a7db 	.word	0x2000a7db

08020b70 <__sinit>:
 8020b70:	b510      	push	{r4, lr}
 8020b72:	4604      	mov	r4, r0
 8020b74:	f7ff fff0 	bl	8020b58 <__sinit_lock_acquire>
 8020b78:	69a3      	ldr	r3, [r4, #24]
 8020b7a:	b11b      	cbz	r3, 8020b84 <__sinit+0x14>
 8020b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020b80:	f7ff bff0 	b.w	8020b64 <__sinit_lock_release>
 8020b84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020b88:	6523      	str	r3, [r4, #80]	; 0x50
 8020b8a:	4b13      	ldr	r3, [pc, #76]	; (8020bd8 <__sinit+0x68>)
 8020b8c:	4a13      	ldr	r2, [pc, #76]	; (8020bdc <__sinit+0x6c>)
 8020b8e:	681b      	ldr	r3, [r3, #0]
 8020b90:	62a2      	str	r2, [r4, #40]	; 0x28
 8020b92:	42a3      	cmp	r3, r4
 8020b94:	bf04      	itt	eq
 8020b96:	2301      	moveq	r3, #1
 8020b98:	61a3      	streq	r3, [r4, #24]
 8020b9a:	4620      	mov	r0, r4
 8020b9c:	f000 f820 	bl	8020be0 <__sfp>
 8020ba0:	6060      	str	r0, [r4, #4]
 8020ba2:	4620      	mov	r0, r4
 8020ba4:	f000 f81c 	bl	8020be0 <__sfp>
 8020ba8:	60a0      	str	r0, [r4, #8]
 8020baa:	4620      	mov	r0, r4
 8020bac:	f000 f818 	bl	8020be0 <__sfp>
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	60e0      	str	r0, [r4, #12]
 8020bb4:	2104      	movs	r1, #4
 8020bb6:	6860      	ldr	r0, [r4, #4]
 8020bb8:	f7ff ff82 	bl	8020ac0 <std>
 8020bbc:	68a0      	ldr	r0, [r4, #8]
 8020bbe:	2201      	movs	r2, #1
 8020bc0:	2109      	movs	r1, #9
 8020bc2:	f7ff ff7d 	bl	8020ac0 <std>
 8020bc6:	68e0      	ldr	r0, [r4, #12]
 8020bc8:	2202      	movs	r2, #2
 8020bca:	2112      	movs	r1, #18
 8020bcc:	f7ff ff78 	bl	8020ac0 <std>
 8020bd0:	2301      	movs	r3, #1
 8020bd2:	61a3      	str	r3, [r4, #24]
 8020bd4:	e7d2      	b.n	8020b7c <__sinit+0xc>
 8020bd6:	bf00      	nop
 8020bd8:	08022944 	.word	0x08022944
 8020bdc:	08020b09 	.word	0x08020b09

08020be0 <__sfp>:
 8020be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020be2:	4607      	mov	r7, r0
 8020be4:	f7ff ffac 	bl	8020b40 <__sfp_lock_acquire>
 8020be8:	4b1e      	ldr	r3, [pc, #120]	; (8020c64 <__sfp+0x84>)
 8020bea:	681e      	ldr	r6, [r3, #0]
 8020bec:	69b3      	ldr	r3, [r6, #24]
 8020bee:	b913      	cbnz	r3, 8020bf6 <__sfp+0x16>
 8020bf0:	4630      	mov	r0, r6
 8020bf2:	f7ff ffbd 	bl	8020b70 <__sinit>
 8020bf6:	3648      	adds	r6, #72	; 0x48
 8020bf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020bfc:	3b01      	subs	r3, #1
 8020bfe:	d503      	bpl.n	8020c08 <__sfp+0x28>
 8020c00:	6833      	ldr	r3, [r6, #0]
 8020c02:	b30b      	cbz	r3, 8020c48 <__sfp+0x68>
 8020c04:	6836      	ldr	r6, [r6, #0]
 8020c06:	e7f7      	b.n	8020bf8 <__sfp+0x18>
 8020c08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020c0c:	b9d5      	cbnz	r5, 8020c44 <__sfp+0x64>
 8020c0e:	4b16      	ldr	r3, [pc, #88]	; (8020c68 <__sfp+0x88>)
 8020c10:	60e3      	str	r3, [r4, #12]
 8020c12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8020c16:	6665      	str	r5, [r4, #100]	; 0x64
 8020c18:	f000 f859 	bl	8020cce <__retarget_lock_init_recursive>
 8020c1c:	f7ff ff96 	bl	8020b4c <__sfp_lock_release>
 8020c20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8020c24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020c28:	6025      	str	r5, [r4, #0]
 8020c2a:	61a5      	str	r5, [r4, #24]
 8020c2c:	2208      	movs	r2, #8
 8020c2e:	4629      	mov	r1, r5
 8020c30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020c34:	f7fb fe9a 	bl	801c96c <memset>
 8020c38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020c3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020c40:	4620      	mov	r0, r4
 8020c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c44:	3468      	adds	r4, #104	; 0x68
 8020c46:	e7d9      	b.n	8020bfc <__sfp+0x1c>
 8020c48:	2104      	movs	r1, #4
 8020c4a:	4638      	mov	r0, r7
 8020c4c:	f7ff ff62 	bl	8020b14 <__sfmoreglue>
 8020c50:	4604      	mov	r4, r0
 8020c52:	6030      	str	r0, [r6, #0]
 8020c54:	2800      	cmp	r0, #0
 8020c56:	d1d5      	bne.n	8020c04 <__sfp+0x24>
 8020c58:	f7ff ff78 	bl	8020b4c <__sfp_lock_release>
 8020c5c:	230c      	movs	r3, #12
 8020c5e:	603b      	str	r3, [r7, #0]
 8020c60:	e7ee      	b.n	8020c40 <__sfp+0x60>
 8020c62:	bf00      	nop
 8020c64:	08022944 	.word	0x08022944
 8020c68:	ffff0001 	.word	0xffff0001

08020c6c <fiprintf>:
 8020c6c:	b40e      	push	{r1, r2, r3}
 8020c6e:	b503      	push	{r0, r1, lr}
 8020c70:	4601      	mov	r1, r0
 8020c72:	ab03      	add	r3, sp, #12
 8020c74:	4805      	ldr	r0, [pc, #20]	; (8020c8c <fiprintf+0x20>)
 8020c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8020c7a:	6800      	ldr	r0, [r0, #0]
 8020c7c:	9301      	str	r3, [sp, #4]
 8020c7e:	f000 f875 	bl	8020d6c <_vfiprintf_r>
 8020c82:	b002      	add	sp, #8
 8020c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8020c88:	b003      	add	sp, #12
 8020c8a:	4770      	bx	lr
 8020c8c:	200005c0 	.word	0x200005c0

08020c90 <_fwalk_reent>:
 8020c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020c94:	4606      	mov	r6, r0
 8020c96:	4688      	mov	r8, r1
 8020c98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020c9c:	2700      	movs	r7, #0
 8020c9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020ca2:	f1b9 0901 	subs.w	r9, r9, #1
 8020ca6:	d505      	bpl.n	8020cb4 <_fwalk_reent+0x24>
 8020ca8:	6824      	ldr	r4, [r4, #0]
 8020caa:	2c00      	cmp	r4, #0
 8020cac:	d1f7      	bne.n	8020c9e <_fwalk_reent+0xe>
 8020cae:	4638      	mov	r0, r7
 8020cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020cb4:	89ab      	ldrh	r3, [r5, #12]
 8020cb6:	2b01      	cmp	r3, #1
 8020cb8:	d907      	bls.n	8020cca <_fwalk_reent+0x3a>
 8020cba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020cbe:	3301      	adds	r3, #1
 8020cc0:	d003      	beq.n	8020cca <_fwalk_reent+0x3a>
 8020cc2:	4629      	mov	r1, r5
 8020cc4:	4630      	mov	r0, r6
 8020cc6:	47c0      	blx	r8
 8020cc8:	4307      	orrs	r7, r0
 8020cca:	3568      	adds	r5, #104	; 0x68
 8020ccc:	e7e9      	b.n	8020ca2 <_fwalk_reent+0x12>

08020cce <__retarget_lock_init_recursive>:
 8020cce:	4770      	bx	lr

08020cd0 <__retarget_lock_acquire_recursive>:
 8020cd0:	4770      	bx	lr

08020cd2 <__retarget_lock_release_recursive>:
 8020cd2:	4770      	bx	lr

08020cd4 <memmove>:
 8020cd4:	4288      	cmp	r0, r1
 8020cd6:	b510      	push	{r4, lr}
 8020cd8:	eb01 0402 	add.w	r4, r1, r2
 8020cdc:	d902      	bls.n	8020ce4 <memmove+0x10>
 8020cde:	4284      	cmp	r4, r0
 8020ce0:	4623      	mov	r3, r4
 8020ce2:	d807      	bhi.n	8020cf4 <memmove+0x20>
 8020ce4:	1e43      	subs	r3, r0, #1
 8020ce6:	42a1      	cmp	r1, r4
 8020ce8:	d008      	beq.n	8020cfc <memmove+0x28>
 8020cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020cf2:	e7f8      	b.n	8020ce6 <memmove+0x12>
 8020cf4:	4402      	add	r2, r0
 8020cf6:	4601      	mov	r1, r0
 8020cf8:	428a      	cmp	r2, r1
 8020cfa:	d100      	bne.n	8020cfe <memmove+0x2a>
 8020cfc:	bd10      	pop	{r4, pc}
 8020cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020d06:	e7f7      	b.n	8020cf8 <memmove+0x24>

08020d08 <_malloc_usable_size_r>:
 8020d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020d0c:	1f18      	subs	r0, r3, #4
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	bfbc      	itt	lt
 8020d12:	580b      	ldrlt	r3, [r1, r0]
 8020d14:	18c0      	addlt	r0, r0, r3
 8020d16:	4770      	bx	lr

08020d18 <__sfputc_r>:
 8020d18:	6893      	ldr	r3, [r2, #8]
 8020d1a:	3b01      	subs	r3, #1
 8020d1c:	2b00      	cmp	r3, #0
 8020d1e:	b410      	push	{r4}
 8020d20:	6093      	str	r3, [r2, #8]
 8020d22:	da08      	bge.n	8020d36 <__sfputc_r+0x1e>
 8020d24:	6994      	ldr	r4, [r2, #24]
 8020d26:	42a3      	cmp	r3, r4
 8020d28:	db01      	blt.n	8020d2e <__sfputc_r+0x16>
 8020d2a:	290a      	cmp	r1, #10
 8020d2c:	d103      	bne.n	8020d36 <__sfputc_r+0x1e>
 8020d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d32:	f000 b94b 	b.w	8020fcc <__swbuf_r>
 8020d36:	6813      	ldr	r3, [r2, #0]
 8020d38:	1c58      	adds	r0, r3, #1
 8020d3a:	6010      	str	r0, [r2, #0]
 8020d3c:	7019      	strb	r1, [r3, #0]
 8020d3e:	4608      	mov	r0, r1
 8020d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d44:	4770      	bx	lr

08020d46 <__sfputs_r>:
 8020d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d48:	4606      	mov	r6, r0
 8020d4a:	460f      	mov	r7, r1
 8020d4c:	4614      	mov	r4, r2
 8020d4e:	18d5      	adds	r5, r2, r3
 8020d50:	42ac      	cmp	r4, r5
 8020d52:	d101      	bne.n	8020d58 <__sfputs_r+0x12>
 8020d54:	2000      	movs	r0, #0
 8020d56:	e007      	b.n	8020d68 <__sfputs_r+0x22>
 8020d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d5c:	463a      	mov	r2, r7
 8020d5e:	4630      	mov	r0, r6
 8020d60:	f7ff ffda 	bl	8020d18 <__sfputc_r>
 8020d64:	1c43      	adds	r3, r0, #1
 8020d66:	d1f3      	bne.n	8020d50 <__sfputs_r+0xa>
 8020d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020d6c <_vfiprintf_r>:
 8020d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d70:	460d      	mov	r5, r1
 8020d72:	b09d      	sub	sp, #116	; 0x74
 8020d74:	4614      	mov	r4, r2
 8020d76:	4698      	mov	r8, r3
 8020d78:	4606      	mov	r6, r0
 8020d7a:	b118      	cbz	r0, 8020d84 <_vfiprintf_r+0x18>
 8020d7c:	6983      	ldr	r3, [r0, #24]
 8020d7e:	b90b      	cbnz	r3, 8020d84 <_vfiprintf_r+0x18>
 8020d80:	f7ff fef6 	bl	8020b70 <__sinit>
 8020d84:	4b89      	ldr	r3, [pc, #548]	; (8020fac <_vfiprintf_r+0x240>)
 8020d86:	429d      	cmp	r5, r3
 8020d88:	d11b      	bne.n	8020dc2 <_vfiprintf_r+0x56>
 8020d8a:	6875      	ldr	r5, [r6, #4]
 8020d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d8e:	07d9      	lsls	r1, r3, #31
 8020d90:	d405      	bmi.n	8020d9e <_vfiprintf_r+0x32>
 8020d92:	89ab      	ldrh	r3, [r5, #12]
 8020d94:	059a      	lsls	r2, r3, #22
 8020d96:	d402      	bmi.n	8020d9e <_vfiprintf_r+0x32>
 8020d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d9a:	f7ff ff99 	bl	8020cd0 <__retarget_lock_acquire_recursive>
 8020d9e:	89ab      	ldrh	r3, [r5, #12]
 8020da0:	071b      	lsls	r3, r3, #28
 8020da2:	d501      	bpl.n	8020da8 <_vfiprintf_r+0x3c>
 8020da4:	692b      	ldr	r3, [r5, #16]
 8020da6:	b9eb      	cbnz	r3, 8020de4 <_vfiprintf_r+0x78>
 8020da8:	4629      	mov	r1, r5
 8020daa:	4630      	mov	r0, r6
 8020dac:	f000 f960 	bl	8021070 <__swsetup_r>
 8020db0:	b1c0      	cbz	r0, 8020de4 <_vfiprintf_r+0x78>
 8020db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020db4:	07dc      	lsls	r4, r3, #31
 8020db6:	d50e      	bpl.n	8020dd6 <_vfiprintf_r+0x6a>
 8020db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020dbc:	b01d      	add	sp, #116	; 0x74
 8020dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc2:	4b7b      	ldr	r3, [pc, #492]	; (8020fb0 <_vfiprintf_r+0x244>)
 8020dc4:	429d      	cmp	r5, r3
 8020dc6:	d101      	bne.n	8020dcc <_vfiprintf_r+0x60>
 8020dc8:	68b5      	ldr	r5, [r6, #8]
 8020dca:	e7df      	b.n	8020d8c <_vfiprintf_r+0x20>
 8020dcc:	4b79      	ldr	r3, [pc, #484]	; (8020fb4 <_vfiprintf_r+0x248>)
 8020dce:	429d      	cmp	r5, r3
 8020dd0:	bf08      	it	eq
 8020dd2:	68f5      	ldreq	r5, [r6, #12]
 8020dd4:	e7da      	b.n	8020d8c <_vfiprintf_r+0x20>
 8020dd6:	89ab      	ldrh	r3, [r5, #12]
 8020dd8:	0598      	lsls	r0, r3, #22
 8020dda:	d4ed      	bmi.n	8020db8 <_vfiprintf_r+0x4c>
 8020ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020dde:	f7ff ff78 	bl	8020cd2 <__retarget_lock_release_recursive>
 8020de2:	e7e9      	b.n	8020db8 <_vfiprintf_r+0x4c>
 8020de4:	2300      	movs	r3, #0
 8020de6:	9309      	str	r3, [sp, #36]	; 0x24
 8020de8:	2320      	movs	r3, #32
 8020dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020dee:	f8cd 800c 	str.w	r8, [sp, #12]
 8020df2:	2330      	movs	r3, #48	; 0x30
 8020df4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020fb8 <_vfiprintf_r+0x24c>
 8020df8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020dfc:	f04f 0901 	mov.w	r9, #1
 8020e00:	4623      	mov	r3, r4
 8020e02:	469a      	mov	sl, r3
 8020e04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e08:	b10a      	cbz	r2, 8020e0e <_vfiprintf_r+0xa2>
 8020e0a:	2a25      	cmp	r2, #37	; 0x25
 8020e0c:	d1f9      	bne.n	8020e02 <_vfiprintf_r+0x96>
 8020e0e:	ebba 0b04 	subs.w	fp, sl, r4
 8020e12:	d00b      	beq.n	8020e2c <_vfiprintf_r+0xc0>
 8020e14:	465b      	mov	r3, fp
 8020e16:	4622      	mov	r2, r4
 8020e18:	4629      	mov	r1, r5
 8020e1a:	4630      	mov	r0, r6
 8020e1c:	f7ff ff93 	bl	8020d46 <__sfputs_r>
 8020e20:	3001      	adds	r0, #1
 8020e22:	f000 80aa 	beq.w	8020f7a <_vfiprintf_r+0x20e>
 8020e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e28:	445a      	add	r2, fp
 8020e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8020e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	f000 80a2 	beq.w	8020f7a <_vfiprintf_r+0x20e>
 8020e36:	2300      	movs	r3, #0
 8020e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8020e3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e40:	f10a 0a01 	add.w	sl, sl, #1
 8020e44:	9304      	str	r3, [sp, #16]
 8020e46:	9307      	str	r3, [sp, #28]
 8020e48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020e4c:	931a      	str	r3, [sp, #104]	; 0x68
 8020e4e:	4654      	mov	r4, sl
 8020e50:	2205      	movs	r2, #5
 8020e52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e56:	4858      	ldr	r0, [pc, #352]	; (8020fb8 <_vfiprintf_r+0x24c>)
 8020e58:	f7df f9c2 	bl	80001e0 <memchr>
 8020e5c:	9a04      	ldr	r2, [sp, #16]
 8020e5e:	b9d8      	cbnz	r0, 8020e98 <_vfiprintf_r+0x12c>
 8020e60:	06d1      	lsls	r1, r2, #27
 8020e62:	bf44      	itt	mi
 8020e64:	2320      	movmi	r3, #32
 8020e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e6a:	0713      	lsls	r3, r2, #28
 8020e6c:	bf44      	itt	mi
 8020e6e:	232b      	movmi	r3, #43	; 0x2b
 8020e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e74:	f89a 3000 	ldrb.w	r3, [sl]
 8020e78:	2b2a      	cmp	r3, #42	; 0x2a
 8020e7a:	d015      	beq.n	8020ea8 <_vfiprintf_r+0x13c>
 8020e7c:	9a07      	ldr	r2, [sp, #28]
 8020e7e:	4654      	mov	r4, sl
 8020e80:	2000      	movs	r0, #0
 8020e82:	f04f 0c0a 	mov.w	ip, #10
 8020e86:	4621      	mov	r1, r4
 8020e88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e8c:	3b30      	subs	r3, #48	; 0x30
 8020e8e:	2b09      	cmp	r3, #9
 8020e90:	d94e      	bls.n	8020f30 <_vfiprintf_r+0x1c4>
 8020e92:	b1b0      	cbz	r0, 8020ec2 <_vfiprintf_r+0x156>
 8020e94:	9207      	str	r2, [sp, #28]
 8020e96:	e014      	b.n	8020ec2 <_vfiprintf_r+0x156>
 8020e98:	eba0 0308 	sub.w	r3, r0, r8
 8020e9c:	fa09 f303 	lsl.w	r3, r9, r3
 8020ea0:	4313      	orrs	r3, r2
 8020ea2:	9304      	str	r3, [sp, #16]
 8020ea4:	46a2      	mov	sl, r4
 8020ea6:	e7d2      	b.n	8020e4e <_vfiprintf_r+0xe2>
 8020ea8:	9b03      	ldr	r3, [sp, #12]
 8020eaa:	1d19      	adds	r1, r3, #4
 8020eac:	681b      	ldr	r3, [r3, #0]
 8020eae:	9103      	str	r1, [sp, #12]
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	bfbb      	ittet	lt
 8020eb4:	425b      	neglt	r3, r3
 8020eb6:	f042 0202 	orrlt.w	r2, r2, #2
 8020eba:	9307      	strge	r3, [sp, #28]
 8020ebc:	9307      	strlt	r3, [sp, #28]
 8020ebe:	bfb8      	it	lt
 8020ec0:	9204      	strlt	r2, [sp, #16]
 8020ec2:	7823      	ldrb	r3, [r4, #0]
 8020ec4:	2b2e      	cmp	r3, #46	; 0x2e
 8020ec6:	d10c      	bne.n	8020ee2 <_vfiprintf_r+0x176>
 8020ec8:	7863      	ldrb	r3, [r4, #1]
 8020eca:	2b2a      	cmp	r3, #42	; 0x2a
 8020ecc:	d135      	bne.n	8020f3a <_vfiprintf_r+0x1ce>
 8020ece:	9b03      	ldr	r3, [sp, #12]
 8020ed0:	1d1a      	adds	r2, r3, #4
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	9203      	str	r2, [sp, #12]
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	bfb8      	it	lt
 8020eda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8020ede:	3402      	adds	r4, #2
 8020ee0:	9305      	str	r3, [sp, #20]
 8020ee2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020fc8 <_vfiprintf_r+0x25c>
 8020ee6:	7821      	ldrb	r1, [r4, #0]
 8020ee8:	2203      	movs	r2, #3
 8020eea:	4650      	mov	r0, sl
 8020eec:	f7df f978 	bl	80001e0 <memchr>
 8020ef0:	b140      	cbz	r0, 8020f04 <_vfiprintf_r+0x198>
 8020ef2:	2340      	movs	r3, #64	; 0x40
 8020ef4:	eba0 000a 	sub.w	r0, r0, sl
 8020ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8020efc:	9b04      	ldr	r3, [sp, #16]
 8020efe:	4303      	orrs	r3, r0
 8020f00:	3401      	adds	r4, #1
 8020f02:	9304      	str	r3, [sp, #16]
 8020f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f08:	482c      	ldr	r0, [pc, #176]	; (8020fbc <_vfiprintf_r+0x250>)
 8020f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020f0e:	2206      	movs	r2, #6
 8020f10:	f7df f966 	bl	80001e0 <memchr>
 8020f14:	2800      	cmp	r0, #0
 8020f16:	d03f      	beq.n	8020f98 <_vfiprintf_r+0x22c>
 8020f18:	4b29      	ldr	r3, [pc, #164]	; (8020fc0 <_vfiprintf_r+0x254>)
 8020f1a:	bb1b      	cbnz	r3, 8020f64 <_vfiprintf_r+0x1f8>
 8020f1c:	9b03      	ldr	r3, [sp, #12]
 8020f1e:	3307      	adds	r3, #7
 8020f20:	f023 0307 	bic.w	r3, r3, #7
 8020f24:	3308      	adds	r3, #8
 8020f26:	9303      	str	r3, [sp, #12]
 8020f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020f2a:	443b      	add	r3, r7
 8020f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8020f2e:	e767      	b.n	8020e00 <_vfiprintf_r+0x94>
 8020f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8020f34:	460c      	mov	r4, r1
 8020f36:	2001      	movs	r0, #1
 8020f38:	e7a5      	b.n	8020e86 <_vfiprintf_r+0x11a>
 8020f3a:	2300      	movs	r3, #0
 8020f3c:	3401      	adds	r4, #1
 8020f3e:	9305      	str	r3, [sp, #20]
 8020f40:	4619      	mov	r1, r3
 8020f42:	f04f 0c0a 	mov.w	ip, #10
 8020f46:	4620      	mov	r0, r4
 8020f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f4c:	3a30      	subs	r2, #48	; 0x30
 8020f4e:	2a09      	cmp	r2, #9
 8020f50:	d903      	bls.n	8020f5a <_vfiprintf_r+0x1ee>
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d0c5      	beq.n	8020ee2 <_vfiprintf_r+0x176>
 8020f56:	9105      	str	r1, [sp, #20]
 8020f58:	e7c3      	b.n	8020ee2 <_vfiprintf_r+0x176>
 8020f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f5e:	4604      	mov	r4, r0
 8020f60:	2301      	movs	r3, #1
 8020f62:	e7f0      	b.n	8020f46 <_vfiprintf_r+0x1da>
 8020f64:	ab03      	add	r3, sp, #12
 8020f66:	9300      	str	r3, [sp, #0]
 8020f68:	462a      	mov	r2, r5
 8020f6a:	4b16      	ldr	r3, [pc, #88]	; (8020fc4 <_vfiprintf_r+0x258>)
 8020f6c:	a904      	add	r1, sp, #16
 8020f6e:	4630      	mov	r0, r6
 8020f70:	f7fb fe4e 	bl	801cc10 <_printf_float>
 8020f74:	4607      	mov	r7, r0
 8020f76:	1c78      	adds	r0, r7, #1
 8020f78:	d1d6      	bne.n	8020f28 <_vfiprintf_r+0x1bc>
 8020f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f7c:	07d9      	lsls	r1, r3, #31
 8020f7e:	d405      	bmi.n	8020f8c <_vfiprintf_r+0x220>
 8020f80:	89ab      	ldrh	r3, [r5, #12]
 8020f82:	059a      	lsls	r2, r3, #22
 8020f84:	d402      	bmi.n	8020f8c <_vfiprintf_r+0x220>
 8020f86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f88:	f7ff fea3 	bl	8020cd2 <__retarget_lock_release_recursive>
 8020f8c:	89ab      	ldrh	r3, [r5, #12]
 8020f8e:	065b      	lsls	r3, r3, #25
 8020f90:	f53f af12 	bmi.w	8020db8 <_vfiprintf_r+0x4c>
 8020f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f96:	e711      	b.n	8020dbc <_vfiprintf_r+0x50>
 8020f98:	ab03      	add	r3, sp, #12
 8020f9a:	9300      	str	r3, [sp, #0]
 8020f9c:	462a      	mov	r2, r5
 8020f9e:	4b09      	ldr	r3, [pc, #36]	; (8020fc4 <_vfiprintf_r+0x258>)
 8020fa0:	a904      	add	r1, sp, #16
 8020fa2:	4630      	mov	r0, r6
 8020fa4:	f7fc f8d8 	bl	801d158 <_printf_i>
 8020fa8:	e7e4      	b.n	8020f74 <_vfiprintf_r+0x208>
 8020faa:	bf00      	nop
 8020fac:	08022dbc 	.word	0x08022dbc
 8020fb0:	08022ddc 	.word	0x08022ddc
 8020fb4:	08022d9c 	.word	0x08022d9c
 8020fb8:	08022d4c 	.word	0x08022d4c
 8020fbc:	08022d56 	.word	0x08022d56
 8020fc0:	0801cc11 	.word	0x0801cc11
 8020fc4:	08020d47 	.word	0x08020d47
 8020fc8:	08022d52 	.word	0x08022d52

08020fcc <__swbuf_r>:
 8020fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fce:	460e      	mov	r6, r1
 8020fd0:	4614      	mov	r4, r2
 8020fd2:	4605      	mov	r5, r0
 8020fd4:	b118      	cbz	r0, 8020fde <__swbuf_r+0x12>
 8020fd6:	6983      	ldr	r3, [r0, #24]
 8020fd8:	b90b      	cbnz	r3, 8020fde <__swbuf_r+0x12>
 8020fda:	f7ff fdc9 	bl	8020b70 <__sinit>
 8020fde:	4b21      	ldr	r3, [pc, #132]	; (8021064 <__swbuf_r+0x98>)
 8020fe0:	429c      	cmp	r4, r3
 8020fe2:	d12b      	bne.n	802103c <__swbuf_r+0x70>
 8020fe4:	686c      	ldr	r4, [r5, #4]
 8020fe6:	69a3      	ldr	r3, [r4, #24]
 8020fe8:	60a3      	str	r3, [r4, #8]
 8020fea:	89a3      	ldrh	r3, [r4, #12]
 8020fec:	071a      	lsls	r2, r3, #28
 8020fee:	d52f      	bpl.n	8021050 <__swbuf_r+0x84>
 8020ff0:	6923      	ldr	r3, [r4, #16]
 8020ff2:	b36b      	cbz	r3, 8021050 <__swbuf_r+0x84>
 8020ff4:	6923      	ldr	r3, [r4, #16]
 8020ff6:	6820      	ldr	r0, [r4, #0]
 8020ff8:	1ac0      	subs	r0, r0, r3
 8020ffa:	6963      	ldr	r3, [r4, #20]
 8020ffc:	b2f6      	uxtb	r6, r6
 8020ffe:	4283      	cmp	r3, r0
 8021000:	4637      	mov	r7, r6
 8021002:	dc04      	bgt.n	802100e <__swbuf_r+0x42>
 8021004:	4621      	mov	r1, r4
 8021006:	4628      	mov	r0, r5
 8021008:	f7ff fd1e 	bl	8020a48 <_fflush_r>
 802100c:	bb30      	cbnz	r0, 802105c <__swbuf_r+0x90>
 802100e:	68a3      	ldr	r3, [r4, #8]
 8021010:	3b01      	subs	r3, #1
 8021012:	60a3      	str	r3, [r4, #8]
 8021014:	6823      	ldr	r3, [r4, #0]
 8021016:	1c5a      	adds	r2, r3, #1
 8021018:	6022      	str	r2, [r4, #0]
 802101a:	701e      	strb	r6, [r3, #0]
 802101c:	6963      	ldr	r3, [r4, #20]
 802101e:	3001      	adds	r0, #1
 8021020:	4283      	cmp	r3, r0
 8021022:	d004      	beq.n	802102e <__swbuf_r+0x62>
 8021024:	89a3      	ldrh	r3, [r4, #12]
 8021026:	07db      	lsls	r3, r3, #31
 8021028:	d506      	bpl.n	8021038 <__swbuf_r+0x6c>
 802102a:	2e0a      	cmp	r6, #10
 802102c:	d104      	bne.n	8021038 <__swbuf_r+0x6c>
 802102e:	4621      	mov	r1, r4
 8021030:	4628      	mov	r0, r5
 8021032:	f7ff fd09 	bl	8020a48 <_fflush_r>
 8021036:	b988      	cbnz	r0, 802105c <__swbuf_r+0x90>
 8021038:	4638      	mov	r0, r7
 802103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802103c:	4b0a      	ldr	r3, [pc, #40]	; (8021068 <__swbuf_r+0x9c>)
 802103e:	429c      	cmp	r4, r3
 8021040:	d101      	bne.n	8021046 <__swbuf_r+0x7a>
 8021042:	68ac      	ldr	r4, [r5, #8]
 8021044:	e7cf      	b.n	8020fe6 <__swbuf_r+0x1a>
 8021046:	4b09      	ldr	r3, [pc, #36]	; (802106c <__swbuf_r+0xa0>)
 8021048:	429c      	cmp	r4, r3
 802104a:	bf08      	it	eq
 802104c:	68ec      	ldreq	r4, [r5, #12]
 802104e:	e7ca      	b.n	8020fe6 <__swbuf_r+0x1a>
 8021050:	4621      	mov	r1, r4
 8021052:	4628      	mov	r0, r5
 8021054:	f000 f80c 	bl	8021070 <__swsetup_r>
 8021058:	2800      	cmp	r0, #0
 802105a:	d0cb      	beq.n	8020ff4 <__swbuf_r+0x28>
 802105c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021060:	e7ea      	b.n	8021038 <__swbuf_r+0x6c>
 8021062:	bf00      	nop
 8021064:	08022dbc 	.word	0x08022dbc
 8021068:	08022ddc 	.word	0x08022ddc
 802106c:	08022d9c 	.word	0x08022d9c

08021070 <__swsetup_r>:
 8021070:	4b32      	ldr	r3, [pc, #200]	; (802113c <__swsetup_r+0xcc>)
 8021072:	b570      	push	{r4, r5, r6, lr}
 8021074:	681d      	ldr	r5, [r3, #0]
 8021076:	4606      	mov	r6, r0
 8021078:	460c      	mov	r4, r1
 802107a:	b125      	cbz	r5, 8021086 <__swsetup_r+0x16>
 802107c:	69ab      	ldr	r3, [r5, #24]
 802107e:	b913      	cbnz	r3, 8021086 <__swsetup_r+0x16>
 8021080:	4628      	mov	r0, r5
 8021082:	f7ff fd75 	bl	8020b70 <__sinit>
 8021086:	4b2e      	ldr	r3, [pc, #184]	; (8021140 <__swsetup_r+0xd0>)
 8021088:	429c      	cmp	r4, r3
 802108a:	d10f      	bne.n	80210ac <__swsetup_r+0x3c>
 802108c:	686c      	ldr	r4, [r5, #4]
 802108e:	89a3      	ldrh	r3, [r4, #12]
 8021090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021094:	0719      	lsls	r1, r3, #28
 8021096:	d42c      	bmi.n	80210f2 <__swsetup_r+0x82>
 8021098:	06dd      	lsls	r5, r3, #27
 802109a:	d411      	bmi.n	80210c0 <__swsetup_r+0x50>
 802109c:	2309      	movs	r3, #9
 802109e:	6033      	str	r3, [r6, #0]
 80210a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80210a4:	81a3      	strh	r3, [r4, #12]
 80210a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80210aa:	e03e      	b.n	802112a <__swsetup_r+0xba>
 80210ac:	4b25      	ldr	r3, [pc, #148]	; (8021144 <__swsetup_r+0xd4>)
 80210ae:	429c      	cmp	r4, r3
 80210b0:	d101      	bne.n	80210b6 <__swsetup_r+0x46>
 80210b2:	68ac      	ldr	r4, [r5, #8]
 80210b4:	e7eb      	b.n	802108e <__swsetup_r+0x1e>
 80210b6:	4b24      	ldr	r3, [pc, #144]	; (8021148 <__swsetup_r+0xd8>)
 80210b8:	429c      	cmp	r4, r3
 80210ba:	bf08      	it	eq
 80210bc:	68ec      	ldreq	r4, [r5, #12]
 80210be:	e7e6      	b.n	802108e <__swsetup_r+0x1e>
 80210c0:	0758      	lsls	r0, r3, #29
 80210c2:	d512      	bpl.n	80210ea <__swsetup_r+0x7a>
 80210c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80210c6:	b141      	cbz	r1, 80210da <__swsetup_r+0x6a>
 80210c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80210cc:	4299      	cmp	r1, r3
 80210ce:	d002      	beq.n	80210d6 <__swsetup_r+0x66>
 80210d0:	4630      	mov	r0, r6
 80210d2:	f7fb fc53 	bl	801c97c <_free_r>
 80210d6:	2300      	movs	r3, #0
 80210d8:	6363      	str	r3, [r4, #52]	; 0x34
 80210da:	89a3      	ldrh	r3, [r4, #12]
 80210dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80210e0:	81a3      	strh	r3, [r4, #12]
 80210e2:	2300      	movs	r3, #0
 80210e4:	6063      	str	r3, [r4, #4]
 80210e6:	6923      	ldr	r3, [r4, #16]
 80210e8:	6023      	str	r3, [r4, #0]
 80210ea:	89a3      	ldrh	r3, [r4, #12]
 80210ec:	f043 0308 	orr.w	r3, r3, #8
 80210f0:	81a3      	strh	r3, [r4, #12]
 80210f2:	6923      	ldr	r3, [r4, #16]
 80210f4:	b94b      	cbnz	r3, 802110a <__swsetup_r+0x9a>
 80210f6:	89a3      	ldrh	r3, [r4, #12]
 80210f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80210fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021100:	d003      	beq.n	802110a <__swsetup_r+0x9a>
 8021102:	4621      	mov	r1, r4
 8021104:	4630      	mov	r0, r6
 8021106:	f000 f84d 	bl	80211a4 <__smakebuf_r>
 802110a:	89a0      	ldrh	r0, [r4, #12]
 802110c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021110:	f010 0301 	ands.w	r3, r0, #1
 8021114:	d00a      	beq.n	802112c <__swsetup_r+0xbc>
 8021116:	2300      	movs	r3, #0
 8021118:	60a3      	str	r3, [r4, #8]
 802111a:	6963      	ldr	r3, [r4, #20]
 802111c:	425b      	negs	r3, r3
 802111e:	61a3      	str	r3, [r4, #24]
 8021120:	6923      	ldr	r3, [r4, #16]
 8021122:	b943      	cbnz	r3, 8021136 <__swsetup_r+0xc6>
 8021124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021128:	d1ba      	bne.n	80210a0 <__swsetup_r+0x30>
 802112a:	bd70      	pop	{r4, r5, r6, pc}
 802112c:	0781      	lsls	r1, r0, #30
 802112e:	bf58      	it	pl
 8021130:	6963      	ldrpl	r3, [r4, #20]
 8021132:	60a3      	str	r3, [r4, #8]
 8021134:	e7f4      	b.n	8021120 <__swsetup_r+0xb0>
 8021136:	2000      	movs	r0, #0
 8021138:	e7f7      	b.n	802112a <__swsetup_r+0xba>
 802113a:	bf00      	nop
 802113c:	200005c0 	.word	0x200005c0
 8021140:	08022dbc 	.word	0x08022dbc
 8021144:	08022ddc 	.word	0x08022ddc
 8021148:	08022d9c 	.word	0x08022d9c

0802114c <abort>:
 802114c:	b508      	push	{r3, lr}
 802114e:	2006      	movs	r0, #6
 8021150:	f000 f890 	bl	8021274 <raise>
 8021154:	2001      	movs	r0, #1
 8021156:	f7ec fbc3 	bl	800d8e0 <_exit>

0802115a <__swhatbuf_r>:
 802115a:	b570      	push	{r4, r5, r6, lr}
 802115c:	460e      	mov	r6, r1
 802115e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021162:	2900      	cmp	r1, #0
 8021164:	b096      	sub	sp, #88	; 0x58
 8021166:	4614      	mov	r4, r2
 8021168:	461d      	mov	r5, r3
 802116a:	da07      	bge.n	802117c <__swhatbuf_r+0x22>
 802116c:	2300      	movs	r3, #0
 802116e:	602b      	str	r3, [r5, #0]
 8021170:	89b3      	ldrh	r3, [r6, #12]
 8021172:	061a      	lsls	r2, r3, #24
 8021174:	d410      	bmi.n	8021198 <__swhatbuf_r+0x3e>
 8021176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802117a:	e00e      	b.n	802119a <__swhatbuf_r+0x40>
 802117c:	466a      	mov	r2, sp
 802117e:	f000 f895 	bl	80212ac <_fstat_r>
 8021182:	2800      	cmp	r0, #0
 8021184:	dbf2      	blt.n	802116c <__swhatbuf_r+0x12>
 8021186:	9a01      	ldr	r2, [sp, #4]
 8021188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802118c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021190:	425a      	negs	r2, r3
 8021192:	415a      	adcs	r2, r3
 8021194:	602a      	str	r2, [r5, #0]
 8021196:	e7ee      	b.n	8021176 <__swhatbuf_r+0x1c>
 8021198:	2340      	movs	r3, #64	; 0x40
 802119a:	2000      	movs	r0, #0
 802119c:	6023      	str	r3, [r4, #0]
 802119e:	b016      	add	sp, #88	; 0x58
 80211a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080211a4 <__smakebuf_r>:
 80211a4:	898b      	ldrh	r3, [r1, #12]
 80211a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80211a8:	079d      	lsls	r5, r3, #30
 80211aa:	4606      	mov	r6, r0
 80211ac:	460c      	mov	r4, r1
 80211ae:	d507      	bpl.n	80211c0 <__smakebuf_r+0x1c>
 80211b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80211b4:	6023      	str	r3, [r4, #0]
 80211b6:	6123      	str	r3, [r4, #16]
 80211b8:	2301      	movs	r3, #1
 80211ba:	6163      	str	r3, [r4, #20]
 80211bc:	b002      	add	sp, #8
 80211be:	bd70      	pop	{r4, r5, r6, pc}
 80211c0:	ab01      	add	r3, sp, #4
 80211c2:	466a      	mov	r2, sp
 80211c4:	f7ff ffc9 	bl	802115a <__swhatbuf_r>
 80211c8:	9900      	ldr	r1, [sp, #0]
 80211ca:	4605      	mov	r5, r0
 80211cc:	4630      	mov	r0, r6
 80211ce:	f7fb fc25 	bl	801ca1c <_malloc_r>
 80211d2:	b948      	cbnz	r0, 80211e8 <__smakebuf_r+0x44>
 80211d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211d8:	059a      	lsls	r2, r3, #22
 80211da:	d4ef      	bmi.n	80211bc <__smakebuf_r+0x18>
 80211dc:	f023 0303 	bic.w	r3, r3, #3
 80211e0:	f043 0302 	orr.w	r3, r3, #2
 80211e4:	81a3      	strh	r3, [r4, #12]
 80211e6:	e7e3      	b.n	80211b0 <__smakebuf_r+0xc>
 80211e8:	4b0d      	ldr	r3, [pc, #52]	; (8021220 <__smakebuf_r+0x7c>)
 80211ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80211ec:	89a3      	ldrh	r3, [r4, #12]
 80211ee:	6020      	str	r0, [r4, #0]
 80211f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80211f4:	81a3      	strh	r3, [r4, #12]
 80211f6:	9b00      	ldr	r3, [sp, #0]
 80211f8:	6163      	str	r3, [r4, #20]
 80211fa:	9b01      	ldr	r3, [sp, #4]
 80211fc:	6120      	str	r0, [r4, #16]
 80211fe:	b15b      	cbz	r3, 8021218 <__smakebuf_r+0x74>
 8021200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021204:	4630      	mov	r0, r6
 8021206:	f000 f863 	bl	80212d0 <_isatty_r>
 802120a:	b128      	cbz	r0, 8021218 <__smakebuf_r+0x74>
 802120c:	89a3      	ldrh	r3, [r4, #12]
 802120e:	f023 0303 	bic.w	r3, r3, #3
 8021212:	f043 0301 	orr.w	r3, r3, #1
 8021216:	81a3      	strh	r3, [r4, #12]
 8021218:	89a0      	ldrh	r0, [r4, #12]
 802121a:	4305      	orrs	r5, r0
 802121c:	81a5      	strh	r5, [r4, #12]
 802121e:	e7cd      	b.n	80211bc <__smakebuf_r+0x18>
 8021220:	08020b09 	.word	0x08020b09

08021224 <_raise_r>:
 8021224:	291f      	cmp	r1, #31
 8021226:	b538      	push	{r3, r4, r5, lr}
 8021228:	4604      	mov	r4, r0
 802122a:	460d      	mov	r5, r1
 802122c:	d904      	bls.n	8021238 <_raise_r+0x14>
 802122e:	2316      	movs	r3, #22
 8021230:	6003      	str	r3, [r0, #0]
 8021232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021236:	bd38      	pop	{r3, r4, r5, pc}
 8021238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802123a:	b112      	cbz	r2, 8021242 <_raise_r+0x1e>
 802123c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021240:	b94b      	cbnz	r3, 8021256 <_raise_r+0x32>
 8021242:	4620      	mov	r0, r4
 8021244:	f000 f830 	bl	80212a8 <_getpid_r>
 8021248:	462a      	mov	r2, r5
 802124a:	4601      	mov	r1, r0
 802124c:	4620      	mov	r0, r4
 802124e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021252:	f000 b817 	b.w	8021284 <_kill_r>
 8021256:	2b01      	cmp	r3, #1
 8021258:	d00a      	beq.n	8021270 <_raise_r+0x4c>
 802125a:	1c59      	adds	r1, r3, #1
 802125c:	d103      	bne.n	8021266 <_raise_r+0x42>
 802125e:	2316      	movs	r3, #22
 8021260:	6003      	str	r3, [r0, #0]
 8021262:	2001      	movs	r0, #1
 8021264:	e7e7      	b.n	8021236 <_raise_r+0x12>
 8021266:	2400      	movs	r4, #0
 8021268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802126c:	4628      	mov	r0, r5
 802126e:	4798      	blx	r3
 8021270:	2000      	movs	r0, #0
 8021272:	e7e0      	b.n	8021236 <_raise_r+0x12>

08021274 <raise>:
 8021274:	4b02      	ldr	r3, [pc, #8]	; (8021280 <raise+0xc>)
 8021276:	4601      	mov	r1, r0
 8021278:	6818      	ldr	r0, [r3, #0]
 802127a:	f7ff bfd3 	b.w	8021224 <_raise_r>
 802127e:	bf00      	nop
 8021280:	200005c0 	.word	0x200005c0

08021284 <_kill_r>:
 8021284:	b538      	push	{r3, r4, r5, lr}
 8021286:	4d07      	ldr	r5, [pc, #28]	; (80212a4 <_kill_r+0x20>)
 8021288:	2300      	movs	r3, #0
 802128a:	4604      	mov	r4, r0
 802128c:	4608      	mov	r0, r1
 802128e:	4611      	mov	r1, r2
 8021290:	602b      	str	r3, [r5, #0]
 8021292:	f7ec fb15 	bl	800d8c0 <_kill>
 8021296:	1c43      	adds	r3, r0, #1
 8021298:	d102      	bne.n	80212a0 <_kill_r+0x1c>
 802129a:	682b      	ldr	r3, [r5, #0]
 802129c:	b103      	cbz	r3, 80212a0 <_kill_r+0x1c>
 802129e:	6023      	str	r3, [r4, #0]
 80212a0:	bd38      	pop	{r3, r4, r5, pc}
 80212a2:	bf00      	nop
 80212a4:	2000a7d4 	.word	0x2000a7d4

080212a8 <_getpid_r>:
 80212a8:	f7ec bb02 	b.w	800d8b0 <_getpid>

080212ac <_fstat_r>:
 80212ac:	b538      	push	{r3, r4, r5, lr}
 80212ae:	4d07      	ldr	r5, [pc, #28]	; (80212cc <_fstat_r+0x20>)
 80212b0:	2300      	movs	r3, #0
 80212b2:	4604      	mov	r4, r0
 80212b4:	4608      	mov	r0, r1
 80212b6:	4611      	mov	r1, r2
 80212b8:	602b      	str	r3, [r5, #0]
 80212ba:	f7ec fb60 	bl	800d97e <_fstat>
 80212be:	1c43      	adds	r3, r0, #1
 80212c0:	d102      	bne.n	80212c8 <_fstat_r+0x1c>
 80212c2:	682b      	ldr	r3, [r5, #0]
 80212c4:	b103      	cbz	r3, 80212c8 <_fstat_r+0x1c>
 80212c6:	6023      	str	r3, [r4, #0]
 80212c8:	bd38      	pop	{r3, r4, r5, pc}
 80212ca:	bf00      	nop
 80212cc:	2000a7d4 	.word	0x2000a7d4

080212d0 <_isatty_r>:
 80212d0:	b538      	push	{r3, r4, r5, lr}
 80212d2:	4d06      	ldr	r5, [pc, #24]	; (80212ec <_isatty_r+0x1c>)
 80212d4:	2300      	movs	r3, #0
 80212d6:	4604      	mov	r4, r0
 80212d8:	4608      	mov	r0, r1
 80212da:	602b      	str	r3, [r5, #0]
 80212dc:	f7ec fb5f 	bl	800d99e <_isatty>
 80212e0:	1c43      	adds	r3, r0, #1
 80212e2:	d102      	bne.n	80212ea <_isatty_r+0x1a>
 80212e4:	682b      	ldr	r3, [r5, #0]
 80212e6:	b103      	cbz	r3, 80212ea <_isatty_r+0x1a>
 80212e8:	6023      	str	r3, [r4, #0]
 80212ea:	bd38      	pop	{r3, r4, r5, pc}
 80212ec:	2000a7d4 	.word	0x2000a7d4

080212f0 <cosf>:
 80212f0:	ee10 3a10 	vmov	r3, s0
 80212f4:	b507      	push	{r0, r1, r2, lr}
 80212f6:	4a1c      	ldr	r2, [pc, #112]	; (8021368 <cosf+0x78>)
 80212f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212fc:	4293      	cmp	r3, r2
 80212fe:	dc04      	bgt.n	802130a <cosf+0x1a>
 8021300:	eddf 0a1a 	vldr	s1, [pc, #104]	; 802136c <cosf+0x7c>
 8021304:	f000 f9b2 	bl	802166c <__kernel_cosf>
 8021308:	e004      	b.n	8021314 <cosf+0x24>
 802130a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 802130e:	db04      	blt.n	802131a <cosf+0x2a>
 8021310:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021314:	b003      	add	sp, #12
 8021316:	f85d fb04 	ldr.w	pc, [sp], #4
 802131a:	4668      	mov	r0, sp
 802131c:	f000 f86a 	bl	80213f4 <__ieee754_rem_pio2f>
 8021320:	f000 0003 	and.w	r0, r0, #3
 8021324:	2801      	cmp	r0, #1
 8021326:	d007      	beq.n	8021338 <cosf+0x48>
 8021328:	2802      	cmp	r0, #2
 802132a:	d00e      	beq.n	802134a <cosf+0x5a>
 802132c:	b9a0      	cbnz	r0, 8021358 <cosf+0x68>
 802132e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021332:	ed9d 0a00 	vldr	s0, [sp]
 8021336:	e7e5      	b.n	8021304 <cosf+0x14>
 8021338:	eddd 0a01 	vldr	s1, [sp, #4]
 802133c:	ed9d 0a00 	vldr	s0, [sp]
 8021340:	f000 fc7e 	bl	8021c40 <__kernel_sinf>
 8021344:	eeb1 0a40 	vneg.f32	s0, s0
 8021348:	e7e4      	b.n	8021314 <cosf+0x24>
 802134a:	eddd 0a01 	vldr	s1, [sp, #4]
 802134e:	ed9d 0a00 	vldr	s0, [sp]
 8021352:	f000 f98b 	bl	802166c <__kernel_cosf>
 8021356:	e7f5      	b.n	8021344 <cosf+0x54>
 8021358:	eddd 0a01 	vldr	s1, [sp, #4]
 802135c:	ed9d 0a00 	vldr	s0, [sp]
 8021360:	2001      	movs	r0, #1
 8021362:	f000 fc6d 	bl	8021c40 <__kernel_sinf>
 8021366:	e7d5      	b.n	8021314 <cosf+0x24>
 8021368:	3f490fd8 	.word	0x3f490fd8
 802136c:	00000000 	.word	0x00000000

08021370 <sinf>:
 8021370:	ee10 3a10 	vmov	r3, s0
 8021374:	b507      	push	{r0, r1, r2, lr}
 8021376:	4a1d      	ldr	r2, [pc, #116]	; (80213ec <sinf+0x7c>)
 8021378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802137c:	4293      	cmp	r3, r2
 802137e:	dc05      	bgt.n	802138c <sinf+0x1c>
 8021380:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80213f0 <sinf+0x80>
 8021384:	2000      	movs	r0, #0
 8021386:	f000 fc5b 	bl	8021c40 <__kernel_sinf>
 802138a:	e004      	b.n	8021396 <sinf+0x26>
 802138c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021390:	db04      	blt.n	802139c <sinf+0x2c>
 8021392:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021396:	b003      	add	sp, #12
 8021398:	f85d fb04 	ldr.w	pc, [sp], #4
 802139c:	4668      	mov	r0, sp
 802139e:	f000 f829 	bl	80213f4 <__ieee754_rem_pio2f>
 80213a2:	f000 0003 	and.w	r0, r0, #3
 80213a6:	2801      	cmp	r0, #1
 80213a8:	d008      	beq.n	80213bc <sinf+0x4c>
 80213aa:	2802      	cmp	r0, #2
 80213ac:	d00d      	beq.n	80213ca <sinf+0x5a>
 80213ae:	b9b0      	cbnz	r0, 80213de <sinf+0x6e>
 80213b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80213b4:	ed9d 0a00 	vldr	s0, [sp]
 80213b8:	2001      	movs	r0, #1
 80213ba:	e7e4      	b.n	8021386 <sinf+0x16>
 80213bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80213c0:	ed9d 0a00 	vldr	s0, [sp]
 80213c4:	f000 f952 	bl	802166c <__kernel_cosf>
 80213c8:	e7e5      	b.n	8021396 <sinf+0x26>
 80213ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80213ce:	ed9d 0a00 	vldr	s0, [sp]
 80213d2:	2001      	movs	r0, #1
 80213d4:	f000 fc34 	bl	8021c40 <__kernel_sinf>
 80213d8:	eeb1 0a40 	vneg.f32	s0, s0
 80213dc:	e7db      	b.n	8021396 <sinf+0x26>
 80213de:	eddd 0a01 	vldr	s1, [sp, #4]
 80213e2:	ed9d 0a00 	vldr	s0, [sp]
 80213e6:	f000 f941 	bl	802166c <__kernel_cosf>
 80213ea:	e7f5      	b.n	80213d8 <sinf+0x68>
 80213ec:	3f490fd8 	.word	0x3f490fd8
 80213f0:	00000000 	.word	0x00000000

080213f4 <__ieee754_rem_pio2f>:
 80213f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80213f6:	ee10 6a10 	vmov	r6, s0
 80213fa:	4b8e      	ldr	r3, [pc, #568]	; (8021634 <__ieee754_rem_pio2f+0x240>)
 80213fc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8021400:	429d      	cmp	r5, r3
 8021402:	b087      	sub	sp, #28
 8021404:	eef0 7a40 	vmov.f32	s15, s0
 8021408:	4604      	mov	r4, r0
 802140a:	dc05      	bgt.n	8021418 <__ieee754_rem_pio2f+0x24>
 802140c:	2300      	movs	r3, #0
 802140e:	ed80 0a00 	vstr	s0, [r0]
 8021412:	6043      	str	r3, [r0, #4]
 8021414:	2000      	movs	r0, #0
 8021416:	e01a      	b.n	802144e <__ieee754_rem_pio2f+0x5a>
 8021418:	4b87      	ldr	r3, [pc, #540]	; (8021638 <__ieee754_rem_pio2f+0x244>)
 802141a:	429d      	cmp	r5, r3
 802141c:	dc46      	bgt.n	80214ac <__ieee754_rem_pio2f+0xb8>
 802141e:	2e00      	cmp	r6, #0
 8021420:	ed9f 0a86 	vldr	s0, [pc, #536]	; 802163c <__ieee754_rem_pio2f+0x248>
 8021424:	4b86      	ldr	r3, [pc, #536]	; (8021640 <__ieee754_rem_pio2f+0x24c>)
 8021426:	f025 050f 	bic.w	r5, r5, #15
 802142a:	dd1f      	ble.n	802146c <__ieee754_rem_pio2f+0x78>
 802142c:	429d      	cmp	r5, r3
 802142e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8021432:	d00e      	beq.n	8021452 <__ieee754_rem_pio2f+0x5e>
 8021434:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8021644 <__ieee754_rem_pio2f+0x250>
 8021438:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802143c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8021440:	ed80 0a00 	vstr	s0, [r0]
 8021444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021448:	2001      	movs	r0, #1
 802144a:	edc4 7a01 	vstr	s15, [r4, #4]
 802144e:	b007      	add	sp, #28
 8021450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021452:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8021648 <__ieee754_rem_pio2f+0x254>
 8021456:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 802164c <__ieee754_rem_pio2f+0x258>
 802145a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 802145e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8021462:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021466:	edc0 6a00 	vstr	s13, [r0]
 802146a:	e7eb      	b.n	8021444 <__ieee754_rem_pio2f+0x50>
 802146c:	429d      	cmp	r5, r3
 802146e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8021472:	d00e      	beq.n	8021492 <__ieee754_rem_pio2f+0x9e>
 8021474:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8021644 <__ieee754_rem_pio2f+0x250>
 8021478:	ee37 0a87 	vadd.f32	s0, s15, s14
 802147c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8021480:	ed80 0a00 	vstr	s0, [r0]
 8021484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802148c:	edc4 7a01 	vstr	s15, [r4, #4]
 8021490:	e7dd      	b.n	802144e <__ieee754_rem_pio2f+0x5a>
 8021492:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8021648 <__ieee754_rem_pio2f+0x254>
 8021496:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 802164c <__ieee754_rem_pio2f+0x258>
 802149a:	ee77 7a80 	vadd.f32	s15, s15, s0
 802149e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80214a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80214a6:	edc0 6a00 	vstr	s13, [r0]
 80214aa:	e7eb      	b.n	8021484 <__ieee754_rem_pio2f+0x90>
 80214ac:	4b68      	ldr	r3, [pc, #416]	; (8021650 <__ieee754_rem_pio2f+0x25c>)
 80214ae:	429d      	cmp	r5, r3
 80214b0:	dc72      	bgt.n	8021598 <__ieee754_rem_pio2f+0x1a4>
 80214b2:	f000 fc0d 	bl	8021cd0 <fabsf>
 80214b6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8021654 <__ieee754_rem_pio2f+0x260>
 80214ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80214be:	eee0 7a07 	vfma.f32	s15, s0, s14
 80214c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80214c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80214ca:	ee17 0a90 	vmov	r0, s15
 80214ce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 802163c <__ieee754_rem_pio2f+0x248>
 80214d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80214d6:	281f      	cmp	r0, #31
 80214d8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8021644 <__ieee754_rem_pio2f+0x250>
 80214dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80214e0:	eeb1 6a47 	vneg.f32	s12, s14
 80214e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80214e8:	ee16 2a90 	vmov	r2, s13
 80214ec:	dc1c      	bgt.n	8021528 <__ieee754_rem_pio2f+0x134>
 80214ee:	495a      	ldr	r1, [pc, #360]	; (8021658 <__ieee754_rem_pio2f+0x264>)
 80214f0:	1e47      	subs	r7, r0, #1
 80214f2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80214f6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80214fa:	428b      	cmp	r3, r1
 80214fc:	d014      	beq.n	8021528 <__ieee754_rem_pio2f+0x134>
 80214fe:	6022      	str	r2, [r4, #0]
 8021500:	ed94 7a00 	vldr	s14, [r4]
 8021504:	ee30 0a47 	vsub.f32	s0, s0, s14
 8021508:	2e00      	cmp	r6, #0
 802150a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802150e:	ed84 0a01 	vstr	s0, [r4, #4]
 8021512:	da9c      	bge.n	802144e <__ieee754_rem_pio2f+0x5a>
 8021514:	eeb1 7a47 	vneg.f32	s14, s14
 8021518:	eeb1 0a40 	vneg.f32	s0, s0
 802151c:	ed84 7a00 	vstr	s14, [r4]
 8021520:	ed84 0a01 	vstr	s0, [r4, #4]
 8021524:	4240      	negs	r0, r0
 8021526:	e792      	b.n	802144e <__ieee754_rem_pio2f+0x5a>
 8021528:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 802152c:	15eb      	asrs	r3, r5, #23
 802152e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8021532:	2d08      	cmp	r5, #8
 8021534:	dde3      	ble.n	80214fe <__ieee754_rem_pio2f+0x10a>
 8021536:	eddf 7a44 	vldr	s15, [pc, #272]	; 8021648 <__ieee754_rem_pio2f+0x254>
 802153a:	eef0 6a40 	vmov.f32	s13, s0
 802153e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8021542:	ee30 0a66 	vsub.f32	s0, s0, s13
 8021546:	eea6 0a27 	vfma.f32	s0, s12, s15
 802154a:	eddf 7a40 	vldr	s15, [pc, #256]	; 802164c <__ieee754_rem_pio2f+0x258>
 802154e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8021552:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8021556:	eef0 7a40 	vmov.f32	s15, s0
 802155a:	ee15 2a90 	vmov	r2, s11
 802155e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8021562:	1a5b      	subs	r3, r3, r1
 8021564:	2b19      	cmp	r3, #25
 8021566:	dc04      	bgt.n	8021572 <__ieee754_rem_pio2f+0x17e>
 8021568:	edc4 5a00 	vstr	s11, [r4]
 802156c:	eeb0 0a66 	vmov.f32	s0, s13
 8021570:	e7c6      	b.n	8021500 <__ieee754_rem_pio2f+0x10c>
 8021572:	eddf 5a3a 	vldr	s11, [pc, #232]	; 802165c <__ieee754_rem_pio2f+0x268>
 8021576:	eeb0 0a66 	vmov.f32	s0, s13
 802157a:	eea6 0a25 	vfma.f32	s0, s12, s11
 802157e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8021582:	eddf 6a37 	vldr	s13, [pc, #220]	; 8021660 <__ieee754_rem_pio2f+0x26c>
 8021586:	eee6 7a25 	vfma.f32	s15, s12, s11
 802158a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 802158e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021592:	ed84 7a00 	vstr	s14, [r4]
 8021596:	e7b3      	b.n	8021500 <__ieee754_rem_pio2f+0x10c>
 8021598:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802159c:	db06      	blt.n	80215ac <__ieee754_rem_pio2f+0x1b8>
 802159e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80215a2:	edc0 7a01 	vstr	s15, [r0, #4]
 80215a6:	edc0 7a00 	vstr	s15, [r0]
 80215aa:	e733      	b.n	8021414 <__ieee754_rem_pio2f+0x20>
 80215ac:	15ea      	asrs	r2, r5, #23
 80215ae:	3a86      	subs	r2, #134	; 0x86
 80215b0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80215b4:	ee07 3a90 	vmov	s15, r3
 80215b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80215bc:	eddf 6a29 	vldr	s13, [pc, #164]	; 8021664 <__ieee754_rem_pio2f+0x270>
 80215c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80215c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80215c8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80215cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80215d0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80215d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80215d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80215dc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80215e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80215e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80215e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215ec:	edcd 7a05 	vstr	s15, [sp, #20]
 80215f0:	d11e      	bne.n	8021630 <__ieee754_rem_pio2f+0x23c>
 80215f2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80215f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215fa:	bf14      	ite	ne
 80215fc:	2302      	movne	r3, #2
 80215fe:	2301      	moveq	r3, #1
 8021600:	4919      	ldr	r1, [pc, #100]	; (8021668 <__ieee754_rem_pio2f+0x274>)
 8021602:	9101      	str	r1, [sp, #4]
 8021604:	2102      	movs	r1, #2
 8021606:	9100      	str	r1, [sp, #0]
 8021608:	a803      	add	r0, sp, #12
 802160a:	4621      	mov	r1, r4
 802160c:	f000 f88e 	bl	802172c <__kernel_rem_pio2f>
 8021610:	2e00      	cmp	r6, #0
 8021612:	f6bf af1c 	bge.w	802144e <__ieee754_rem_pio2f+0x5a>
 8021616:	edd4 7a00 	vldr	s15, [r4]
 802161a:	eef1 7a67 	vneg.f32	s15, s15
 802161e:	edc4 7a00 	vstr	s15, [r4]
 8021622:	edd4 7a01 	vldr	s15, [r4, #4]
 8021626:	eef1 7a67 	vneg.f32	s15, s15
 802162a:	edc4 7a01 	vstr	s15, [r4, #4]
 802162e:	e779      	b.n	8021524 <__ieee754_rem_pio2f+0x130>
 8021630:	2303      	movs	r3, #3
 8021632:	e7e5      	b.n	8021600 <__ieee754_rem_pio2f+0x20c>
 8021634:	3f490fd8 	.word	0x3f490fd8
 8021638:	4016cbe3 	.word	0x4016cbe3
 802163c:	3fc90f80 	.word	0x3fc90f80
 8021640:	3fc90fd0 	.word	0x3fc90fd0
 8021644:	37354443 	.word	0x37354443
 8021648:	37354400 	.word	0x37354400
 802164c:	2e85a308 	.word	0x2e85a308
 8021650:	43490f80 	.word	0x43490f80
 8021654:	3f22f984 	.word	0x3f22f984
 8021658:	08022dfc 	.word	0x08022dfc
 802165c:	2e85a300 	.word	0x2e85a300
 8021660:	248d3132 	.word	0x248d3132
 8021664:	43800000 	.word	0x43800000
 8021668:	08022e7c 	.word	0x08022e7c

0802166c <__kernel_cosf>:
 802166c:	ee10 3a10 	vmov	r3, s0
 8021670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021674:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021678:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 802167c:	da05      	bge.n	802168a <__kernel_cosf+0x1e>
 802167e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021682:	ee17 2a90 	vmov	r2, s15
 8021686:	2a00      	cmp	r2, #0
 8021688:	d03d      	beq.n	8021706 <__kernel_cosf+0x9a>
 802168a:	ee60 5a00 	vmul.f32	s11, s0, s0
 802168e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 802170c <__kernel_cosf+0xa0>
 8021692:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8021710 <__kernel_cosf+0xa4>
 8021696:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8021714 <__kernel_cosf+0xa8>
 802169a:	4a1f      	ldr	r2, [pc, #124]	; (8021718 <__kernel_cosf+0xac>)
 802169c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80216a0:	4293      	cmp	r3, r2
 80216a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 802171c <__kernel_cosf+0xb0>
 80216a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80216aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8021720 <__kernel_cosf+0xb4>
 80216ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80216b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8021724 <__kernel_cosf+0xb8>
 80216b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80216ba:	eeb0 7a66 	vmov.f32	s14, s13
 80216be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80216c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80216c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80216ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80216ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80216d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80216d6:	dc04      	bgt.n	80216e2 <__kernel_cosf+0x76>
 80216d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80216dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80216e0:	4770      	bx	lr
 80216e2:	4a11      	ldr	r2, [pc, #68]	; (8021728 <__kernel_cosf+0xbc>)
 80216e4:	4293      	cmp	r3, r2
 80216e6:	bfda      	itte	le
 80216e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80216ec:	ee06 3a90 	vmovle	s13, r3
 80216f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80216f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80216f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80216fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021700:	ee30 0a67 	vsub.f32	s0, s0, s15
 8021704:	4770      	bx	lr
 8021706:	eeb0 0a46 	vmov.f32	s0, s12
 802170a:	4770      	bx	lr
 802170c:	ad47d74e 	.word	0xad47d74e
 8021710:	310f74f6 	.word	0x310f74f6
 8021714:	3d2aaaab 	.word	0x3d2aaaab
 8021718:	3e999999 	.word	0x3e999999
 802171c:	b493f27c 	.word	0xb493f27c
 8021720:	37d00d01 	.word	0x37d00d01
 8021724:	bab60b61 	.word	0xbab60b61
 8021728:	3f480000 	.word	0x3f480000

0802172c <__kernel_rem_pio2f>:
 802172c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021730:	ed2d 8b04 	vpush	{d8-d9}
 8021734:	b0d7      	sub	sp, #348	; 0x15c
 8021736:	4616      	mov	r6, r2
 8021738:	4698      	mov	r8, r3
 802173a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 802173c:	4bbb      	ldr	r3, [pc, #748]	; (8021a2c <__kernel_rem_pio2f+0x300>)
 802173e:	9001      	str	r0, [sp, #4]
 8021740:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8021744:	1d33      	adds	r3, r6, #4
 8021746:	460d      	mov	r5, r1
 8021748:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 802174c:	db29      	blt.n	80217a2 <__kernel_rem_pio2f+0x76>
 802174e:	1ef1      	subs	r1, r6, #3
 8021750:	bf48      	it	mi
 8021752:	1d31      	addmi	r1, r6, #4
 8021754:	10c9      	asrs	r1, r1, #3
 8021756:	1c4c      	adds	r4, r1, #1
 8021758:	00e3      	lsls	r3, r4, #3
 802175a:	9302      	str	r3, [sp, #8]
 802175c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 802175e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8021a3c <__kernel_rem_pio2f+0x310>
 8021762:	eba1 0009 	sub.w	r0, r1, r9
 8021766:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 802176a:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 802176e:	eb07 0c09 	add.w	ip, r7, r9
 8021772:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8021776:	2300      	movs	r3, #0
 8021778:	4563      	cmp	r3, ip
 802177a:	dd14      	ble.n	80217a6 <__kernel_rem_pio2f+0x7a>
 802177c:	ab1a      	add	r3, sp, #104	; 0x68
 802177e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8021782:	46cc      	mov	ip, r9
 8021784:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8021788:	f1c8 0b01 	rsb	fp, r8, #1
 802178c:	eb0b 020c 	add.w	r2, fp, ip
 8021790:	4297      	cmp	r7, r2
 8021792:	db27      	blt.n	80217e4 <__kernel_rem_pio2f+0xb8>
 8021794:	f8dd e004 	ldr.w	lr, [sp, #4]
 8021798:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8021a3c <__kernel_rem_pio2f+0x310>
 802179c:	4618      	mov	r0, r3
 802179e:	2200      	movs	r2, #0
 80217a0:	e016      	b.n	80217d0 <__kernel_rem_pio2f+0xa4>
 80217a2:	2100      	movs	r1, #0
 80217a4:	e7d7      	b.n	8021756 <__kernel_rem_pio2f+0x2a>
 80217a6:	42d8      	cmn	r0, r3
 80217a8:	bf5d      	ittte	pl
 80217aa:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80217ae:	ee07 2a90 	vmovpl	s15, r2
 80217b2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80217b6:	eef0 7a47 	vmovmi.f32	s15, s14
 80217ba:	ecea 7a01 	vstmia	sl!, {s15}
 80217be:	3301      	adds	r3, #1
 80217c0:	e7da      	b.n	8021778 <__kernel_rem_pio2f+0x4c>
 80217c2:	ecfe 6a01 	vldmia	lr!, {s13}
 80217c6:	ed90 7a00 	vldr	s14, [r0]
 80217ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 80217ce:	3201      	adds	r2, #1
 80217d0:	454a      	cmp	r2, r9
 80217d2:	f1a0 0004 	sub.w	r0, r0, #4
 80217d6:	ddf4      	ble.n	80217c2 <__kernel_rem_pio2f+0x96>
 80217d8:	ecea 7a01 	vstmia	sl!, {s15}
 80217dc:	3304      	adds	r3, #4
 80217de:	f10c 0c01 	add.w	ip, ip, #1
 80217e2:	e7d3      	b.n	802178c <__kernel_rem_pio2f+0x60>
 80217e4:	ab06      	add	r3, sp, #24
 80217e6:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80217ea:	9304      	str	r3, [sp, #16]
 80217ec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80217ee:	eddf 8a92 	vldr	s17, [pc, #584]	; 8021a38 <__kernel_rem_pio2f+0x30c>
 80217f2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8021a34 <__kernel_rem_pio2f+0x308>
 80217f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80217fa:	9303      	str	r3, [sp, #12]
 80217fc:	46ba      	mov	sl, r7
 80217fe:	ab56      	add	r3, sp, #344	; 0x158
 8021800:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8021804:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8021808:	ab06      	add	r3, sp, #24
 802180a:	4618      	mov	r0, r3
 802180c:	4652      	mov	r2, sl
 802180e:	2a00      	cmp	r2, #0
 8021810:	dc51      	bgt.n	80218b6 <__kernel_rem_pio2f+0x18a>
 8021812:	4620      	mov	r0, r4
 8021814:	9305      	str	r3, [sp, #20]
 8021816:	f7fc f819 	bl	801d84c <scalbnf>
 802181a:	eeb0 8a40 	vmov.f32	s16, s0
 802181e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8021822:	ee28 0a00 	vmul.f32	s0, s16, s0
 8021826:	f000 fa5b 	bl	8021ce0 <floorf>
 802182a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 802182e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8021832:	2c00      	cmp	r4, #0
 8021834:	9b05      	ldr	r3, [sp, #20]
 8021836:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 802183a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 802183e:	edcd 7a00 	vstr	s15, [sp]
 8021842:	ee38 8a40 	vsub.f32	s16, s16, s0
 8021846:	dd4b      	ble.n	80218e0 <__kernel_rem_pio2f+0x1b4>
 8021848:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 802184c:	aa06      	add	r2, sp, #24
 802184e:	f1c4 0e08 	rsb	lr, r4, #8
 8021852:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8021856:	ee17 1a90 	vmov	r1, s15
 802185a:	fa42 f00e 	asr.w	r0, r2, lr
 802185e:	4401      	add	r1, r0
 8021860:	9100      	str	r1, [sp, #0]
 8021862:	fa00 f00e 	lsl.w	r0, r0, lr
 8021866:	a906      	add	r1, sp, #24
 8021868:	1a12      	subs	r2, r2, r0
 802186a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 802186e:	f1c4 0007 	rsb	r0, r4, #7
 8021872:	fa42 fb00 	asr.w	fp, r2, r0
 8021876:	f1bb 0f00 	cmp.w	fp, #0
 802187a:	dd43      	ble.n	8021904 <__kernel_rem_pio2f+0x1d8>
 802187c:	9a00      	ldr	r2, [sp, #0]
 802187e:	f04f 0e00 	mov.w	lr, #0
 8021882:	3201      	adds	r2, #1
 8021884:	9200      	str	r2, [sp, #0]
 8021886:	4670      	mov	r0, lr
 8021888:	45f2      	cmp	sl, lr
 802188a:	dc6c      	bgt.n	8021966 <__kernel_rem_pio2f+0x23a>
 802188c:	2c00      	cmp	r4, #0
 802188e:	dd04      	ble.n	802189a <__kernel_rem_pio2f+0x16e>
 8021890:	2c01      	cmp	r4, #1
 8021892:	d079      	beq.n	8021988 <__kernel_rem_pio2f+0x25c>
 8021894:	2c02      	cmp	r4, #2
 8021896:	f000 8082 	beq.w	802199e <__kernel_rem_pio2f+0x272>
 802189a:	f1bb 0f02 	cmp.w	fp, #2
 802189e:	d131      	bne.n	8021904 <__kernel_rem_pio2f+0x1d8>
 80218a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80218a4:	ee30 8a48 	vsub.f32	s16, s0, s16
 80218a8:	b360      	cbz	r0, 8021904 <__kernel_rem_pio2f+0x1d8>
 80218aa:	4620      	mov	r0, r4
 80218ac:	f7fb ffce 	bl	801d84c <scalbnf>
 80218b0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80218b4:	e026      	b.n	8021904 <__kernel_rem_pio2f+0x1d8>
 80218b6:	ee60 7a28 	vmul.f32	s15, s0, s17
 80218ba:	3a01      	subs	r2, #1
 80218bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80218c0:	a942      	add	r1, sp, #264	; 0x108
 80218c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80218c6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80218ca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80218ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80218d2:	eca0 0a01 	vstmia	r0!, {s0}
 80218d6:	ed9c 0a00 	vldr	s0, [ip]
 80218da:	ee37 0a80 	vadd.f32	s0, s15, s0
 80218de:	e796      	b.n	802180e <__kernel_rem_pio2f+0xe2>
 80218e0:	d107      	bne.n	80218f2 <__kernel_rem_pio2f+0x1c6>
 80218e2:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80218e6:	a906      	add	r1, sp, #24
 80218e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80218ec:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80218f0:	e7c1      	b.n	8021876 <__kernel_rem_pio2f+0x14a>
 80218f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80218f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80218fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218fe:	da2f      	bge.n	8021960 <__kernel_rem_pio2f+0x234>
 8021900:	f04f 0b00 	mov.w	fp, #0
 8021904:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802190c:	f040 8098 	bne.w	8021a40 <__kernel_rem_pio2f+0x314>
 8021910:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8021914:	469c      	mov	ip, r3
 8021916:	2200      	movs	r2, #0
 8021918:	45bc      	cmp	ip, r7
 802191a:	da48      	bge.n	80219ae <__kernel_rem_pio2f+0x282>
 802191c:	2a00      	cmp	r2, #0
 802191e:	d05f      	beq.n	80219e0 <__kernel_rem_pio2f+0x2b4>
 8021920:	aa06      	add	r2, sp, #24
 8021922:	3c08      	subs	r4, #8
 8021924:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021928:	2900      	cmp	r1, #0
 802192a:	d07d      	beq.n	8021a28 <__kernel_rem_pio2f+0x2fc>
 802192c:	4620      	mov	r0, r4
 802192e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8021932:	9301      	str	r3, [sp, #4]
 8021934:	f7fb ff8a 	bl	801d84c <scalbnf>
 8021938:	9b01      	ldr	r3, [sp, #4]
 802193a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8021a38 <__kernel_rem_pio2f+0x30c>
 802193e:	4619      	mov	r1, r3
 8021940:	2900      	cmp	r1, #0
 8021942:	f280 80af 	bge.w	8021aa4 <__kernel_rem_pio2f+0x378>
 8021946:	4618      	mov	r0, r3
 8021948:	2400      	movs	r4, #0
 802194a:	2800      	cmp	r0, #0
 802194c:	f2c0 80d0 	blt.w	8021af0 <__kernel_rem_pio2f+0x3c4>
 8021950:	a942      	add	r1, sp, #264	; 0x108
 8021952:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8021956:	4a36      	ldr	r2, [pc, #216]	; (8021a30 <__kernel_rem_pio2f+0x304>)
 8021958:	eddf 7a38 	vldr	s15, [pc, #224]	; 8021a3c <__kernel_rem_pio2f+0x310>
 802195c:	2100      	movs	r1, #0
 802195e:	e0bb      	b.n	8021ad8 <__kernel_rem_pio2f+0x3ac>
 8021960:	f04f 0b02 	mov.w	fp, #2
 8021964:	e78a      	b.n	802187c <__kernel_rem_pio2f+0x150>
 8021966:	681a      	ldr	r2, [r3, #0]
 8021968:	b948      	cbnz	r0, 802197e <__kernel_rem_pio2f+0x252>
 802196a:	b11a      	cbz	r2, 8021974 <__kernel_rem_pio2f+0x248>
 802196c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021970:	601a      	str	r2, [r3, #0]
 8021972:	2201      	movs	r2, #1
 8021974:	f10e 0e01 	add.w	lr, lr, #1
 8021978:	3304      	adds	r3, #4
 802197a:	4610      	mov	r0, r2
 802197c:	e784      	b.n	8021888 <__kernel_rem_pio2f+0x15c>
 802197e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8021982:	601a      	str	r2, [r3, #0]
 8021984:	4602      	mov	r2, r0
 8021986:	e7f5      	b.n	8021974 <__kernel_rem_pio2f+0x248>
 8021988:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 802198c:	ab06      	add	r3, sp, #24
 802198e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021996:	aa06      	add	r2, sp, #24
 8021998:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 802199c:	e77d      	b.n	802189a <__kernel_rem_pio2f+0x16e>
 802199e:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 80219a2:	ab06      	add	r3, sp, #24
 80219a4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80219a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80219ac:	e7f3      	b.n	8021996 <__kernel_rem_pio2f+0x26a>
 80219ae:	a906      	add	r1, sp, #24
 80219b0:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 80219b4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80219b8:	4302      	orrs	r2, r0
 80219ba:	e7ad      	b.n	8021918 <__kernel_rem_pio2f+0x1ec>
 80219bc:	3001      	adds	r0, #1
 80219be:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80219c2:	2a00      	cmp	r2, #0
 80219c4:	d0fa      	beq.n	80219bc <__kernel_rem_pio2f+0x290>
 80219c6:	a91a      	add	r1, sp, #104	; 0x68
 80219c8:	eb0a 0208 	add.w	r2, sl, r8
 80219cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80219d0:	f10a 0301 	add.w	r3, sl, #1
 80219d4:	eb0a 0100 	add.w	r1, sl, r0
 80219d8:	4299      	cmp	r1, r3
 80219da:	da04      	bge.n	80219e6 <__kernel_rem_pio2f+0x2ba>
 80219dc:	468a      	mov	sl, r1
 80219de:	e70e      	b.n	80217fe <__kernel_rem_pio2f+0xd2>
 80219e0:	9b04      	ldr	r3, [sp, #16]
 80219e2:	2001      	movs	r0, #1
 80219e4:	e7eb      	b.n	80219be <__kernel_rem_pio2f+0x292>
 80219e6:	9803      	ldr	r0, [sp, #12]
 80219e8:	f8dd c004 	ldr.w	ip, [sp, #4]
 80219ec:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80219f0:	9000      	str	r0, [sp, #0]
 80219f2:	ee07 0a90 	vmov	s15, r0
 80219f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80219fa:	2000      	movs	r0, #0
 80219fc:	ece2 7a01 	vstmia	r2!, {s15}
 8021a00:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8021a3c <__kernel_rem_pio2f+0x310>
 8021a04:	4696      	mov	lr, r2
 8021a06:	4548      	cmp	r0, r9
 8021a08:	dd06      	ble.n	8021a18 <__kernel_rem_pio2f+0x2ec>
 8021a0a:	a842      	add	r0, sp, #264	; 0x108
 8021a0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021a10:	edc0 7a00 	vstr	s15, [r0]
 8021a14:	3301      	adds	r3, #1
 8021a16:	e7df      	b.n	80219d8 <__kernel_rem_pio2f+0x2ac>
 8021a18:	ecfc 6a01 	vldmia	ip!, {s13}
 8021a1c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8021a20:	3001      	adds	r0, #1
 8021a22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021a26:	e7ee      	b.n	8021a06 <__kernel_rem_pio2f+0x2da>
 8021a28:	3b01      	subs	r3, #1
 8021a2a:	e779      	b.n	8021920 <__kernel_rem_pio2f+0x1f4>
 8021a2c:	080231c0 	.word	0x080231c0
 8021a30:	08023194 	.word	0x08023194
 8021a34:	43800000 	.word	0x43800000
 8021a38:	3b800000 	.word	0x3b800000
 8021a3c:	00000000 	.word	0x00000000
 8021a40:	9b02      	ldr	r3, [sp, #8]
 8021a42:	eeb0 0a48 	vmov.f32	s0, s16
 8021a46:	1b98      	subs	r0, r3, r6
 8021a48:	f7fb ff00 	bl	801d84c <scalbnf>
 8021a4c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8021a34 <__kernel_rem_pio2f+0x308>
 8021a50:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8021a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a58:	db1b      	blt.n	8021a92 <__kernel_rem_pio2f+0x366>
 8021a5a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8021a38 <__kernel_rem_pio2f+0x30c>
 8021a5e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8021a62:	aa06      	add	r2, sp, #24
 8021a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a68:	a906      	add	r1, sp, #24
 8021a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021a6e:	3408      	adds	r4, #8
 8021a70:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8021a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021a7c:	ee10 3a10 	vmov	r3, s0
 8021a80:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8021a84:	ee17 2a90 	vmov	r2, s15
 8021a88:	f10a 0301 	add.w	r3, sl, #1
 8021a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8021a90:	e74c      	b.n	802192c <__kernel_rem_pio2f+0x200>
 8021a92:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8021a96:	aa06      	add	r2, sp, #24
 8021a98:	ee10 3a10 	vmov	r3, s0
 8021a9c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8021aa0:	4653      	mov	r3, sl
 8021aa2:	e743      	b.n	802192c <__kernel_rem_pio2f+0x200>
 8021aa4:	aa42      	add	r2, sp, #264	; 0x108
 8021aa6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8021aaa:	aa06      	add	r2, sp, #24
 8021aac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8021ab0:	9201      	str	r2, [sp, #4]
 8021ab2:	ee07 2a90 	vmov	s15, r2
 8021ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021aba:	3901      	subs	r1, #1
 8021abc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021ac0:	ee20 0a07 	vmul.f32	s0, s0, s14
 8021ac4:	edc0 7a00 	vstr	s15, [r0]
 8021ac8:	e73a      	b.n	8021940 <__kernel_rem_pio2f+0x214>
 8021aca:	ecf2 6a01 	vldmia	r2!, {s13}
 8021ace:	ecb6 7a01 	vldmia	r6!, {s14}
 8021ad2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021ad6:	3101      	adds	r1, #1
 8021ad8:	42b9      	cmp	r1, r7
 8021ada:	dc01      	bgt.n	8021ae0 <__kernel_rem_pio2f+0x3b4>
 8021adc:	428c      	cmp	r4, r1
 8021ade:	daf4      	bge.n	8021aca <__kernel_rem_pio2f+0x39e>
 8021ae0:	aa56      	add	r2, sp, #344	; 0x158
 8021ae2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8021ae6:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8021aea:	3801      	subs	r0, #1
 8021aec:	3401      	adds	r4, #1
 8021aee:	e72c      	b.n	802194a <__kernel_rem_pio2f+0x21e>
 8021af0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8021af2:	2a02      	cmp	r2, #2
 8021af4:	dc0a      	bgt.n	8021b0c <__kernel_rem_pio2f+0x3e0>
 8021af6:	2a00      	cmp	r2, #0
 8021af8:	dc61      	bgt.n	8021bbe <__kernel_rem_pio2f+0x492>
 8021afa:	d03c      	beq.n	8021b76 <__kernel_rem_pio2f+0x44a>
 8021afc:	9b00      	ldr	r3, [sp, #0]
 8021afe:	f003 0007 	and.w	r0, r3, #7
 8021b02:	b057      	add	sp, #348	; 0x15c
 8021b04:	ecbd 8b04 	vpop	{d8-d9}
 8021b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b0c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8021b0e:	2a03      	cmp	r2, #3
 8021b10:	d1f4      	bne.n	8021afc <__kernel_rem_pio2f+0x3d0>
 8021b12:	aa2e      	add	r2, sp, #184	; 0xb8
 8021b14:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8021b18:	4608      	mov	r0, r1
 8021b1a:	461c      	mov	r4, r3
 8021b1c:	2c00      	cmp	r4, #0
 8021b1e:	f1a0 0004 	sub.w	r0, r0, #4
 8021b22:	dc59      	bgt.n	8021bd8 <__kernel_rem_pio2f+0x4ac>
 8021b24:	4618      	mov	r0, r3
 8021b26:	2801      	cmp	r0, #1
 8021b28:	f1a1 0104 	sub.w	r1, r1, #4
 8021b2c:	dc64      	bgt.n	8021bf8 <__kernel_rem_pio2f+0x4cc>
 8021b2e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8021a3c <__kernel_rem_pio2f+0x310>
 8021b32:	2b01      	cmp	r3, #1
 8021b34:	dc70      	bgt.n	8021c18 <__kernel_rem_pio2f+0x4ec>
 8021b36:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8021b3a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8021b3e:	f1bb 0f00 	cmp.w	fp, #0
 8021b42:	d172      	bne.n	8021c2a <__kernel_rem_pio2f+0x4fe>
 8021b44:	edc5 6a00 	vstr	s13, [r5]
 8021b48:	ed85 7a01 	vstr	s14, [r5, #4]
 8021b4c:	edc5 7a02 	vstr	s15, [r5, #8]
 8021b50:	e7d4      	b.n	8021afc <__kernel_rem_pio2f+0x3d0>
 8021b52:	aa2e      	add	r2, sp, #184	; 0xb8
 8021b54:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8021b58:	ed91 7a00 	vldr	s14, [r1]
 8021b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021b60:	3b01      	subs	r3, #1
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	daf5      	bge.n	8021b52 <__kernel_rem_pio2f+0x426>
 8021b66:	f1bb 0f00 	cmp.w	fp, #0
 8021b6a:	d001      	beq.n	8021b70 <__kernel_rem_pio2f+0x444>
 8021b6c:	eef1 7a67 	vneg.f32	s15, s15
 8021b70:	edc5 7a00 	vstr	s15, [r5]
 8021b74:	e7c2      	b.n	8021afc <__kernel_rem_pio2f+0x3d0>
 8021b76:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8021a3c <__kernel_rem_pio2f+0x310>
 8021b7a:	e7f2      	b.n	8021b62 <__kernel_rem_pio2f+0x436>
 8021b7c:	aa2e      	add	r2, sp, #184	; 0xb8
 8021b7e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8021b82:	edd0 7a00 	vldr	s15, [r0]
 8021b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021b8a:	3901      	subs	r1, #1
 8021b8c:	2900      	cmp	r1, #0
 8021b8e:	daf5      	bge.n	8021b7c <__kernel_rem_pio2f+0x450>
 8021b90:	f1bb 0f00 	cmp.w	fp, #0
 8021b94:	d017      	beq.n	8021bc6 <__kernel_rem_pio2f+0x49a>
 8021b96:	eef1 7a47 	vneg.f32	s15, s14
 8021b9a:	edc5 7a00 	vstr	s15, [r5]
 8021b9e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8021ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021ba6:	a82f      	add	r0, sp, #188	; 0xbc
 8021ba8:	2101      	movs	r1, #1
 8021baa:	428b      	cmp	r3, r1
 8021bac:	da0e      	bge.n	8021bcc <__kernel_rem_pio2f+0x4a0>
 8021bae:	f1bb 0f00 	cmp.w	fp, #0
 8021bb2:	d001      	beq.n	8021bb8 <__kernel_rem_pio2f+0x48c>
 8021bb4:	eef1 7a67 	vneg.f32	s15, s15
 8021bb8:	edc5 7a01 	vstr	s15, [r5, #4]
 8021bbc:	e79e      	b.n	8021afc <__kernel_rem_pio2f+0x3d0>
 8021bbe:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8021a3c <__kernel_rem_pio2f+0x310>
 8021bc2:	4619      	mov	r1, r3
 8021bc4:	e7e2      	b.n	8021b8c <__kernel_rem_pio2f+0x460>
 8021bc6:	eef0 7a47 	vmov.f32	s15, s14
 8021bca:	e7e6      	b.n	8021b9a <__kernel_rem_pio2f+0x46e>
 8021bcc:	ecb0 7a01 	vldmia	r0!, {s14}
 8021bd0:	3101      	adds	r1, #1
 8021bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021bd6:	e7e8      	b.n	8021baa <__kernel_rem_pio2f+0x47e>
 8021bd8:	edd0 7a00 	vldr	s15, [r0]
 8021bdc:	edd0 6a01 	vldr	s13, [r0, #4]
 8021be0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021be4:	3c01      	subs	r4, #1
 8021be6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021bea:	ed80 7a00 	vstr	s14, [r0]
 8021bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021bf2:	edc0 7a01 	vstr	s15, [r0, #4]
 8021bf6:	e791      	b.n	8021b1c <__kernel_rem_pio2f+0x3f0>
 8021bf8:	edd1 7a00 	vldr	s15, [r1]
 8021bfc:	edd1 6a01 	vldr	s13, [r1, #4]
 8021c00:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8021c04:	3801      	subs	r0, #1
 8021c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021c0a:	ed81 7a00 	vstr	s14, [r1]
 8021c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8021c12:	edc1 7a01 	vstr	s15, [r1, #4]
 8021c16:	e786      	b.n	8021b26 <__kernel_rem_pio2f+0x3fa>
 8021c18:	aa2e      	add	r2, sp, #184	; 0xb8
 8021c1a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8021c1e:	ed91 7a00 	vldr	s14, [r1]
 8021c22:	3b01      	subs	r3, #1
 8021c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021c28:	e783      	b.n	8021b32 <__kernel_rem_pio2f+0x406>
 8021c2a:	eef1 6a66 	vneg.f32	s13, s13
 8021c2e:	eeb1 7a47 	vneg.f32	s14, s14
 8021c32:	edc5 6a00 	vstr	s13, [r5]
 8021c36:	ed85 7a01 	vstr	s14, [r5, #4]
 8021c3a:	eef1 7a67 	vneg.f32	s15, s15
 8021c3e:	e785      	b.n	8021b4c <__kernel_rem_pio2f+0x420>

08021c40 <__kernel_sinf>:
 8021c40:	ee10 3a10 	vmov	r3, s0
 8021c44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021c48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8021c4c:	da04      	bge.n	8021c58 <__kernel_sinf+0x18>
 8021c4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8021c52:	ee17 3a90 	vmov	r3, s15
 8021c56:	b35b      	cbz	r3, 8021cb0 <__kernel_sinf+0x70>
 8021c58:	ee20 7a00 	vmul.f32	s14, s0, s0
 8021c5c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021cb4 <__kernel_sinf+0x74>
 8021c60:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8021cb8 <__kernel_sinf+0x78>
 8021c64:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021c68:	eddf 7a14 	vldr	s15, [pc, #80]	; 8021cbc <__kernel_sinf+0x7c>
 8021c6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021c70:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8021cc0 <__kernel_sinf+0x80>
 8021c74:	eea7 6a87 	vfma.f32	s12, s15, s14
 8021c78:	eddf 7a12 	vldr	s15, [pc, #72]	; 8021cc4 <__kernel_sinf+0x84>
 8021c7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8021c80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8021c84:	b930      	cbnz	r0, 8021c94 <__kernel_sinf+0x54>
 8021c86:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8021cc8 <__kernel_sinf+0x88>
 8021c8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8021c8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8021c92:	4770      	bx	lr
 8021c94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8021c98:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8021c9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8021ca0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8021ca4:	eddf 7a09 	vldr	s15, [pc, #36]	; 8021ccc <__kernel_sinf+0x8c>
 8021ca8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8021cac:	ee30 0a60 	vsub.f32	s0, s0, s1
 8021cb0:	4770      	bx	lr
 8021cb2:	bf00      	nop
 8021cb4:	2f2ec9d3 	.word	0x2f2ec9d3
 8021cb8:	b2d72f34 	.word	0xb2d72f34
 8021cbc:	3638ef1b 	.word	0x3638ef1b
 8021cc0:	b9500d01 	.word	0xb9500d01
 8021cc4:	3c088889 	.word	0x3c088889
 8021cc8:	be2aaaab 	.word	0xbe2aaaab
 8021ccc:	3e2aaaab 	.word	0x3e2aaaab

08021cd0 <fabsf>:
 8021cd0:	ee10 3a10 	vmov	r3, s0
 8021cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021cd8:	ee00 3a10 	vmov	s0, r3
 8021cdc:	4770      	bx	lr
	...

08021ce0 <floorf>:
 8021ce0:	ee10 3a10 	vmov	r3, s0
 8021ce4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8021ce8:	3a7f      	subs	r2, #127	; 0x7f
 8021cea:	2a16      	cmp	r2, #22
 8021cec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8021cf0:	dc2a      	bgt.n	8021d48 <floorf+0x68>
 8021cf2:	2a00      	cmp	r2, #0
 8021cf4:	da11      	bge.n	8021d1a <floorf+0x3a>
 8021cf6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8021d58 <floorf+0x78>
 8021cfa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021cfe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d06:	dd05      	ble.n	8021d14 <floorf+0x34>
 8021d08:	2b00      	cmp	r3, #0
 8021d0a:	da23      	bge.n	8021d54 <floorf+0x74>
 8021d0c:	4a13      	ldr	r2, [pc, #76]	; (8021d5c <floorf+0x7c>)
 8021d0e:	2900      	cmp	r1, #0
 8021d10:	bf18      	it	ne
 8021d12:	4613      	movne	r3, r2
 8021d14:	ee00 3a10 	vmov	s0, r3
 8021d18:	4770      	bx	lr
 8021d1a:	4911      	ldr	r1, [pc, #68]	; (8021d60 <floorf+0x80>)
 8021d1c:	4111      	asrs	r1, r2
 8021d1e:	420b      	tst	r3, r1
 8021d20:	d0fa      	beq.n	8021d18 <floorf+0x38>
 8021d22:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8021d58 <floorf+0x78>
 8021d26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021d2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d32:	ddef      	ble.n	8021d14 <floorf+0x34>
 8021d34:	2b00      	cmp	r3, #0
 8021d36:	bfbe      	ittt	lt
 8021d38:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8021d3c:	fa40 f202 	asrlt.w	r2, r0, r2
 8021d40:	189b      	addlt	r3, r3, r2
 8021d42:	ea23 0301 	bic.w	r3, r3, r1
 8021d46:	e7e5      	b.n	8021d14 <floorf+0x34>
 8021d48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021d4c:	d3e4      	bcc.n	8021d18 <floorf+0x38>
 8021d4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021d52:	4770      	bx	lr
 8021d54:	2300      	movs	r3, #0
 8021d56:	e7dd      	b.n	8021d14 <floorf+0x34>
 8021d58:	7149f2ca 	.word	0x7149f2ca
 8021d5c:	bf800000 	.word	0xbf800000
 8021d60:	007fffff 	.word	0x007fffff

08021d64 <_init>:
 8021d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d66:	bf00      	nop
 8021d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d6a:	bc08      	pop	{r3}
 8021d6c:	469e      	mov	lr, r3
 8021d6e:	4770      	bx	lr

08021d70 <_fini>:
 8021d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d72:	bf00      	nop
 8021d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d76:	bc08      	pop	{r3}
 8021d78:	469e      	mov	lr, r3
 8021d7a:	4770      	bx	lr
